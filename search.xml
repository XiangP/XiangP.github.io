<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[MATLAB Help Documentation]]></title>
      <url>http://yoursite.com/2016/09/13/matlab-helpdoc/</url>
      <content type="html"><![CDATA[<p>The most usefull method to lean matlab. 来自<a href="http://cn.mathworks.com/help/pdf_doc/matlab/index.html" target="_blank" rel="external">matlab官方网站</a>. All about MATLAB help docmentation.</p>
<a id="more"></a>
<h1 id="PDF-Documentation-for-MATLAB"><a href="#PDF-Documentation-for-MATLAB" class="headerlink" title="PDF Documentation for MATLAB"></a>PDF Documentation for MATLAB</h1><ul>
<li><p><a href="chapter/getstartmatlab.pdf">MATLAB Primer</a></p>
</li>
<li><p><a href="chapter/matlab_env.pdf">MATLAB Desktop Tools and Development Environment</a></p>
</li>
<li><p><a href="chapter/import_export.pdf">MATLAB Data Import and Export</a></p>
</li>
<li><p><a href="chapter/math.pdf">MATLAB Mathematics</a></p>
</li>
<li><p><a href="chapter/data_analysis.pdf">MATLAB Data Analysis</a></p>
</li>
<li><p><a href="chapter/matlab_prog.pdf">MATLAB Programming Fundamentals</a></p>
</li>
<li><p><a href="chapter/matlab_oop.pdf">MATLAB Object-Oriented Programming</a></p>
</li>
<li><p><a href="chapter/graphg.pdf">MATLAB Graphics</a></p>
</li>
<li><p><a href="chapter/visualize.pdf">MATLAB 3-D Visualization</a></p>
</li>
<li><p><a href="chapter/buildgui.pdf">MATLAB Creating Graphical User Interfaces</a></p>
</li>
<li><p><a href="chapter/apiext.pdf">MATLAB External Interfaces</a></p>
</li>
<li><p><a href="chapter/apiref.pdf">MATLAB C/C++ and Fortran API Reference</a></p>
</li>
<li><p><a href="chapter/matfile_format.pdf">MATLAB MAT-File Format</a></p>
</li>
<li><p><a href="chapter/matlab_refbook.pdf">MATLAB Function Reference</a></p>
</li>
<li><p><a href="chapter/graphics_changes.pdf">MATLAB Graphics Changes in R2014b</a></p>
</li>
<li><p><a href="chapter/rn.pdf">MATLAB Release Notes</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[R package]]></title>
      <url>http://yoursite.com/2016/09/05/regularexp/</url>
      <content type="html"><![CDATA[<ul>
<li>R package installed.</li>
<li>just a backup</li>
</ul>
<a id="more"></a>
<p>abind, AER, assertthat, BH, biganalytics, biglm, bigmemory, bigmemory.sri.<br>bit, bitops, boot, car, caret, caTools, checkpoint, chron, class, cluster, codetools, colorspace, compiler,crayon, curl, data.table, datasets, DBI, deSolve, devtools, dichromat, digest, DistributionUtils, DMwR, doParallel, dplyr, dynlm, evaluate, expm, fBasics, ff, fOptions, foreach, forecast, foreign, formatR, Formula, fracdiff, gdata, GeneralizedHyper, ggplot2, git2r, gplots, graphics, grDevices, grid, gridBase, gridExtra, gss, gtable, gtools, highr, HSAUR3, htmltools, httr, igraph, IRdisplay, IRkernel, irlba, iterators, jpeg, jsonlite, KernSmooth, knitr, ks, labeling, lattice, lazyeval, lme4, lmtest, magrittr, markdown, MASS, Matrix, MatrixModels, matrixStats, memoise, methods, mgcv, mime, minqa, misc3d, mnormt, multicool, munsell, mvtnorm, nlme, nloptr, NMF, nnet, numDeriv, nutshell, openssl, parallel, pbdZMQ, pbkrtest, pkgmaker, plyr, praise, pryr, pscl, quadprog, Quandl, quantmod, quantreg, R6, RColorBrewer, Rcpp, RcppArmadillo, RcppEigen, RCurl, registry, repr, reshape2, RevoUtilsMath, rgl, rmarkdown, rngtools, ROCR, rpart, Rsolnp, rstudioapi, rugarch, Runit, sandwich, scales, SkewHyperbolic, SparseM, spatial, spd, splines, spuRs, stabledist, stats, stats4, stringi, stringr, strucchange, survival, tcltk, testthat, tidyr, timeDate, timeSeries, tools, translations, truncnorm, tsDyn, tseries, tseriesChaos, TTR, urca, utils, uuid, vars, whisker, withr, XML, xtable, xts, yaml, zoo</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[R data analysis]]></title>
      <url>http://yoursite.com/2016/08/07/R-data-analysis/</url>
      <content type="html"><![CDATA[<p>R Data Analysis Cookbook by Viswa Viswanathan &amp; Shanthi Viswanathan. From internet. <a id="more"></a></p>
<hr>
<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>Since the release of version 1.0 in 2000, R’s popularity as an environment for statistical computing, data analytics, and graphing has grown exponentially. People who have been using spreadsheets and need to perform things that spreadsheet packages cannot readily do, or need to handle larger data volumes than what a spreadsheet program can comfortably handle, are looking to R. Analogously, people using powerful commercial analytics packages are also intrigued by this free and powerful option. As a result, a large number of people are now looking to quickly get things done in R.</p>
<p>Being an extensible system, R’s functionality is divided across numerous packages with each one exposing large numbers of functions. Even experienced users cannot expect to remember all the details off the top of their head. This cookbook, aimed at users who are already exposed to the fundamentals of R, provides ready recipes to perform many important data analytics tasks. Instead of having to search the Web or delve into numerous books when faced with a specific task, people can find the appropriate recipe and get going in a matter of minutes.</p>
<h2 id="What-this-book-covers"><a href="#What-this-book-covers" class="headerlink" title="What this book covers"></a>What this book covers</h2><ul>
<li><p>Chapter 1, Acquire and Prepare the Ingredients – Your Data, covers the activities that precede the actual data analysis task. It provides recipes to read data from different input file formats. Furthermore, prior to actually analyzing the data, we perform several preparatory and data cleansing steps and the chapter also provides recipes for these: handling missing values and duplicates, scaling or standardizing values, converting between numerical and categorical variables, and creating dummy variables.</p>
</li>
<li><p>Chapter 2, What’s in There? – Exploratory Data Analysis, talks about several activities that analysts typically use to understand their data before zeroing in on specific techniques to apply. The chapter presents recipes to summarize data, split data, extract subsets, and create random data partitions, as well as several recipes to plot data to reveal underlying patters using standard plots as well as the lattice and ggplot2 packages.</p>
</li>
<li><p>Chapter 3, Where Does It Belong? – Classification, covers recipes for applying classification techniques. It includes classification trees, random forests, support vector machines, Naïve Bayes, K-nearest neighbors, neural networks, linear and quadratic discriminant analysis, and logistic regression.</p>
</li>
<li><p>Chapter 4, Give Me a Number – Regression, is about recipes for regression techniques. It includes K-nearest neighbors, linear regression, regression trees, random forests, and neural networks.</p>
</li>
<li><p>Chapter 5, Can You Simplify That? – Data Reduction Techniques, covers recipes for data reduction. It presents cluster analysis through K-means and hierarchical clustering. It also covers principal component analysis.</p>
</li>
<li><p>Chapter 6, Lessons from History – Time Series Analysis, covers recipes to work with date and date/time objects, create and plot time-series objects, decompose, filter and smooth time series, and perform ARIMA analysis.</p>
</li>
<li><p>Chapter 7, It’s All About Your Connections – Social Network Analysis, is about social networks. It includes recipes to acquire social network data using public APIs, create and plot social networks, and compute important network metrics.</p>
</li>
<li><p>Chapter 8, Put Your Best Foot Forward – Document and Present Your Analysis, considers techniques to disseminate your analysis. It includes recipes to use R markdown and KnitR to generate reports, to use shiny to create interactive applications that enable your audience to directly interact with the data, and to create presentations with RPres.</p>
</li>
<li><p>Chapter 9, Work Smarter, Not Harder – Efficient and Elegant R Code, addresses the issue of writing efficient and elegant R code in the context of handling large data. It covers recipes to use the apply family of functions, to use the plyr package, and to use data tables to slice and dice data.</p>
</li>
<li><p>Chapter 10, Where in the World? – Geospatial Analysis, covers the topic of exploiting R’s powerful features to handle spatial data. It covers recipes to use RGoogleMaps to get GoogleMaps and to superimpose our own data on them, to import ESRI shape files into R and plot them, to import maps from the maps package, and to use the sp package to create and plot spatial data frame objects.</p>
</li>
<li><p>Chapter 11, Playing Nice – Connecting to Other Systems, covers the topic of interconnecting R to other systems. It includes recipes for interconnecting R with Java, Excel and with relational and NoSQL databases (MySQL and MongoDB respectively).</p>
</li>
</ul>
<h2 id="What-you-need-for-this-book"><a href="#What-you-need-for-this-book" class="headerlink" title="What you need for this book"></a>What you need for this book</h2><p>We have tested all the code in this book for R versions 3.0.2 (Frisbee Sailing) and 3.1.0 (Spring Dance). When you install or load some of the packages, you may get a warning message to the effect that the code was compiled for a different version, but this will not impact any of the code in this book.</p>
<h2 id="Who-this-book-is-for"><a href="#Who-this-book-is-for" class="headerlink" title="Who this book is for"></a>Who this book is for</h2><p>This book is ideal for those who are already exposed to R, but have not yet used it extensively for data analytics and are seeking to get up and running quickly for analytics tasks. This book will help people who aspire to enhance their skills in any of the following ways:</p>
<ul>
<li>perform advanced analyses and create informative and professional charts</li>
<li>become proficient in acquiring data from many sources</li>
<li>apply supervised and unsupervised data mining techniques</li>
<li>use R’s features to present analyses professionally</li>
</ul>
<h2 id="Downloading-the-example-code-and-data"><a href="#Downloading-the-example-code-and-data" class="headerlink" title="Downloading the example code and data"></a>Downloading the example code and data</h2><p>You can download the example code files from your account at <a href="http://www.packtpub.com" target="_blank" rel="external">http://www.packtpub.com</a> for all the Packt Publishing books you have purchased. If you purchased this book elsewhere, you can visit <a href="http://www.packtpub.com/support" target="_blank" rel="external">http://www.packtpub.com/support</a> and register to have the files e-mailed directly to you.</p>
<h2 id="About-the-data-files-used-in-this-book"><a href="#About-the-data-files-used-in-this-book" class="headerlink" title="About the data files used in this book"></a>About the data files used in this book</h2><p>We have generated many of the data files used in this book. We have also used some publicly available data sets. The table below lists the sources of these public data sets. We downloaded most of the public data sets from the University of California at Irvine (UCI) Machine Learning Repository at <a href="http://archive.ics.uci.edu/ml/" target="_blank" rel="external">http://archive.ics.uci.edu/ml/</a>. In the table below we have indicated this as “Downloaded from UCI-MLR.”</p>
<p>|Data file name|Source|<br>|:=———–|——-|<br>|auto-mpg.csv |Quinlan, R. Combining Instance-Based and Model-Based Learning, Machine Learning Proceedings on the Tenth International Conference 1993, 236-243, held at University of Massachusetts, Amherst published by Morgan Kaufmann.(Downloaded from UCI-MLR).|<br>|BostonHousing.csv|D. Harrison and D.L. Rubinfeld, Hedonic prices and the demand for clean air, Journal for Environmental Economics a Management, pages 81–102, 1978. (Downloaded from UCI-MLR)|<br>|daily-bike-rentals.csv|Fanaee-T, Hadi, and Gama, Joao, Event labeling combining ensemble detectors and background knowledge, Progress in Artificial Intelligence (2013): pp. 1-15, Springer Berlin Heidelberg. (Downloaded from UCI-MLR)|<br>|banknote-authentication.csv|Owner of database: Volker Lohweg, University of Applied Sciences, Ostwestfalen-Lippe Donor of database: Helene Darksen, University of Applied Sciences, Ostwestfalen-Lippe. (Downloaded from UCI-MLR)|<br>|education.csv|Robust Regression and Outlier Detection, P. J. Rouseeuw and A. M. Leroy, Wiley, 1987.(Downloaded from UCI-MLR)|<br>|walmart.csv and walmart-monthly.csv|Downloaded from Yahoo! Finance|<br>|prices.csv|Downloaded from the US Bureau of Labor Statistics.|<br>|infy.csv, infy-monthly.csv|Downloaded from Yahoo! Finance.|<br>|nj-wages.csv|NJ Department of Education’s website and <a href="http://federalgovernmentzipcodes.us.|" target="_blank" rel="external">http://federalgovernmentzipcodes.us.|</a><br>|nj-county-data.csv|Adapted from Wikipedia: <a href="http://en.wikipedia.org/wiki/List_of_counties_in_New_Jersey|" target="_blank" rel="external">http://en.wikipedia.org/wiki/List_of_counties_in_New_Jersey|</a></p>
<p>Downloading the color images of this book<br>We also provide you with a PDF file that has color images of the screenshots/diagrams used in this book. The color images will help you better understand the changes in the output. You can download this file from: <a href="https://www.packtpub.com/sites/default/files/downloads/9065OS_ColorImages.pdf" target="_blank" rel="external">https://www.packtpub.com/sites/default/files/downloads/9065OS_ColorImages.pdf</a>.</p>
<hr>
<h1 id="Chapter-1-Acquire-and-Prepare-the-Ingredients-–-Your-Data"><a href="#Chapter-1-Acquire-and-Prepare-the-Ingredients-–-Your-Data" class="headerlink" title="Chapter 1. Acquire and Prepare the Ingredients – Your Data"></a>Chapter 1. Acquire and Prepare the Ingredients – Your Data</h1><p>In this chapter, we will cover:</p>
<ul>
<li>Reading data from CSV files</li>
<li>Reading XML data</li>
<li>Reading JSON data</li>
<li>Reading data from fixed-width formatted files</li>
<li>Reading data from R data files and R libraries</li>
<li>Removing cases with missing values</li>
<li>Replacing missing values with the mean</li>
<li>Removing duplicate cases</li>
<li>Rescaling a variable to [0,1]</li>
<li>Normalizing or standardizing data in a data frame</li>
<li>Binning numerical data</li>
<li>Creating dummies for categorical variables</li>
</ul>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Data analysts need to load data from many different input formats into R. Although R has its own native data format, data usually exists in text formats, such as CSV (Comma Separated Values), JSON (JavaScript Object Notation), and XML (Extensible Markup Language). This chapter provides recipes to load such data into your R system for processing.</p>
<p>Very rarely can we start analyzing data immediately after loading it. Often, we will need to preprocess the data to clean and transform it before embarking on analysis. This chapter provides recipes for some common cleaning and preprocessing steps.</p>
<h2 id="Reading-data-from-CSV-files"><a href="#Reading-data-from-CSV-files" class="headerlink" title="Reading data from CSV files"></a>Reading data from CSV files</h2><p>CSV formats are best used to represent sets or sequences of records in which each record has an identical list of fields. This corresponds to a single relation in a relational database, or to data (though not calculations) in a typical spreadsheet.</p>
<h3 id="Getting-ready"><a href="#Getting-ready" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that the auto-mpg.csv file is in your R working directory.</p>
<h3 id="How-to-do-it…"><a href="#How-to-do-it…" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Reading data from <code>.csv</code> files can be done using the following commands:</p>
<ol>
<li><p>Read the data from <code>auto-mpg.csv</code>, which includes a header row:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, header=<span class="literal">TRUE</span>, sep = <span class="string">","</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Verify the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; names(auto)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…"><a href="#How-it-works…" class="headerlink" title="How it works…"></a>How it works…</h3><p>The <code>read.csv()</code> function creates a data frame from the data in the <code>.csv</code> file. If we pass <code>header=TRUE</code>, then the function uses the very first row to name the variables in the resulting data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; names(auto)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"No"</span>           <span class="string">"mpg"</span>          <span class="string">"cylinders"</span></span><br><span class="line">[<span class="number">4</span>] <span class="string">"displacement"</span> <span class="string">"horsepower"</span>   <span class="string">"weight"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"acceleration"</span> <span class="string">"model_year"</span>   <span class="string">"car_name"</span></span><br></pre></td></tr></table></figure>
<p>The <code>header</code> and <code>sep</code> parameters allow us to specify whether the <code>.csv</code> file has headers and the character used in the file to separate fields. The <code>header=TRUE</code> and <code>sep=&quot;,&quot;</code> parameters are the defaults for the <code>read.csv()</code> function—we can omit these in the code example.</p>
<h3 id="There’s-more…"><a href="#There’s-more…" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The <code>read.csv()</code> function is a specialized form of <code>read.table()</code>. The latter uses whitespace as the default field separator. We discuss a few important optional arguments to these functions.</p>
<h3 id="Handling-different-column-delimiters"><a href="#Handling-different-column-delimiters" class="headerlink" title="Handling different column delimiters"></a>Handling different column delimiters</h3><p>In regions where a comma is used as the decimal separator, <code>.csv</code> files use “;” as the field delimiter. While dealing with such data files, use <code>read.csv2()</code> to load data into R.</p>
<p>Alternatively, you can use the <code>read.csv(&quot;&lt;file name&gt;&quot;, sep=&quot;;&quot;, dec=&quot;,&quot;)</code> command.</p>
<p>Use <code>sep=&quot;\t&quot;</code> for tab-delimited files.</p>
<h3 id="Handling-column-headers-variable-names"><a href="#Handling-column-headers-variable-names" class="headerlink" title="Handling column headers/variable names"></a>Handling column headers/variable names</h3><p>If your data file does not have column headers, set <code>header=FALSE</code>.</p>
<p>The <code>auto-mpg-noheader.csv</code> file does not include a header row. The first command in the following snippet reads this file. In this case, R assigns default variable names V1, V2, and so on:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto  &lt;- read.csv(<span class="string">"auto-mpg-noheader.csv"</span>, header=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; head(auto,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  V1 V2 V3  V4 V5   V6   V7 V8                  V9</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span> <span class="number">28</span>  <span class="number">4</span> <span class="number">140</span> <span class="number">90</span> <span class="number">2264</span> <span class="number">15.5</span> <span class="number">71</span> chevrolet vega <span class="number">2300</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span> <span class="number">19</span>  <span class="number">3</span>  <span class="number">70</span> <span class="number">97</span> <span class="number">2330</span> <span class="number">13.5</span> <span class="number">72</span>     mazda rx2 coupe</span><br></pre></td></tr></table></figure>
<p>If your file does not have a header row, and you omit the <code>header=FALSE</code> optional argument, the <code>read.csv()</code> function uses the first row for variable names and ends up constructing variable names by adding X to the actual data values in the first row. Note the meaningless variable names in the following fragment:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto  &lt;- read.csv(<span class="string">"auto-mpg-noheader.csv"</span>)</span><br><span class="line">&gt; head(auto,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  X1 X28 X4 X140 X90 X2264 X15.5 X71 chevrolet.vega.2300</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">19</span>  <span class="number">3</span>   <span class="number">70</span>  <span class="number">97</span>  <span class="number">2330</span>  <span class="number">13.5</span>  <span class="number">72</span>     mazda rx2 coupe</span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">36</span>  <span class="number">4</span>  <span class="number">107</span>  <span class="number">75</span>  <span class="number">2205</span>  <span class="number">14.5</span>  <span class="number">82</span>        honda accord</span><br></pre></td></tr></table></figure>
<p>We can use the optional <code>col.names</code> argument to specify the column names. If <code>col.names</code> is given explicitly, the names in the header row are ignored even if <code>header=TRUE</code> is specified:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg-noheader.csv"</span>, header=<span class="literal">FALSE</span>, col.names = c(<span class="string">"No"</span>, <span class="string">"mpg"</span>, <span class="string">"cyl"</span>, <span class="string">"dis"</span>,<span class="string">"hp"</span>, <span class="string">"wt"</span>, <span class="string">"acc"</span>, <span class="string">"year"</span>, <span class="string">"car_name"</span>))</span><br><span class="line"></span><br><span class="line">&gt; head(auto,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  No mpg cyl dis hp   wt  acc year            car_name</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">28</span>   <span class="number">4</span> <span class="number">140</span> <span class="number">90</span> <span class="number">2264</span> <span class="number">15.5</span>   <span class="number">71</span> chevrolet vega <span class="number">2300</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">19</span>   <span class="number">3</span>  <span class="number">70</span> <span class="number">97</span> <span class="number">2330</span> <span class="number">13.5</span>   <span class="number">72</span>     mazda rx2 coupe</span><br></pre></td></tr></table></figure>
<h3 id="Handling-missing-values"><a href="#Handling-missing-values" class="headerlink" title="Handling missing values"></a>Handling missing values</h3><p>When reading data from text files, R treats blanks in numerical variables as <code>NA</code> (signifying missing data). By default, it reads blanks in categorical attributes just as blanks and not as NA. To treat blanks as NA for categorical and character variables, set <code>na.strings=&quot;&quot;:</code></p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto  &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, na.strings=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<p>If the data file uses a specified string (such as “N/A” or “NA” for example) to indicate the missing values, you can specify that string as the na.strings argument, as in na.strings= “N/A” or na.strings = “NA”.</p>
<h3 id="Reading-strings-as-characters-and-not-as-factors"><a href="#Reading-strings-as-characters-and-not-as-factors" class="headerlink" title="Reading strings as characters and not as factors"></a>Reading strings as characters and not as factors</h3><p>By default, R treats strings as factors (categorical variables). In some situations, you may want to leave them as character strings. Use stringsAsFactors=FALSE to achieve this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>,stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<p>However, to selectively treat variables as characters, you can load the file with the defaults (that is, read all strings as factors) and then use as.character() to convert the requisite factor variables to characters.</p>
<h3 id="Reading-data-directly-from-a-website"><a href="#Reading-data-directly-from-a-website" class="headerlink" title="Reading data directly from a website"></a>Reading data directly from a website</h3><p>If the data file is available on the Web, you can load it into R directly instead of downloading and saving it locally before loading it into R:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"http://www.exploredata.net/ftp/WHO.csv"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Reading-XML-data"><a href="#Reading-XML-data" class="headerlink" title="Reading XML data"></a>Reading XML data</h2><p>You may sometimes need to extract data from websites. Many providers also supply data in XML and JSON formats. In this recipe, we learn about reading XML data.</p>
<h3 id="Getting-ready-1"><a href="#Getting-ready-1" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If the XML package is not already installed in your R environment, install the package now as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"XML"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-1"><a href="#How-to-do-it…-1" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>XML data can be read by following these steps:</p>
<ol>
<li><p>Load the library and initialize:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(XML)</span><br><span class="line">&gt; url &lt;- <span class="string">"http://www.w3schools.com/xml/cd_catalog.xml"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Parse the XML file and get the root node:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; xmldoc &lt;- xmlParse(url)</span><br><span class="line">&gt; rootNode &lt;- xmlRoot(xmldoc)</span><br><span class="line">&gt; rootNode[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Extract XML data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; data &lt;- xmlSApply(rootNode,<span class="keyword">function</span>(x) xmlSApply(x, xmlValue))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the extracted data into a data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd.catalog &lt;- data.frame(t(data),row.names=<span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Verify the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd.catalog[<span class="number">1</span>:<span class="number">2</span>,]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-1"><a href="#How-it-works…-1" class="headerlink" title="How it works…"></a>How it works…</h3><p>The xmlParse function returns an object of the XMLInternalDocument class, which is a C-level internal data structure.</p>
<p>The xmlRoot() function gets access to the root node and its elements. We check the first element of the root node:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; rootNode[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">$CD</span><br><span class="line">&lt;CD&gt;</span><br><span class="line">  &lt;TITLE&gt;Empire Burlesque&lt;/TITLE&gt;</span><br><span class="line">  &lt;ARTIST&gt;Bob Dylan&lt;/ARTIST&gt;</span><br><span class="line">  &lt;COUNTRY&gt;USA&lt;/COUNTRY&gt;</span><br><span class="line">  &lt;COMPANY&gt;Columbia&lt;/COMPANY&gt;</span><br><span class="line">  &lt;PRICE&gt;<span class="number">10.90</span>&lt;/PRICE&gt;</span><br><span class="line">  &lt;YEAR&gt;<span class="number">1985</span>&lt;/YEAR&gt;</span><br><span class="line">&lt;/CD&gt;</span><br><span class="line">attr(,<span class="string">"class"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"XMLInternalNodeList"</span> <span class="string">"XMLNodeList"</span></span><br></pre></td></tr></table></figure>
<p>To extract data from the root node, we use the xmlSApply() function iteratively over all the children of the root node. The xmlSApply function returns a matrix.</p>
<p>To convert the preceding matrix into a data frame, we transpose the matrix using the t() function. We then extract the first two rows from the cd.catalog data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd.catalog[<span class="number">1</span>:<span class="number">2</span>,]</span><br><span class="line">             TITLE       ARTIST COUNTRY     COMPANY PRICE YEAR</span><br><span class="line"><span class="number">1</span> Empire Burlesque    Bob Dylan     USA    Columbia <span class="number">10.90</span> <span class="number">1985</span></span><br><span class="line"><span class="number">2</span>  Hide your heart Bonnie Tyler      UK CBS Records  <span class="number">9.90</span> <span class="number">1988</span></span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-1"><a href="#There’s-more…-1" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>XML data can be deeply nested and hence can become complex to extract. Knowledge of XPath will be helpful to access specific XML tags. R provides several functions such as xpathSApply and getNodeSet to locate specific elements.</p>
<h4 id="Extracting-HTML-table-data-from-a-web-page"><a href="#Extracting-HTML-table-data-from-a-web-page" class="headerlink" title="Extracting HTML table data from a web page"></a>Extracting HTML table data from a web page</h4><p>Though it is possible to treat HTML data as a specialized form of XML, R provides specific functions to extract data from HTML tables as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; url &lt;- <span class="string">"http://en.wikipedia.org/wiki/World_population"</span></span><br><span class="line">&gt; tables &lt;- readHTMLTable(url)</span><br><span class="line">&gt; world.pop &lt;- tables[[<span class="number">5</span>]]</span><br></pre></td></tr></table></figure>
<p>The readHTMLTable() function parses the web page and returns a list of all tables that are found on the page. For tables that have an id attribute, the function uses the id attribute as the name of that list element.</p>
<p>We are interested in extracting the “10 most populous countries,” which is the fifth table; hence we use tables[[5]].</p>
<h4 id="Extracting-a-single-HTML-table-from-a-web-page"><a href="#Extracting-a-single-HTML-table-from-a-web-page" class="headerlink" title="Extracting a single HTML table from a web page"></a>Extracting a single HTML table from a web page</h4><p>A single table can be extracted using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; table &lt;- readHTMLTable(url,which=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>Specify which to get data from a specific table. R returns a data frame.</p>
<h2 id="Reading-JSON-data"><a href="#Reading-JSON-data" class="headerlink" title="Reading JSON data"></a>Reading JSON data</h2><p>Several RESTful web services return data in JSON format—in some ways simpler and more efficient than XML. This recipe shows you how to read JSON data.</p>
<h3 id="Getting-ready-2"><a href="#Getting-ready-2" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>R provides several packages to read JSON data, but we use the jsonlite package. Install the package in your R environment as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"jsonlite"</span>)</span><br></pre></td></tr></table></figure>
<p>If you have not already downloaded the files for this chapter, do it now and ensure that the students.json files and student-courses.json files are in your R working directory.</p>
<h3 id="How-to-do-it…-2"><a href="#How-to-do-it…-2" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Once the files are ready and load the jsonlite package and read the files as follows:</p>
<ol>
<li><p>Load the library:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(jsonlite)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Load the JSON data from files:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat.1 &lt;- fromJSON(<span class="string">"students.json"</span>)</span><br><span class="line">&gt; dat.2 &lt;- fromJSON(<span class="string">"student-courses.json"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Load the JSON document from the Web:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; url &lt;- <span class="string">"http://finance.yahoo.com/webservice/v1/symbols/allcurrencies/quote?format=json"</span></span><br><span class="line">&gt; jsonDoc &lt;- fromJSON(url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Extract data into data frames:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- jsonDoc$list$resources$resource$fields</span><br></pre></td></tr></table></figure>
</li>
<li><p>Verify the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat[<span class="number">1</span>:<span class="number">2</span>,]</span><br><span class="line">&gt; dat.1[<span class="number">1</span>:<span class="number">3</span>,]</span><br><span class="line">&gt; dat.2[,c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>:<span class="number">5</span>)]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-2"><a href="#How-it-works…-2" class="headerlink" title="How it works…"></a>How it works…</h3><p>The jsonlite package provides two key functions: fromJSON and toJSON.</p>
<p>The fromJSON function can load data either directly from a file or from a web page as the preceding steps 2 and 3 show. If you get errors in downloading content directly from the Web, install and load the httr package.</p>
<p>Depending on the structure of the JSON document, loading the data can vary in complexity.</p>
<p>If given a URL, the fromJSON function returns a list object. In the preceding list, in step 4, we see how to extract the enclosed data frame.</p>
<h2 id="Reading-data-from-fixed-width-formatted-files"><a href="#Reading-data-from-fixed-width-formatted-files" class="headerlink" title="Reading data from fixed-width formatted files"></a>Reading data from fixed-width formatted files</h2><p>In fixed-width formatted files, columns have fixed widths; if a data element does not use up the entire allotted column width, then the element is padded with spaces to make up the specified width. To read fixed-width text files, specify columns by column widths or by starting positions.</p>
<h3 id="Getting-ready-3"><a href="#Getting-ready-3" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the student-fwf.txt file in your R working directory.</p>
<h3 id="How-to-do-it…-3"><a href="#How-to-do-it…-3" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Read the fixed-width formatted file as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; student  &lt;- read.fwf(<span class="string">"student-fwf.txt"</span>, widths=c(<span class="number">4</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">4</span>), col.names=c(<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"email"</span>,<span class="string">"major"</span>,<span class="string">"year"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-3"><a href="#How-it-works…-3" class="headerlink" title="How it works…"></a>How it works…</h3><p>In the student-fwf.txt file, the first column occupies 4 character positions, the second 15, and so on. The c(4,15,20,15,4) expression specifies the widths of the five columns in the data file.</p>
<p>We can use the optional col.names argument to supply our own variable names.</p>
<h3 id="There’s-more…-2"><a href="#There’s-more…-2" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The read.fwf() function has several optional arguments that come in handy. We discuss a few of these as follows:</p>
<h4 id="Files-with-headers"><a href="#Files-with-headers" class="headerlink" title="Files with headers"></a>Files with headers</h4><p>Files with headers use the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; student  &lt;- read.fwf(<span class="string">"student-fwf-header.txt"</span>, widths=c(<span class="number">4</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">4</span>), header=<span class="literal">TRUE</span>, sep=<span class="string">"\t"</span>,skip=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>If header=TRUE, the first row of the file is interpreted as having the column headers. Column headers, if present, need to be separated by the specified sep argument. The sep argument only applies to the header row.</p>
<p>The skip argument denotes the number of lines to skip; in this recipe, the first two lines are skipped.</p>
<h4 id="Excluding-columns-from-data"><a href="#Excluding-columns-from-data" class="headerlink" title="Excluding columns from data"></a>Excluding columns from data</h4><p>To exclude a column, make the column width negative. Thus, to exclude the e-mail column, we will specify its width as -20 and also remove the column name from the col.names vector as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; student &lt;- read.fwf(<span class="string">"student-fwf.txt"</span>,widths=c(<span class="number">4</span>,<span class="number">15</span>,-<span class="number">20</span>,<span class="number">15</span>,<span class="number">4</span>), col.names=c(<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"major"</span>,<span class="string">"year"</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Reading-data-from-R-files-and-R-libraries"><a href="#Reading-data-from-R-files-and-R-libraries" class="headerlink" title="Reading data from R files and R libraries"></a>Reading data from R files and R libraries</h2><p>During data analysis, you will create several R objects. You can save these in the native R data format and retrieve them later as needed.</p>
<h3 id="Getting-ready-4"><a href="#Getting-ready-4" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>First, create and save R objects interactively as shown in the following code. Make sure you have write access to the R working directory:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; customer &lt;- c(<span class="string">"John"</span>, <span class="string">"Peter"</span>, <span class="string">"Jane"</span>)</span><br><span class="line">&gt; orderdate &lt;- as.Date(c(<span class="string">'2014-10-1'</span>,<span class="string">'2014-1-2'</span>,<span class="string">'2014-7-6'</span>))</span><br><span class="line">&gt; orderamount &lt;- c(<span class="number">280</span>, <span class="number">100.50</span>, <span class="number">40.25</span>)</span><br><span class="line">&gt; order &lt;- data.frame(customer,orderdate,orderamount)</span><br><span class="line">&gt; names &lt;- c(<span class="string">"John"</span>, <span class="string">"Joan"</span>)</span><br><span class="line">&gt; save(order, names, file=<span class="string">"test.Rdata"</span>)</span><br><span class="line">&gt; saveRDS(order,file=<span class="string">"order.rds"</span>)</span><br><span class="line">&gt; remove(order)</span><br></pre></td></tr></table></figure>
<p>After saving the preceding code, the remove() function deletes the object from the current session.</p>
<h3 id="How-to-do-it…-4"><a href="#How-to-do-it…-4" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To be able to read data from R files and libraries, follow these steps:</p>
<ol>
<li><p>Load data from R data files into memory:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="string">"test.Rdata"</span>)</span><br><span class="line">&gt; ord &lt;- readRDS(<span class="string">"order.rds"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The datasets package is loaded in the R environment by default and contains the iris and cars datasets. To load these datasets’ data into memory, use the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; data(iris)</span><br><span class="line">&gt; data(c(cars,iris))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>The first command loads only the iris dataset, and the second loads the cars and iris datasets.</p>
<h3 id="How-it-works…-4"><a href="#How-it-works…-4" class="headerlink" title="How it works…"></a>How it works…</h3><p>The save() function saves the serialized version of the objects supplied as arguments along with the object name. The subsequent load() function restores the saved objects with the same object names they were saved with, to the global environment by default. If there are existing objects with the same names in that environment, they will be replaced without any warnings.</p>
<p>The saveRDS() function saves only one object. It saves the serialized version of the object and not the object name. Hence, with the readRDS() function the saved object can be restored into a variable with a different name from when it was saved.</p>
<h3 id="There’s-more…-3"><a href="#There’s-more…-3" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The preceding recipe has shown you how to read saved R objects. We see more options in this section.</p>
<h4 id="To-save-all-objects-in-a-session"><a href="#To-save-all-objects-in-a-session" class="headerlink" title="To save all objects in a session"></a>To save all objects in a session</h4><p>The following command can be used to save all objects:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; save.image(file = <span class="string">"all.RData"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="To-selectively-save-objects-in-a-session"><a href="#To-selectively-save-objects-in-a-session" class="headerlink" title="To selectively save objects in a session"></a>To selectively save objects in a session</h4><p>To save objects selectively use the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; odd &lt;- c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">&gt; even &lt;- c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>)</span><br><span class="line">&gt; save(list=c(<span class="string">"odd"</span>,<span class="string">"even"</span>),file=<span class="string">"OddEven.Rdata"</span>)</span><br></pre></td></tr></table></figure>
<p>The list argument specifies a character vector containing the names of the objects to be saved. Subsequently, loading data from the OddEven.Rdata file creates both odd and even objects. The saveRDS() function can save only one object at a time.</p>
<h4 id="Attaching-detaching-R-data-files-to-an-environment"><a href="#Attaching-detaching-R-data-files-to-an-environment" class="headerlink" title="Attaching/detaching R data files to an environment"></a>Attaching/detaching R data files to an environment</h4><p>While loading Rdata files, if we want to be notified whether objects with the same name already exist in the environment, we can use:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">attach</span>(<span class="string">"order.Rdata"</span>)</span><br></pre></td></tr></table></figure>
<p>The order.Rdata file contains an object named order. If an object named order already exists in the environment, we will get the following error:</p>
<p>The following object is masked <code>_by_ .GlobalEnv</code>:</p>
<pre><code>order
</code></pre><h4 id="Listing-all-datasets-in-loaded-packages"><a href="#Listing-all-datasets-in-loaded-packages" class="headerlink" title="Listing all datasets in loaded packages"></a>Listing all datasets in loaded packages</h4><p>All the loaded packages can be listed using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; data()</span><br></pre></td></tr></table></figure>
<h2 id="Removing-cases-with-missing-values"><a href="#Removing-cases-with-missing-values" class="headerlink" title="Removing cases with missing values"></a>Removing cases with missing values</h2><p>Datasets come with varying amounts of missing data. When we have abundant data, we sometimes (not always) want to eliminate the cases that have missing values for one or more variables. This recipe applies when we want to eliminate cases that have any missing values, as well as when we want to selectively eliminate cases that have missing values for a specific variable alone.</p>
<h3 id="Getting-ready-5"><a href="#Getting-ready-5" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the missing-data.csv file from the code files for this chapter to your R working directory. Read the data from the missing-data.csv file while taking care to identify the string used in the input file for missing values. In our file, missing values are shown with empty strings:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"missing-data.csv"</span>, na.strings=<span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-5"><a href="#How-to-do-it…-5" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To get a data frame that has only the cases with no missing values for any variable, use the na.omit() function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat.cleaned &lt;- na.omit(dat)</span><br></pre></td></tr></table></figure>
<p>Now, dat.cleaned contains only those cases from dat, which have no missing values in any of the variables.</p>
<h3 id="How-it-works…-5"><a href="#How-it-works…-5" class="headerlink" title="How it works…"></a>How it works…</h3><p>The na.omit() function internally uses the is.na() function that allows us to find whether its argument is NA. When applied to a single value, it returns a boolean value. When applied to a collection, it returns a vector:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; is.na(dat[<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">&gt; is.na(dat$Income)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">10</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line">[<span class="number">19</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-4"><a href="#There’s-more…-4" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>You will sometimes need to do more than just eliminate cases with any missing values. We discuss some options in this section.</p>
<h4 id="Eliminating-cases-with-NA-for-selected-variables"><a href="#Eliminating-cases-with-NA-for-selected-variables" class="headerlink" title="Eliminating cases with NA for selected variables"></a>Eliminating cases with NA for selected variables</h4><p>We might sometimes want to selectively eliminate cases that have NA only for a specific variable. The example data frame has two missing values for Income. To get a data frame with only these two cases removed, use:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat.income.cleaned &lt;- dat[!is.na(dat$Income),]</span><br><span class="line">&gt; nrow(dat.income.cleaned)</span><br><span class="line">[<span class="number">1</span>] <span class="number">25</span></span><br></pre></td></tr></table></figure>
<p>Finding cases that have no missing values</p>
<p>The complete.cases() function takes a data frame or table as its argument and returns a boolean vector with TRUE for rows that have no missing values and FALSE otherwise:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; complete.cases(dat)</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">10</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">19</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure>
<p>Rows 4, 6, 13, and 17 have at least one missing value. Instead of using the na.omit() function, we could have done the following as well:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat.cleaned &lt;- dat[complete.cases(dat),]</span><br><span class="line">&gt; nrow(dat.cleaned)</span><br><span class="line">[<span class="number">1</span>] <span class="number">23</span></span><br></pre></td></tr></table></figure>
<h4 id="Converting-specific-values-to-NA"><a href="#Converting-specific-values-to-NA" class="headerlink" title="Converting specific values to NA"></a>Converting specific values to NA</h4><p>Sometimes, we might know that a specific value in a data frame actually means that data was not available. For example, in the dat data frame a value of 0 for income may mean that the data is missing. We can convert these to NA by a simple assignment:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat$Income[dat$Income==<span class="number">0</span>] &lt;- <span class="literal">NA</span></span><br></pre></td></tr></table></figure>
<h4 id="Excluding-NA-values-from-computations"><a href="#Excluding-NA-values-from-computations" class="headerlink" title="Excluding NA values from computations"></a>Excluding NA values from computations</h4><p>Many R functions return NA when some parts of the data they work on are NA. For example, computing the mean or sd on a vector with at least one NA value returns NA as the result. To remove NA from consideration, use the na.rm parameter:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; mean(dat$Income)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">NA</span></span><br><span class="line"></span><br><span class="line">&gt; mean(dat$Income, na.rm = <span class="literal">TRUE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">65763.64</span></span><br></pre></td></tr></table></figure>
<h2 id="Replacing-missing-values-with-the-mean"><a href="#Replacing-missing-values-with-the-mean" class="headerlink" title="Replacing missing values with the mean"></a>Replacing missing values with the mean</h2><p>When you disregard cases with any missing variables, you lose useful information that the nonmissing values in that case convey. You may sometimes want to impute reasonable values (those that will not skew the results of analyses very much) for the missing values.</p>
<h3 id="Getting-ready-6"><a href="#Getting-ready-6" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the missing-data.csv file and store it in your R environment’s working directory.</p>
<h3 id="How-to-do-it…-6"><a href="#How-to-do-it…-6" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Read data and replace missing values:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"missing-data.csv"</span>, na.strings = <span class="string">""</span>)</span><br><span class="line">&gt; dat$Income.imp.mean &lt;- ifelse(is.na(dat$Income), mean(dat$Income, na.rm=<span class="literal">TRUE</span>), dat$Income)</span><br></pre></td></tr></table></figure>
<p>After this, all the NA values for Income will now be the mean value prior to imputation.</p>
<h3 id="How-it-works…-6"><a href="#How-it-works…-6" class="headerlink" title="How it works…"></a>How it works…</h3><p>The preceding ifelse() function returns the imputed mean value if its first argument is NA. Otherwise, it returns the first argument.</p>
<h3 id="There’s-more…-5"><a href="#There’s-more…-5" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>You cannot impute the mean when a categorical variable has missing values, so you need a different approach. Even for numeric variables, we might sometimes not want to impute the mean for missing values. We discuss an often used approach here.</p>
<h4 id="Imputing-random-values-sampled-from-nonmissing-values"><a href="#Imputing-random-values-sampled-from-nonmissing-values" class="headerlink" title="Imputing random values sampled from nonmissing values"></a>Imputing random values sampled from nonmissing values</h4><p>If you want to impute random values sampled from the nonmissing values of the variable, you can use the following two functions:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rand.impute &lt;- <span class="keyword">function</span>(a) &#123;</span><br><span class="line">  missing &lt;- is.na(a)</span><br><span class="line">  n.missing &lt;- sum(missing)</span><br><span class="line">  a.obs &lt;- a[!missing]</span><br><span class="line">  imputed &lt;- a</span><br><span class="line">  imputed[missing] &lt;- sample (a.obs, n.missing, replace=<span class="literal">TRUE</span>)</span><br><span class="line">  <span class="keyword">return</span> (imputed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">random.impute.data.frame &lt;- <span class="keyword">function</span>(dat, cols) &#123;</span><br><span class="line">  nms &lt;- names(dat)</span><br><span class="line">  <span class="keyword">for</span>(col <span class="keyword">in</span> cols) &#123;</span><br><span class="line">    name &lt;- paste(nms[col],<span class="string">".imputed"</span>, sep = <span class="string">""</span>)</span><br><span class="line">    dat[name] &lt;- rand.impute(dat[,col])</span><br><span class="line">  &#125;</span><br><span class="line">  dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With these two functions in place, you can use the following to impute random values for both Income and Phone_type:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"missing-data.csv"</span>, na.strings=<span class="string">""</span>)</span><br><span class="line">&gt; random.impute.data.frame(dat, c(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Removing-duplicate-cases"><a href="#Removing-duplicate-cases" class="headerlink" title="Removing duplicate cases"></a>Removing duplicate cases</h2><p>We sometimes end up with duplicate cases in our datasets and want to retain only one among the duplicates.</p>
<h3 id="Getting-ready-7"><a href="#Getting-ready-7" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Create a sample data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; salary &lt;- c(<span class="number">20000</span>, <span class="number">30000</span>, <span class="number">25000</span>, <span class="number">40000</span>, <span class="number">30000</span>, <span class="number">34000</span>, <span class="number">30000</span>)</span><br><span class="line">&gt; family.size &lt;- c(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">&gt; car &lt;- c(<span class="string">"Luxury"</span>, <span class="string">"Compact"</span>, <span class="string">"Midsize"</span>, <span class="string">"Luxury"</span>, <span class="string">"Compact"</span>, <span class="string">"Compact"</span>, <span class="string">"Compact"</span>)</span><br><span class="line">&gt; prospect &lt;- data.frame(salary, family.size, car)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-7"><a href="#How-to-do-it…-7" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>The unique() function can do the job. It takes a vector or data frame as an argument and returns an object of the same type as its argument but with duplicates removed.</p>
<p>Get unique values:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; prospect.cleaned &lt;- unique(prospect)</span><br><span class="line">&gt; nrow(prospect)</span><br><span class="line">[<span class="number">1</span>] <span class="number">7</span></span><br><span class="line">&gt; nrow(prospect.cleaned)</span><br><span class="line">[<span class="number">1</span>] <span class="number">5</span></span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-7"><a href="#How-it-works…-7" class="headerlink" title="How it works…"></a>How it works…</h3><p>The unique() function takes a vector or data frame as an argument and returns a like object with the duplicate eliminated. It returns the nonduplicated cases as is. For repeated cases, the unique() function includes one copy in the returned result.</p>
<h3 id="There’s-more…-6"><a href="#There’s-more…-6" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Sometimes we just want to identify duplicated values without necessarily removing them.</p>
<h4 id="Identifying-duplicates-without-deleting-them"><a href="#Identifying-duplicates-without-deleting-them" class="headerlink" title="Identifying duplicates (without deleting them)"></a>Identifying duplicates (without deleting them)</h4><p>For this, use the duplicated() function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; duplicated(prospect)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure>
<p>From the data, we know that cases 2, 5, and 7 are duplicates. Note that only cases 5 and 7 are shown as duplicates. In the first occurrence, case 2 is not flagged as a duplicate.</p>
<p>To list the duplicate cases, use the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; prospect[duplicated(prospect), ]</span><br><span class="line"></span><br><span class="line">  salary family.size     car</span><br><span class="line"><span class="number">5</span>  <span class="number">30000</span>           <span class="number">3</span> Compact</span><br><span class="line"><span class="number">7</span>  <span class="number">30000</span>           <span class="number">3</span> Compact</span><br></pre></td></tr></table></figure>
<h2 id="Rescaling-a-variable-to-0-1"><a href="#Rescaling-a-variable-to-0-1" class="headerlink" title="Rescaling a variable to [0,1]"></a>Rescaling a variable to [0,1]</h2><p>Distance computations play a big role in many data analytics techniques. We know that variables with higher values tend to dominate distance computations and you may want to rescale the values to be in the range 0 - 1.</p>
<h3 id="Getting-ready-8"><a href="#Getting-ready-8" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the scales package and read the data-conversion.csv file from the book’s data for this chapter into your R environment’s working directory:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"scales"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(scales)</span><br><span class="line">&gt; students &lt;- read.csv(<span class="string">"data-conversion.csv"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-8"><a href="#How-to-do-it…-8" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To rescale the Income variable to the range [0,1]:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; students$Income.rescaled &lt;- rescale(students$Income)</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-8"><a href="#How-it-works…-8" class="headerlink" title="How it works…"></a>How it works…</h3><p>By default, the rescale() function makes the lowest value(s) zero and the highest value(s) one. It rescales all other values proportionately. The following two expressions provide identical results:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; rescale(students$Income)</span><br><span class="line">&gt; (students$Income - min(students$Income)) / (max(students$Income) - min(students$Income))</span><br></pre></td></tr></table></figure>
<p>To rescale a different range than [0,1], use the to argument. The following rescales students$Income to the range (0,100):</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rescale(students$Income, to = c(<span class="number">1</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-7"><a href="#There’s-more…-7" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>When using distance-based techniques, you may need to rescale several variables. You may find it tedious to scale one variable at a time.</p>
<h4 id="Rescaling-many-variables-at-once"><a href="#Rescaling-many-variables-at-once" class="headerlink" title="Rescaling many variables at once"></a>Rescaling many variables at once</h4><p>Use the following function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rescale.many &lt;- <span class="keyword">function</span>(dat, column.nos) &#123;</span><br><span class="line">  nms &lt;- names(dat)</span><br><span class="line">  <span class="keyword">for</span>(col <span class="keyword">in</span> column.nos) &#123;</span><br><span class="line">    name &lt;- paste(nms[col],<span class="string">".rescaled"</span>, sep = <span class="string">""</span>)</span><br><span class="line">    dat[name] &lt;- rescale(dat[,col])</span><br><span class="line">  &#125;</span><br><span class="line">  cat(paste(<span class="string">"Rescaled "</span>, length(column.nos), <span class="string">" variable(s)\n"</span>))</span><br><span class="line">  dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the preceding function defined, we can do the following to rescale the first and fourth variables in the data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rescale.many(students, c(<span class="number">1</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h3 id="See-also…"><a href="#See-also…" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Recipe: Normalizing or standardizing data in a data frame in this chapter</li>
</ul>
<h2 id="Normalizing-or-standardizing-data-in-a-data-frame"><a href="#Normalizing-or-standardizing-data-in-a-data-frame" class="headerlink" title="Normalizing or standardizing data in a data frame"></a>Normalizing or standardizing data in a data frame</h2><p>Distance computations play a big role in many data analytics techniques. We know that variables with higher values tend to dominate distance computations and you may want to use the standardized (or Z) values.</p>
<h3 id="Getting-ready-9"><a href="#Getting-ready-9" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the BostonHousing.csv data file and store it in your R environment’s working directory. Then read the data:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; housing &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-9"><a href="#How-to-do-it…-9" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To standardize all the variables in a data frame containing only numeric variables, use:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; housing.z &lt;- scale(housing)</span><br></pre></td></tr></table></figure>
<p>You can only use the scale() function on data frames containing all numeric variables. Otherwise, you will get an error.</p>
<h3 id="How-it-works…-9"><a href="#How-it-works…-9" class="headerlink" title="How it works…"></a>How it works…</h3><p>When invoked as above, the scale() function computes the standard Z score for each value (ignoring NAs) of each variable. That is, from each value it subtracts the mean and divides the result by the standard deviation of the associated variable.</p>
<p>The scale() function takes two optional arguments, center and scale, whose default values are TRUE. The following table shows the effect of these arguments:</p>
<p>|Argument|Effect|<br>|:=——-|——|<br>|center = TRUE, scale = TRUE|Default behavior described earlier|<br>|center = TRUE, scale = FALSE|From each value, subtract the mean of the concerned variable|<br>|center = FALSE, scale = TRUE|Divide each value by the root mean square of the associated variable, where root mean square is sqrt(sum(x^2)/(n-1))|<br>|center = FALSE, scale = FALSE|Return the original values unchanged|</p>
<h3 id="There’s-more…-8"><a href="#There’s-more…-8" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>When using distance-based techniques, you may need to rescale several variables. You may find it tedious to standardize one variable at a time.</p>
<h4 id="Standardizing-several-variables-simultaneously"><a href="#Standardizing-several-variables-simultaneously" class="headerlink" title="Standardizing several variables simultaneously"></a>Standardizing several variables simultaneously</h4><p>If you have a data frame with some numeric and some non-numeric variables, or want to standardize only some of the variables in a fully numeric data frame, then you can either handle each variable separately—which would be cumbersome—or use a function such as the following to handle a subset of variables:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scale.many &lt;- <span class="keyword">function</span>(dat, column.nos) &#123;</span><br><span class="line">  nms &lt;- names(dat)</span><br><span class="line">  <span class="keyword">for</span>(col <span class="keyword">in</span> column.nos) &#123;</span><br><span class="line">    name &lt;- paste(nms[col],<span class="string">".z"</span>, sep = <span class="string">""</span>)</span><br><span class="line">    dat[name] &lt;- scale(dat[,col])</span><br><span class="line">  &#125;</span><br><span class="line">  cat(paste(<span class="string">"Scaled "</span>, length(column.nos), <span class="string">" variable(s)\n"</span>))</span><br><span class="line">  dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With this function, you can now do things like:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; housing &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br><span class="line">&gt; housing &lt;- scale.many(housing, c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>:<span class="number">7</span>))</span><br></pre></td></tr></table></figure>
<p>This will add the z values for variables 1, 3, 5, 6, and 7 with .z appended to the original column names:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; names(housing)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"CRIM"</span>    <span class="string">"ZN"</span>      <span class="string">"INDUS"</span>   <span class="string">"CHAS"</span>    <span class="string">"NOX"</span>     <span class="string">"RM"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"AGE"</span>     <span class="string">"DIS"</span>     <span class="string">"RAD"</span>     <span class="string">"TAX"</span>     <span class="string">"PTRATIO"</span> <span class="string">"B"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"LSTAT"</span>   <span class="string">"MEDV"</span>    <span class="string">"CRIM.z"</span>  <span class="string">"INDUS.z"</span> <span class="string">"NOX.z"</span>   <span class="string">"RM.z"</span></span><br><span class="line">[<span class="number">19</span>] <span class="string">"AGE.z"</span></span><br></pre></td></tr></table></figure>
<h3 id="See-also…-1"><a href="#See-also…-1" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li><p>Recipe: Rescaling a variable to [0,1] in this chapter</p>
<p>  Tip: Downloading the example code and data<br>  You can download the example code files from your account at <a href="http://www.packtpub.com" target="_blank" rel="external">http://www.packtpub.com</a> for all the Packt Publishing books you have purchased. If you purchased this book elsewhere, you can visit <a href="http://www.packtpub.com/support" target="_blank" rel="external">http://www.packtpub.com/support</a> and register to have the files e-mailed directly to you.</p>
</li>
</ul>
<h2 id="Binning-numerical-data"><a href="#Binning-numerical-data" class="headerlink" title="Binning numerical data"></a>Binning numerical data</h2><p>Sometimes, we need to convert numerical data to categorical data or a factor. For example, Naïve Bayes classification requires all variables (independent and dependent) to be categorical. In other situations, we may want to apply a classification method to a problem where the dependent variable is numeric but needs to be categorical.</p>
<h3 id="Getting-ready-10"><a href="#Getting-ready-10" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>From the code files for this chapter, store the data-conversion.csv file in the working directory of your R environment. Then read the data:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; students &lt;- read.csv(<span class="string">"data-conversion.csv"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-10"><a href="#How-to-do-it…-10" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Income is a numeric variable, and you may want to create a categorical variable from it by creating bins. Suppose you want to label incomes of $10,000 or below as Low, incomes between $10,000 and $31,000 as Medium, and the rest as High. We can do the following:</p>
<ol>
<li><p>Create a vector of break points:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; b &lt;- c(-<span class="literal">Inf</span>, <span class="number">10000</span>, <span class="number">31000</span>, <span class="literal">Inf</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a vector of names for break points:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; names &lt;- c(<span class="string">"Low"</span>, <span class="string">"Medium"</span>, <span class="string">"High"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Cut the vector using the break points:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; students$Income.cat &lt;- cut(students$Income, breaks = b, labels = names)</span><br><span class="line">&gt; students</span><br><span class="line"></span><br><span class="line">    Age State Gender Height Income Income.cat</span><br><span class="line"><span class="number">1</span>   <span class="number">23</span>    NJ      <span class="literal">F</span>     <span class="number">61</span>   <span class="number">5000</span>        Low</span><br><span class="line"><span class="number">2</span>   <span class="number">13</span>    NY      M     <span class="number">55</span>   <span class="number">1000</span>        Low</span><br><span class="line"><span class="number">3</span>   <span class="number">36</span>    NJ      M     <span class="number">66</span>   <span class="number">3000</span>        Low</span><br><span class="line"><span class="number">4</span>   <span class="number">31</span>    VA      <span class="literal">F</span>     <span class="number">64</span>   <span class="number">4000</span>        Low</span><br><span class="line"><span class="number">5</span>   <span class="number">58</span>    NY      <span class="literal">F</span>     <span class="number">70</span>  <span class="number">30000</span>     Medium</span><br><span class="line"><span class="number">6</span>   <span class="number">29</span>    TX      <span class="literal">F</span>     <span class="number">63</span>  <span class="number">10000</span>        Low</span><br><span class="line"><span class="number">7</span>   <span class="number">39</span>    NJ      M     <span class="number">67</span>  <span class="number">50000</span>       High</span><br><span class="line"><span class="number">8</span>   <span class="number">50</span>    VA      M     <span class="number">70</span>  <span class="number">55000</span>       High</span><br><span class="line"><span class="number">9</span>   <span class="number">23</span>    TX      <span class="literal">F</span>     <span class="number">61</span>   <span class="number">2000</span>        Low</span><br><span class="line"><span class="number">10</span>  <span class="number">36</span>    VA      M     <span class="number">66</span>  <span class="number">20000</span>     Medium</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-10"><a href="#How-it-works…-10" class="headerlink" title="How it works…"></a>How it works…</h3><p>The cut() function uses the ranges implied by the breaks argument to infer the bins, and names them according to the strings provided in the labels argument. In our example, the function places incomes less than or equal to 10,000 in the first bin, incomes greater than 10,000 and less than or equal to 31,000 in the second bin, and incomes greater than 31,000 in the third bin. In other words, the first number in the interval is not included and the second one is. The number of bins will be one less than the number of elements in breaks. The strings in names become the factor levels of the bins.</p>
<p>If we leave out names, cut() uses the numbers in the second argument to construct interval names as you can see here:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; b &lt;- c(-<span class="literal">Inf</span>, <span class="number">10000</span>, <span class="number">31000</span>, <span class="literal">Inf</span>)</span><br><span class="line">&gt; students$Income.cat1 &lt;- cut(students$Income, breaks = b)</span><br><span class="line">&gt; students</span><br><span class="line"></span><br><span class="line">   Age State Gender Height Income Income.cat     Income.cat1</span><br><span class="line"><span class="number">1</span>   <span class="number">23</span>    NJ      <span class="literal">F</span>     <span class="number">61</span>   <span class="number">5000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">2</span>   <span class="number">13</span>    NY      M     <span class="number">55</span>   <span class="number">1000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">3</span>   <span class="number">36</span>    NJ      M     <span class="number">66</span>   <span class="number">3000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">4</span>   <span class="number">31</span>    VA      <span class="literal">F</span>     <span class="number">64</span>   <span class="number">4000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">5</span>   <span class="number">58</span>    NY      <span class="literal">F</span>     <span class="number">70</span>  <span class="number">30000</span>     Medium (<span class="number">1e+04</span>,<span class="number">3.1e+04</span>]</span><br><span class="line"><span class="number">6</span>   <span class="number">29</span>    TX      <span class="literal">F</span>     <span class="number">63</span>  <span class="number">10000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">7</span>   <span class="number">39</span>    NJ      M     <span class="number">67</span>  <span class="number">50000</span>       High  (<span class="number">3.1e+04</span>, <span class="literal">Inf</span>]</span><br><span class="line"><span class="number">8</span>   <span class="number">50</span>    VA      M     <span class="number">70</span>  <span class="number">55000</span>       High  (<span class="number">3.1e+04</span>, <span class="literal">Inf</span>]</span><br><span class="line"><span class="number">9</span>   <span class="number">23</span>    TX      <span class="literal">F</span>     <span class="number">61</span>   <span class="number">2000</span>        Low    (-<span class="literal">Inf</span>,<span class="number">1e+04</span>]</span><br><span class="line"><span class="number">10</span>  <span class="number">36</span>    VA      M     <span class="number">66</span>  <span class="number">20000</span>     Medium (<span class="number">1e+04</span>,<span class="number">3.1e+04</span>]</span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-9"><a href="#There’s-more…-9" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>You might not always be in a position to identify the breaks manually and may instead want to rely on R to do this automatically.</p>
<h4 id="Creating-a-specified-number-of-intervals-automatically"><a href="#Creating-a-specified-number-of-intervals-automatically" class="headerlink" title="Creating a specified number of intervals automatically"></a>Creating a specified number of intervals automatically</h4><p>Rather than determining the breaks and hence the intervals manually as above, we can specify the number of bins we want, say n, and let the cut() function handle the rest automatically. In this case, cut() creates n intervals of approximately equal width as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; students$Income.cat2 &lt;- cut(students$Income, breaks = <span class="number">4</span>, labels = c(<span class="string">"Level1"</span>, <span class="string">"Level2"</span>, <span class="string">"Level3"</span>,<span class="string">"Level4"</span>))</span><br></pre></td></tr></table></figure>
<h2 id="Creating-dummies-for-categorical-variables"><a href="#Creating-dummies-for-categorical-variables" class="headerlink" title="Creating dummies for categorical variables"></a>Creating dummies for categorical variables</h2><p>In situations where we have categorical variables (factors) but need to use them in analytical methods that require numbers (for example, K nearest neighbors (KNN), Linear Regression), we need to create dummy variables.</p>
<h3 id="Getting-ready-11"><a href="#Getting-ready-11" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Read the data-conversion.csv file and store it in the working directory of your R environment. Install the dummies package. Then read the data:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"dummies"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(dummies)</span><br><span class="line">&gt; students &lt;- read.csv(<span class="string">"data-conversion.csv"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-11"><a href="#How-to-do-it…-11" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Create dummies for all factors in the data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; students.new &lt;- dummy.data.frame(students, sep = <span class="string">"."</span>)</span><br><span class="line">&gt; names(students.new)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"Age"</span>      <span class="string">"State.NJ"</span> <span class="string">"State.NY"</span> <span class="string">"State.TX"</span> <span class="string">"State.VA"</span></span><br><span class="line">[<span class="number">6</span>] <span class="string">"Gender.F"</span> <span class="string">"Gender.M"</span> <span class="string">"Height"</span>   <span class="string">"Income"</span></span><br></pre></td></tr></table></figure>
<p>The students.new data frame now contains all the original variables and the newly added dummy variables. The dummy.data.frame() function has created dummy variables for all four levels of the State and two levels of Gender factors. However, we will generally omit one of the dummy variables for State and one for Gender when we use machine-learning techniques.</p>
<p>We can use the optional argument all = FALSE to specify that the resulting data frame should contain only the generated dummy variables and none of the original variables.</p>
<h3 id="How-it-works…-11"><a href="#How-it-works…-11" class="headerlink" title="How it works…"></a>How it works…</h3><p>The dummy.data.frame() function creates dummies for all the factors in the data frame supplied. Internally, it uses another dummy() function which creates dummy variables for a single factor. The dummy() function creates one new variable for every level of the factor for which we are creating dummies. It appends the variable name with the factor level name to generate names for the dummy variables. We can use the sep argument to specify the character that separates them—an empty string is the default:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; dummy(students$State, sep = <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">      State.NJ State.NY State.TX State.VA</span><br><span class="line"> [<span class="number">1</span>,]        <span class="number">1</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">2</span>,]        <span class="number">0</span>        <span class="number">1</span>        <span class="number">0</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">3</span>,]        <span class="number">1</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">4</span>,]        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">1</span></span><br><span class="line"> [<span class="number">5</span>,]        <span class="number">0</span>        <span class="number">1</span>        <span class="number">0</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">6</span>,]        <span class="number">0</span>        <span class="number">0</span>        <span class="number">1</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">7</span>,]        <span class="number">1</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span></span><br><span class="line"> [<span class="number">8</span>,]        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">1</span></span><br><span class="line"> [<span class="number">9</span>,]        <span class="number">0</span>        <span class="number">0</span>        <span class="number">1</span>        <span class="number">0</span></span><br><span class="line">[<span class="number">10</span>,]        <span class="number">0</span>        <span class="number">0</span>        <span class="number">0</span>        <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-10"><a href="#There’s-more…-10" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>In situations where a data frame has several factors, and you plan on using only a subset of these, you will create dummies only for the chosen subset.</p>
<h4 id="Choosing-which-variables-to-create-dummies-for"><a href="#Choosing-which-variables-to-create-dummies-for" class="headerlink" title="Choosing which variables to create dummies for"></a>Choosing which variables to create dummies for</h4><p>To create dummies only for one variable or a subset of variables, we can use the names argument to specify the column names of the variables we want dummies for:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; students.new1 &lt;- dummy.data.frame(students, names = c(<span class="string">"State"</span>,<span class="string">"Gender"</span>) , sep = <span class="string">"."</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Chapter-2-What’s-in-There-–-Exploratory-Data-Analysis"><a href="#Chapter-2-What’s-in-There-–-Exploratory-Data-Analysis" class="headerlink" title="Chapter 2. What’s in There? – Exploratory Data Analysis"></a>Chapter 2. What’s in There? – Exploratory Data Analysis</h1><p>In this chapter, you will cover:</p>
<ul>
<li>Creating standard data summaries</li>
<li>Extracting a subset of a dataset</li>
<li>Splitting a dataset</li>
<li>Creating random data partitions</li>
<li>Generating standard plots such as histograms, boxplots, and scatterplots</li>
<li>Generating multiple plots on a grid</li>
<li>Selecting a graphics device</li>
<li>Creating plots with the lattice package</li>
<li>Creating plots with the ggplot2 package</li>
<li>Creating charts that facilitate comparisons</li>
<li>Creating charts that help visualize a possible causality</li>
<li>Creating multivariate plots</li>
</ul>
<h2 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h2><p>Before getting around to applying some of the more advanced analytics and machine learning techniques, analysts face the challenge of becoming familiar with the large datasets that they often deal with. Increasingly, analysts rely on visualization techniques to tease apart hidden patterns. This chapter equips you with the necessary recipes to incisively explore large datasets.</p>
<h2 id="Creating-standard-data-summaries"><a href="#Creating-standard-data-summaries" class="headerlink" title="Creating standard data summaries"></a>Creating standard data summaries</h2><p>In this recipe we summarize the data using the summary function.</p>
<h3 id="Getting-ready-12"><a href="#Getting-ready-12" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that the auto-mpg.csv file is in your R working directory.</p>
<h3 id="How-to-do-it…-12"><a href="#How-to-do-it…-12" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Read the data from auto-mpg.csv, which includes a header row and columns separated by the default “,” symbol.</p>
<ol>
<li><p>Read the data from auto-mpg.csv and convert cylinders to factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto  &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, header = <span class="literal">TRUE</span>, stringsAsFactors = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; <span class="comment"># Convert cylinders to factor</span></span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get the summary statistics:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">summary(auto)</span><br><span class="line"></span><br><span class="line">   No             mpg        cylinders   displacement</span><br><span class="line"> Min.   :  <span class="number">1.0</span>   Min.   : <span class="number">9.00</span>   3cyl:  <span class="number">4</span>   Min.   : <span class="number">68.0</span></span><br><span class="line">1st Qu.:<span class="number">100.2</span>   1st Qu.:<span class="number">17.50</span>   4cyl:<span class="number">204</span>   1st Qu.:<span class="number">104.2</span></span><br><span class="line">Median :<span class="number">199.5</span>   Median :<span class="number">23.00</span>   5cyl:  <span class="number">3</span>   Median :<span class="number">148.5</span></span><br><span class="line">Mean   :<span class="number">199.5</span>   Mean   :<span class="number">23.51</span>   6cyl: <span class="number">84</span>   Mean   :<span class="number">193.4</span></span><br><span class="line">3rd Qu.:<span class="number">298.8</span>   3rd Qu.:<span class="number">29.00</span>   8cyl:<span class="number">103</span>   3rd Qu.:<span class="number">262.0</span></span><br><span class="line">Max.   :<span class="number">398.0</span>   Max.   :<span class="number">46.60</span>              Max.   :<span class="number">455.0</span></span><br><span class="line">horsepower        weight      acceleration     model_year</span><br><span class="line">Min.   : <span class="number">46.0</span>   Min.   :<span class="number">1613</span>   Min.   : <span class="number">8.00</span>   Min.   :<span class="number">70.00</span></span><br><span class="line">1st Qu.: <span class="number">76.0</span>   1st Qu.:<span class="number">2224</span>   1st Qu.:<span class="number">13.82</span>   1st Qu.:<span class="number">73.00</span></span><br><span class="line">Median : <span class="number">92.0</span>   Median :<span class="number">2804</span>   Median :<span class="number">15.50</span>   Median :<span class="number">76.00</span></span><br><span class="line">Mean   :<span class="number">104.1</span>   Mean   :<span class="number">2970</span>   Mean   :<span class="number">15.57</span>   Mean   :<span class="number">76.01</span></span><br><span class="line">3rd Qu.:<span class="number">125.0</span>   3rd Qu.:<span class="number">3608</span>   3rd Qu.:<span class="number">17.18</span>   3rd Qu.:<span class="number">79.00</span></span><br><span class="line">Max.   :<span class="number">230.0</span>   Max.   :<span class="number">5140</span>   Max.   :<span class="number">24.80</span>   Max.   :<span class="number">82.00</span></span><br><span class="line">car_name</span><br><span class="line">Length:<span class="number">398</span></span><br><span class="line">Class :character</span><br><span class="line">Mode  :character</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-12"><a href="#How-it-works…-12" class="headerlink" title="How it works…"></a>How it works…</h3><p>The summary() function gives a “six number” summary for numerical variables—minimum, first quartile, median, mean, third quartile, and maximum. For factors (or categorical variables), the function shows the counts for each level; for character variables, it just shows the total number of available values.</p>
<h3 id="There’s-more…-11"><a href="#There’s-more…-11" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>R offers several functions to take a quick peek at data, and we discuss a few of those in this section.</p>
<p>Using the str() function for an overview of a data frame</p>
<p>The str() function gives a concise view into a data frame. In fact, we can use it to see the underlying structure of any arbitrary R object. The following commands and results show that the str() function tells us the type of object whose structure we seek. It also tells us about the type of each of its component objects along with an extract of some values. It can be very useful for getting an overview of a data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; str(auto)</span><br><span class="line"></span><br><span class="line"><span class="string">'data.frame'</span>: <span class="number">398</span> obs. of  <span class="number">9</span> variables:</span><br><span class="line">   $ No          : int  <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="keyword">...</span></span><br><span class="line">   $ mpg         : num  <span class="number">28</span> <span class="number">19</span> <span class="number">36</span> <span class="number">28</span> <span class="number">21</span> <span class="number">23</span> <span class="number">15.5</span> <span class="number">32.9</span> <span class="number">16</span> <span class="number">13</span> <span class="keyword">...</span></span><br><span class="line">   $ cylinders   : Factor w/ <span class="number">5</span> levels <span class="string">"3cyl"</span>,<span class="string">"4cyl"</span>,..: <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="keyword">...</span></span><br><span class="line">   $ displacement: num  <span class="number">140</span> <span class="number">70</span> <span class="number">107</span> <span class="number">97</span> <span class="number">199</span> <span class="number">115</span> <span class="number">304</span> <span class="number">119</span> <span class="number">250</span> <span class="number">318</span> <span class="keyword">...</span></span><br><span class="line">   $ horsepower  : int  <span class="number">90</span> <span class="number">97</span> <span class="number">75</span> <span class="number">92</span> <span class="number">90</span> <span class="number">95</span> <span class="number">120</span> <span class="number">100</span> <span class="number">105</span> <span class="number">150</span> <span class="keyword">...</span></span><br><span class="line">   $ weight      : int  <span class="number">2264</span> <span class="number">2330</span> <span class="number">2205</span> <span class="number">2288</span> <span class="number">2648</span> <span class="number">2694</span> <span class="number">3962</span> <span class="number">2615</span> <span class="number">3897</span> <span class="number">3755</span> <span class="keyword">...</span></span><br><span class="line">   $ acceleration: num  <span class="number">15.5</span> <span class="number">13.5</span> <span class="number">14.5</span> <span class="number">17</span> <span class="number">15</span> <span class="number">15</span> <span class="number">13.9</span> <span class="number">14.8</span> <span class="number">18.5</span> <span class="number">14</span> <span class="keyword">...</span></span><br><span class="line">   $ model_year  : int  <span class="number">71</span> <span class="number">72</span> <span class="number">82</span> <span class="number">72</span> <span class="number">70</span> <span class="number">75</span> <span class="number">76</span> <span class="number">81</span> <span class="number">75</span> <span class="number">76</span> <span class="keyword">...</span></span><br><span class="line">   $ car_name    : chr  <span class="string">"chevrolet vega 2300"</span> <span class="string">"mazda rx2 coupe"</span> <span class="string">"honda accord"</span> <span class="string">"datsun 510 (sw)"</span> ..</span><br></pre></td></tr></table></figure>
<h4 id="Computing-the-summary-for-a-single-variable"><a href="#Computing-the-summary-for-a-single-variable" class="headerlink" title="Computing the summary for a single variable"></a>Computing the summary for a single variable</h4><p>When factor summaries are combined with those for numerical variables (as in the earlier example), summary() gives counts for a maximum of six levels and lumps the other counts under the Other.</p>
<p>You can invoke the summary() function for a single variable as well. In this case, the summary you get for numerical variables remains as before, but for factors, you get counts for many more levels:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; summary(auto$cylinders)</span><br><span class="line">&gt; summary(auto$mpg)</span><br></pre></td></tr></table></figure>
<h4 id="Finding-the-mean-and-standard-deviation"><a href="#Finding-the-mean-and-standard-deviation" class="headerlink" title="Finding the mean and standard deviation"></a>Finding the mean and standard deviation</h4><p>Use the functions mean() and sd() as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; mean(auto$mpg)</span><br><span class="line">&gt; sd(auto$mpg)</span><br></pre></td></tr></table></figure>
<h2 id="Extracting-a-subset-of-a-dataset"><a href="#Extracting-a-subset-of-a-dataset" class="headerlink" title="Extracting a subset of a dataset"></a>Extracting a subset of a dataset</h2><p>In this recipe, we discuss two ways to subset data. The first approach uses the row and column indices/names, and the other uses the subset() function.</p>
<h3 id="Getting-ready-13"><a href="#Getting-ready-13" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the data using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<p>The same subsetting principles apply for vectors, lists, arrays, matrices, and data frames. We illustrate with data frames.</p>
<h3 id="How-to-do-it…-13"><a href="#How-to-do-it…-13" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>The following steps extract a subset of a dataset:</p>
<ol>
<li><p>Index by position. Get <code>model_year</code> and <code>car_name</code> for the first three cars:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[<span class="number">1</span>:<span class="number">3</span>, <span class="number">8</span>:<span class="number">9</span>]</span><br><span class="line">&gt; auto[<span class="number">1</span>:<span class="number">3</span>, c(<span class="number">8</span>,<span class="number">9</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Index by name. Get <code>model_year</code> and <code>car_name</code> for the first three cars:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[<span class="number">1</span>:<span class="number">3</span>,c(<span class="string">"model_year"</span>, <span class="string">"car_name"</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Retrieve all details for cars with the highest or lowest mpg, using the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[auto$mpg == max(auto$mpg) | auto$mpg == min(auto$mpg),]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get mpg and car_name for all cars with mpg &gt; 30 and cylinders == 6:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[auto$mpg&gt;<span class="number">30</span> &amp; auto$cylinders==<span class="number">6</span>, c(<span class="string">"car_name"</span>,<span class="string">"mpg"</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get mpg and car_name for all cars with mpg &gt; 30 and cylinders == 6 using partial name match for cylinders:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[auto$mpg &gt;<span class="number">30</span> &amp; auto$cyl==<span class="number">6</span>, c(<span class="string">"car_name"</span>,<span class="string">"mpg"</span>)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Using the subset() function, get mpg and car_name for all cars with mpg &gt; 30 and cylinders == 6:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; subset(auto, mpg &gt; <span class="number">30</span> &amp; cylinders == <span class="number">6</span>, select=c(<span class="string">"car_name"</span>,<span class="string">"mpg"</span>))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-13"><a href="#How-it-works…-13" class="headerlink" title="How it works…"></a>How it works…</h3><p>The first index in auto[1:3, 8:9] denotes the rows, and the second denotes the columns or variables. Instead of the column positions, we can also use the variable names. If using the variable names, enclose them in “…”.</p>
<p>If the required rows and columns are not contiguous, use a vector to indicate the needed rows and columns as in auto[c(1,3), c(3,5,7)].</p>
<p><strong>Tip</strong></p>
<p>Use column names instead of column positions, as column positions may change in the data file.</p>
<p>R uses the logical operators &amp; (and), | (or), ! (negative unary), and == (equality check).</p>
<p>The subset function returns all variables (columns) if you omit the select argument. Thus, subset(auto, mpg &gt; 30 &amp; cylinders == 6) retrieves all the cases that match the conditions mpg &gt; 30 and cylinders = 6.</p>
<p>However, while using the indices in a logical expression to select rows of a data frame, you always need to specify the variables needed or indicate all variables with a comma following the logical expression:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># incorrect</span></span><br><span class="line">&gt; auto[auto$mpg &gt; <span class="number">30</span>]</span><br><span class="line">Error <span class="keyword">in</span> `[.data.frame`(auto, auto$mpg &gt; <span class="number">30</span>) : undefined columns selected</span><br><span class="line">&gt;</span><br><span class="line">&gt; <span class="comment"># correct</span></span><br><span class="line">&gt; auto[auto$mpg &gt; <span class="number">30</span>, ]</span><br></pre></td></tr></table></figure>
<p><strong>Tip</strong></p>
<p>If we select a single variable, then subsetting returns a vector instead of a data frame.</p>
<h3 id="There’s-more…-12"><a href="#There’s-more…-12" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We mostly use the indices by name and position to subset data. Hence, we provide some additional details around using indices to subset data. The subset() function is used predominantly in cases when we need to repeatedly apply the subset operation for a set of array, list, or vector elements.</p>
<h4 id="Excluding-columns"><a href="#Excluding-columns" class="headerlink" title="Excluding columns"></a>Excluding columns</h4><p>Use the minus sign for variable positions that you want to exclude from the subset. Also, you cannot mix both positive and negative indexes in the list. Both of the following approaches are correct:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[,c(-<span class="number">1</span>,-<span class="number">9</span>)]</span><br><span class="line">&gt; auto[,-c(<span class="number">1</span>,<span class="number">9</span>)]</span><br></pre></td></tr></table></figure>
<p>However, this subsetting approach does not work while specifying variables using names. For example, we cannot use –c(“No”, “car_name”). Instead, use %in% with ! (negation) to exclude variables:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[, !names(auto) %<span class="keyword">in</span>% c(<span class="string">"No"</span>, <span class="string">"car_name"</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="Selecting-based-on-multiple-values"><a href="#Selecting-based-on-multiple-values" class="headerlink" title="Selecting based on multiple values"></a>Selecting based on multiple values</h4><p>Select all cars with mpg = 15 or mpg = 20:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[auto$mpg %<span class="keyword">in</span>% c(<span class="number">15</span>,<span class="number">20</span>),c(<span class="string">"car_name"</span>,<span class="string">"mpg"</span>)]</span><br></pre></td></tr></table></figure>
<h4 id="Selecting-using-logical-vector"><a href="#Selecting-using-logical-vector" class="headerlink" title="Selecting using logical vector"></a>Selecting using logical vector</h4><p>You can specify the cases (rows) and variables you want to retrieve using boolean vectors.</p>
<p>In the following example, R returns the first and second cases, and for each, we get the third variable alone. R returns the elements corresponding to TRUE:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto[<span class="number">1</span>:<span class="number">2</span>,c(<span class="literal">FALSE</span>,<span class="literal">FALSE</span>,<span class="literal">TRUE</span>)]</span><br></pre></td></tr></table></figure>
<p>You can use the same approach for rows also.</p>
<p>If the lengths do not match, R recycles through the boolean vector. However, it is always a good practice to match the size.</p>
<h2 id="Splitting-a-dataset"><a href="#Splitting-a-dataset" class="headerlink" title="Splitting a dataset"></a>Splitting a dataset</h2><p>When we have categorical variables, we often want to create groups corresponding to each level and to analyze each group separately to reveal some significant similarities and differences between groups.</p>
<p>The split function divides data into groups based on a factor or vector. The unsplit() function reverses the effect of split.</p>
<h3 id="Getting-ready-14"><a href="#Getting-ready-14" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the file using the read.csv command and save in the auto variable:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-14"><a href="#How-to-do-it…-14" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Split cylinders using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; carslist &lt;- split(auto, auto$cylinders)</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-14"><a href="#How-it-works…-14" class="headerlink" title="How it works…"></a>How it works…</h3><p>The split(auto, auto$cylinders) function returns a list of data frames with each data frame corresponding to the cases for a particular level of cylinders. To reference a data frame from the list, use the [ notation. Here, carslist[1] is a list of length 1 consisting of the first data frame that corresponds to three cylinder cars, and carslist[[1]] is the associated data frame for three cylinder cars.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; str(carslist[<span class="number">1</span>])</span><br><span class="line">List of <span class="number">1</span></span><br><span class="line"> $ <span class="number">3</span>:<span class="string">'data.frame'</span>: <span class="number">4</span> obs. of  <span class="number">9</span> variables:</span><br><span class="line">   ..$ No          : int [<span class="number">1</span>:<span class="number">4</span>] <span class="number">2</span> <span class="number">199</span> <span class="number">251</span> <span class="number">365</span></span><br><span class="line">   ..$ mpg         : num [<span class="number">1</span>:<span class="number">4</span>] <span class="number">19</span> <span class="number">18</span> <span class="number">23.7</span> <span class="number">21.5</span></span><br><span class="line">   ..$ cylinders   : int [<span class="number">1</span>:<span class="number">4</span>] <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line">   ..$ displacement: num [<span class="number">1</span>:<span class="number">4</span>] <span class="number">70</span> <span class="number">70</span> <span class="number">70</span> <span class="number">80</span></span><br><span class="line">   ..$ horsepower  : int [<span class="number">1</span>:<span class="number">4</span>] <span class="number">97</span> <span class="number">90</span> <span class="number">100</span> <span class="number">110</span></span><br><span class="line">   ..$ weight      : int [<span class="number">1</span>:<span class="number">4</span>] <span class="number">2330</span> <span class="number">2124</span> <span class="number">2420</span> <span class="number">2720</span></span><br><span class="line">   ..$ acceleration: num [<span class="number">1</span>:<span class="number">4</span>] <span class="number">13.5</span> <span class="number">13.5</span> <span class="number">12.5</span> <span class="number">13.5</span></span><br><span class="line">   ..$ model_year  : int [<span class="number">1</span>:<span class="number">4</span>] <span class="number">72</span> <span class="number">73</span> <span class="number">80</span> <span class="number">77</span></span><br><span class="line">   ..$ car_name    : chr [<span class="number">1</span>:<span class="number">4</span>] <span class="string">"mazda rx2 coupe"</span> <span class="string">"maxda rx3"</span> <span class="string">"mazda rx-7 gs"</span> <span class="string">"mazda rx-4"</span></span><br><span class="line"></span><br><span class="line">&gt; names(carslist[[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"No"</span>           <span class="string">"mpg"</span>          <span class="string">"cylinders"</span>    <span class="string">"displacement"</span></span><br><span class="line">[<span class="number">5</span>] <span class="string">"horsepower"</span>   <span class="string">"weight"</span>       <span class="string">"acceleration"</span> <span class="string">"model_year"</span></span><br><span class="line">[<span class="number">9</span>] <span class="string">"car_name"</span></span><br></pre></td></tr></table></figure>
<h2 id="Creating-random-data-partitions"><a href="#Creating-random-data-partitions" class="headerlink" title="Creating random data partitions"></a>Creating random data partitions</h2><p>Analysts need an unbiased evaluation of the quality of their machine learning models. To get this, they partition the available data into two parts. They use one part to build the machine learning model and retain the remaining data as “hold out” data. After building the model, they evaluate the model’s performance on the hold out data. This recipe shows you how to partition data. It separately addresses the situation when the target variable is numeric and when it is categorical. It also covers the process of creating two partitions or three.</p>
<h3 id="Getting-ready-15"><a href="#Getting-ready-15" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, make sure that the BostonHousing.csv and boston-housing-classification.csv files from the code files of this chapter are in your R working directory. You should also install the caret package using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"caret"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-15"><a href="#How-to-do-it…-15" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>You may want to develop a model using some machine learning technique (like linear regression or KNN) to predict the value of the median of a home in Boston neighborhoods using the data in the BostonHousing.csv file. The MEDV variable will serve as the target variable.</p>
<h4 id="Case-1-–-numerical-target-variable-and-two-partitions"><a href="#Case-1-–-numerical-target-variable-and-two-partitions" class="headerlink" title="Case 1 – numerical target variable and two partitions"></a>Case 1 – numerical target variable and two partitions</h4><p>To create a training partition with 80 percent of the cases and a validation partition with the rest, use the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; trg.idx &lt;- createDataPartition(bh$MEDV, p = <span class="number">0.8</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg.part &lt;- bh[trg.idx, ]</span><br><span class="line">&gt; val.part &lt;- bh[-trg.idx, ]</span><br></pre></td></tr></table></figure>
<p>After this, the trg.part and val.part variables contain the training and validation partitions, respectively.</p>
<h4 id="Case-2-–-numerical-target-variable-and-three-partitions"><a href="#Case-2-–-numerical-target-variable-and-three-partitions" class="headerlink" title="Case 2 – numerical target variable and three partitions"></a>Case 2 – numerical target variable and three partitions</h4><p>Some machine learning techniques require three partitions because they use two partitions just for building the model. Therefore, a third (test) partition contains the “hold-out” data for model evaluation.</p>
<p>Suppose we want a training partition with 70 percent of the cases, and the rest divided equally among validation and test partitions, use the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; trg.idx &lt;- createDataPartition(bh$MEDV, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg.part &lt;- bh[trg.idx, ]</span><br><span class="line">&gt; temp &lt;- bh[-trg.idx, ]</span><br><span class="line">&gt; val.idx &lt;- createDataPartition(temp$MEDV, p = <span class="number">0.5</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; val.part &lt;- temp[val.idx, ]</span><br><span class="line">&gt; test.part &lt;- temp[-val.idx, ]</span><br></pre></td></tr></table></figure>
<p>Case 3 – categorical target variable and two partitions</p>
<p>Instead of a model to predict a numerical value like MEDV, you may need to create partitions for a classification application. The boston-housing-classification.csv file has a MEDV_CAT variable that categorizes the median values into HIGH or LOW and is suitable for a classification algorithm.</p>
<p>For a 70–30 split use the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh2 &lt;- read.csv(<span class="string">"boston-housing-classification.csv"</span>)</span><br><span class="line">&gt; trg.idx &lt;- createDataPartition(bh2$MEDV_CAT, p=<span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg.part &lt;- bh2[trg.idx, ]</span><br><span class="line">&gt; val.part &lt;- bh2[-trg.idx, ]</span><br></pre></td></tr></table></figure>
<h4 id="Case-4-–-categorical-target-variable-and-three-partitions"><a href="#Case-4-–-categorical-target-variable-and-three-partitions" class="headerlink" title="Case 4 – categorical target variable and three partitions"></a>Case 4 – categorical target variable and three partitions</h4><p>For a 70–15–15 split (training, validation, test) use the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh3 &lt;- read.csv(<span class="string">"boston-housing-classification.csv"</span>)</span><br><span class="line">&gt; trg.idx &lt;- createDataPartition(bh3$MEDV_CAT, p=<span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg.part &lt;- bh3[trg.idx, ]</span><br><span class="line">&gt; temp &lt;- bh3[-trg.idx, ]</span><br><span class="line">&gt; val.idx &lt;- createDataPartition(temp$MEDV_CAT, p=<span class="number">0.5</span>,list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; val.part &lt;- temp[val.idx, ]</span><br><span class="line">&gt; test.part &lt;- temp[-val.idx, ]</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-15"><a href="#How-it-works…-15" class="headerlink" title="How it works…"></a>How it works…</h3><p>The createDataPartition() function randomly selects row indices from the array supplied as its first argument. Rather than selecting randomly from the entire data frame, it does a more intelligent sampling as we now describe.</p>
<p>If supplied with a numeric vector as the first argument, then createDataPartition() applies the random selection process by percentile groups so as to get a good sampling of rows from the entire range of the target variable. This avoids the situation that can result from a completely random sampling whereby the training partition does not have a good representation from some segments of the target variable’s whole range. By default, it considers five groups, but we can control this through the optional groups argument.</p>
<p>If supplied with a vector of factors, the function randomly samples for each value of the factor from the cases, thereby ensuring a good representation of all factor values in the training partition.</p>
<p>The list argument controls whether we want the output as a list or as a vector.</p>
<p>To avoid keeping duplicate data in both the original data frame as well as in the two data partitions, you can work with just the indices generated and refer to bh[trg.idx,] for the training partition and bh[-trg.idx,] for the validation partition.</p>
<p>When you have large data files, repeated subsetting may be inefficient and you may want to copy the data into the partitions up front.</p>
<h3 id="There’s-more…-13"><a href="#There’s-more…-13" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss some additional information on data partitioning in this section.</p>
<h4 id="Using-a-convenience-function-for-partitioning"><a href="#Using-a-convenience-function-for-partitioning" class="headerlink" title="Using a convenience function for partitioning"></a>Using a convenience function for partitioning</h4><p>Rather than typing out the detailed steps each time, you can simplify the process by creating the following functions:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rda.cb.partition2 &lt;- <span class="keyword">function</span>(ds, target.index, prob) &#123;</span><br><span class="line">  <span class="keyword">library</span>(caret)</span><br><span class="line">  train.idx &lt;- createDataPartition(y=ds[,target.index], p = prob, list = <span class="literal">FALSE</span>)</span><br><span class="line">  list(train =  ds[train.idx, ], val = ds[-train.idx, ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rda.cb.partition3 &lt;- <span class="keyword">function</span>(ds,</span><br><span class="line">             target.index, prob.train, prob.val) &#123;</span><br><span class="line">  <span class="keyword">library</span>(caret)</span><br><span class="line">  train.idx &lt;- createDataPartition(y=ds[,target.index],</span><br><span class="line">          p = prob.train, list = <span class="literal">FALSE</span>)</span><br><span class="line">  train &lt;- ds[train.idx, ]</span><br><span class="line">  temp &lt;- ds[-train.idx, ]</span><br><span class="line">  val.idx &lt;- createDataPartition(y=temp[,target.index],</span><br><span class="line">          p = prob.val/(<span class="number">1</span>-prob.train), list = <span class="literal">FALSE</span>)</span><br><span class="line">  list(train =  ds[train.idx, ],</span><br><span class="line">          val = temp[val.idx, ], test = temp[-val.idx, ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the two preceding functions in place, you can write the following single line to create two partitions (80 percent, 20 percent) of a data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dat1 &lt;- rda.cb.partition2(bh, <span class="number">14</span>, <span class="number">0.8</span>)</span><br></pre></td></tr></table></figure>
<p>You can do the following to get three partitions (70 percent, 15 percent, 15 percent):</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dat2 &lt;- rda.cb.partition3(bh, <span class="number">14</span>, <span class="number">0.7</span>, <span class="number">0.15</span>)</span><br></pre></td></tr></table></figure>
<p>The <code>rda.cb.partition2()</code> and <code>rda.cb.partition3()</code> functions return a list with two and three components, respectively. To use the training and validation partitions from dat1, you can refer to dat1$train and dat1$val. The same applies to dat2; to get the test partition from dat2, use dat2$test.</p>
<h3 id="Sampling-from-a-set-of-values"><a href="#Sampling-from-a-set-of-values" class="headerlink" title="Sampling from a set of values"></a>Sampling from a set of values</h3><p>To select a random sample of size 50 cases from a bh data frame without replacement, use the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sam.idx &lt;- sample(<span class="number">1</span>:nrow(bh), <span class="number">50</span>, replace = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Generating-standard-plots-such-as-histograms-boxplots-and-scatterplots"><a href="#Generating-standard-plots-such-as-histograms-boxplots-and-scatterplots" class="headerlink" title="Generating standard plots such as histograms, boxplots, and scatterplots"></a>Generating standard plots such as histograms, boxplots, and scatterplots</h2><p>Before even embarking on any numerical analyses, you may want to get a good idea about the data through a few quick plots. Although the base R system supports powerful graphics, we will generally turn to other plotting options like lattice and ggplot for more advanced plots. Therefore, we cover only the simplest forms of basic graphs.</p>
<h3 id="Getting-ready-16"><a href="#Getting-ready-16" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that they are available in your R environment’s working directory and run the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br><span class="line">&gt;</span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br><span class="line">&gt; <span class="keyword">attach</span>(auto)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-16"><a href="#How-to-do-it…-16" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>In this recipe, we cover histograms, boxplots, scatterplots and scatterplot matrices.</p>
<h4 id="Histograms"><a href="#Histograms" class="headerlink" title="Histograms"></a>Histograms</h4><p>Generate a histogram for acceleration:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hist(acceleration)</span><br></pre></td></tr></table></figure>
<p>R determines the various properties of the generated graph (like bin sizes, axes scales, axes titles, chart title, bar colors,…) automatically. The following diagram shows the output of the preceding command:</p>
<p><img src="img/2_6_1.jpeg" alt=""></p>
<p>You can customize everything. The following code shows some options:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hist(acceleration, col=<span class="string">"blue"</span>, xlab = <span class="string">"acceleration"</span>, main = <span class="string">"Histogram of acceleration"</span>, breaks = <span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>The histogram of acceleration can be seen in the following diagram:</p>
<p><img src="img/2_6_2.jpeg" alt=""></p>
<h4 id="Boxplots"><a href="#Boxplots" class="headerlink" title="Boxplots"></a>Boxplots</h4><p>Create a boxplot for mpg using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(mpg, xlab = <span class="string">"Miles per gallon"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_3.jpeg" alt=""></p>
<p>To generate boxplots for subsets within the whole dataset, you can use:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(mpg ~ model_year, xlab = <span class="string">"Miles per gallon"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_4.jpeg" alt=""></p>
<p>Create a boxplot of mpg by cylinders:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; boxplot(mpg ~ cylinders)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_5.jpeg" alt=""></p>
<h4 id="Scatterplots"><a href="#Scatterplots" class="headerlink" title="Scatterplots"></a>Scatterplots</h4><p>Create a scatterplot for mpg by horsepower:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(mpg ~ horsepower)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_6.jpeg" alt=""></p>
<h4 id="Scatterplot-matrices"><a href="#Scatterplot-matrices" class="headerlink" title="Scatterplot matrices"></a>Scatterplot matrices</h4><p>Create pair wise scatterplots for a set of variables:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pairs(~mpg+displacement+horsepower+weight)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_7.jpeg" alt=""></p>
<h3 id="How-it-works…-16"><a href="#How-it-works…-16" class="headerlink" title="How it works…"></a>How it works…</h3><p>Here, we describe how the preceding lines of code work.</p>
<h4 id="Histograms-1"><a href="#Histograms-1" class="headerlink" title="Histograms"></a>Histograms</h4><p>By default, the hist() function automatically determines the number of bars to display based on the data. The breaks argument controls this.</p>
<p>You can also use a palette of colors instead of a single color using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; hist(mpg, col = rainbow(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_8.jpeg" alt=""></p>
<p>The rainbow() function returns a color palette with the color spectrum broken up into the number of distinct colors specified, and the hist() function uses one color for each bar.</p>
<h4 id="Boxplots-1"><a href="#Boxplots-1" class="headerlink" title="Boxplots"></a>Boxplots</h4><p>You can either give a simple vector or a formula (like auto$mpg ~ auto$cylinders in the preceding example) as the first argument to the boxplot() function. In the latter case, it creates separate boxplots for every distinct level of the right-hand side variable.</p>
<h3 id="There’s-more…-14"><a href="#There’s-more…-14" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>You can overlay plots and color specific points differently. We show some useful options in this section.</p>
<h4 id="Overlay-a-density-plot-on-a-histogram"><a href="#Overlay-a-density-plot-on-a-histogram" class="headerlink" title="Overlay a density plot on a histogram"></a>Overlay a density plot on a histogram</h4><p>Histograms are very sensitive to the number of bins used. Kernel density plots give a smoother and more accurate picture of the distribution. Usually, we overlay a density plot on a histogram using the density() function which creates the density plot.</p>
<p>If invoked by itself, the density() function only produces the density plot. To overlay it on the histogram, we use the lines() function which does not erase the current chart and instead overlays the existing plot. Since the density plot plots relative frequencies (approximating a probability density function), we need to ensure that the histogram also shows relative frequencies. The prob=TRUE argument achieves this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hist(mpg, prob=<span class="literal">TRUE</span>)</span><br><span class="line">lines(density(mpg))</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_9.jpeg" alt=""></p>
<h4 id="Overlay-a-regression-line-on-a-scatterplot"><a href="#Overlay-a-regression-line-on-a-scatterplot" class="headerlink" title="Overlay a regression line on a scatterplot"></a>Overlay a regression line on a scatterplot</h4><p>The following code first generates the scatterplot. It then builds the regression model using lm and uses the abline() function to overlay the regression line on the existing scatterplot:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(mpg ~ horsepower)</span><br><span class="line">&gt; reg &lt;- lm(mpg ~ horsepower)</span><br><span class="line">&gt; abline(reg)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_6_10.jpeg" alt=""></p>
<h4 id="Color-specific-points-on-a-scatterplot"><a href="#Color-specific-points-on-a-scatterplot" class="headerlink" title="Color specific points on a scatterplot"></a>Color specific points on a scatterplot</h4><p>Using the following code, you can first generate the scatterplot and then color the points corresponding to different values of cylinders with different colors. Note that mpg and weight are in different orders in the plot and points function invocations. This is because in plot, we ask the system to plot mpg as a function of weight, whereas in the points function, we just supply a set of (x,y) coordinates to plot:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># first generate the empty plot</span></span><br><span class="line">&gt; <span class="comment"># to get the axes for the whole dat</span></span><br><span class="line">&gt; plot(mpg ~ horsepower, type = <span class="string">"n"</span>)</span><br><span class="line">&gt; <span class="comment"># Then plot the points in different colors</span></span><br><span class="line">&gt; with(subset(auto, cylinders == <span class="string">"8cyl"</span>), points(horsepower, mpg, col = <span class="string">"blue"</span>))</span><br><span class="line">&gt; with(subset(auto, cylinders == <span class="string">"6cyl"</span>), points(horsepower, mpg, col = <span class="string">"red"</span>))</span><br><span class="line">&gt; with(subset(auto, cylinders == <span class="string">"5cyl"</span>), points(horsepower, mpg, col = <span class="string">"yellow"</span>))</span><br><span class="line">&gt; with(subset(auto, cylinders == <span class="string">"4cyl"</span>), points(horsepower, mpg, col = <span class="string">"green"</span>))</span><br><span class="line">&gt; with(subset(auto, cylinders == <span class="string">"3cyl"</span>), points(horsepower, mpg))</span><br></pre></td></tr></table></figure>
<p>The preceding commands produce the following output:</p>
<p><img src="img/2_6_11.jpeg" alt=""></p>
<h2 id="Generating-multiple-plots-on-a-grid"><a href="#Generating-multiple-plots-on-a-grid" class="headerlink" title="Generating multiple plots on a grid"></a>Generating multiple plots on a grid</h2><p>We often want to see plots side by side for comparisons. This recipe shows how we can achieve this.</p>
<h3 id="Getting-ready-17"><a href="#Getting-ready-17" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that they are available in your R environment’s working directory. Once this is done, run the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br><span class="line">&gt; cylinders &lt;- factor(cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br><span class="line">&gt; <span class="keyword">attach</span>(auto)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-17"><a href="#How-to-do-it…-17" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>You may want to generate two side-by-side scatterplots from the data in auto-mpg.csv. Run the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># first get old graphical parameter settings</span></span><br><span class="line">&gt; old.par = par()</span><br><span class="line">&gt; <span class="comment"># create a grid of one row and two columns</span></span><br><span class="line">&gt; par(mfrow = c(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">&gt; with(auto, &#123;</span><br><span class="line">   plot(mpg ~ weight, main = <span class="string">"Weight vs. mpg"</span>)</span><br><span class="line">   plot(mpg ~ acceleration, main = <span class="string">"Acceleration vs. mpg"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"> )</span><br><span class="line">&gt; <span class="comment"># reset par back to old value so that subsequent</span></span><br><span class="line">&gt; <span class="comment"># graphic operations are unaffected by our settings</span></span><br><span class="line">&gt; par(old.par)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_7_1.jpeg" alt=""></p>
<h3 id="How-it-works…-17"><a href="#How-it-works…-17" class="headerlink" title="How it works…"></a>How it works…</h3><p>The par(mfrow = c(1,2)) function call creates a grid with one row and two columns. The subsequent invocations of the plot() function fills the charts into these grid locations row by row. Alternately, you can specify par(mfcol = …) to specify the grid. In this case, the grid is created as in the case of mfrow, but the grid cells get filled in column by column.</p>
<h4 id="Graphics-parameters"><a href="#Graphics-parameters" class="headerlink" title="Graphics parameters"></a>Graphics parameters</h4><p>In addition to creating a grid for graphics, you can use the par() function to specify numerous graphics parameters to control all aspects. Check the documentation if you need something specific.</p>
<h3 id="See-also…-2"><a href="#See-also…-2" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
</ul>
<h2 id="Selecting-a-graphics-device"><a href="#Selecting-a-graphics-device" class="headerlink" title="Selecting a graphics device"></a>Selecting a graphics device</h2><p>R can send its output to several different graphic devices to display graphics in different formats. By default, R prints to the screen. However, we can save graphs in the following file formats as well: PostScript, PDF, PNG, JPEG, Windows metafile, Windows BMP, and so on.</p>
<h3 id="Getting-ready-18"><a href="#Getting-ready-18" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that the auto-mpg.csv file is available in your R environment’s working directory and run the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br><span class="line">&gt;</span><br><span class="line">&gt; cylinders &lt;- factor(cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br><span class="line">&gt; <span class="keyword">attach</span>(auto)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-18"><a href="#How-to-do-it…-18" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To send the graphic output to the computer screen, you have to do nothing special. For other devices, you first open the device, send your graphical output to it, and then close the device to close the corresponding file.</p>
<p>To create a PostScript file use:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; postscript(file = <span class="string">"auto-scatter.ps"</span>)</span><br><span class="line">&gt; boxplot(mpg)</span><br><span class="line">&gt; dev.off()</span><br><span class="line"></span><br><span class="line">&gt; pdf(file = <span class="string">"auto-scatter.pdf"</span>)</span><br><span class="line">&gt; boxplot(mpg)</span><br><span class="line">&gt; dev.off()</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-18"><a href="#How-it-works…-18" class="headerlink" title="How it works…"></a>How it works…</h3><p>Invoking the function appropriate for the graphics device (like postscript() and pdf()) opens the file for output. The actual plotting operation writes to the device (file), and the dev.off() function closes the device (file).</p>
<h3 id="See-also…-3"><a href="#See-also…-3" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
</ul>
<h2 id="Creating-plots-with-the-lattice-package"><a href="#Creating-plots-with-the-lattice-package" class="headerlink" title="Creating plots with the lattice package"></a>Creating plots with the lattice package</h2><p>The lattice package produces Trellis plots to capture multivariate relationships in the data. Lattice plots are useful for looking at complex relationships between variables in a dataset. For example, we may want to see how y changes with x across various levels of z. Using the lattice package, we can draw histograms, boxplots, scatterplots, dot plots and so on. Both plotting and annotation are done in one single call.</p>
<h3 id="Getting-ready-19"><a href="#Getting-ready-19" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the file using the read.csv function and save in the auto variable. Convert cylinders into a factor variable:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; cyl.factor &lt;- factor(auto$cylinders,labels=c(<span class="string">"3cyl"</span>,<span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>,<span class="string">"6cyl"</span>,<span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-19"><a href="#How-to-do-it…-19" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To create plots with lattice package, follow these steps:</p>
<ol>
<li><p>Load the lattice package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(lattice)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Draw a boxplot:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bwplot(~auto$mpg|cyl.factor, main=<span class="string">"MPG by Number of Cylinders"</span>,xlab=<span class="string">"Miles per Gallon"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Draw a scatterplot:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; xyplot(mpg~weight|cyl.factor, data=auto, main=<span class="string">"Weight Vs MPG by Number of Cylinders"</span>, ylab=<span class="string">"Miles per Gallon"</span>, xlab=<span class="string">"Car Weight"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-19"><a href="#How-it-works…-19" class="headerlink" title="How it works…"></a>How it works…</h3><p>Lattice plot commands comprise the following four parts:</p>
<ul>
<li>Graph type: This can be a bwplot, xyplot, densityplot, splom, and so on</li>
<li>Formula: Variables and factor variables separated by |</li>
<li>Data: A data frame containing values</li>
<li>Annotations: These include caption, x axis label, and y axis label</li>
</ul>
<p>In the boxplot step 2, the ~auto$mpg|cyl.factor formula instructs lattice to make the plot with mpg on the x axis grouped by factors representing cylinders. Here, we have not specified any variable for the y axis. For boxplots and density plots, we need not specify the y axis. The output for boxplot resembles the following diagram:</p>
<p><img src="img/2_7_2.jpeg" alt=""></p>
<p>In the scatterplot, the xyplot function and the mpg~weight|cyl.factor formula instructs lattice to make the plot with weight on the x axis and mpg on the y axis grouped by factors representing cylinders. For xyplot, we need to provide two variables; otherwise, R will produce an error. The scatterplot output is seen as follows:</p>
<p><img src="img/2_7_3.jpeg" alt=""></p>
<h3 id="There’s-more…-15"><a href="#There’s-more…-15" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Lattice plots provide default options to bring out the relationship between multiple variables. More options can be added to these plots to enhance the graphs.</p>
<h4 id="Adding-flair-to-your-graphs"><a href="#Adding-flair-to-your-graphs" class="headerlink" title="Adding flair to your graphs"></a>Adding flair to your graphs</h4><p>By default, lattice assigns the panel height and width based on the screen device. The plots use a default color scheme. However, these can be customized to your needs.</p>
<p>You should change the color scheme of all lattice plots before executing the plot command. The color scheme affects all Trellis plots made with the lattice package:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; trellis.par.set(theme = col.whitebg())</span><br></pre></td></tr></table></figure>
<p>Panels occupy the entire output window. This can be controlled with aspect. The layout determines the number of panels on the x axis and how they are stacked. Add these to the plot function call:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bwplot(~mpg|cyl.factor, data=auto,main=<span class="string">"MPG by Number Of Cylinders"</span>, xlab=<span class="string">"Miles per Gallon"</span>,layout=c(<span class="number">2</span>,<span class="number">3</span>),aspect=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="See-also…-4"><a href="#See-also…-4" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots, and scatterplots</li>
</ul>
<h2 id="Creating-plots-with-the-ggplot2-package"><a href="#Creating-plots-with-the-ggplot2-package" class="headerlink" title="Creating plots with the ggplot2 package"></a>Creating plots with the ggplot2 package</h2><p>ggplot2 graphs are built iteratively, starting with the most basic plot. Additional layers are chained with the + sign to generate the final plot.</p>
<p>To construct a plot we need at least data, aesthetics (color, shape, and size), and <code>geoms</code> (points, lines, and smooth). The geoms determine which type of graph is drawn. Facets can be added for conditional plots.</p>
<h3 id="Getting-ready-20"><a href="#Getting-ready-20" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and copy the auto-mpg.csv file to your R working directory. Read the file using the read.csv command and save in the auto variable. Convert cylinders into a factor variable. If you have not done so already, install the ggplot2 package as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"ggplot2"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(ggplot2)</span><br><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders,labels=c(<span class="string">"3cyl"</span>,<span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>,<span class="string">"6cyl"</span>,<span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-20"><a href="#How-to-do-it…-20" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To create plots with the ggplot2 package, follow these steps:</p>
<ol>
<li><p>Draw the initial plot:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot &lt;- ggplot(auto, aes(weight, mpg))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add layers:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot + geom_point()</span><br><span class="line">&gt; plot + geom_point(alpha=<span class="number">1</span>/<span class="number">2</span>, size=<span class="number">5</span>, aes(color=factor(cylinders))) + geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">FALSE</span>, col=<span class="string">"green"</span>) + facet_grid(cylinders~.) + theme_bw(base_family = <span class="string">"Calibri"</span>, base_size = <span class="number">10</span>) + labs(x = <span class="string">"Weight"</span>) + labs(y = <span class="string">"Miles Per Gallon"</span>) + labs(title = <span class="string">"MPG Vs Weight"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-20"><a href="#How-it-works…-20" class="headerlink" title="How it works…"></a>How it works…</h3><p>Let’s start from the top and discuss some variations:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot &lt;- ggplot(auto, aes(weight, mpg))</span><br></pre></td></tr></table></figure>
<p>First, we draw the plot. At this point the graph is not printed, since we have not added layers to it. ggplot needs at least one layer to display the graph:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot + geom_point()</span><br></pre></td></tr></table></figure>
<p>This plots the points to produce the scatterplot as follows:</p>
<p><img src="img/2_8_1.jpeg" alt=""></p>
<p>We can use various arguments to control how the points appear—alpha for the intensity of the dots, color of the dots, the size and shape of the dots. We can also use the aes argument to add aesthetics to this layer and this produces the plot as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot + geom_point(alpha=<span class="number">1</span>/<span class="number">2</span>, size=<span class="number">5</span>, aes(color=factor(cylinders)))</span><br></pre></td></tr></table></figure>
<p><img src="img/2_8_2.jpeg" alt=""></p>
<p>Append the following code to the preceding command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">FALSE</span>, col=<span class="string">"green"</span>)</span><br></pre></td></tr></table></figure>
<p>Adding <code>geom_smooth</code> helps to see a pattern. The method=lm argument uses a linear model as the smoothing method. The se argument is set to TRUE by default and hence displays the confidence interval around the smoothed line. This supports aesthetics similar to geom_point. In addition, we can also set the linetype. The output obtained resembles the following diagram:</p>
<p><img src="img/2_8_3.jpeg" alt=""></p>
<p>By default, the geom_smooth function uses two different smoothing approaches based on the number of observations. If the number of observations exceeds 1000, it uses gam smoothing, loess otherwise. Given the familiarity with linear models, people mostly use the lm smoothing.</p>
<p>Append the following code to the preceding command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ facet_grid(cylinders~.)</span><br></pre></td></tr></table></figure>
<p>This adds additional dimensions to the graph using facets. We can add cylinders as a new dimension to the graph. Here, we use the simple <code>facet_grid</code> function. If we want to add more dimensions, we can use facet_wrap and specify how to wrap the rows and columns shown as follows:</p>
<p><img src="img/2_8_4.jpeg" alt=""></p>
<p>If we change to facet_grid(~.cylinders), the plots for each level of the cylinder are arranged horizontally.</p>
<p>Appending the following code adds annotations to get the final plot:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ theme_bw(base_family = <span class="string">"Calibri"</span>, base_size = <span class="number">10</span>) + labs(x = <span class="string">"Weight"</span>) + labs(y = <span class="string">"Miles Per Gallon"</span>) + labs(title = <span class="string">"MPG Vs Weight"</span>)</span><br></pre></td></tr></table></figure>
<p>The annotations added to get the final plot can be seen in the following diagram:</p>
<p><img src="img/2_8_5.jpeg" alt=""></p>
<h3 id="There’s-more…-16"><a href="#There’s-more…-16" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The best way to learn ggplot is to try out different options to see how they impact the graph. Here, we describe a few additional variations to ggplot.</p>
<h4 id="Graph-using-qplot"><a href="#Graph-using-qplot" class="headerlink" title="Graph using qplot"></a>Graph using qplot</h4><p>A simplistic version of ggplot is qplot and it uses the same ggplot2 package. qplot can also be chained with + to add additional layers in the plot. The generic form of qplot is as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qplot(x, y, data=, color=, shape=, size=, alpha=, geom=, method=, formula=, facets=, xlim=, ylim= xlab=, ylab=, main=, sub=)</span><br></pre></td></tr></table></figure>
<p>For certain types of graphs such as histograms and bar charts, we need to supply only x (and can therefore omit y):</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Boxplots of mpg by number of cylinders</span></span><br><span class="line">&gt; qplot(cylinders, mpg, data=auto, geom=c(<span class="string">"jitter"</span>), color=cylinders, fill=cylinders, main=<span class="string">"Mileage by Number of Cylinders"</span>, xlab=<span class="string">""</span>, ylab=<span class="string">"Miles per Gallon"</span>)</span><br><span class="line">&gt; <span class="comment"># Regression of mpg by weight for each type of cylinders</span></span><br><span class="line">&gt; qplot(weight, mpg, data=auto, geom=c(<span class="string">"point"</span>, <span class="string">"smooth"</span>), method=<span class="string">"lm"</span>, formula=y~x, color=cylinders, main=<span class="string">"Regression of MPG on Weight"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Condition-plots-on-continuous-numeric-variables"><a href="#Condition-plots-on-continuous-numeric-variables" class="headerlink" title="Condition plots on continuous numeric variables"></a>Condition plots on continuous numeric variables</h4><p>Normally, we condition plots on categorical variables. However, to add additional dimensions to an existing plot, you may want to incorporate a numeric variable. Although qplot will do this for us, the numerous values of the condition make the plot useless. You can make it categorical using the cut function as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Cut with desired range</span></span><br><span class="line">&gt; breakpoints &lt;- c(<span class="number">8</span>,<span class="number">13</span>,<span class="number">18</span>,<span class="number">23</span>)</span><br><span class="line">&gt; <span class="comment"># Cut using Quantile function (another approach)</span></span><br><span class="line">&gt; breakpoints &lt;- quantile(auto$acceleration, seq(<span class="number">0</span>, <span class="number">1</span>, length</span><br><span class="line">= <span class="number">4</span>), na.rm = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="comment">## create a new factor variable using the breakpoints</span></span><br><span class="line">&gt; auto$accelerate.factor &lt;- cut(auto$acceleration, breakpoints)</span><br></pre></td></tr></table></figure>
<p>Now, we can use auto$accelerate.factor in the qplot function.</p>
<h3 id="See-also…-5"><a href="#See-also…-5" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
<li>Creating plots with lattice package</li>
</ul>
<h2 id="Creating-charts-that-facilitate-comparisons"><a href="#Creating-charts-that-facilitate-comparisons" class="headerlink" title="Creating charts that facilitate comparisons"></a>Creating charts that facilitate comparisons</h2><p>In large datasets, we often gain good insights by examining how different segments behave. The similarities and differences can reveal interesting patterns. This recipe shows how to create graphs that enable such comparisons.</p>
<h3 id="Getting-ready-21"><a href="#Getting-ready-21" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the book’s files for this chapter and save the daily-bike-rentals.csv file in your R working directory. Read the data into R using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; bike &lt;- read.csv(<span class="string">"daily-bike-rentals.csv"</span>)</span><br><span class="line">&gt; bike$season &lt;- factor(bike$season, levels = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), labels = c(<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>))</span><br><span class="line">&gt; <span class="keyword">attach</span>(bike)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-21"><a href="#How-to-do-it…-21" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>We base this recipe on the task of generating histograms to facilitate the comparison of bike rentals by season.</p>
<h4 id="Using-base-plotting-system"><a href="#Using-base-plotting-system" class="headerlink" title="Using base plotting system"></a>Using base plotting system</h4><p>We first look at how to generate histograms of the count of daily bike rentals by season using R’s base plotting system:</p>
<ol>
<li><p>Set up a 2 X 2 grid for plotting histograms for the four seasons:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; par(mfrow = c(<span class="number">2</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Extract data for the seasons:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; spring &lt;- subset(bike, season == <span class="string">"Spring"</span>)$cnt</span><br><span class="line">&gt; summer &lt;- subset(bike, season == <span class="string">"Summer"</span>)$cnt</span><br><span class="line">&gt; fall &lt;- subset(bike, season == <span class="string">"Fall"</span>)$cnt</span><br><span class="line">&gt; winter &lt;- subset(bike, season == <span class="string">"Winter"</span>)$cnt</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the histogram and density for each season:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; hist(spring, prob=<span class="literal">TRUE</span>, xlab = <span class="string">"Spring daily rentals"</span>, main = <span class="string">""</span>)</span><br><span class="line">&gt; lines(density(spring))</span><br><span class="line">&gt;</span><br><span class="line">&gt; hist(summer, prob=<span class="literal">TRUE</span>, xlab = <span class="string">"Summer daily rentals"</span>, main = <span class="string">""</span>)</span><br><span class="line">&gt; lines(density(summer))</span><br><span class="line">&gt;</span><br><span class="line">&gt; hist(fall, prob=<span class="literal">TRUE</span>, xlab = <span class="string">"Fall daily rentals"</span>, main = <span class="string">""</span>)</span><br><span class="line">&gt; lines(density(fall))</span><br><span class="line">&gt;</span><br><span class="line">&gt; hist(winter, prob=<span class="literal">TRUE</span>, xlab = <span class="string">"Winter daily rentals"</span>, main = <span class="string">""</span>)</span><br><span class="line">&gt; lines(density(winter))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>You get the following output that facilitates comparisons across the seasons:</p>
<p><img src="img/2_11_1.jpeg" alt=""></p>
<h4 id="Using-ggplot2"><a href="#Using-ggplot2" class="headerlink" title="Using ggplot2"></a>Using ggplot2</h4><p>We can achieve much of the preceding results in a single command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; qplot(cnt, data = bike) + facet_wrap(~ season, nrow=<span class="number">2</span>) + geom_histogram(fill = <span class="string">"blue"</span>)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_11_2.jpeg" alt=""></p>
<p>You can also combine all four into a single histogram and show the seasonal differences through coloring:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; qplot(cnt, data = bike, fill = season)</span><br></pre></td></tr></table></figure>
<p><img src="img/2_11_3.jpeg" alt=""></p>
<h3 id="How-it-works…-21"><a href="#How-it-works…-21" class="headerlink" title="How it works…"></a>How it works…</h3><p>When you plot a single variable with qplot, you get a histogram by default. Adding facet enables you to generate one histogram per level of the chosen facet. By default, the four histograms will be arranged in a single row. Use facet_wrap to change this.</p>
<h3 id="There’s-more…-17"><a href="#There’s-more…-17" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>You can use ggplot2 to generate comparative boxplots as well.</p>
<h4 id="Creating-boxplots-with-ggplot2"><a href="#Creating-boxplots-with-ggplot2" class="headerlink" title="Creating boxplots with ggplot2"></a>Creating boxplots with ggplot2</h4><p>Instead of the default histogram, you can get a boxplot with either of the following two approaches:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; qplot(season, cnt, data = bike, geom = c(<span class="string">"boxplot"</span>), fill = season)</span><br><span class="line">&gt;</span><br><span class="line">&gt; ggplot(bike, aes(x = season, y = cnt)) + geom_boxplot()</span><br></pre></td></tr></table></figure>
<p>The preceding code produces the following output:</p>
<p><img src="img/2_11_4.jpeg" alt=""></p>
<p>The second line of the preceding code produces the following plot:</p>
<p><img src="img/2_11_5.jpeg" alt=""></p>
<h3 id="See-also…-6"><a href="#See-also…-6" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
</ul>
<h2 id="Creating-charts-that-help-visualize-a-possible-causality"><a href="#Creating-charts-that-help-visualize-a-possible-causality" class="headerlink" title="Creating charts that help visualize a possible causality"></a>Creating charts that help visualize a possible causality</h2><p>When presenting data, rather than merely present information, we usually want to present an explanation of some phenomenon. Visualizing hypothesized causality helps to communicate our ideas clearly.</p>
<h3 id="Getting-ready-22"><a href="#Getting-ready-22" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the book’s files for this chapter and save the daily-bike-rentals.csv file in your R working directory. Read the data into R as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; bike &lt;- read.csv(<span class="string">"daily-bike-rentals.csv"</span>)</span><br><span class="line">&gt; bike$season &lt;- factor(bike$season, levels = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), labels = c(<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>))</span><br><span class="line">&gt; bike$weathersit &lt;- factor(bike$weathersit, levels = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), labels = c(<span class="string">"Clear"</span>, <span class="string">"Misty/cloudy"</span>, <span class="string">"Light snow"</span>))</span><br><span class="line">&gt; <span class="keyword">attach</span>(bike)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-22"><a href="#How-to-do-it…-22" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>With the bike rentals data, you can show a hypothesized causality between the weather situation and the number of rentals by drawing boxplots of rentals under different weather conditions:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; qplot(weathersit, cnt, data = bike, geom = c(<span class="string">"boxplot"</span>), fill = weathersit)</span><br></pre></td></tr></table></figure>
<p>The preceding command produces the following output:</p>
<p><img src="img/2_12_1.jpeg" alt=""></p>
<p>If you choose to, you can overlay the actual points as well; add “jitter” to the geom argument:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; qplot(weathersit, cnt, data = bike, geom = c(<span class="string">"boxplot"</span>, <span class="string">"jitter"</span>), fill = weathersit)</span><br></pre></td></tr></table></figure>
<p>The preceding command produces the following output:</p>
<p><img src="img/2_12_2.jpeg" alt=""></p>
<h3 id="See-also…-7"><a href="#See-also…-7" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
</ul>
<h2 id="Creating-multivariate-plots"><a href="#Creating-multivariate-plots" class="headerlink" title="Creating multivariate plots"></a>Creating multivariate plots</h2><p>When exploring data, we want to get a feel for the interaction of as many variables as possible. Although our display and print media can display only two dimensions, by creatively using R’s plotting features, we can bring many more dimensions into play. In this recipe, we show you how you can bring up to five variables into play.</p>
<h3 id="Getting-ready-23"><a href="#Getting-ready-23" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Read the data from file and create factors. We also attach the data to save on keystrokes as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(ggplot2)</span><br><span class="line">&gt; bike &lt;- read.csv(<span class="string">"daily-bike-rentals.csv"</span>)</span><br><span class="line">&gt; bike$season &lt;- factor(bike$season, levels = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), labels = c(<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>))</span><br><span class="line">&gt; bike$weathersit &lt;- factor(bike$weathersit, levels = c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), labels = c(<span class="string">"Clear"</span>, <span class="string">"Misty/cloudy"</span>, <span class="string">"Light snow"</span>))</span><br><span class="line">&gt; bike$windspeed.fac &lt;- cut(bike$windspeed, breaks=<span class="number">3</span>, labels=c(<span class="string">"Low"</span>, <span class="string">"Medium"</span>, <span class="string">"High"</span>))</span><br><span class="line">&gt; bike$weekday &lt;- factor(bike$weekday, levels = c(<span class="number">0</span>:<span class="number">6</span>), labels = c(<span class="string">"Sun"</span>, <span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thur"</span>, <span class="string">"Fri"</span>, <span class="string">"Sat"</span>))</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">attach</span>(bike)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-23"><a href="#How-to-do-it…-23" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Create a multivariate plot using the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot &lt;- ggplot(bike,aes(temp,cnt))</span><br><span class="line">&gt; plot + geom_point(size=<span class="number">3</span>, aes(color=factor(windspeed.fac))) + geom_smooth(method=<span class="string">"lm"</span>, se=<span class="literal">FALSE</span>, col=<span class="string">"red"</span>) + facet_grid(weekday ~ season) + theme(legend.position=<span class="string">"bottom"</span>)</span><br></pre></td></tr></table></figure>
<p>The preceding commands produce the following output:</p>
<p><img src="img/2_13_1.jpeg" alt=""></p>
<h3 id="How-it-works…-22"><a href="#How-it-works…-22" class="headerlink" title="How it works…"></a>How it works…</h3><p>Refer to the recipe Create plots using ggplot2 earlier in this chapter.</p>
<h3 id="See-also…-8"><a href="#See-also…-8" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Generating standard plots such as histograms, boxplots and scatterplots</li>
<li>Creating plots with ggplot2 package</li>
</ul>
<hr>
<h1 id="Chapter-3-Where-Does-It-Belong-–-Classification"><a href="#Chapter-3-Where-Does-It-Belong-–-Classification" class="headerlink" title="Chapter 3. Where Does It Belong? – Classification"></a>Chapter 3. Where Does It Belong? – Classification</h1><p>In this chapter, we will cover the following recipes:</p>
<ul>
<li>Generating error/classification-confusion matrices</li>
<li>Generating ROC charts</li>
<li>Building, plotting, and evaluating – classification trees</li>
<li>Using random forest models for classification</li>
<li>Classifying using Support Vector Machine</li>
<li>Classifying using the Naïve-Bayes approach</li>
<li>Classifying using the KNN approach</li>
<li>Using neural networks for classification</li>
<li>Classifying using linear discriminant function analysis</li>
<li>Classifying using logistic regression</li>
<li>Using AdaBoost to combine classification tree models</li>
</ul>
<h2 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h2><p>Analysts often seek to classify or categorize items, for example, to predict whether a given person is a potential buyer or not. Other examples include classifying—a product as defective or not, a tax return as fraudulent or not, a customer as likely to default on a payment or not, and a credit card transaction as genuine or fraudulent. This chapter covers recipes to use R to apply several classification techniques.</p>
<h2 id="Generating-error-classification-confusion-matrices"><a href="#Generating-error-classification-confusion-matrices" class="headerlink" title="Generating error/classification-confusion matrices"></a>Generating error/classification-confusion matrices</h2><p>You might build a classification model and want to evaluate the model by comparing the model’s predictions with the actual outcomes. You will typically do this on the holdout data. Getting an idea of how the model does in training data itself is also useful, but you should never use that as an objective measure.</p>
<h3 id="Getting-ready-24"><a href="#Getting-ready-24" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do so now and ensure that the college-perf.csv file is in your R working directory. The file has data about a set of college students. The Perf variable has their college performance classified as High, Medium, or Low. The Pred variable contains a classification model’s predictions of the performance level. The following code reads the data and converts the factor levels to a meaningful order—by default R orders factors alphabetically:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; cp &lt;- read.csv(<span class="string">"college-perf.csv"</span>)</span><br><span class="line">&gt; cp$Perf &lt;- ordered(cp$Perf, levels =</span><br><span class="line">+             c(<span class="string">"Low"</span>, <span class="string">"Medium"</span>, <span class="string">"High"</span>))</span><br><span class="line"></span><br><span class="line">&gt; cp$Pred &lt;- ordered(cp$Pred, levels =</span><br><span class="line">+             c(<span class="string">"Low"</span>, <span class="string">"Medium"</span>, <span class="string">"High"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-24"><a href="#How-to-do-it…-24" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To generate error/classification-confusion matrices, follow these steps:</p>
<ol>
<li><p>First create and display a two-way table based on the actual and predicted values:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; tab &lt;- table(cp$Perf, cp$Pred,</span><br><span class="line">+             dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">&gt; tab</span><br></pre></td></tr></table></figure>
<p> This yields:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">        Predicted</span><br><span class="line">Actual    Low Medium High</span><br><span class="line">  Low    <span class="number">1150</span>     <span class="number">84</span>   <span class="number">98</span></span><br><span class="line">  Medium  <span class="number">166</span>   <span class="number">1801</span>  <span class="number">170</span></span><br><span class="line">  High     <span class="number">35</span>     <span class="number">38</span>  <span class="number">458</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Display the raw numbers as proportions or percentages. To get overall table-level proportions use:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; prop.table(tab)</span><br><span class="line"></span><br><span class="line">        Predicted</span><br><span class="line">Actual       Low  Medium    High</span><br><span class="line">  Low    <span class="number">0.28750</span> <span class="number">0.02100</span> <span class="number">0.02450</span></span><br><span class="line">  Medium <span class="number">0.04150</span> <span class="number">0.45025</span> <span class="number">0.04250</span></span><br><span class="line">  High   <span class="number">0.00875</span> <span class="number">0.00950</span> <span class="number">0.11450</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We often find it more convenient to interpret row-wise or column-wise percentages. To get row-wise percentages rounded to one decimal place, you can pass a second argument as 1:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; round(prop.table(tab, <span class="number">1</span>)*<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        Predicted</span><br><span class="line">Actual    Low Medium High</span><br><span class="line">  Low    <span class="number">86.3</span>    <span class="number">6.3</span>  <span class="number">7.4</span></span><br><span class="line">  Medium  <span class="number">7.8</span>   <span class="number">84.3</span>  <span class="number">8.0</span></span><br><span class="line">  High    <span class="number">6.6</span>    <span class="number">7.2</span> <span class="number">86.3</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>Tip</strong></p>
<p>Passing 2 as the second argument yields column-wise proportions.</p>
<h3 id="How-it-works…-23"><a href="#How-it-works…-23" class="headerlink" title="How it works…"></a>How it works…</h3><p>The table() function performs s simple two-way cross-tabulation of values. For each unique value of the first variable, it counts the occurrences of different values of the second variable. It works for numeric, factor, and character variables.</p>
<h3 id="There’s-more…-18"><a href="#There’s-more…-18" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>When dealing with more than two or three categories, seeing the error matrix as a chart could be useful to quickly assess the model’s performance within various categories.</p>
<h4 id="Visualizing-the-error-classification-confusion-matrix"><a href="#Visualizing-the-error-classification-confusion-matrix" class="headerlink" title="Visualizing the error/classification confusion matrix"></a>Visualizing the error/classification confusion matrix</h4><p>You can create a barplot using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; barplot(tab, legend = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p>The following output is the result of the preceding command:</p>
<p><img src="img/3_2_1.jpeg" alt=""></p>
<p>For a mosaicplot the following command is used:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mosaicplot(tab, main = <span class="string">"Prediction performance"</span>)</span><br></pre></td></tr></table></figure>
<p>The following output is obtained on running the command:</p>
<p><img src="img/3_2_2.jpeg" alt=""></p>
<h4 id="Comparing-the-model’s-performance-for-different-classes"><a href="#Comparing-the-model’s-performance-for-different-classes" class="headerlink" title="Comparing the model’s performance for different classes"></a>Comparing the model’s performance for different classes</h4><p>You can check whether the model’s performance on different classes differs significantly by using the summary function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; summary(tab)</span><br><span class="line"></span><br><span class="line">Number of cases <span class="keyword">in</span> table: <span class="number">4000</span></span><br><span class="line">Number of factors: <span class="number">2</span></span><br><span class="line">Test <span class="keyword">for</span> independence of all factors:</span><br><span class="line">  Chisq = <span class="number">4449</span>, df = <span class="number">4</span>, p-value = <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>The low p-value tells us that the proportions for the different classes are significantly different.</p>
<h2 id="Generating-ROC-charts"><a href="#Generating-ROC-charts" class="headerlink" title="Generating ROC charts"></a>Generating ROC charts</h2><p>When using classification techniques, we can rely on the technique to classify cases automatically. Alternately, we can rely on the technique to only generate the probabilities of cases belonging to various classes and then determine the cutoff probabilities ourselves. receiver operating characteristic (ROC) charts help with the latter approach by giving a visual representation of the true and false positives at various cutoff levels. We will use the ROCR package to generate ROC charts.</p>
<h3 id="Getting-ready-25"><a href="#Getting-ready-25" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the ROCR package, install it now. Load the data files for this chapter from the book’s website and ensure that the rocr-example-1.csv and rocr-example-2.csv files are on your R working directory.</p>
<h3 id="How-to-do-it…-25"><a href="#How-to-do-it…-25" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To generate ROC charts, follow these steps:</p>
<ol>
<li><p>Load the package ROCR:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(ROCR)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data file and take a look:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"roc-example-1.csv"</span>)</span><br><span class="line">&gt; head(dat)</span><br><span class="line"></span><br><span class="line">       prob class</span><br><span class="line"><span class="number">1</span> <span class="number">0.9917340</span>     <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">0.9768288</span>     <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">0.9763148</span>     <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">0.9601505</span>     <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">0.9351574</span>     <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">0.9335989</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the prediction object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- prediction(dat$prob, dat$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the performance object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; perf &lt;- performance(pred, <span class="string">"tpr"</span>, <span class="string">"fpr"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the chart:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(perf)</span><br><span class="line">&gt; lines( par()$usr[<span class="number">1</span>:<span class="number">2</span>], par()$usr[<span class="number">3</span>:<span class="number">4</span>] )</span><br></pre></td></tr></table></figure>
<p> The following output is obtained:</p>
<p> <img src="img/3_3_1.jpeg" alt=""></p>
</li>
<li><p>Find the cutoff values for various true positive rates. Extract the relevant data from the perf object into a data frame prob.cuts:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; prob.cuts &lt;- data.frame(cut=perf@alpha.values[[<span class="number">1</span>]], fpr=perf@x.values[[<span class="number">1</span>]], tpr=perf@y.values[[<span class="number">1</span>]])</span><br><span class="line">&gt; head(prob.cuts)</span><br><span class="line">        cut fpr        tpr</span><br><span class="line"><span class="number">1</span>       <span class="literal">Inf</span>   <span class="number">0</span> <span class="number">0.00000000</span></span><br><span class="line"><span class="number">2</span> <span class="number">0.9917340</span>   <span class="number">0</span> <span class="number">0.01851852</span></span><br><span class="line"><span class="number">3</span> <span class="number">0.9768288</span>   <span class="number">0</span> <span class="number">0.03703704</span></span><br><span class="line"><span class="number">4</span> <span class="number">0.9763148</span>   <span class="number">0</span> <span class="number">0.05555556</span></span><br><span class="line"><span class="number">5</span> <span class="number">0.9601505</span>   <span class="number">0</span> <span class="number">0.07407407</span></span><br><span class="line"><span class="number">6</span> <span class="number">0.9351574</span>   <span class="number">0</span> <span class="number">0.09259259</span></span><br><span class="line"></span><br><span class="line">&gt; tail(prob.cuts)</span><br><span class="line">           cut       fpr tpr</span><br><span class="line"><span class="number">96</span>  <span class="number">0.10426897</span> <span class="number">0.8913043</span>   <span class="number">1</span></span><br><span class="line"><span class="number">97</span>  <span class="number">0.07292866</span> <span class="number">0.9130435</span>   <span class="number">1</span></span><br><span class="line"><span class="number">98</span>  <span class="number">0.07154785</span> <span class="number">0.9347826</span>   <span class="number">1</span></span><br><span class="line"><span class="number">99</span>  <span class="number">0.04703280</span> <span class="number">0.9565217</span>   <span class="number">1</span></span><br><span class="line"><span class="number">100</span> <span class="number">0.04652589</span> <span class="number">0.9782609</span>   <span class="number">1</span></span><br><span class="line"><span class="number">101</span> <span class="number">0.00112760</span> <span class="number">1.0000000</span>   <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p> From the data frame prob.cuts, we can choose the cutoff corresponding to our desired true positive rate.</p>
</li>
</ol>
<h3 id="How-it-works…-24"><a href="#How-it-works…-24" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the package and step 2 reads in the data file.</p>
<p>Step 3 creates a prediction object based on the probabilities and the class labels passed in as arguments. In the current examples, our class labels are 0 and 1, and by default 0 becomes the “failure” class and 1 becomes the “success” class. We will see in the There’s more… section below how to handle the case of arbitrary class labels.</p>
<p>Step 4 creates a performance object based on the data from the prediction object. We indicate that we want the “true positive rate” and the “false positive rate.”</p>
<p>Step 5 plots the performance object. The plot function does not plot the diagonal line indicating the ROC threshold, and we added a second line of code to get that.</p>
<p>We generally use ROC charts to determine a good cutoff value for classification given the probabilities. Step 6 shows you how to extract from the performance object the cutoff value corresponding to each point on the plot. Armed with this, we can determine the cutoff that yields each of the true positive rates and, given a desired true positive rate, we can find the appropriate cutoff probability.</p>
<h3 id="There’s-more…-19"><a href="#There’s-more…-19" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss in the following a few more of ROCR’s important features.</p>
<h4 id="Using-arbitrary-class-labels"><a href="#Using-arbitrary-class-labels" class="headerlink" title="Using arbitrary class labels"></a>Using arbitrary class labels</h4><p>Unlike in the preceding example, we might have arbitrary class labels for success and failure. The rocr-example-2.csv file has buyer and non-buyer as the class labels, with buyer representing the success case.</p>
<p>In this case, we need to explicitly indicate the failure and success labels by passing in a vector with the failure case as the first element:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"roc-example-2.csv"</span>)</span><br><span class="line">&gt; pred &lt;- prediction(dat$prob, dat$class, label.ordering = c(<span class="string">"non-buyer"</span>, <span class="string">"buyer"</span>))</span><br><span class="line">&gt; perf &lt;- performance(pred, <span class="string">"tpr"</span>, <span class="string">"fpr"</span>)</span><br><span class="line">&gt; plot(perf)</span><br><span class="line">&gt; lines( par()$usr[<span class="number">1</span>:<span class="number">2</span>], par()$usr[<span class="number">3</span>:<span class="number">4</span>] )</span><br></pre></td></tr></table></figure>
<h2 id="Building-plotting-and-evaluating-–-classification-trees"><a href="#Building-plotting-and-evaluating-–-classification-trees" class="headerlink" title="Building, plotting, and evaluating – classification trees"></a>Building, plotting, and evaluating – classification trees</h2><p>You can use a couple of R packages to build classification trees. Under the hood, they all do the same thing.</p>
<h3 id="Getting-ready-26"><a href="#Getting-ready-26" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you do not already have the rpart, rpart.plot, and caret packages, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory.</p>
<h3 id="How-to-do-it…-26"><a href="#How-to-do-it…-26" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>This recipe shows you how you can use the rpart package to build classification trees and the rpart.plot package to generate nice-looking tree diagrams:</p>
<ol>
<li><p>Load the rpart, rpart.plot, and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(rpart)</span><br><span class="line">&gt; <span class="keyword">library</span>(rpart.plot)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create data partitions. We need two partitions—training and validation. Rather than copying the data into the partitions, we will just keep the indices of the cases that represent the training cases and subset as and when needed:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; train.idx &lt;- createDataPartition(bn$class, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the tree:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- rpart(class ~ ., data = bn[train.idx, ], method = <span class="string">"class"</span>, control = rpart.control(minsplit = <span class="number">20</span>, cp = <span class="number">0.01</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the text output (your result could differ if you did not set the random seed as in step 3):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod</span><br><span class="line">n= <span class="number">961</span></span><br><span class="line"></span><br><span class="line">node), split, n, loss, yval, (yprob)</span><br><span class="line">      * denotes terminal node</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>) root <span class="number">961</span> <span class="number">423</span> <span class="number">0</span> (<span class="number">0.55983351</span> <span class="number">0.44016649</span>)</span><br><span class="line">   <span class="number">2</span>) variance&gt;=<span class="number">0.321235</span> <span class="number">511</span>  <span class="number">52</span> <span class="number">0</span> (<span class="number">0.89823875</span> <span class="number">0.10176125</span>)</span><br><span class="line">     <span class="number">4</span>) curtosis&gt;=-<span class="number">4.3856</span> <span class="number">482</span>  <span class="number">29</span> <span class="number">0</span> (<span class="number">0.93983402</span> <span class="number">0.06016598</span>)</span><br><span class="line">       <span class="number">8</span>) variance&gt;=<span class="number">0.92009</span> <span class="number">413</span>  <span class="number">10</span> <span class="number">0</span> (<span class="number">0.97578692</span> <span class="number">0.02421308</span>) *</span><br><span class="line">       <span class="number">9</span>) variance&lt; <span class="number">0.92009</span> <span class="number">69</span>  <span class="number">19</span> <span class="number">0</span> (<span class="number">0.72463768</span> <span class="number">0.27536232</span>)</span><br><span class="line">        <span class="number">18</span>) entropy&lt; -<span class="number">0.167685</span> <span class="number">52</span>   <span class="number">6</span> <span class="number">0</span> (<span class="number">0.88461538</span> <span class="number">0.11538462</span>) *</span><br><span class="line">        <span class="number">19</span>) entropy&gt;=-<span class="number">0.167685</span> <span class="number">17</span>   <span class="number">4</span> <span class="number">1</span> (<span class="number">0.23529412</span> <span class="number">0.76470588</span>) *</span><br><span class="line">     <span class="number">5</span>) curtosis&lt; -<span class="number">4.3856</span> <span class="number">29</span>   <span class="number">6</span> <span class="number">1</span> (<span class="number">0.20689655</span> <span class="number">0.79310345</span>)</span><br><span class="line">      <span class="number">10</span>) variance&gt;=<span class="number">2.3098</span> <span class="number">7</span>   <span class="number">1</span> <span class="number">0</span> (<span class="number">0.85714286</span> <span class="number">0.14285714</span>) *</span><br><span class="line">      <span class="number">11</span>) variance&lt; <span class="number">2.3098</span> <span class="number">22</span>   <span class="number">0</span> <span class="number">1</span> (<span class="number">0.00000000</span> <span class="number">1.00000000</span>) *</span><br><span class="line">   <span class="number">3</span>) variance&lt; <span class="number">0.321235</span> <span class="number">450</span>  <span class="number">79</span> <span class="number">1</span> (<span class="number">0.17555556</span> <span class="number">0.82444444</span>)</span><br><span class="line">     <span class="number">6</span>) skew&gt;=<span class="number">6.83375</span> <span class="number">76</span>  <span class="number">18</span> <span class="number">0</span> (<span class="number">0.76315789</span> <span class="number">0.23684211</span>)</span><br><span class="line">      <span class="number">12</span>) variance&gt;=-<span class="number">3.4449</span> <span class="number">57</span>   <span class="number">0</span> <span class="number">0</span> (<span class="number">1.00000000</span> <span class="number">0.00000000</span>) *</span><br><span class="line">      <span class="number">13</span>) variance&lt; -<span class="number">3.4449</span> <span class="number">19</span>   <span class="number">1</span> <span class="number">1</span> (<span class="number">0.05263158</span> <span class="number">0.94736842</span>) *</span><br><span class="line">     <span class="number">7</span>) skew&lt; <span class="number">6.83375</span> <span class="number">374</span>  <span class="number">21</span> <span class="number">1</span> (<span class="number">0.05614973</span> <span class="number">0.94385027</span>)</span><br><span class="line">      <span class="number">14</span>) curtosis&gt;=<span class="number">6.21865</span> <span class="number">106</span>  <span class="number">16</span> <span class="number">1</span> (<span class="number">0.15094340</span> <span class="number">0.84905660</span>)</span><br><span class="line">       <span class="number">28</span>) skew&gt;=-<span class="number">3.16705</span> <span class="number">16</span>   <span class="number">0</span> <span class="number">0</span> (<span class="number">1.00000000</span> <span class="number">0.00000000</span>) *</span><br><span class="line">        <span class="number">29</span>) skew&lt; -<span class="number">3.16705</span> <span class="number">90</span>   <span class="number">0</span> <span class="number">1</span> (<span class="number">0.00000000</span> <span class="number">1.00000000</span>) *</span><br><span class="line">      <span class="number">15</span>) curtosis&lt; <span class="number">6.21865</span> <span class="number">268</span>   <span class="number">5</span> <span class="number">1</span> (<span class="number">0.01865672</span> <span class="number">0.98134328</span>) *</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate a diagram of the tree (your tree might differ if you did not set the random seed as in step 3):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prp(mod, type = <span class="number">2</span>, extra = <span class="number">104</span>, nn = <span class="literal">TRUE</span>, fallen.leaves = <span class="literal">TRUE</span>, faclen = <span class="number">4</span>, varlen = <span class="number">8</span>, shadow.col = <span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<p> The following output is obtained as a result of the preceding command:</p>
<p> <img src="img/3_4_1.jpeg" alt=""></p>
</li>
<li><p>Prune the tree:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># First see the cptable</span></span><br><span class="line">&gt; <span class="comment"># !!Note!!: Your table can be different because of the</span></span><br><span class="line">&gt; <span class="comment"># random aspect in cross-validation</span></span><br><span class="line">&gt; mod$cptable</span><br><span class="line"></span><br><span class="line">          CP nsplit  rel error    xerror       xstd</span><br><span class="line"><span class="number">1</span> <span class="number">0.69030733</span>      <span class="number">0</span> <span class="number">1.00000000</span> <span class="number">1.0000000</span> <span class="number">0.03637971</span></span><br><span class="line"><span class="number">2</span> <span class="number">0.09456265</span>      <span class="number">1</span> <span class="number">0.30969267</span> <span class="number">0.3262411</span> <span class="number">0.02570025</span></span><br><span class="line"><span class="number">3</span> <span class="number">0.04018913</span>      <span class="number">2</span> <span class="number">0.21513002</span> <span class="number">0.2387707</span> <span class="number">0.02247542</span></span><br><span class="line"><span class="number">4</span> <span class="number">0.01891253</span>      <span class="number">4</span> <span class="number">0.13475177</span> <span class="number">0.1607565</span> <span class="number">0.01879222</span></span><br><span class="line"><span class="number">5</span> <span class="number">0.01182033</span>      <span class="number">6</span> <span class="number">0.09692671</span> <span class="number">0.1347518</span> <span class="number">0.01731090</span></span><br><span class="line"><span class="number">6</span> <span class="number">0.01063830</span>      <span class="number">7</span> <span class="number">0.08510638</span> <span class="number">0.1323877</span> <span class="number">0.01716786</span></span><br><span class="line"><span class="number">7</span> <span class="number">0.01000000</span>      <span class="number">9</span> <span class="number">0.06382979</span> <span class="number">0.1276596</span> <span class="number">0.01687712</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Choose CP value as the highest value whose</span></span><br><span class="line">&gt; <span class="comment"># xerror is not greater than minimum xerror + xstd</span></span><br><span class="line">&gt; <span class="comment"># With the above data that happens to be</span></span><br><span class="line">&gt; <span class="comment"># the fifth one, 0.01182033</span></span><br><span class="line">&gt; <span class="comment"># Your values could be different because of random</span></span><br><span class="line">&gt; <span class="comment"># sampling</span></span><br><span class="line">&gt; mod.pruned = prune(mod, mod$cptable[<span class="number">5</span>, <span class="string">"CP"</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the pruned tree (your tree will look different):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prp(mod.pruned, type = <span class="number">2</span>, extra = <span class="number">104</span>, nn = <span class="literal">TRUE</span>, fallen.leaves = <span class="literal">TRUE</span>, faclen = <span class="number">4</span>, varlen = <span class="number">8</span>, shadow.col = <span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/3_4_2.jpeg" alt=""></p>
</li>
<li><p>Use the pruned model to predict for the validation partition (note the minus sign before train.idx to consider the cases in the validation partition):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred.pruned &lt;- predict(mod, bn[-train.idx,], type = <span class="string">"class"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate the error/classification-confusion matrix:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bn[-train.idx,]$class, pred.pruned, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">213</span>  <span class="number">11</span></span><br><span class="line">     <span class="number">1</span>  <span class="number">11</span> <span class="number">176</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-25"><a href="#How-it-works…-25" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 to 3 load the packages, read the data, and identify the cases in the training partition, respectively. See the recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for more details on partitioning. In step 3, we set the random seed so that your results should match those that we display.</p>
<p>Step 4 builds the classification tree model:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- rpart(class ~ ., data = bn[train.idx, ], method = <span class="string">"class"</span>, control = rpart.control(minsplit = <span class="number">20</span>, cp = <span class="number">0.01</span>))</span><br></pre></td></tr></table></figure>
<p>The <code>rpart()</code> function builds the tree model based on the following:</p>
<ul>
<li>Formula specifying the dependent and independent variables</li>
<li>Dataset to use</li>
<li>A specification through method=”class” that we want to build a classification tree (as opposed to a regression tree)</li>
<li>Control parameters specified through the control = rpart.control() setting; here we have indicated that the tree should only consider nodes with at least 20 cases for splitting and use the complexity parameter value of 0.01—these two values represent the defaults and we have included these just for illustration</li>
</ul>
<p>Step 5 produces a textual display of the results. Step 6 uses the prp() function of the rpart.plot package to produce a nice-looking plot of the tree:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prp(mod, type = <span class="number">2</span>, extra = <span class="number">104</span>, nn = <span class="literal">TRUE</span>, fallen.leaves = <span class="literal">TRUE</span>, faclen = <span class="number">4</span>, varlen = <span class="number">8</span>, shadow.col = <span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>use type=2 to get a plot with every node labeled and with the split label below the node</li>
<li>use extra=4 to display the probability of each class in the node (conditioned on the node and hence summing to 1); add 100 (hence extra=104) to display the number of cases in the node as a percentage of the total number of cases</li>
<li>use nn = TRUE to display the node numbers; the root node is node number 1 and node n has child nodes numbered 2n and 2n+1</li>
<li>use fallen.leaves=TRUE to display all leaf nodes at the bottom of the graph</li>
<li>use faclen to abbreviate class names in the nodes to a specific maximum length</li>
<li>use varlen to abbreviate variable names</li>
<li>use shadow.col to specify the color of the shadow that each node casts</li>
</ul>
<p>Step 7 prunes the tree to reduce the chance that the model too closely models the training data—that is, to reduce overfitting. Within this step, we first look at the complexity table generated through cross-validation. We then use the table to determine the cutoff complexity level as the largest xerror (cross-validation error) value that is not greater than one standard deviation above the minimum cross-validation error.</p>
<p>Steps 8 through 10 display the pruned tree; use the pruned tree to predict the class for the validation partition and then generate the error matrix for the validation partition.</p>
<h3 id="There’s-more…-20"><a href="#There’s-more…-20" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss in the following an important variation on predictions using classification trees.</p>
<h3 id="Computing-raw-probabilities"><a href="#Computing-raw-probabilities" class="headerlink" title="Computing raw probabilities"></a>Computing raw probabilities</h3><p>We can generate probabilities in place of classifications by specifying type=”prob”:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  pred.pruned &lt;- predict(mod, bn[-train.idx,], type = <span class="string">"prob"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Create-the-ROC-Chart"><a href="#Create-the-ROC-Chart" class="headerlink" title="Create the ROC Chart"></a>Create the ROC Chart</h4><p>Using the preceding raw probabilities and the class labels, we can generate a ROC chart. See the recipe Generating ROC charts earlier in this chapter for more details:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- prediction(pred.pruned[,<span class="number">2</span>], bn[-train.idx,<span class="string">"class"</span>])</span><br><span class="line">&gt; perf &lt;- performance(pred, <span class="string">"tpr"</span>, <span class="string">"fpr"</span>)</span><br><span class="line">&gt; plot(perf)</span><br></pre></td></tr></table></figure>
<p><img src="img/3_4_3.jpeg" alt=""></p>
<h3 id="See-also"><a href="#See-also" class="headerlink" title="See also"></a>See also</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Generating error/classification-confusion matrices in this chapter.</li>
<li>Building regression trees in Chapter 4, Give Me a Number – Regression</li>
</ul>
<h2 id="Using-random-forest-models-for-classification"><a href="#Using-random-forest-models-for-classification" class="headerlink" title="Using random forest models for classification"></a>Using random forest models for classification</h2><p>The randomForest package can help you to easily apply the very powerful (but computationally intensive) random forest classification technique.</p>
<h3 id="Getting-ready-27"><a href="#Getting-ready-27" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the randomForest and caret packages, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory. We will build a random forest model to predict class based on the other variables.</p>
<h3 id="How-to-do-it…-27"><a href="#How-to-do-it…-27" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use Random Forest models for classification, follow these steps:</p>
<ol>
<li><p>Load the randomForest and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(randomForest)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data and convert the response variable to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br><span class="line">&gt; bn$class &lt;- factor(bn$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Select a subset of the data for building the model. In Random Forests, we do not need to actually partition the data for model evaluation since the tree construction process has partitioning inherent in every step. However, we keep aside some of the data here just to illustrate the process of using the model for prediction and also to get an idea of the model’s performance:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; sub.idx &lt;- createDataPartition(bn$class, p=<span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the random forest model (since it builds many classification trees, the following command can take a lot of processing time on even moderately large data):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- randomForest(x = bn[sub.idx,<span class="number">1</span>:<span class="number">4</span>], y=bn[sub.idx,<span class="number">5</span>],ntree=<span class="number">500</span>, keep.forest=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the model to predict for cases that we set aside in step 3:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  pred &lt;- predict(mod, bn[-sub.idx,])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the error matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bn[-sub.idx,<span class="string">"class"</span>], pred, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">     Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">227</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">1</span>   <span class="number">1</span> <span class="number">182</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-26"><a href="#How-it-works…-26" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 loads the necessary packages and step 2 reads the data and converts the response variable to a factor.</p>
<p>Step 3 sets aside some of the data for later use. Strictly speaking, we do not have to partition the data for random forests because, while building each tree, the method sets aside some of the cases for cross-validation. However, we set aside some of the cases just to illustrate the process of using the model for prediction. (We set the random seed to enable you to match your results with those we display.)</p>
<p>Step 4 uses the randomForest function to build the model. Since the predictor variables are in the first four variables of the data frame and since we want to use only the selected subset for model building, we specify x= bn[sub.idx,1:4]. Since the target variable is in the fifth column, we specify y= bn[sub.idx,5]. We specify the number of trees to build in the forest through the ntree argument (the default value is 500).</p>
<p>Step 5 illustrates how to predict using the model.</p>
<p>Step 6 uses the predictions and the actual values to generate an error matrix.</p>
<p><strong>Tip</strong></p>
<p>The model that the randomForest function produces does not keep information about the trees and hence we cannot use the model for predicting future cases. To force the model to keep the generated forest, specify keep.forest=TRUE.</p>
<h3 id="There’s-more…-21"><a href="#There’s-more…-21" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss in the following a few prominent options.</p>
<h4 id="Computing-raw-probabilities-1"><a href="#Computing-raw-probabilities-1" class="headerlink" title="Computing raw probabilities"></a>Computing raw probabilities</h4><p>As with simple classification tree models, we can generate probabilities in place of classifications by specifying type=”prob” – the default value “response” generates classifications:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  probs &lt;- predict(mod, bn[-sub.idx,], type = <span class="string">"prob"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Generating-the-ROC-chart"><a href="#Generating-the-ROC-chart" class="headerlink" title="Generating the ROC chart"></a>Generating the ROC chart</h4><p>Using the preceding probabilities, we can generate the ROC chart. For details, refer to Generating ROC charts earlier in this chapter:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- prediction(probs[,<span class="number">2</span>], bn[-sub.idx,<span class="string">"class"</span>])</span><br><span class="line">&gt; perf &lt;- performance(pred, <span class="string">"tpr"</span>, <span class="string">"fpr"</span>)</span><br><span class="line">&gt; plot(perf)</span><br></pre></td></tr></table></figure>
<p>The following output is the result of preceding command:</p>
<p><img src="img/3_5_1.jpeg" alt=""></p>
<h4 id="Specifying-cutoffs-for-classification"><a href="#Specifying-cutoffs-for-classification" class="headerlink" title="Specifying cutoffs for classification"></a>Specifying cutoffs for classification</h4><p>Instead of using the default rule of simple majority for classification, we can specify cutoff probabilities as a vector of length equal to the number of classes. The proportion of the ratio of votes to the cutoff determines the winning class. We can specify this both at the time of tree construction and while using the model for predictions.</p>
<h3 id="See-also…-9"><a href="#See-also…-9" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Generating error/classification-confusion matrices in this chapter</li>
<li>Building Random Forest models for regression in Chapter 4, Give Me a Number – Regression</li>
</ul>
<h2 id="Classifying-using-Support-Vector-Machine"><a href="#Classifying-using-Support-Vector-Machine" class="headerlink" title="Classifying using Support Vector Machine"></a>Classifying using Support Vector Machine</h2><p>The e1071 package can help you to easily apply the very powerful Support Vector Machine (SVM) classification technique.</p>
<h3 id="Getting-ready-28"><a href="#Getting-ready-28" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the e1071 and caret packages, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory. We will build an SVM model to predict class based on the other variables.</p>
<h3 id="How-to-do-it…-28"><a href="#How-to-do-it…-28" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To classify using SVM, follow these steps:</p>
<ol>
<li><p>Load the e1071 and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(e1071)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the outcome variable class to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn$class &lt;- factor(bn$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bn$class, p=<span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- svm(class ~ ., data = bn[t.idx,])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check model performance on training data by generating an error/classification-confusion matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bn[t.idx,<span class="string">"class"</span>], fitted(mod), dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">534</span>   <span class="number">0</span></span><br><span class="line">     <span class="number">1</span>   <span class="number">0</span> <span class="number">427</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Check model performance on the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(mod, bn[-t.idx,])</span><br><span class="line">&gt; table(bn[-t.idx, <span class="string">"class"</span>], pred, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">228</span>   <span class="number">0</span></span><br><span class="line">     <span class="number">1</span>   <span class="number">0</span> <span class="number">183</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the model on the training partition. Our data has more than two predictors, but we can only show two in the plot. We have selected skew and variance:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(mod, data=bn[t.idx,], skew ~ variance)</span><br></pre></td></tr></table></figure>
<p> The following plot is the output of the preceding command:</p>
<p> <img src="img/3_5_2.jpeg" alt=""></p>
</li>
<li><p>Plot the model on the validation partition. Our data has more than two predictors, but we can only show two in the plot. We have selected skew and variance:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(mod, data=bn[-t.idx,], skew ~ variance)</span><br></pre></td></tr></table></figure>
<p> The follow plot is the result of the preceding command:</p>
<p> <img src="img/3_5_3.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-27"><a href="#How-it-works…-27" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the necessary packages.</p>
<p>Step 2 reads the data.</p>
<p>Step 3 converts the outcome variable class to a factor.</p>
<p>Step 4 identifies the cases in the training partition (we set the random seed to enable you to match your results with ours).</p>
<p>Step 5 builds the SVM classification model. The svm function determines the type of model (classification or regression) based on the nature of the outcome variable. When the outcome variable is a factor, svm builds a classification model. At a minimum, we need to pass the model formula and the dataset to use as arguments. (Alternately, we can pass the outcome variable and the predictor variables separately as the x and y arguments).</p>
<p>Step 6 uses the resulting svm object mod containing the model to create an error/classification-confusion matrix. The svm model retains the fitted values on the training partition, and hence we do not need to go through the step of creating the predictions. We access the fitted values through fitted(mod). Refer to the recipe Generating error/classification-confusion matrices in this chapter for details on the table function.</p>
<p>Step 7 generates the model’s predictions for the validation partition by using the predict function. We pass as arguments the model and the data for which we need predictions. It then uses these predictions to generate the associated error/classification-confusion matrix.</p>
<p>Steps 8 and 9 use the plot function to plot the model’s results. We pass as arguments the model and the data for which we need the plot. If the data has only two predictors, we can get the complete picture from such a plot. However, our example has four predictors and we have chosen two of them for the plot.</p>
<h3 id="There’s-more…-22"><a href="#There’s-more…-22" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The svm function has several additional arguments through which we can control its behavior.</p>
<h4 id="Controlling-scaling-of-variables"><a href="#Controlling-scaling-of-variables" class="headerlink" title="Controlling scaling of variables"></a>Controlling scaling of variables</h4><p>By default, svm scales all the variables (predictor and outcome) to zero mean and unit variance before building a model as this generally produces better results. We can use the scale argument—a logical vector—to control this. If the length of the vector is 1, then it is recycled as many times as needed.</p>
<h4 id="Determining-the-type-of-SVM-model"><a href="#Determining-the-type-of-SVM-model" class="headerlink" title="Determining the type of SVM model"></a>Determining the type of SVM model</h4><p>By default, when the outcome variable is a factor, svm performs classification. When the outcome is numeric, it performs regression. We can override the default or select other options through these values for type:</p>
<ul>
<li>type = C-classification</li>
<li>type = nu-classification</li>
<li>type = one-classification</li>
<li>type = eps-regression</li>
<li>type = nu-regression</li>
</ul>
<h4 id="Assigning-weights-to-the-classes"><a href="#Assigning-weights-to-the-classes" class="headerlink" title="Assigning weights to the classes"></a>Assigning weights to the classes</h4><p>In cases where the sizes of the classes are highly skewed, the larger class could dominate. To balance this, we might want to weight the classes differently from the default equal weighting. We can use the class.weights argument for this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- svm(class ~ ., data = bn[t.idx,], class.weights=c(<span class="string">"0"</span>=<span class="number">0.3</span>, <span class="string">"1"</span>=<span class="number">0.7</span> ))</span><br></pre></td></tr></table></figure>
<h3 id="See-also…-10"><a href="#See-also…-10" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Generating error/classification-confusion matrices in this chapter</li>
</ul>
<h2 id="Classifying-using-the-Naive-Bayes-approach"><a href="#Classifying-using-the-Naive-Bayes-approach" class="headerlink" title="Classifying using the Naïve Bayes approach"></a>Classifying using the Naïve Bayes approach</h2><p>The e1071 package contains the naiveBayes function for the Naïve Bayes classification.</p>
<h3 id="Getting-ready-29"><a href="#Getting-ready-29" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you do not already have the e1071 and caret packages, install them now. Download the data files for this chapter from the book’s website and place the electronics-purchase.csv file in your R working directory. Naïve Bayes requires all the variables to be categorical. So, if needed, you should first convert all variables accordingly—refer to the recipe Binning numerical data in Chapter 1, Acquire and Prepare the Ingredients – Your Data.</p>
<h3 id="How-to-do-it…-29"><a href="#How-to-do-it…-29" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To classify using the Naïve Bayes method, follow these steps:</p>
<ol>
<li><p>Load the e1071 and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(e1071)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ep &lt;- read.csv(<span class="string">"electronics-purchase.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; train.idx &lt;- createDataPartition(ep$Purchase, p = <span class="number">0.67</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; epmod &lt;- naiveBayes(Purchase ~ . , data = ep[train.idx,])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Look at the model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; epmod</span><br></pre></td></tr></table></figure>
</li>
<li><p>Predict for each case of the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(epmod, ep[-train.idx,])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate and view the error matrix/classification confusion matrix for the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; tab &lt;- table(ep[-train.idx,]$Purchase, pred, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">&gt; tab</span><br><span class="line">      Predicted</span><br><span class="line">Actual No Yes</span><br><span class="line">   No   <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">   Yes  <span class="number">0</span>   <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-28"><a href="#How-it-works…-28" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the required packages, step 2 reads the data, and step 3 identifies the rows in the training partition (we set the random seed to enable you to match your results with ours).</p>
<p>Step 4 builds the model using the naiveBayes() function and passing the formula and the training partition as the arguments. Step 5 displays the conditional probabilities that the naiveBayes() function generates for use in making predictions.</p>
<p>Step 6 generates the model predictions for the validation partition and step 7 builds the error matrix as follows:</p>
<p><img src="img/3_5_4.jpeg" alt=""></p>
<p>Step 6 generates the predictions for each case of the validation partition using the predict() function and passing the model and the validation partition as arguments. Step 8 generates the error or classification confusion matrix using the table() function.</p>
<h3 id="See-also…-11"><a href="#See-also…-11" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
</ul>
<h2 id="Classifying-using-the-KNN-approach"><a href="#Classifying-using-the-KNN-approach" class="headerlink" title="Classifying using the KNN approach"></a>Classifying using the KNN approach</h2><p>The class package contains the knn function for KNN classification.</p>
<h3 id="Getting-ready-30"><a href="#Getting-ready-30" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the class and caret packages, install them now. Download the data files for this chapter from the book’s website and place the vacation-trip-classification.csv file in your R working directory. KNN requires all the independent/predictor variables to be numeric, and the dependent variable or target to be categorical. So, if needed, you should first convert variables accordingly—refer to the recipes Creating dummies for categorical variables and Binning numerical data in Chapter 1, Acquire and Prepare the Ingredients – Your Data.</p>
<h3 id="How-to-do-it…-30"><a href="#How-to-do-it…-30" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To classify using the K-Nearest Neighbours method, follow the steps below,</p>
<ol>
<li><p>Load the class and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(class)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vac &lt;- read.csv(<span class="string">"vacation-trip-classification.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Standardize the predictor variables Income and Family_size:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; vac$Income.z &lt;- scale(vac$Income)</span><br><span class="line">&gt; vac$Family_size.z &lt;- scale(vac$Family_size)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data. You need three partitions for KNN:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; train.idx &lt;- createDataPartition(vac$Result, p = <span class="number">0.5</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; train &lt;- vac[train.idx, ]</span><br><span class="line">&gt; temp &lt;- vac[-train.idx, ]</span><br><span class="line">&gt; val.idx &lt;- createDataPartition(temp$Result, p = <span class="number">0.5</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; val &lt;- temp[val.idx, ]</span><br><span class="line">&gt; test &lt;- temp[-val.idx, ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions for validation cases with k=1:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred1 &lt;- knn(,train[<span class="number">4</span>:<span class="number">5</span>], val[,<span class="number">4</span>:<span class="number">5</span>], train[,<span class="number">3</span>], <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate an error matrix for k=1:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; errmat1 &lt;- table(val$Result, pred1, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Repeat the preceding process for many values of k and choose the best value for k. Look under the following There’s more… section for a way to automate this process.</p>
</li>
<li><p>Use that value of k to generate predictions and the error matrix for the cases in the test partition (in the following code, we assume that k=1 was preferred):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred.test &lt;- knn(,train[<span class="number">4</span>:<span class="number">5</span>], test[,<span class="number">4</span>:<span class="number">5</span>], train[,<span class="number">3</span>], <span class="number">1</span>)</span><br><span class="line">&gt; errmat.test = table(test$Result, pred.test, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-29"><a href="#How-it-works…-29" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 to 3 load the necessary packages and read the data file.</p>
<p>Step 4 creates three partitions (50 %, 25 %, and 25 %). We set the random seed to enable you to match your results with those we display. Refer to the recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for information on data partitioning.</p>
<p>Step 5 uses the knn function to generate predictions with k=1. It uses only the standardized values of the predictor variables and hence specifies train[,4:5] and val[,4:5].</p>
<p>Step 6 generates the error matrix for k=1.</p>
<h3 id="There’s-more…-23"><a href="#There’s-more…-23" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We now turn to some other ways in which you can use KNN classifications.</p>
<h4 id="Automating-the-process-of-running-KNN-for-many-k-values"><a href="#Automating-the-process-of-running-KNN-for-many-k-values" class="headerlink" title="Automating the process of running KNN for many k values"></a>Automating the process of running KNN for many k values</h4><p>The following convenience function helps to free you from the drudgery of repeatedly running nearly identical commands to run KNN for various values of k:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">knn.automate &lt;- <span class="keyword">function</span> (trg_predictors, val_predictors, trg_target, val_target, start_k, end_k)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (k <span class="keyword">in</span> start_k:end_k) &#123;</span><br><span class="line">    pred &lt;- knn(trg_predictors, val_predictors,</span><br><span class="line">                               trg_target, k)</span><br><span class="line">    tab &lt;- table(val_target, pred, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">    cat(paste(<span class="string">"Error matrix for k="</span>, k,<span class="string">"\n"</span>))</span><br><span class="line">    cat(<span class="string">"==========================\n"</span>)</span><br><span class="line">    print(tab)</span><br><span class="line">    cat(<span class="string">"--------------------------\n\n\n"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the preceding function in place, you can use the following to run knn for k=1 through k=7 for the example in the main recipe:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; knn.automate(train[,<span class="number">4</span>:<span class="number">5</span>], val[,<span class="number">4</span>:<span class="number">5</span>], train[,<span class="number">3</span>], val[,<span class="number">3</span>], <span class="number">1</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Using-KNN-to-compute-raw-probabilities-instead-of-classifications"><a href="#Using-KNN-to-compute-raw-probabilities-instead-of-classifications" class="headerlink" title="Using KNN to compute raw probabilities instead of classifications"></a>Using KNN to compute raw probabilities instead of classifications</h4><p>When we use KNN to classify cases, the underlying algorithm uses a simple majority vote to determine the class. In such a case, we implicitly consider all errors to be equally important. However, in situations with asymmetric costs—where we are prepared to make one kind of error more readily than another—we might not want to use a simple majority vote to determine the class. Instead, we might want to get the raw probabilities (proportions) for each class and choose a cutoff probability for classification. For example, it might be 10 times costlier to classify a buyer as a non-buyer than to classify a non-buyer as a buyer. In such cases, we might accept a probability far lower than 0.5 to classify a case as buyer, whereas a simple majority would require a probability slightly greater than 0.5.</p>
<p>To compute raw probabilities instead of classifications, use the prob=TRUE argument. For example:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred5 &lt;- knn(train[<span class="number">4</span>:<span class="number">5</span>], val[,<span class="number">4</span>:<span class="number">5</span>], train[,<span class="number">3</span>], <span class="number">5</span>, prob=<span class="literal">TRUE</span>)</span><br><span class="line">&gt; pred5</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.0000000</span> <span class="number">0.8000000</span> <span class="number">1.0000000</span> <span class="number">0.6000000</span> <span class="number">0.8000000</span></span><br><span class="line">[<span class="number">6</span>] <span class="number">0.6000000</span> <span class="number">0.6000000</span> <span class="number">0.8333333</span> <span class="number">0.6000000</span> <span class="number">0.8333333</span></span><br><span class="line">Levels: Buyer Non-buyer</span><br></pre></td></tr></table></figure>
<h2 id="Using-neural-networks-for-classification"><a href="#Using-neural-networks-for-classification" class="headerlink" title="Using neural networks for classification"></a>Using neural networks for classification</h2><p>The nnet package contains the nnet function for classification using neural networks.</p>
<h3 id="Getting-ready-31"><a href="#Getting-ready-31" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the nnet and caret packages, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory. We will use class as our target or outcome variable, and all the remaining variables as predictors. Using Neural Networks requires all the independent/predictor variables to be numeric and the dependent variable or outcomes to be 0-1. However, the nnet function does all the work of generating dummies (contrasts) and correctly handles categorical outcome variables.</p>
<h3 id="How-to-do-it…-31"><a href="#How-to-do-it…-31" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use Neural networks for classification, follow these steps:</p>
<ol>
<li><p>Load the nnet and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(nnet)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the outcome variable class to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn$class &lt;- factor(bn$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data. The predictor variables are already numeric and the outcome variable class is already 0-1, so we do not have to do any data preparation. Refer to Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for details on how the following command works:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; train.idx &lt;- createDataPartition(bn$class, p=<span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the neural network model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- nnet(class ~., data=bn[train.idx,],size=<span class="number">3</span>,maxit=<span class="number">10000</span>,decay=<span class="number">.001</span>, rang = <span class="number">0.05</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use model to predict for validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(mod, newdata=bn[-train.idx,], type=<span class="string">"class"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build and display the error/classification-confusion matrix on the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bn[-train.idx,]$class, pred)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-30"><a href="#How-it-works…-30" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 loads the packages needed and step 2 reads the data.</p>
<p>Step 3 converts the outcome variable class into a factor. For nnet to perform classification, we need the outcome variable to be a factor. If you have predictor variables that are really categorical but have numeric values, convert them to factors so that nnet can treat them appropriately. Since we have only numeric predictor variables, we need not do anything for the predictor variables.</p>
<p>Step 4 partitions the data. See Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for more details on this step.</p>
<p>Step 5 builds the neural network model. We pass the formula and the dataset as the first two arguments:</p>
<ul>
<li>The size argument specifies the number of units in the internal layer (nnet works with just one hidden layer). One rule of thumb is to set the number of units in the hidden layer close to the mean of the number of units in the input and output layers. Higher values can give slightly better results at the expense of computation time.</li>
<li>maxit specifies the maximum number of iterations to perform to try for convergence. The algorithm stops if convergence is achieved earlier. If not, it stops after maxit iterations.</li>
<li>decay controls overfitting.</li>
</ul>
<p>Step 6 uses the model to generate predictions for the validation partition. We specified type = “class” to generate classifications.</p>
<p>Step 7 generates the error/classification-confusion matrix.</p>
<h3 id="There’s-more…-24"><a href="#There’s-more…-24" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss in the following some ideas for exercising greater control over the model building and prediction steps.</p>
<h4 id="Exercising-greater-control-over-nnet"><a href="#Exercising-greater-control-over-nnet" class="headerlink" title="Exercising greater control over nnet"></a>Exercising greater control over nnet</h4><p>Use the following additional options:</p>
<ul>
<li>na.action: By default, any missing values cause the function to fail. You can specify na.action = na.omit to exclude cases with any missing values.</li>
<li>Use skip = TRUE to add skip level direct connections from input nodes to the output nodes.</li>
<li>Use the rang argument to specify the range for the initial random weights as [-rang, rang]; if the input values are large, select rang such that rang*(max|variable|) is close to 1.</li>
</ul>
<h4 id="Generating-raw-probabilities"><a href="#Generating-raw-probabilities" class="headerlink" title="Generating raw probabilities"></a>Generating raw probabilities</h4><p>Use the type = “raw” option to generate raw probabilities:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(mod, newdata=bn[-train.idx,] type=<span class="string">"raw"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Classifying-using-linear-discriminant-function-analysis"><a href="#Classifying-using-linear-discriminant-function-analysis" class="headerlink" title="Classifying using linear discriminant function analysis"></a>Classifying using linear discriminant function analysis</h2><p>The MASS package contains the lda function for classification using linear discriminant function analysis.</p>
<h3 id="Getting-ready-32"><a href="#Getting-ready-32" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the MASS and caret packages, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory. We will use class as our target or outcome variable, and all the remaining variables as predictors.</p>
<h3 id="How-to-do-it…-32"><a href="#How-to-do-it…-32" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To classify using linear discriminant function analysis, follow these steps:</p>
<ol>
<li><p>Load the MASS and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(MASS)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the outcome variable class to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn$class &lt;- factor(bn$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data. The predictor variables are already numeric and the outcome variable class is already 0-1, so we do not have to do any data preparation. Refer to Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for details on how the following command works:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bn$class, p = <span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the Linear Discriminant Function model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ldamod &lt;- lda(bn[t.idx, <span class="number">1</span>:<span class="number">4</span>], bn[t.idx, <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Check how the model performs on the training partition (your results could differ because of random partitioning):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn[t.idx,<span class="string">"Pred"</span>] &lt;- predict(ldamod, bn[t.idx, <span class="number">1</span>:<span class="number">4</span>])$class</span><br><span class="line">&gt; table(bn[t.idx, <span class="string">"class"</span>], bn[t.idx, <span class="string">"Pred"</span>], dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">511</span>  <span class="number">23</span></span><br><span class="line">     <span class="number">1</span>   <span class="number">0</span> <span class="number">427</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions on the validation partition and check performance (your results could differ):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn[-t.idx,<span class="string">"Pred"</span>] &lt;- predict(ldamod, bn[-t.idx, <span class="number">1</span>:<span class="number">4</span>])$class</span><br><span class="line">&gt; table(bn[-t.idx, <span class="string">"class"</span>], bn[-t.idx, <span class="string">"Pred"</span>], dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">219</span>   <span class="number">9</span></span><br><span class="line">     <span class="number">1</span>   <span class="number">0</span> <span class="number">183</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-31"><a href="#How-it-works…-31" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the MASS and caret packages and step 2 reads in the data.</p>
<p>Step 3 converts our outcome variable into a factor.</p>
<p>Step 4 partitions the data. We set the random seed to enable you to match your results with those we display.</p>
<p>Step 5 builds the linear discriminant function model. We pass the predictors as the first argument, and the outcome values as the second argument to the lda function. We can also supply the details as a formula—see the following There’s more… section.</p>
<p>Step 6 uses the predict function to generate the predictions for the training partition. We pass the model and the predictor variables. The class component of the returned object from the predict function contains the predicted class values. We then use the table function to generate a two-way cross-table.</p>
<p>Step 7 evaluates the model on the validation partition by repeating the preceding two steps on that partition.</p>
<h3 id="There’s-more…-25"><a href="#There’s-more…-25" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The lda function has several optional arguments and we have shown the most commonly used ones earlier.</p>
<h4 id="Using-the-formula-interface-for-lda"><a href="#Using-the-formula-interface-for-lda" class="headerlink" title="Using the formula interface for lda"></a>Using the formula interface for lda</h4><p>Instead of specifying the predictors and outcome as two separate arguments, we could have written the preceding step 5 as:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ldamod &lt;- lda(class ~ ., data = bn[t.idx,])</span><br></pre></td></tr></table></figure>
<h3 id="See-also-…"><a href="#See-also-…" class="headerlink" title="See also …"></a>See also …</h3><p>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</p>
<h2 id="Classifying-using-logistic-regression"><a href="#Classifying-using-logistic-regression" class="headerlink" title="Classifying using logistic regression"></a>Classifying using logistic regression</h2><p>The stats package contains the glm function for classification using logistic regression.</p>
<h3 id="Getting-ready-33"><a href="#Getting-ready-33" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the caret package, install it now. Download the data files for this chapter from the book’s website and place the boston-housing-logistic.csv file in your R working directory. We will use CLASS as our target or outcome variable, and all the remaining variables as predictors. Our outcome variable has values of 0 or 1, with 0 representing neighborhoods with “Low” median home values and 1 representing neighborhoods with “High” median home values. Logistic regression requires all the independent/predictor variables to be numeric, and the dependent variable or outcome to be categorical and binary. However, the glm function does all the work of generating dummies (contrasts) for categorical variables.</p>
<h3 id="How-to-do-it…-33"><a href="#How-to-do-it…-33" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To classify using logistic regression, follow these steps:</p>
<ol>
<li><p>Load the caret package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"boston-housing-logistic.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the outcome variable class to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh$CLASS &lt;- factor(bh$CLASS, levels = c(<span class="number">0</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data. The predictor variables are already numeric and the outcome variable CLASS is already 0-1, so we do not have to do any data preparation. Refer to the recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis, for details on how the following command works:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; train.idx &lt;- createDataPartition(bh$CLASS, p=<span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the logistic regression model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; logit &lt;- glm(CLASS~., data = bh[train.idx,], family=binomial)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine the model (your results could differ because of random partitioning):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    &gt; summary(logit)</span><br><span class="line">     Call:</span><br><span class="line">    glm(formula = CLASS ~ ., family = binomial, data = bh[train.idx,</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">    Deviance Residuals:</span><br><span class="line">        Min       1Q   Median       3Q      Max</span><br><span class="line">-<span class="number">2.2629</span>  -<span class="number">0.3431</span>   <span class="number">0.0603</span>   <span class="number">0.3251</span>   <span class="number">3.3310</span></span><br><span class="line"></span><br><span class="line">    Coefficients:</span><br><span class="line">                  Estimate Std. Error z value Pr(&gt;|z|)</span><br><span class="line">    (Intercept)  <span class="number">33.452508</span>   <span class="number">4.947892</span>   <span class="number">6.761</span> <span class="number">1.37e-11</span> ***</span><br><span class="line">    NOX         -<span class="number">31.377153</span>   <span class="number">6.355135</span>  -<span class="number">4.937</span> <span class="number">7.92e-07</span> ***</span><br><span class="line">    DIS          -<span class="number">0.634391</span>   <span class="number">0.196799</span>  -<span class="number">3.224</span>  <span class="number">0.00127</span> **</span><br><span class="line">    RAD           <span class="number">0.259893</span>   <span class="number">0.087275</span>   <span class="number">2.978</span>  <span class="number">0.00290</span> **</span><br><span class="line">    TAX          -<span class="number">0.007966</span>   <span class="number">0.004476</span>  -<span class="number">1.780</span>  <span class="number">0.07513</span> .</span><br><span class="line">    PTRATIO      -<span class="number">0.827576</span>   <span class="number">0.138782</span>  -<span class="number">5.963</span> <span class="number">2.47e-09</span> ***</span><br><span class="line">    B             <span class="number">0.006798</span>   <span class="number">0.003070</span>   <span class="number">2.214</span>  <span class="number">0.02680</span> *</span><br><span class="line"></span><br><span class="line">    Si--------------------------gnif. codes:  <span class="number">0</span> <span class="string">'\*\*\*'</span> <span class="number">0.001</span> <span class="string">'\*\*'</span> <span class="number">0.01</span> <span class="string">'\*'</span> <span class="number">0.05</span> <span class="string">'.'</span> <span class="number">0.1</span> <span class="string">' '</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    (Dispersion parameter <span class="keyword">for</span> binomial family taken to be <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        Null deviance: <span class="number">353.03</span>  on <span class="number">254</span>  degrees of freedom</span><br><span class="line">    Residual deviance: <span class="number">135.08</span>  on <span class="number">248</span>  degrees of freedom</span><br><span class="line">    AIC: <span class="number">149.08</span></span><br><span class="line"></span><br><span class="line">    Number of Fisher Scoring iterations: <span class="number">6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the probabilities of “success” for cases in the validation partition and store them in a variable called PROB_SUCC:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh[-train.idx,<span class="string">"PROB_SUCC"</span>] &lt;- predict(logit, newdata = bh[-train.idx,], type=<span class="string">"response"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Classify the cases using a cutoff probability of 0.5:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh[-train.idx,<span class="string">"PRED_50"</span>] &lt;- ifelse(bh[-train.idx, <span class="string">"PROB_SUCC"</span>]&gt;= <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate the error/classification-confusion matrix (your results could differ):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bh[-train.idx, <span class="string">"CLASS"</span>], bh[-train.idx, <span class="string">"PRED_50"</span>], dnn=c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br><span class="line">      Predicted</span><br><span class="line">Actual  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">     <span class="number">0</span> <span class="number">42</span>  <span class="number">9</span></span><br><span class="line">     <span class="number">1</span> <span class="number">10</span> <span class="number">47</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-32"><a href="#How-it-works…-32" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 loads the caret package and step 2 reads the data file.</p>
<p>Step 3 converts the outcome variable to a factor. When the outcome variable is a factor, the glm function treats the first factor level as failure and the rest as “success.” In the present case, we wanted it to treat “0” as failure and “1” as success. To force 0 to be the first level (and hence “failure”) we specified levels = c(0,1).</p>
<p>Step 4 creates the data partition, (we set the random seed to enable you to match your results with those we display).</p>
<p>Step 5 builds the logistic regression model, and stores it in the logit variable. Note that we have specified the data to be only the cases in the training partition.</p>
<p>Step 6 displays important information about the model. The Deviance Residuals: section gives us an idea of the spread of the deviation of the log odds and not of the probability. The coefficients section shows us that all the coefficients used are statistically significant.</p>
<p>Step 7 uses logit, our logistic regression model, to generate probabilities for the cases in the validation partition. There is no direct function to make actual classifications using the model. This is why we first generate the probabilities by specifying type = “response”.</p>
<p>Step 8 uses a cutoff probability of 0.5 to classify the cases. You can use a different value depending on the relative costs of misclassification for the different classes.</p>
<p>Step 9 generates the error/classification-confusion matrix for the preceding classification.</p>
<h2 id="Using-AdaBoost-to-combine-classification-tree-models"><a href="#Using-AdaBoost-to-combine-classification-tree-models" class="headerlink" title="Using AdaBoost to combine classification tree models"></a>Using AdaBoost to combine classification tree models</h2><p>R has several libraries that implement boosting where we combine many relatively inaccurate models to get a much more accurate model. The ada package provides boosting functionality on top of classification trees.</p>
<h3 id="Getting-ready-34"><a href="#Getting-ready-34" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the ada and caret package, install them now. Download the data files for this chapter from the book’s website and place the banknote-authentication.csv file in your R working directory. We will use class as our target or outcome variable, and all the remaining variables as predictors.</p>
<h3 id="How-to-do-it…-34"><a href="#How-to-do-it…-34" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use AdaBoost for combining classification tree models, follow these steps:</p>
<ol>
<li><p>Load the caret and ada packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br><span class="line">&gt; <span class="keyword">library</span>(ada)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"banknote-authentication.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the outcome variable class to a factor:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn$class &lt;- factor(bn$class)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create partitions:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bn$class, p=<span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create an rpart.control object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cont &lt;- rpart.control()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- ada(class ~ ., data = bn[t.idx,], iter=<span class="number">50</span>, loss=<span class="string">"e"</span>, type=<span class="string">"discrete"</span>, control = cont)</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the model results—among other things, they show the error/classification-confusion matrix on the training partition (your results could differ because of random partitioning):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod</span><br><span class="line"></span><br><span class="line"> Call:</span><br><span class="line">ada(class ~ ., data = bn[t.idx, ], iter = <span class="number">50</span>, loss = <span class="string">"e"</span>, type = <span class="string">"discrete"</span>,</span><br><span class="line">    control = cont)</span><br><span class="line"></span><br><span class="line">Loss: exponential Method: discrete   Iteration: <span class="number">50</span></span><br><span class="line"></span><br><span class="line">Final Confusion Matrix <span class="keyword">for</span> Data:</span><br><span class="line">          Final Prediction</span><br><span class="line">True value   <span class="number">0</span>   <span class="number">1</span></span><br><span class="line">         <span class="number">0</span> <span class="number">534</span>   <span class="number">0</span></span><br><span class="line">         <span class="number">1</span>   <span class="number">0</span> <span class="number">427</span></span><br><span class="line"></span><br><span class="line">Train Error: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Out-Of-Bag Error:  <span class="number">0.002</span>  iteration= <span class="number">49</span></span><br><span class="line"></span><br><span class="line">Additional Estimates of number of iterations:</span><br><span class="line"></span><br><span class="line">train.err1 train.kap1</span><br><span class="line">        <span class="number">33</span>         <span class="number">33</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions on the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(mod, newdata = bn[-t.idx,], type = <span class="string">"vector"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the error/classification-confusion matrix on the validation partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; table(bn[-t.idx, <span class="string">"class"</span>], pred, dnn = c(<span class="string">"Actual"</span>, <span class="string">"Predicted"</span>))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-33"><a href="#How-it-works…-33" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the necessary caret and ada packages.</p>
<p>Step 2 reads in the data.</p>
<p>Step 3 converts the outcome variable class to a factor because we are applying a classification method.</p>
<p>Step 4 creates the partitions (we set the random seed to enable you to match your results with those we display).</p>
<p>The ada function uses the rpart function to generate many classification trees. To do this, it needs us to supply an rpart.control object. Step 5 creates a default rpart.control() object.</p>
<p>Step 6 builds the AdaBoost model. We pass the formula and the data frame for which we want to build the model and enter type = “discrete” to specify classification as opposed to regression. In addition, we also specify the number of boosting iterations and loss=”e” for boosting under exponential loss.</p>
<p>Step 7 displays the model.</p>
<p>Step 8 builds the predictions on the validation partition and then step 9 builds the error/classification-confusion matrix.</p>
<hr>
<h1 id="Chapter-4-Give-Me-a-Number-–-Regression"><a href="#Chapter-4-Give-Me-a-Number-–-Regression" class="headerlink" title="Chapter 4. Give Me a Number – Regression"></a>Chapter 4. Give Me a Number – Regression</h1><p>In this chapter, you will cover:</p>
<ul>
<li>Computing the root mean squared error</li>
<li>Building KNN models for regression</li>
<li>Performing linear regression</li>
<li>Performing variable selection in linear regression</li>
<li>Building regression trees</li>
<li>Building random forest models for regression</li>
<li>Using neural networks for regression</li>
<li>Performing k-fold cross-validation</li>
<li>Performing leave-one-out-cross-validation</li>
</ul>
<h2 id="Introduction-3"><a href="#Introduction-3" class="headerlink" title="Introduction"></a>Introduction</h2><p>In many situations, data analysts seek to make numerical predictions and use regression techniques to do so. Some examples can be the future sales of a product, the amount of deposits that a bank will receive during the next month, the number of copies that a particular book will sell, and the expected selling price for a used car. This chapter covers recipes to use R to apply several regression techniques.</p>
<h2 id="Computing-the-root-mean-squared-error"><a href="#Computing-the-root-mean-squared-error" class="headerlink" title="Computing the root mean squared error"></a>Computing the root mean squared error</h2><p>You may build a regression model and want to evaluate the model by comparing the model’s predictions with the actual outcomes. You will generally evaluate a model’s performance on the training data, but will rely on the model’s performance on the hold out data to get an objective measure.</p>
<h3 id="Getting-ready-35"><a href="#Getting-ready-35" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do so now and ensure that the rmse.csv file is in your R working directory. The file has data about a set of actual prices and the predicted values from some regression method. We will compute the root mean squared (RMS) error of these predictions.</p>
<h3 id="How-to-do-it…-35"><a href="#How-to-do-it…-35" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>When using any regression technique, you will be able to generate predictions. This recipe shows you how to calculate the RMS error given the predicted and actual numerical values of the outcome variable:</p>
<ol>
<li><p>Compute the RMS error as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; dat &lt;- read.csv(<span class="string">"rmse-example.csv"</span>)</span><br><span class="line">&gt; rmse &lt;- sqrt(mean((dat$price-dat$pred)^<span class="number">2</span>))</span><br><span class="line">&gt; rmse</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">2.934995</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the results and show the 45 degree line:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(dat$price, dat$pred, xlab = <span class="string">"Actual"</span>, ylab = <span class="string">"Predicted"</span>)</span><br><span class="line">&gt; abline(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p> The following output is obtained as a reult of the preceding command:</p>
<p> <img src="img/4_2_1.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-34"><a href="#How-it-works…-34" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 computes the RMS error as defined—the square root of the mean squared errors. The dat$price – dat$pred expression computes the vector of errors, and the code surrounding it computes the average of the squared errors and then finds the square root.</p>
<p>Step 2 generates the standard scatterplot and then adds on the 45 degree line.</p>
<h3 id="There’s-more…-26"><a href="#There’s-more…-26" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Since we compute RMS errors quite often, the following may be useful.</p>
<h4 id="Using-a-convenience-function-to-compute-the-RMS-error"><a href="#Using-a-convenience-function-to-compute-the-RMS-error" class="headerlink" title="Using a convenience function to compute the RMS error"></a>Using a convenience function to compute the RMS error</h4><p>The following function may be handy when we need to compute the RMS error:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdacb.rmse &lt;- <span class="keyword">function</span>(actual, predicted) &#123;</span><br><span class="line">  <span class="keyword">return</span> (sqrt(mean((actual-predicted)^<span class="number">2</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Armed with the function, we can compute the RMS error as:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rmse &lt;- rdacb.rmse(dat$price, dat$pred)</span><br></pre></td></tr></table></figure>
<h2 id="Building-KNN-models-for-regression"><a href="#Building-KNN-models-for-regression" class="headerlink" title="Building KNN models for regression"></a>Building KNN models for regression</h2><p>The FNN package provides the necessary functions to apply the KNN technique for regression. In this recipe, we look at the use of the knn.reg function to build the model and then the process of predicting with the model as well. We also show some additional convenience mechanisms to make the process easier.</p>
<h3 id="Getting-ready-36"><a href="#Getting-ready-36" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the FNN, dummies, caret, and scales packages if you do not already have them installed. If you have not already downloaded the data files for this chapter, do so now and ensure that the education.csv file is in R working directory. The file has data about several school districts in the US. The following table describes the variables:</p>
<p>|Variable|Meaning|<br>|:=——|——-|<br>|state|US state code|<br>|region|Region of the country (1 = NE, …)|<br>|urban|Number of residents per thousand residing in urban areas in 1970|<br>|income|Per-capita personal income in 1973|<br>|under18|Number of residents per thousand under 18 years of age in 1974|<br>|expense|Per capita expenditure on public education in a state, projected for 1975|</p>
<p>We will build a knn model to predict expense based on all other predictors except state.</p>
<h3 id="How-to-do-it…-36"><a href="#How-to-do-it…-36" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To build KNN models for regressions, follow these steps:</p>
<ol>
<li><p>Load the dummies, FNN, scales, and caret packages as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(dummies)</span><br><span class="line">&gt; <span class="keyword">library</span>(FNN)</span><br><span class="line">&gt; <span class="keyword">library</span>(scales)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; educ &lt;- read.csv(<span class="string">"education.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate dummies for the categorical variable region and add them to educ as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dums &lt;- dummy(educ$region, sep=<span class="string">"_"</span>)</span><br><span class="line">&gt; educ &lt;- cbind(educ, dums)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Because KNN performs distance computations, we should either rescale or standardize the predictors. In the present example, we have three numeric predictors and a categorical predictor in the form of three dummy variables. Standardizing dummy variables is tricky, and hence we will scale the numeric ones to [0, 1] and leave the dummies alone because they are already in the 0-1 range:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; educ$urban.s &lt;- rescale(educ$urban)</span><br><span class="line">&gt; educ$income.s &lt;- rescale(educ$income)</span><br><span class="line">&gt; educ$under18.s &lt;- rescale(educ$under18)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create three partitions (because we are creating random partitions, your results can differ) as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(educ$expense, p = <span class="number">0.6</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg &lt;- educ[t.idx,]</span><br><span class="line">&gt; rest &lt;- educ[-t.idx,]</span><br><span class="line">&gt; set.seed(<span class="number">2000</span>)</span><br><span class="line">&gt; v.idx &lt;- createDataPartition(rest$expense, p=<span class="number">0.5</span>, list=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; val &lt;- rest[v.idx,]</span><br><span class="line">&gt; test &lt;- rest[-v.idx,]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the model for several values of k. In the following code, we show how to compute the RMS error from scratch. You can also use the convenience rdacb.rmse function, which was shown in the recipe Computing the root mean squared error earlier in this chapter:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># for k=1</span></span><br><span class="line">&gt; res1 &lt;- knn.reg(trg[, <span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], <span class="number">1</span>, algorithm=<span class="string">"brute"</span>)</span><br><span class="line">&gt; rmse1 = sqrt(mean((res1$pred-val[,<span class="number">6</span>])^<span class="number">2</span>))</span><br><span class="line">&gt; rmse1</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">59.66909</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Alternately you could use the following to</span></span><br><span class="line">&gt; <span class="comment"># compute the RMS error. See the recipe</span></span><br><span class="line">&gt; <span class="comment"># "Compute the Root Mean Squared error" earlier</span></span><br><span class="line">&gt; <span class="comment"># in this chapter</span></span><br><span class="line">&gt; rmse1 = rdacb.rmse(res1$pred, val[,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># for k=2</span></span><br><span class="line">&gt; res2 &lt;- knn.reg(trg[, <span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], <span class="number">2</span>, algorithm=<span class="string">"brute"</span>)</span><br><span class="line">&gt; rmse2 = sqrt(mean((res2$pred-val[,<span class="number">6</span>])^<span class="number">2</span>))</span><br><span class="line">&gt; rmse2</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">38.09002</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># for k=3</span></span><br><span class="line">&gt; res3 &lt;- knn.reg(trg[, <span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], <span class="number">3</span>, algorithm=<span class="string">"brute"</span>)</span><br><span class="line">&gt; rmse3 = sqrt(mean((res3$pred-val[,<span class="number">6</span>])^<span class="number">2</span>))</span><br><span class="line">&gt; rmse3</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">44.21224</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># for k=4</span></span><br><span class="line">&gt; res4 &lt;- knn.reg(trg[, <span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], <span class="number">4</span>, algorithm=<span class="string">"brute"</span>)</span><br><span class="line">&gt; rmse4 = sqrt(mean((res4$pred-val[,<span class="number">6</span>])^<span class="number">2</span>))</span><br><span class="line">&gt; rmse4</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">51.66557</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We obtained the lowest RMS error for k=2. Evaluate the model on the test partition as follows:</p>
 <figure class="highlight plain"><figcaption><span>res.test <- knn.reg(trg[,="" 7:12],="" test[,7:12],="" trg[,6],="" 2,="" algorithm="brute" )<="" span=""></-></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; rmse.test = sqrt(mean((res.test$pred-test[,6])^2))</span><br><span class="line">rmse.test</span><br><span class="line"></span><br><span class="line">[1] 35.05442</span><br></pre></td></tr></table></figure>
<p> We obtain a much lower RMS error on the test partition than on the validation partition. Of course, this cannot be trusted too much since our dataset was so small.</p>
</li>
</ol>
<h3 id="How-it-works…-35"><a href="#How-it-works…-35" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the required packages and step 2 reads the data.</p>
<p>Since KNN requires all the predictors to be numeric, step 3 uses the dummy function from the dummies package to generate dummies for the categorical variable region and then adds the resulting dummy variables to the educ data frame.</p>
<p>Step 4 scales the numeric predictor variables to the [0,1] range using the rescale function from the scales package. Standardizing the numerical predictors will be another option, but standardizing dummy variables will be tricky. Some analysts standardize numerical predictors and leave the dummy variables as they are. However, for consistency, we choose to have all of our predictors in the [0,1] range. Since the dummies are already in that range, we rescale only the other predictors.</p>
<p>Step 5 creates the three partitions that KNN requires. We set the random seed to enable you to match your results with those that we display. See recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for more details. Since we have only 50 cases in our dataset, we have chosen to partition it roughly into 60 %, 20 %, and 20 %. Instead of creating three partitions, we can manage with two and have the model building process use “leave one out” cross-validation. We discuss this under the There’s more… section.</p>
<p>Step 6 builds the models for k=1 through k=4. We use only three of the four dummy variables. It invokes the knn.reg function and passes the following as arguments:</p>
<ul>
<li>Training predictors.</li>
<li>Validation predictors.</li>
<li>Outcome variable in the training partition.</li>
<li>Value for k.</li>
<li>The algorithm to use for distance computations. We specified brute to use the brute-force method.</li>
</ul>
<p><strong>Tip</strong></p>
<p>If the dataset is large, one of the other options <code>kd_tree</code> or <code>cover_tree</code> may run faster.</p>
<p>Step 6 has highly repetitive code and we show a convenience function under the There’s more… section to get all the results using a single command.</p>
<p>The model resulting from the call has several components. To compute the RMS error, we have used the pred component, which contains the predicted values.</p>
<p>Step 7 repeats the process for the test partition.</p>
<h3 id="There’s-more…-27"><a href="#There’s-more…-27" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Here we discuss some variations in running KNN.</p>
<h4 id="Running-KNN-with-cross-validation-in-place-of-validation-partition"><a href="#Running-KNN-with-cross-validation-in-place-of-validation-partition" class="headerlink" title="Running KNN with cross-validation in place of validation partition"></a>Running KNN with cross-validation in place of validation partition</h4><p>We used three partitions in the preceding code. A different approach will be to use two partitions. In this case, knn.reg will use “leave one out” cross-validation and predict for each case of the training partition itself. To use this mode, we pass only the training partition as argument and leave the other partition as NULL. After performing steps 1 through 4 from the main recipe, do the following:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; t.idx &lt;- createDataPartition(educ$expense, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg &lt;- educ[t.idx,]</span><br><span class="line">&gt; val &lt;- educ[-t.idx,]</span><br><span class="line">&gt; res1 &lt;- knn.reg(trg[,<span class="number">7</span>:<span class="number">12</span>], test = <span class="literal">NULL</span>, y = trg[,<span class="number">6</span>], k=<span class="number">2</span>, algorithm=<span class="string">"brute"</span>)</span><br><span class="line">&gt; <span class="comment"># When run in this mode, the result object contains</span></span><br><span class="line">&gt; <span class="comment"># the residuals which we can use to compute rmse</span></span><br><span class="line">&gt; rmse &lt;- sqrt(mean(res1$residuals^<span class="number">2</span>))</span><br><span class="line">&gt; <span class="comment"># and so on for other values of k</span></span><br></pre></td></tr></table></figure>
<h4 id="Using-a-convenience-function-to-run-KNN"><a href="#Using-a-convenience-function-to-run-KNN" class="headerlink" title="Using a convenience function to run KNN"></a>Using a convenience function to run KNN</h4><p>We would normally run knn and compute the RMS error. The following convenience function can help:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rdacb.knn.reg &lt;- <span class="keyword">function</span> (trg_predictors, val_predictors, trg_target, val_target, k) &#123;</span><br><span class="line">  <span class="keyword">library</span>(FNN)</span><br><span class="line">  res &lt;- knn.reg(trg_predictors, val_predictors, trg_target, k, algorithm = <span class="string">"brute"</span>)</span><br><span class="line">  errors &lt;- res$pred - val_target</span><br><span class="line">  rmse &lt;- sqrt(sum(errors * errors)/nrow(val_predictors))</span><br><span class="line">  cat(paste(<span class="string">"RMSE for k="</span>, toString(k), <span class="string">":"</span>, sep = <span class="string">""</span>), rmse, <span class="string">"\n"</span>)</span><br><span class="line">  rmse</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the preceding function, we can execute the following after reading the data, creating dummies, rescaling the predictors and partitioning—that is, executing steps 1 through 4 of the main recipe:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(educ$expense, p = <span class="number">0.6</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; trg &lt;- educ[t.idx,]</span><br><span class="line">&gt; rest &lt;- educ[-t.idx,]</span><br><span class="line">&gt;set.seed(<span class="number">2000</span>)</span><br><span class="line">&gt; v.idx &lt;- createDataPartition(rest$expense, p=<span class="number">0.5</span>, list=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; val &lt;- rest[v.idx,]</span><br><span class="line">&gt; test &lt;- rest[-v.idx,]</span><br><span class="line">&gt; rdacb.knn.reg(trg[,<span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], val[,<span class="number">6</span>], <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">1</span>: <span class="number">59.66909</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">59.66909</span></span><br><span class="line">&gt; rdacb.knn.reg(trg[,<span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], val[,<span class="number">6</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">2</span>: <span class="number">38.09002</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">38.09002</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># and so on</span></span><br></pre></td></tr></table></figure>
<h4 id="Using-a-convenience-function-to-run-KNN-for-multiple-k-values"><a href="#Using-a-convenience-function-to-run-KNN-for-multiple-k-values" class="headerlink" title="Using a convenience function to run KNN for multiple k values"></a>Using a convenience function to run KNN for multiple k values</h4><p>Running knn for several values of k to choose the best one involves repetitively executing almost similar lines of code several times. We can automate the process with the following convenience function that runs knn for multiple values of k, reports the RMS error for each, and also produces a scree plot of the RMS errors:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rdacb.knn.reg.multi &lt;- <span class="keyword">function</span> (trg_predictors, val_predictors, trg_target, val_target, start_k, end_k)</span><br><span class="line">&#123;</span><br><span class="line">  rms_errors &lt;- vector()</span><br><span class="line">  <span class="keyword">for</span> (k <span class="keyword">in</span> start_k:end_k) &#123;</span><br><span class="line">    rms_error &lt;- rdacb.knn.reg(trg_predictors, val_predictors,</span><br><span class="line">                               trg_target, val_target, k)</span><br><span class="line">    rms_errors &lt;- c(rms_errors, rms_error)</span><br><span class="line">  &#125;</span><br><span class="line">  plot(rms_errors, type = <span class="string">"o"</span>, xlab = <span class="string">"k"</span>, ylab = <span class="string">"RMSE"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>With the preceding function, we can execute the following after reading the data, creating dummies, rescaling the predictors and partitioning—that is, executing steps 1 through 4 of the main recipe. The code runs knn.reg for values of k from 1 to 5:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; rdacb.knn.reg.multi(trg[,<span class="number">7</span>:<span class="number">12</span>], val[,<span class="number">7</span>:<span class="number">12</span>], trg[,<span class="number">6</span>], val[,<span class="number">6</span>], <span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">1</span>: <span class="number">59.66909</span></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">2</span>: <span class="number">38.09002</span></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">3</span>: <span class="number">44.21224</span></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">4</span>: <span class="number">51.66557</span></span><br><span class="line">RMSE <span class="keyword">for</span> k=<span class="number">5</span>: <span class="number">50.33476</span></span><br></pre></td></tr></table></figure>
<p>The preceding code also produces a plot of the RMS errors, as shown in the following:</p>
<p><img src="img/4_4_1.jpeg" alt=""></p>
<h3 id="See-also…-12"><a href="#See-also…-12" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Computing the root mean squared error in this chapter</li>
<li>Classifying using the KNN approach in Chapter 3, Where Does It Belong? – Classification</li>
</ul>
<h2 id="Performing-linear-regression"><a href="#Performing-linear-regression" class="headerlink" title="Performing linear regression"></a>Performing linear regression</h2><p>In this recipe, we discuss linear regression, arguably the most widely used technique. The stats package has the functionality for linear regression and R loads it automatically at startup.</p>
<h3 id="Getting-ready-37"><a href="#Getting-ready-37" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that the auto-mpg.csv file is in your R working directory. Install the caret package if you have not already done so. We want to predict mpg based on cylinders, displacement, horsepower, weight, and acceleration variables.</p>
<h3 id="How-to-do-it…-37"><a href="#How-to-do-it…-37" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To perform linear regression, follow these steps:</p>
<ol>
<li><p>Load the caret package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the categorical variable cylinders into a factor with appropriate renaming of the levels:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create partitions:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(auto$mpg, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>See the names of the variables in the data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; names(auto)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"No"</span>           <span class="string">"mpg"</span></span><br><span class="line">[<span class="number">3</span>] <span class="string">"cylinders"</span>    <span class="string">"displacement"</span></span><br><span class="line">[<span class="number">5</span>] <span class="string">"horsepower"</span>   <span class="string">"weight"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"acceleration"</span> <span class="string">"model_year"</span></span><br><span class="line">[<span class="number">9</span>] <span class="string">"car_name"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the linear regression model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- lm(mpg ~ ., data = auto[t.idx, -c(<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>)])</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the basic results (your results may differ because of random sampling differences in creating the partitions):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod</span><br><span class="line"></span><br><span class="line">Call:</span><br><span class="line">lm(formula = mpg ~ ., data = auto[t.idx, -c(<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>)])</span><br><span class="line"></span><br><span class="line">Coefficients:</span><br><span class="line"></span><br><span class="line">  (Intercept)  cylinders4cyl  cylinders5cyl  cylinders6cyl</span><br><span class="line">    <span class="number">39.450422</span>       <span class="number">6.466511</span>       <span class="number">4.769794</span>       <span class="number">1.967411</span></span><br><span class="line">cylinders8cyl   displacement     horsepower         weight</span><br><span class="line">     <span class="number">6.291938</span>       <span class="number">0.004790</span>      -<span class="number">0.081642</span>      -<span class="number">0.004666</span></span><br><span class="line"> acceleration</span><br><span class="line">     <span class="number">0.003576</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>View more detailed results (your results may differ because of random sampling differences in creating the partitions):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    &gt; summary(mod)</span><br><span class="line"></span><br><span class="line">    Call:</span><br><span class="line">    lm(formula = mpg ~ ., data = auto[t.idx, -c(<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>)])</span><br><span class="line"></span><br><span class="line">    Residuals:</span><br><span class="line">        Min      1Q  Median      3Q     Max</span><br><span class="line"><span class="number">9</span>--------------------------<span class="number">.8488</span> -<span class="number">2.4015</span> -<span class="number">0.5022</span>  <span class="number">1.8422</span> <span class="number">15.3597</span></span><br><span class="line"></span><br><span class="line">    Coefficients:</span><br><span class="line">                    Estimate Std. Error t value Pr(&gt;|t|)</span><br><span class="line">    (Intercept)   <span class="number">39.4504219</span>  <span class="number">3.3806186</span>  <span class="number">11.670</span>  &lt; <span class="number">2e-16</span> ***</span><br><span class="line">    cylinders4cyl  <span class="number">6.4665111</span>  <span class="number">2.1248876</span>   <span class="number">3.043</span>  <span class="number">0.00257</span> **</span><br><span class="line">    cylinders5cyl  <span class="number">4.7697941</span>  <span class="number">3.5603033</span>   <span class="number">1.340</span>  <span class="number">0.18146</span></span><br><span class="line">    cylinders6cyl  <span class="number">1.9674114</span>  <span class="number">2.4786061</span>   <span class="number">0.794</span>  <span class="number">0.42803</span></span><br><span class="line">    cylinders8cyl  <span class="number">6.2919383</span>  <span class="number">2.9612774</span>   <span class="number">2.125</span>  <span class="number">0.03451</span> *</span><br><span class="line">    displacement   <span class="number">0.0047899</span>  <span class="number">0.0109108</span>   <span class="number">0.439</span>  <span class="number">0.66100</span></span><br><span class="line">    horsepower    -<span class="number">0.0816418</span>  <span class="number">0.0200237</span>  -<span class="number">4.077</span> <span class="number">5.99e-05</span> ***</span><br><span class="line">    weight        -<span class="number">0.0046663</span>  <span class="number">0.0009857</span>  -<span class="number">4.734</span> <span class="number">3.55e-06</span> ***</span><br><span class="line">    acceleration   <span class="number">0.0035761</span>  <span class="number">0.1426022</span>   <span class="number">0.025</span>  <span class="number">0.98001</span></span><br><span class="line">---</span><br><span class="line">    Signif. codes:  <span class="number">0</span> <span class="string">'\*\*\*'</span> <span class="number">0.001</span> <span class="string">'\*\*'</span> <span class="number">0.01</span> <span class="string">'\*'</span> <span class="number">0.05</span> <span class="string">'.'</span> <span class="number">0.1</span> <span class="string">' '</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    Residual standard error: <span class="number">3.952</span> on <span class="number">271</span> degrees of freedom</span><br><span class="line">    Multiple R-squared:  <span class="number">0.756</span>, Adjusted R-squared:  <span class="number">0.7488</span></span><br><span class="line">    <span class="literal">F</span>-statistic:   <span class="number">105</span> on <span class="number">8</span> and <span class="number">271</span> DF,  p-value: &lt; <span class="number">2.2e-16</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions for the test data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pred &lt;- predict(mod, auto[-t.idx, -c(<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>)])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the RMS error on the test data (your results can differ):</p>
<figure class="highlight plain"><figcaption><span>sqrt(mean((pred - auto[-t.idx, 2])^2))</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1] 4.333631</span><br></pre></td></tr></table></figure>
</li>
<li><p>View diagnostic plots of the model:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">    &gt; par(mfrow = c(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">    &gt; plot(mod)</span><br><span class="line">    &gt; par(mfrow = c(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    The following diagnostic plots are obtained as an output:</span><br><span class="line"></span><br><span class="line">    ![](img/4_5_<span class="number">1.</span>jpeg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### How it works...</span></span><br><span class="line"></span><br><span class="line">Step <span class="number">1</span> loads the caret package, step <span class="number">2</span> reads the data, and step <span class="number">3</span> converts the categorical variable cylinders (which has numeric values which R treats as a number by default) into a factor.</span><br><span class="line"></span><br><span class="line">Step <span class="number">4</span> creates the partitions—see recipe Creating random data partitions <span class="keyword">in</span> Chapter <span class="number">2</span>, What<span class="string">'s in There? – Exploratory Data Analysis for more details. We set the random seed to enable you to match your results with what we have displayed.</span><br><span class="line"></span><br><span class="line">Step 5 prints the variable names in the file so that we can use the appropriate variables in the linear regression model.</span><br><span class="line"></span><br><span class="line">Step 6 uses the lm function which builds the linear regression model. We specified data = auto[t.idx, -c(1,8,9)] because we want the model to use only the training data and because we do not want to use No, model_year, and car_name, which correspond to variables 1, 8, and 9, respectively. We could instead have included all variables, but that would have meant having to explicitly specify only the required predictors in the formula expression. We chose the shorter version.</span><br><span class="line"></span><br><span class="line">Although one of our predictors, cylinders, is a factor (categorical variable), we did not generate dummies for it because the lm function takes care of this automatically, and the regression coefficients in the output show this clearly.</span><br><span class="line"></span><br><span class="line">Step 7 shows how we can simply print the value of the model variable to get the values of the regression coefficients.</span><br><span class="line"></span><br><span class="line">Step 8 uses the summary function to get more information about the model:</span><br><span class="line"></span><br><span class="line">![](img/4_5_2.jpeg)</span><br><span class="line"></span><br><span class="line">In the detailed output, the Residuals section shows the distribution of the residuals on the training data through the quartiles. The Coefficients section gives details about the coefficients. The first column, Estimate, gives the estimates of the regression coefficients. The second column, Std. Error, gives the standard error of that estimate. The third column converts this standard error into a t value by dividing the coefficient by the standard error. The Pr (&gt; |t|) column converts the t value into a probability of the coefficient being 0. The annotation after the last column symbolically shows the level of significance of the coefficient estimate by a dot, blank, or a few stars. The legends below the table explain what the annotation means. It is customary to consider a coefficient to be significant at a 95 % level of significance (that is, probability being less than 0.05), which is represented by a "*".</span><br><span class="line"></span><br><span class="line">The next section gives information about how the regression performed as a whole. The Residual standard error is just the RMS adjusted for the degrees of freedom and is an excellent indicator of the average deviation of the predicted value from the actual value. The Adjusted R-squared value tells us what percentage of the variation in the outcome variable the regression model explains. The last line shows the F-statistic and the corresponding p-value for the whole regression.</span><br><span class="line"></span><br><span class="line">Step 9 generates the predictions on the test data using the predict function.</span><br><span class="line"></span><br><span class="line">Step 10 computes the RMS error.</span><br><span class="line"></span><br><span class="line">Step 11 generates the diagnostic plots. Since the standard plot function for lm produces four plots, we set up a matrix of four plots up front before calling the function and reset it after we finish plotting:</span><br><span class="line"></span><br><span class="line">- Residuals vs Fitted: As its name suggests, this plots the residuals against the values fitted by the model to enable us to examine if the residuals exhibit a trend. Ideally, we would like them to be trendless and almost a horizontal straight line at 0. In our example, we see a very slight trend.</span><br><span class="line">- Normal Q-Q: This plot helps us to check the extent to which the residuals are normally distributed by plotting the standardized residuals against the theoretical quartiles for the standard normal distribution. If the points all lie close to the 45 degree line, then we will know that the normality condition is met. In our example, we note that at the right extreme or at high values of the residuals, the standardized residuals are higher than expected and do not meet the normality requirement.</span><br><span class="line">- Scale Location: This plot is very similar to the first plot, except that the square root of the standardized residuals is plotted against the fitted values. Once again this is used to detect if the residuals exhibit any trend.</span><br><span class="line">- Residuals vs Leverage: You can use this plot to identify outlier cases that are exerting undue influence on the model. In our example, the labeled cases 150, 290, and 316 can be candidates for removal.</span><br><span class="line"></span><br><span class="line">### There'</span>s more...</span><br><span class="line"></span><br><span class="line">We discuss <span class="keyword">in</span> the following sections a few options <span class="keyword">for</span> using the lm function.</span><br><span class="line"></span><br><span class="line"><span class="comment">#### Forcing lm to use a specific factor level as the reference</span></span><br><span class="line"></span><br><span class="line">By default, lm uses the lowest factor as the reference level. To use a different one as reference, we can use the relevel function. Our original model uses 3cyl as the reference level. To force lm to instead use 4cyl as the reference:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">&gt; auto &lt;- within(auto, cylinders &lt;- relevel(cylinders, ref = "4cyl") )</span><br><span class="line">&gt; mod &lt;- lm(mpg ~., data = auto[t.idx, -c(1, 8, 9)])</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>The resulting model will not have a coefficient for 4cyl.</p>
<h4 id="Using-other-options-in-the-formula-expression-for-linear-models"><a href="#Using-other-options-in-the-formula-expression-for-linear-models" class="headerlink" title="Using other options in the formula expression for linear models"></a>Using other options in the formula expression for linear models</h4><p>Our example only showed the most common form of the formula for lm. The following table shows options to create models with interaction effects or to create models that apply arbitrary functions to predictor variables:</p>
<p><img src="img/4_5_3.jpeg" alt=""></p>
<h3 id="See-also…-13"><a href="#See-also…-13" class="headerlink" title="See also…"></a>See also…</h3><p>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis<br>Performing variable selection in linear regression in this chapter</p>
<h2 id="Performing-variable-selection-in-linear-regression"><a href="#Performing-variable-selection-in-linear-regression" class="headerlink" title="Performing variable selection in linear regression"></a>Performing variable selection in linear regression</h2><p>The MASS package has the functionality for variable selection and this recipe illustrates its use.</p>
<h3 id="Getting-ready-38"><a href="#Getting-ready-38" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that the auto-mpg.csv file is in your R working directory. We want to predict mpg based on cylinders, displacement, horsepower, weight, and acceleration.</p>
<h2 id="How-to-do-it…-38"><a href="#How-to-do-it…-38" class="headerlink" title="How to do it…"></a>How to do it…</h2><p>To perform variable selection in linear regression, follow the steps below:</p>
<ol>
<li><p>Load the caret and MASS packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br><span class="line">&gt; <span class="keyword">library</span>(MASS)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the categorical variable cylinders into a factor with appropriate renaming of the levels:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create partitions:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(auto$mpg, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>See the names of the variables in the data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; names(auto)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"No"</span>           <span class="string">"mpg"</span></span><br><span class="line">[<span class="number">3</span>] <span class="string">"cylinders"</span>    <span class="string">"displacement"</span></span><br><span class="line">[<span class="number">5</span>] <span class="string">"horsepower"</span>   <span class="string">"weight"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"acceleration"</span> <span class="string">"model_year"</span></span><br><span class="line">[<span class="number">9</span>] <span class="string">"car_name"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the linear regression model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fit &lt;- lm(mpg ~ ., data = auto[t.idx, -c(<span class="number">1</span>,<span class="number">8</span>,<span class="number">9</span>)])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the variable selection procedure. This will produce quite a lot of output, which we will display and discuss later. Because of random partitioning, your actual numbers will vary:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; step.model &lt;- stepAIC(fit, direction = <span class="string">"backward"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>See the final model (your results may differ because of variations in your training sample):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    &gt; summary(step.model)</span><br><span class="line">    Call:</span><br><span class="line">    lm(formula = mpg ~ cylinders + horsepower + weight, data = auto[t.idx,</span><br><span class="line">        -c(<span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>)])</span><br><span class="line"></span><br><span class="line">    Residuals:</span><br><span class="line">        Min      1Q  Median      3Q     Max</span><br><span class="line">-<span class="number">9.7987</span> -<span class="number">2.3676</span> -<span class="number">0.6214</span>  <span class="number">1.8625</span> <span class="number">15.3231</span></span><br><span class="line"></span><br><span class="line">    Coefficients:</span><br><span class="line">                   Estimate Std. Error t value Pr(&gt;|t|)</span><br><span class="line">    (Intercept)   <span class="number">39.1290155</span>  <span class="number">2.5434458</span>  <span class="number">15.384</span>  &lt; <span class="number">2e-16</span> ***</span><br><span class="line">    cylinders4cyl  <span class="number">6.7241124</span>  <span class="number">2.0140804</span>   <span class="number">3.339</span> <span class="number">0.000959</span> ***</span><br><span class="line">    cylinders5cyl  <span class="number">5.0579997</span>  <span class="number">3.4762178</span>   <span class="number">1.455</span> <span class="number">0.146810</span></span><br><span class="line">    cylinders6cyl  <span class="number">2.5090718</span>  <span class="number">2.1315214</span>   <span class="number">1.177</span> <span class="number">0.240170</span></span><br><span class="line">    cylinders8cyl  <span class="number">7.0991790</span>  <span class="number">2.3133286</span>   <span class="number">3.069</span> <span class="number">0.002365</span> **</span><br><span class="line">    horsepower    -<span class="number">0.0792425</span>  <span class="number">0.0148396</span>  -<span class="number">5.340</span> <span class="number">1.96e-07</span> ***</span><br><span class="line">    weight        -<span class="number">0.0044670</span>  <span class="number">0.0007512</span>  -<span class="number">5.947</span> <span class="number">8.34e-09</span> ***</span><br><span class="line">---</span><br><span class="line">    Signif. codes:  <span class="number">0</span> <span class="string">'\*\*\*'</span> <span class="number">0.001</span> <span class="string">'\*\*'</span> <span class="number">0.01</span> <span class="string">'\*'</span> <span class="number">0.05</span> <span class="string">'.'</span> <span class="number">0.1</span> <span class="string">' '</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    Residual standard error: <span class="number">3.939</span> on <span class="number">273</span> degrees of freedom</span><br><span class="line">    Multiple R-squared:  <span class="number">0.7558</span>,    Adjusted R-squared:  <span class="number">0.7505</span></span><br><span class="line">    <span class="literal">F</span>-statistic: <span class="number">140.9</span> on <span class="number">6</span> and <span class="number">273</span> DF,  p-value: &lt; <span class="number">2.2e-16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### How it works...</span></span><br><span class="line"></span><br><span class="line">For a description of steps <span class="number">1</span> through <span class="number">6</span>, refer to the How it works... section of the Performing linear regression recipe <span class="keyword">in</span> this chapter (the previous recipe).</span><br><span class="line"></span><br><span class="line">Step <span class="number">7</span> runs the variable selection procedure. We have chosen to illustrate backward elimination <span class="keyword">in</span> which the system first builds the model with all the predictors and eliminates predictors based on AIC scores. We show the sample output <span class="keyword">in</span> the following:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">Start:  AIC=778.38</span><br><span class="line">mpg ~ cylinders + displacement + horsepower + weight + acceleration</span><br><span class="line"></span><br><span class="line">               Df Sum of Sq    RSS    AIC</span><br><span class="line">- acceleration  1      0.01 4232.1 776.38</span><br><span class="line">- displacement  1      3.01 4235.1 776.58</span><br><span class="line">&lt;none&gt;                      4232.1 778.38</span><br><span class="line">- horsepower    1    259.61 4491.7 793.05</span><br><span class="line">- weight        1    349.99 4582.1 798.63</span><br><span class="line">- cylinders     4    859.84 5091.9 822.17</span><br><span class="line"></span><br><span class="line">Step:  AIC=776.38</span><br><span class="line">mpg ~ cylinders + displacement + horsepower + weight</span><br><span class="line"></span><br><span class="line">               Df Sum of Sq    RSS    AIC</span><br><span class="line">- displacement  1      3.02 4235.1 774.58</span><br><span class="line">&lt;none&gt;                      4232.1 776.38</span><br><span class="line">- horsepower    1    404.33 4636.4 799.93</span><br><span class="line">- weight        1    451.22 4683.3 802.75</span><br><span class="line">- cylinders     4    862.88 5094.9 820.34</span><br><span class="line"></span><br><span class="line">Step:  AIC=774.58</span><br><span class="line">mpg ~ cylinders + horsepower + weight</span><br><span class="line"></span><br><span class="line">             Df Sum of Sq    RSS    AIC</span><br><span class="line">&lt;none&gt;                    4235.1 774.58</span><br><span class="line">- horsepower  1    442.36 4677.4 800.40</span><br><span class="line">- weight      1    548.60 4783.7 806.69</span><br><span class="line">- cylinders   4    862.50 5097.6 818.49</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>From the preceding output, you can see that the system first built the complete model. In that model, acceleration had the lowest AIC score of 776.38 and was therefore not included in the next one. In this process, the system eliminated displacement as well.</p>
<p>The complete model had five predictors and the final one has three. In the process, the multiple R2 has remained almost unchanged, but we got a less complex model.</p>
<p><strong>Tip</strong></p>
<p>In the forward selection model, the system takes the reverse approach and adds predictors.</p>
<h3 id="See-also…-14"><a href="#See-also…-14" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Performing linear regression in this chapter</li>
</ul>
<h2 id="Building-regression-trees"><a href="#Building-regression-trees" class="headerlink" title="Building regression trees"></a>Building regression trees</h2><p>This recipe covers the use of tree models for regression. The rpart package provides the necessary functions to build regression trees.</p>
<h3 id="Getting-ready-39"><a href="#Getting-ready-39" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the rpart, caret, and rpart.plot packages if you do not already have them installed. If you have not already downloaded the data files for this chapter, do so now and ensure that the BostonHousing.csv and education.csv files are in the R working directory.</p>
<h3 id="How-to-do-it…-39"><a href="#How-to-do-it…-39" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To build regression trees, follow the steps below:</p>
<ol>
<li><p>Load the rpart, rpart.plot, and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(rpart)</span><br><span class="line">&gt; <span class="keyword">library</span>(rpart.plot)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bh$MEDV, p=<span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build and view the regression tree model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; bfit &lt;- rpart(MEDV ~ ., data = bh[t.idx,])</span><br><span class="line">&gt; bfit</span><br><span class="line"> n= <span class="number">356</span></span><br><span class="line"></span><br><span class="line">node), split, n, deviance, yval</span><br><span class="line">      * denotes terminal node</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>) root <span class="number">356</span> <span class="number">32071.8400</span> <span class="number">22.61461</span></span><br><span class="line">   <span class="number">2</span>) LSTAT&gt;=<span class="number">7.865</span> <span class="number">242</span>  <span class="number">8547.6860</span> <span class="number">18.22603</span></span><br><span class="line">     <span class="number">4</span>) LSTAT&gt;=<span class="number">14.915</span> <span class="number">114</span>  <span class="number">2451.4590</span> <span class="number">14.50351</span></span><br><span class="line">       <span class="number">8</span>) CRIM&gt;=<span class="number">5.76921</span> <span class="number">56</span>   <span class="number">796.5136</span> <span class="number">11.63929</span> *</span><br><span class="line">      <span class="number">9</span>) CRIM&lt; <span class="number">5.76921</span> <span class="number">58</span>   <span class="number">751.9641</span> <span class="number">17.26897</span> *</span><br><span class="line">     <span class="number">5</span>) LSTAT&lt; <span class="number">14.915</span> <span class="number">128</span>  <span class="number">3109.5710</span> <span class="number">21.54141</span></span><br><span class="line">      <span class="number">10</span>) DIS&gt;=<span class="number">1.80105</span> <span class="number">121</span>  <span class="number">1419.7510</span> <span class="number">21.12562</span> *</span><br><span class="line">      <span class="number">11</span>) DIS&lt; <span class="number">1.80105</span> <span class="number">7</span>  <span class="number">1307.3140</span> <span class="number">28.72857</span> *</span><br><span class="line">   <span class="number">3</span>) LSTAT&lt; <span class="number">7.865</span> <span class="number">114</span>  <span class="number">8969.3230</span> <span class="number">31.93070</span></span><br><span class="line">     <span class="number">6</span>) RM&lt; <span class="number">7.4525</span> <span class="number">93</span>  <span class="number">3280.1050</span> <span class="number">28.70753</span></span><br><span class="line">      <span class="number">12</span>) RM&lt; <span class="number">6.659</span> <span class="number">46</span>  <span class="number">1022.5320</span> <span class="number">25.24130</span> *</span><br><span class="line">      <span class="number">13</span>) RM&gt;=<span class="number">6.659</span> <span class="number">47</span>  <span class="number">1163.9800</span> <span class="number">32.10000</span></span><br><span class="line">        <span class="number">26</span>) LSTAT&gt;=<span class="number">5.495</span> <span class="number">17</span>   <span class="number">329.2494</span> <span class="number">28.59412</span> *</span><br><span class="line">        <span class="number">27</span>) LSTAT&lt; <span class="number">5.495</span> <span class="number">30</span>   <span class="number">507.3747</span> <span class="number">34.08667</span> *</span><br><span class="line">     <span class="number">7</span>) RM&gt;=<span class="number">7.4525</span> <span class="number">21</span>   <span class="number">444.3295</span> <span class="number">46.20476</span> *</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the tree. Use the prp function from the rpart.plot package and select the options shown in the following to get a good-looking plot. For convenience, the plot rounds off the y values.</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prp(bfit, type=<span class="number">2</span>, nn=<span class="literal">TRUE</span>, fallen.leaves=<span class="literal">TRUE</span>, faclen=<span class="number">4</span>, varlen=<span class="number">8</span>, shadow.col=<span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<p> The plot obtained appears as follows:</p>
<p> <img src="img/4_6_1.jpeg" alt=""></p>
</li>
<li><p>Look at the cptable. Your cptable may differ from that shown in the following output because of the random numbers used in the cross-validation process:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; bfit$cptable</span><br><span class="line"></span><br><span class="line">          CP nsplit rel error    xerror       xstd</span><br><span class="line"><span class="number">1</span> <span class="number">0.45381973</span>      <span class="number">0</span> <span class="number">1.0000000</span> <span class="number">1.0068493</span> <span class="number">0.09724445</span></span><br><span class="line"><span class="number">2</span> <span class="number">0.16353560</span>      <span class="number">1</span> <span class="number">0.5461803</span> <span class="number">0.6403963</span> <span class="number">0.06737452</span></span><br><span class="line"><span class="number">3</span> <span class="number">0.09312395</span>      <span class="number">2</span> <span class="number">0.3826447</span> <span class="number">0.4402408</span> <span class="number">0.05838413</span></span><br><span class="line"><span class="number">4</span> <span class="number">0.03409823</span>      <span class="number">3</span> <span class="number">0.2895207</span> <span class="number">0.3566122</span> <span class="number">0.04889254</span></span><br><span class="line"><span class="number">5</span> <span class="number">0.02815494</span>      <span class="number">4</span> <span class="number">0.2554225</span> <span class="number">0.3314437</span> <span class="number">0.04828523</span></span><br><span class="line"><span class="number">6</span> <span class="number">0.01192653</span>      <span class="number">5</span> <span class="number">0.2272675</span> <span class="number">0.2891804</span> <span class="number">0.04306039</span></span><br><span class="line"><span class="number">7</span> <span class="number">0.01020696</span>      <span class="number">6</span> <span class="number">0.2153410</span> <span class="number">0.2810795</span> <span class="number">0.04286100</span></span><br><span class="line"><span class="number">8</span> <span class="number">0.01000000</span>      <span class="number">7</span> <span class="number">0.2051341</span> <span class="number">0.2791785</span> <span class="number">0.04281285</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>You can either choose the tree with the lowest cross-validation error (xerror) or use the 1 SD rule and choose the tree that comes to within 1 SD (xstd) of the minimum xerror and has fewer nodes. The former approach will cause us to select the tree with seven splits (on the last row). That tree will have eight nodes. To apply the latter approach, min xerror + 1 SE = 0.2791785 + 0.04281285 = 0.3219914 and hence leads us to select the tree with five splits (on row 6).</p>
</li>
<li><p>You can simplify the process by just plotting cptree and using the resulting plot to select the cutoff value to use for pruning. The plot shows the size of the tree—which is one more than the number of splits. The table and the plot differ in another important way—the complexity or cp values in these differ. The table shows the minimum cp value for which corresponding split occurs. The plot shows the geometric means of the successive splits. As with the table, your plot may differ because of the random numbers used during cross-validation:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plotcp(bfit)</span><br></pre></td></tr></table></figure>
<p> To select the best cp value from the plot using the 1 SD rule, pick the leftmost cp value for which the cross-validation relative error (y axis) lies below the dashed line. Using this value, we will pick a cp value of 0.018:</p>
<p> <img src="img/4_6_2.jpeg" alt=""></p>
</li>
<li><p>Prune the tree with the chosen cp value and plot it as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># In the command below, replace the cp value</span></span><br><span class="line">&gt; <span class="comment"># based on your results</span></span><br><span class="line">&gt; bfitpruned &lt;- prune(bfit, cp= <span class="number">0.01192653</span>)</span><br><span class="line">&gt; prp(bfitpruned, type=<span class="number">2</span>, nn=<span class="literal">TRUE</span>, fallen.leaves=<span class="literal">TRUE</span>, faclen=<span class="number">4</span>, varlen=<span class="number">8</span>, shadow.col=<span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<p> The following output is obtained:</p>
<p> <img src="img/4_6_3.jpeg" alt=""></p>
</li>
<li><p>Use the chosen tree to compute the RMS error for the training partition:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; preds.t &lt;- predict(bfitpruned, bh[t.idx,])</span><br><span class="line">&gt; sqrt(mean((preds.t-bh[t.idx,<span class="string">"MEDV"</span>])^<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">4.524866</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions and the RMS error for the validation partition:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">preds.v &lt;- predict(bfitpruned, bh[-t.idx,])</span><br><span class="line">&gt; sqrt(mean((preds.v - bh[-t.idx,<span class="string">"MEDV"</span>])^<span class="number">2</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">4.535723</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-36"><a href="#How-it-works…-36" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 and 2 load the required packages and read the data.</p>
<p>Step 3 partitions the data. See recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for more details. We set the random seed to enable you to match your results with those that we have displayed.</p>
<p>Step 4 uses the rpart function to build the tree model. It passes the formula as MEDV ~ . to indicate that MEDV is the outcome and that all the remaining variables will be predictors. It specifies data = bh[t.idx, ] to indicate that only the rows in the training partition should be used to build the model. It then prints the model details in textual form. The output shows information for the root node and subsequently for each split. Each row has the following information:</p>
<p>node), split, n, deviance, yval</p>
<ul>
<li>node number</li>
<li>splitting condition that generated the node (for the root it just says “root”)</li>
<li>number of cases at the node</li>
<li>sum of squared errors at the node based on average value of outcome variable of the cases at the node</li>
<li>average value of outcome variable of the cases at the node</li>
</ul>
<p>We have many options to control how the rpart function works. It uses the following important defaults among others:</p>
<ul>
<li>0.01 for the complexity factor, cp</li>
<li>Minimum node size of 20 to split a node, minsplit</li>
<li>The function does not split if a split will create a node with less than round(minsplit/3) cases, minbucket</li>
</ul>
<p>You can control these by passing an rpart.control object while invoking rpart. The following code shows an example. Here we use values of 0.001, 10, and 5 for cp, minsplit and minbucket, respectively:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fit &lt;- rpart(MEDV ~ ., data = bh[t.idx,], control = rpart.control(minsplit = <span class="number">10</span>, cp = <span class="number">0.001</span>, minbucket = <span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>Step 5 plots the tree model using the prp function from the rpart.print package. The function provides several parameters through which we can control the plot’s appearance. We describe a few options as follows; check the documentation for the other numerous options:</p>
<ul>
<li>Type: This refers to the amount of information and its placement</li>
<li>nn: This refers to whether to display node numbers or not</li>
<li>fallen.leaves: This refers to whether to display all the leaf nodes at the same level (bottom most)—this results in a plot with only horizontal and vertical lines and make it easier on the eye; otherwise, the plot has diagonal lines</li>
<li>faclen: This refers to the length of factor level names in the splits – abbreviates if needed</li>
<li>varlen: This refers to the length of variable names on the plot – truncates if needed</li>
<li>shadow.col: This refers to the color of the shadow that each node casts</li>
</ul>
<p>Step 6 prints the cptable, which is a component of the fitted tree model. The cptable shows comprehensive results of trees with differing number of nodes as well as the mean and standard deviation of the error on cross-validation for each tree size. This information helps us to select our optimal tree. We explain the columns of the table as follows:</p>
<ul>
<li>cp: This refers to the complexity factor.</li>
<li>nsplit: This refers to the number of splits in the best tree that the corresponding cp yields.</li>
<li>rel error: For the best tree with the specified number of splits, the overall squared classification error (on the data used to build the tree) as a proportion of the total squared error at the root node. The error at the root node is based on predicting every case as the average of the value of outcome variable across all cases.</li>
<li>xerror: This refers to mean cross-validation error using the best tree with the specified number of splits.</li>
<li>xstd: This refers to standard deviation of the cross-validation error using the best tree with the specified number of splits.</li>
</ul>
<p>Step 7 explains how we can use the information in cptable to prune the tree and prevent overfitting. We can choose either the tree with the lowest cross-validation error or the smallest one that comes within one SD of the cross-validation error. We can select the cp value corresponding to the selected tree and use that value to prune the tree.</p>
<p>Step 8 shows an easier way to select the best cp value by plotting the cptable with the plotcp function.</p>
<p>Step 9 prunes the tree with the chosen cp value.</p>
<p>Step 10 uses the predict function to generate predictions for the training partition and then computes the RMS error.</p>
<p>Step 11 does the same for the validation partition.</p>
<h3 id="There’s-more…-28"><a href="#There’s-more…-28" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Regression trees can also be built for categorical predictors as explained in this section.</p>
<p>Generating regression trees for data with categorical predictors</p>
<p>The rpart function works even when a dataset has categorical predictor variables. You just have to ensure that the variable is tagged as a factor. See the following example:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ed &lt;- read.csv(<span class="string">"education.csv"</span>)</span><br><span class="line">&gt; ed$region &lt;- factor(ed$region)</span><br><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(ed$expense, p = <span class="number">0.7</span>, list = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; fit &lt;- rpart(expense ~ region+urban+income+under18, data = ed[t.idx,])</span><br><span class="line">&gt; prp(fit, type=<span class="number">2</span>, nn=<span class="literal">TRUE</span>, fallen.leaves=<span class="literal">TRUE</span>, faclen=<span class="number">4</span>, varlen=<span class="number">8</span>, shadow.col=<span class="string">"gray"</span>)</span><br></pre></td></tr></table></figure>
<p>The following output is obtained:</p>
<p><img src="img/4_6_4.jpeg" alt=""></p>
<h3 id="See-also…-15"><a href="#See-also…-15" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Building, plotting, and evaluating classification trees in Chapter 3, Where Does It Belong? – Classification</li>
</ul>
<h2 id="Building-random-forest-models-for-regression"><a href="#Building-random-forest-models-for-regression" class="headerlink" title="Building random forest models for regression"></a>Building random forest models for regression</h2><p>This recipe looks at random forests—one of the most successful machine learning techniques.</p>
<h3 id="Getting-ready-40"><a href="#Getting-ready-40" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the randomForest and caret packages, install them now. Download the data files for this chapter from the book’s website and place the BostonHousing.csv file is in your R working directory. We will build a random forest model to predict MEDV based on the other variables.</p>
<h3 id="How-to-do-it…-40"><a href="#How-to-do-it…-40" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To build random forest models for regression, follow the steps below:</p>
<ol>
<li><p>Load the randomForest and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(randomForest)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bn &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bh$MEDV, p=<span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the random forest model. Since this command builds many regression trees, it can take significant processing time on even moderate datasets:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- randomForest(x = bh[t.idx,<span class="number">1</span>:<span class="number">13</span>], y=bh[t.idx,<span class="number">14</span>],ntree=<span class="number">1000</span>,  xtest = bh[-t.idx,<span class="number">1</span>:<span class="number">13</span>], ytest = bh[-t.idx,<span class="number">14</span>], importance=<span class="literal">TRUE</span>, keep.forest=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine the results (your results may differ slightly because of the random factor):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod</span><br><span class="line">Call:</span><br><span class="line"> randomForest(x = bh[t.idx, <span class="number">1</span>:<span class="number">13</span>], y = bh[t.idx, <span class="number">14</span>], xtest = bh[-t.idx,      <span class="number">1</span>:<span class="number">13</span>], ytest = bh[-t.idx, <span class="number">14</span>], ntree = <span class="number">1000</span>, importance = <span class="literal">TRUE</span>,      keep.forest = <span class="literal">TRUE</span>)</span><br><span class="line">               Type of random forest: regression</span><br><span class="line">                     Number of trees: <span class="number">1000</span></span><br><span class="line">No. of variables tried at each split: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">          Mean of squared residuals: <span class="number">12.61296</span></span><br><span class="line">                    % Var explained: <span class="number">86</span></span><br><span class="line">                       Test set MSE: <span class="number">6.94</span></span><br><span class="line">                    % Var explained: <span class="number">90.25</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine variable importance:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod$importance</span><br><span class="line">           %IncMSE IncNodePurity</span><br><span class="line">CRIM     <span class="number">9.5803434</span>     <span class="number">2271.5448</span></span><br><span class="line">ZN       <span class="number">0.3410126</span>      <span class="number">142.1191</span></span><br><span class="line">INDUS    <span class="number">6.6838954</span>     <span class="number">1840.7041</span></span><br><span class="line">CHAS     <span class="number">0.6363144</span>      <span class="number">193.7132</span></span><br><span class="line">NOX      <span class="number">9.3106894</span>     <span class="number">1922.5483</span></span><br><span class="line">RM      <span class="number">36.2790912</span>     <span class="number">8540.4644</span></span><br><span class="line">AGE      <span class="number">3.7186444</span>      <span class="number">820.7750</span></span><br><span class="line">DIS      <span class="number">7.4519827</span>     <span class="number">2012.8193</span></span><br><span class="line">RAD      <span class="number">1.7799796</span>      <span class="number">287.6282</span></span><br><span class="line">TAX      <span class="number">4.5373887</span>     <span class="number">1049.3716</span></span><br><span class="line">PTRATIO  <span class="number">6.8372845</span>     <span class="number">2030.2044</span></span><br><span class="line">B        <span class="number">1.2240072</span>      <span class="number">530.1201</span></span><br><span class="line">LSTAT   <span class="number">67.0867117</span>     <span class="number">9532.3054</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Compare predicted and actual values for the training partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(bh[t.idx,<span class="number">14</span>], predict( mod, newdata=bh[t.idx,]), xlab = <span class="string">"Actual"</span>, ylab = <span class="string">"Predicted"</span>)</span><br></pre></td></tr></table></figure>
<p> The following output is obtained on executing the preceding command:</p>
<p> <img src="img/4_6_5.jpeg" alt=""></p>
</li>
<li><p>Compare the out of bag (OOB) predictions with actuals in the training partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; &gt; plot(bh[t.idx,<span class="number">14</span>], mod$predicted, xlab = <span class="string">"Actual"</span>, ylab = <span class="string">"Predicted"</span>)</span><br></pre></td></tr></table></figure>
<p> The preceding command produces the following output:</p>
<p> <img src="img/4_6_6.jpeg" alt=""></p>
</li>
<li><p>Compare predicted and actual values for the test partition:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(bh[-t.idx,<span class="number">14</span>], mod$test$predicted, xlab = <span class="string">"Actual"</span>, ylab = <span class="string">"Predicted"</span>)</span><br></pre></td></tr></table></figure>
<p> The following plot is obtained as a result of the preceding command:</p>
<p> <img src="img/4_6_7.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-37"><a href="#How-it-works…-37" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 1 and 2 load the necessary packages and read the data.</p>
<p>Step 3 partitions the data. See recipe Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis for more details. We set the random seed to enable you to match your results with those that we have displayed. Technically speaking, we do not really need to partition the data for random forests because it builds many trees and uses only a subset of the data each time. Thus, each case is OOB for about a third of the trees built and can be used for validation. However, the method also provides for us to provide a validation dataset separately and we illustrate that process here.</p>
<p>Step 4 builds the random forest model. We show the command and describe the arguments as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; mod &lt;- randomForest(x = bh[t.idx,<span class="number">1</span>:<span class="number">13</span>], y=bh[t.idx,<span class="number">14</span>],ntree=<span class="number">1000</span>,  xtest = bh[-t.idx,<span class="number">1</span>:<span class="number">13</span>], ytest = bh[-t.idx,<span class="number">14</span>], importance=<span class="literal">TRUE</span>, keep.forest=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>x: the predictors</li>
<li>y: This is the outcome variables</li>
<li>ntree: This is the number of trees to build</li>
<li>xtest: These are predictors in the validation partition</li>
<li>ytest: These are outcome variables in the validation partition</li>
<li>importance: This refers to whether or not to compute the importance scores of the predictor variables</li>
<li>keep.forest: This refers to whether or not to keep the trees built in the resulting model; only if we keep the trees can we generate predictions based on the model</li>
</ul>
<p>Step 5 prints the model. This shows the mean squared error on the training and the validation partitions, as well as the percentage of variability in the outcome variable that the model explains.</p>
<p>Step 6 uses the importance component of the model to print the computed importance level of each variable. For each tree generated, the method first generates the prediction. Then, for every variable (one at a time), it randomly permutes the values across the OOB cases and generates the predictions. The degradation in prediction with the variable permuted indicates how important the variable is. For each predictor variable, the importance table reports the average value of importance across all trees. Higher values indicate higher importance.</p>
<p>Step 7 plots the predictions for the training partition against the actual values.</p>
<p>Step 8 plots the OOB predictions against the actual values using the predicted component of the model—mod$predicted.</p>
<p>Step 9 uses mod$test$predicted to plot the performance of the model on the test cases against actuals.</p>
<h3 id="There’s-more…-29"><a href="#There’s-more…-29" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We discuss a few prominent options in this section.</p>
<h4 id="Controlling-forest-generation"><a href="#Controlling-forest-generation" class="headerlink" title="Controlling forest generation"></a>Controlling forest generation</h4><p>You can use the following additional options to control how the algorithm builds the forest:</p>
<ul>
<li>mtry: This is the number of predictors to randomly sample at each split; the default is m/3 where m is the number of predictors</li>
<li>nodesize: This is the minimum size of terminal nodes; the default is 5, setting it higher causes smaller trees</li>
<li>maxnodes: This is the maximum number of terminal nodes that a tree can have; if unspecified, the trees are grown to the maximum size possible, subject to nodesize</li>
</ul>
<h3 id="See-also…-16"><a href="#See-also…-16" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Using random forest models for classification in Chapter 3, Where Does It Belong? – Classification</li>
</ul>
<h2 id="Using-neural-networks-for-regression"><a href="#Using-neural-networks-for-regression" class="headerlink" title="Using neural networks for regression"></a>Using neural networks for regression</h2><p>The nnet package contains functionality to build neural network models for classification as well as prediction. In this recipe, we cover the steps to build a neural network regression model using nnet.</p>
<h3 id="Getting-ready-41"><a href="#Getting-ready-41" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you do not already have the nnet, caret, and devtools packages installed, install them now. If you have not already downloaded the data files for this chapter, download them now and ensure that the BostonHousing.csv file is in your R working directory. We will build a model to predict MEDV based on all of the remaining variables.</p>
<h3 id="How-to-do-it…-41"><a href="#How-to-do-it…-41" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use neural networks for regression, follow these steps:</p>
<ol>
<li><p>Load the nnet and caret packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(nnet)</span><br><span class="line">&gt; <span class="keyword">library</span>(caret)</span><br><span class="line">&gt; <span class="keyword">library</span>(devtools)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Partition the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1000</span>)</span><br><span class="line">&gt; t.idx &lt;- createDataPartition(bh$MEDV, p=<span class="number">0.7</span>, list=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Find the range of the response variable to be able to scale it to [0,1]:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; summary(bh$MEDV)</span><br><span class="line">   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.</span><br><span class="line">   <span class="number">5.00</span>   <span class="number">17.02</span>   <span class="number">21.20</span>   <span class="number">22.53</span>   <span class="number">25.00</span>   <span class="number">50.00</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Build the model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fit &lt;- nnet(MEDV/<span class="number">50</span> ~ ., data=bh[t.idx,], size=<span class="number">6</span>, decay = <span class="number">0.1</span>, maxit = <span class="number">1000</span>, linout = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>In preparation for plotting the network, get the code for the plotting function plot.nnet from fawda123’s GitHub page. The following loads the function into R:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; source_url(<span class="string">'https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r'</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the network:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(fit, max.sp = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p> The following plot is obtained as a result of the preceding commands:</p>
<p> <img src="img/4_6_8.jpeg" alt=""></p>
</li>
<li><p>Compute the RMS error on the training data (your results can differ):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; t.rmse = sqrt(mean((fit$fitted.values * <span class="number">50</span> - bh[t.idx, <span class="string">"MEDV"</span>])^<span class="number">2</span>))</span><br><span class="line">&gt; t.rmse</span><br><span class="line">[<span class="number">1</span>] <span class="number">2.797945</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate predictions on the validation partition and generate the RMS error (your results may differ):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; v.rmse &lt;- sqrt(mean((predict(fit,bh[-t.idx,]*<span class="number">50</span> - bh[-t.idx, <span class="string">"MEDV"</span>])^<span class="number">2</span>)))</span><br><span class="line">&gt; v.rmse</span><br><span class="line">[<span class="number">1</span>] <span class="number">0.42959</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-38"><a href="#How-it-works…-38" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the necessary packages—nnet for neural network modeling and caret for data partitioning. We also load devtools because we will be sourcing code using a web URL for printing the network.</p>
<p>Step 2 reads the file.</p>
<p>Step 3 partitions the data. See recipe Creating random data partitions from Chapter 2, for more details. We have set the random seed to enable you to match your results with those that we have displayed.</p>
<p>Step 4 builds the neural net model using the nnet function of the nnet package:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fit &lt;- nnet(MEDV/<span class="number">50</span> ~ ., data=bh[t.idx,], size=<span class="number">6</span>, decay = <span class="number">0.1</span>, maxit = <span class="number">1000</span>, linout = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p>We divide our response variable by 50 to scale it to the range [0,1]. We pass the following arguments:</p>
<ul>
<li>size = 6: This indicates the number of nodes in the hidden layer.</li>
<li>decay = 0.1: This indicates the decay.</li>
<li>maxit = 1000: Stops if the process does not converge in the maxit iterations. The default value for maxit is 100. Provide a value based on trial and error.</li>
<li>linout = TRUE: This specifies that we want a linear output unit and not logistic.</li>
</ul>
<p>Step 6 loads code for the printing function from an eternal url using the source_url function of the devtools package.</p>
<p>Step 7 then plots the network. The thickness of the lines indicates the strength of the corresponding weights. We use max.sp = TRUE to cause the plot to have maximum possible spacing between the nodes.</p>
<p>Step 8 uses the fitted component of the model to compute the RMS error on the training partition.</p>
<p>Step 9 uses the predict function on the validation partition to generate predictions to compute the RMS error on the validation partition.</p>
<h3 id="See-also…-17"><a href="#See-also…-17" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Creating random data partitions in Chapter 2, What’s in There? – Exploratory Data Analysis</li>
<li>Using neural networks for classification in Chapter 3, Where Does It Belong? – Classification</li>
</ul>
<h2 id="Performing-k-fold-cross-validation"><a href="#Performing-k-fold-cross-validation" class="headerlink" title="Performing k-fold cross-validation"></a>Performing k-fold cross-validation</h2><p>The R implementation of some techniques, such as classification and regression trees, performs cross-validation out of the box to aid in model selection and to avoid overfitting. However, some others do not. When faced with several choices of machine learning methods for a particular problem, we can use the standard approach of partitioning the data into training and test sets and select based on the results. However, cross-validation gives a more thorough evaluation of a model’s performance on hold-out data. Comparing the performance of methods using cross-validation can paint a truer picture of their relative performance.</p>
<h3 id="Getting-ready-42"><a href="#Getting-ready-42" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>We illustrate the approach with the Boston Housing data, and thus you should download the code for this chapter and ensure that the BostonHousing.csv file is in your R working directory.</p>
<h3 id="How-to-do-it…-42"><a href="#How-to-do-it…-42" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>In this recipe, we show you basic code to perform k-fold cross-validation for linear regression. You can adapt the same code structure for all other regression methods. Although some packages like caret, DAAG and boot provide cross-validation functionality out of the box, they cover only a few machine-learning techniques. You might find a generic framework to be useful and be able to adapt it to whatever machine-learning technique you might want to apply it to. To do this, follow these steps:</p>
<ol>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the two functions shown as follows; we show line numbers for discussion:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> rdacb.kfold.crossval.reg &lt;- <span class="keyword">function</span>(df, nfolds) &#123;</span><br><span class="line"><span class="number">2</span>   fold &lt;- sample(<span class="number">1</span>:nfolds, nrow(df), replace = <span class="literal">TRUE</span>)</span><br><span class="line"><span class="number">3</span>   mean.sqr.errs &lt;- sapply(<span class="number">1</span>:nfolds,</span><br><span class="line">         rdacb.kfold.cval.reg.iter,</span><br><span class="line">         df, fold)</span><br><span class="line"><span class="number">4</span>   list(<span class="string">"mean_sqr_errs"</span>= mean.sqr.errs,</span><br><span class="line">         <span class="string">"overall_mean_sqr_err"</span> = mean(mean.sqr.errs),</span><br><span class="line">         <span class="string">"std_dev_mean_sqr_err"</span> = sd(mean.sqr.errs))</span><br><span class="line"><span class="number">5</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="number">6</span> rdacb.kfold.cval.reg.iter &lt;- <span class="keyword">function</span>(k, df, fold) &#123;</span><br><span class="line"> <span class="number">7</span>   trg.idx &lt;- !fold %<span class="keyword">in</span>% c(k)</span><br><span class="line"> <span class="number">8</span>   test.idx &lt;-  fold %<span class="keyword">in</span>% c(k)</span><br><span class="line"> <span class="number">9</span>   mod &lt;- lm(MEDV ~ ., data = df[trg.idx, ] )</span><br><span class="line"><span class="number">10</span>   pred &lt;- predict(mod, df[test.idx,])</span><br><span class="line"><span class="number">11</span>   sqr.errs &lt;- (pred - df[test.idx, <span class="string">"MEDV"</span>])^<span class="number">2</span></span><br><span class="line"><span class="number">12</span>   mean(sqr.errs)</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>With the preceding two functions in place, you can run k-fold cross-validation with k=5 as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; res &lt;- rdacb.kfold.crossval.reg(bh, <span class="number">5</span>)</span><br><span class="line">&gt; <span class="comment"># get the mean squared errors from each fold</span></span><br><span class="line">&gt; res$mean_sqr_errs</span><br><span class="line">&gt; <span class="comment"># get the overall mean squared errors</span></span><br><span class="line">&gt; res$overall_mean_sqr_err</span><br><span class="line">&gt; <span class="comment"># get the standard deviation of the mean squared errors</span></span><br><span class="line">&gt; res$std_dev_mean_sqr_err</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-39"><a href="#How-it-works…-39" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data file.</p>
<p>In step 2, we define two functions to perform k-fold cross-validation. Rows 1-5 define the first function and rows 6-13 define the second function.</p>
<p>The first function rdacb.kfold.crossval.reg sets up the k-folds and uses the second one to build the model and compute the errors for each fold.</p>
<p>Line 2 creates the folds by randomly sampling from 1 to k. Thus, if a data frame has 1000 elements, this line will generate 1000 random integers from 1 to k. The idea is that if the ith random number is, say, 3, then the ith case of the data frame belongs to the third fold.</p>
<p>Line 3 invokes the second function to compute the errors for each fold.</p>
<p>Line 4 creates a list with the raw values of the mean squared errors for each partition, the overall mean across all the folds, and the standard deviation of the mean squared errors.</p>
<p>The second function computes the error for a particular partition.</p>
<p>Lines 7 and 8 set up the training and test data. The fold number is passed in as the argument k and line 7 treats all data rows belonging to folds other than k as the training data. Line 8 sets up the data rows belonging to the kth fold as the test data.</p>
<p>Line 9 builds the linear regression model with the training data alone.</p>
<p>Line 10 generates the predictions on the test data.</p>
<p>Line 11 computes the squared errors.</p>
<p>Line 12 returns the mean of the squared errors.</p>
<h3 id="See-also…-18"><a href="#See-also…-18" class="headerlink" title="See also…"></a>See also…</h3><p>Performing leave-one-out-cross-validation to limit overfitting in this chapter.</p>
<h2 id="Performing-leave-one-out-cross-validation-to-limit-overfitting"><a href="#Performing-leave-one-out-cross-validation-to-limit-overfitting" class="headerlink" title="Performing leave-one-out-cross-validation to limit overfitting"></a>Performing leave-one-out-cross-validation to limit overfitting</h2><p>We provide the framework of the code to perform leave-one-out-cross-validation for linear regression. You should be able to easily adapt this code for any other regression technique. The rationale and explanation presented under the previous recipe Performing k-fold cross-validation apply to this one as well.</p>
<h3 id="How-to-do-it…-43"><a href="#How-to-do-it…-43" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To perform leave-one-out-cross-validation (LOOCV) to limit overfitting, follow the steps below:</p>
<ol>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the two functions shown as follows; we show line numbers for discussion:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> rdacb.loocv.reg &lt;- <span class="keyword">function</span>(df) &#123;</span><br><span class="line"><span class="number">2</span>   mean.sqr.errs &lt;- sapply(<span class="number">1</span>:nrow(df),</span><br><span class="line">               rdacb.loocv.reg.iter, df)</span><br><span class="line"><span class="number">3</span>   list(<span class="string">"mean_sqr_errs"</span>= mean.sqr.errs,</span><br><span class="line">              <span class="string">"overall_mean_sqr_err"</span> = mean(mean.sqr.errs),</span><br><span class="line">              <span class="string">"std_dev_mean_sqr_err"</span> = sd(mean.sqr.errs))</span><br><span class="line"><span class="number">4</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> rdacb.loocv.reg.iter &lt;- <span class="keyword">function</span>(k, df) &#123;</span><br><span class="line"><span class="number">6</span>   mod &lt;- lm(MEDV ~ ., data = df[-k, ] )</span><br><span class="line"><span class="number">7</span>   pred &lt;- predict(mod, df[k,])</span><br><span class="line"><span class="number">8</span>   sqr.err &lt;- (pred - df[k, <span class="string">"MEDV"</span>])^<span class="number">2</span></span><br><span class="line"><span class="number">9</span> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>With the preceding two functions in place, you can run leave-one-out-cross-validation as follows (this runs 506 linear regression models and will take some time):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; res &lt;- rdacb.loocv.reg(bh)</span><br><span class="line">&gt; <span class="comment"># get the raw mean squared errors for each case</span></span><br><span class="line">&gt; res$mean_sqr_errs</span><br><span class="line">&gt; <span class="comment"># get the overall mean squared error</span></span><br><span class="line">&gt; res$overall_mean_sqr_err</span><br><span class="line">&gt; <span class="comment"># get the standard deviation of the mean squared errors</span></span><br><span class="line">&gt; res$std_dev_mean_sqr_err</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-40"><a href="#How-it-works…-40" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data.</p>
<p>Step 2 creates two functions for performing leave-one-out-cross-validation. Lines 1 to 4 define the first function rdacb.loocv.reg and lines 5 to 9 define the second one, rdacb.loocv.reg.iter:</p>
<ul>
<li>Line 2 of the first function rdacb.loocv.reg repeatedly calls the second function rdacb.loocv.reg.iter to build the regression model leaving one case out and compute the squared error</li>
<li>Line 3 creates a list with the output elements</li>
<li>Line 6 in the second function rdacb.loocv.reg.iter builds the regression model on the data frame leaving out one case</li>
<li>Line 7 generates the prediction for the case that was left out</li>
<li>Line 8 computes the squared error</li>
</ul>
<p>Step 3 uses the preceding functions to perform leave-one-out-cross-validation and displays the results.</p>
<h3 id="See-also…-19"><a href="#See-also…-19" class="headerlink" title="See also…"></a>See also…</h3><p>Performing k-fold cross-validation in this chapter.</p>
<hr>
<h1 id="Chapter-5-Can-You-Simplify-That-–-Data-Reduction-Techniques"><a href="#Chapter-5-Can-You-Simplify-That-–-Data-Reduction-Techniques" class="headerlink" title="Chapter 5. Can You Simplify That? – Data Reduction Techniques"></a>Chapter 5. Can You Simplify That? – Data Reduction Techniques</h1><p>In this chapter, we will cover:</p>
<ul>
<li>Performing cluster analysis using K-means clustering</li>
<li>Performing cluster analysis using hierarchical clustering</li>
<li>Reducing dimensionality with principal component analysis</li>
</ul>
<h2 id="Introduction-4"><a href="#Introduction-4" class="headerlink" title="Introduction"></a>Introduction</h2><p>When confronted with large datasets, either in terms of the number of cases or the number of variables, or both, analysts often seek to reduce the complexity. They can use cluster analysis to condense the number of cases to a manageable number of representative points, or they may use principal component analysis (PCA) to identify a smaller set of variables or dimensions that capture the information content of most of the larger set of original variables. This chapter will cover R recipes for cluster analysis and PCA.</p>
<h2 id="Performing-cluster-analysis-using-K-means-clustering"><a href="#Performing-cluster-analysis-using-K-means-clustering" class="headerlink" title="Performing cluster analysis using K-means clustering"></a>Performing cluster analysis using K-means clustering</h2><p>The standard R package stats provides the function for K-means clustering. We also use the cluster package to plot the results of our cluster analysis.</p>
<h3 id="Getting-ready-43"><a href="#Getting-ready-43" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that the auto-mpg.csv file is in your R working directory. Also, ensure that you have installed the cluster package.</p>
<h3 id="How-to-do-it…-44"><a href="#How-to-do-it…-44" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To perform cluster analysis using K-means clustering, follow theses steps:</p>
<ol>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Define a convenience function to standardize the relevant variables and append the resulting variables to the original data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rdacb.scale.many &lt;- <span class="keyword">function</span> (dat, column_nos) &#123;</span><br><span class="line">  nms &lt;- names(dat)</span><br><span class="line">  <span class="keyword">for</span> (col <span class="keyword">in</span> column_nos) &#123;</span><br><span class="line">    name &lt;- paste0(nms[col], <span class="string">"_z"</span>)</span><br><span class="line">    dat[name] &lt;- scale(dat[, col])</span><br><span class="line">  &#125;</span><br><span class="line">  cat(paste(<span class="string">"Scaled"</span>, length(column_nos), <span class="string">"variable(s)\n"</span>))</span><br><span class="line">  dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the preceding convenience function to standardize the variables of interest. We will ignore the variables No, <code>model_year</code>, and <code>car_name</code>:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; auto &lt;- rdacb.scale.many(auto, <span class="number">2</span>:<span class="number">7</span>)</span><br><span class="line">&gt; <span class="comment"># See the variables now in auto</span></span><br><span class="line">&gt; names(auto)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"No"</span>             <span class="string">"mpg"</span></span><br><span class="line"> [<span class="number">3</span>] <span class="string">"cylinders"</span>      <span class="string">"displacement"</span></span><br><span class="line"> [<span class="number">5</span>] <span class="string">"horsepower"</span>     <span class="string">"weight"</span></span><br><span class="line"> [<span class="number">7</span>] <span class="string">"acceleration"</span>   <span class="string">"model_year"</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"car_name"</span>       <span class="string">"mpg_z"</span></span><br><span class="line">[<span class="number">11</span>] <span class="string">"cylinders_z"</span>    <span class="string">"displacement_z"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"horsepower_z"</span>   <span class="string">"weight_z"</span></span><br><span class="line">[<span class="number">15</span>] <span class="string">"acceleration_z"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Perform K-means clustering for a given value of K. Let’s use K=5. We show how you can settle on a good value for K in the There’s more… section of this recipe. Due to the random choice of K starting points, your results may differ:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">1020</span>)</span><br><span class="line">&gt; fit &lt;- kmeans(auto[, <span class="number">10</span>:<span class="number">15</span>], <span class="number">5</span>)</span><br><span class="line">&gt; <span class="comment"># Examine the fit object – produces a lot of output</span></span><br><span class="line">&gt; <span class="comment"># Your results could differ slightly</span></span><br><span class="line">&gt; fit</span><br><span class="line">K-means clustering with <span class="number">5</span> clusters of sizes <span class="number">36</span>, <span class="number">96</span>, <span class="number">62</span>, <span class="number">117</span>, <span class="number">87</span></span><br><span class="line"></span><br><span class="line">Cluster means:</span><br><span class="line">       mpg_z cylinders_z displacement_z</span><br><span class="line"><span class="number">1</span> -<span class="number">0.4141251</span>   <span class="number">0.2388808</span>      <span class="number">0.2772370</span></span><br><span class="line"><span class="number">2</span> -<span class="number">1.1538840</span>   <span class="number">1.4963079</span>      <span class="number">1.4943315</span></span><br><span class="line"><span class="number">3</span> -<span class="number">0.4317115</span>   <span class="number">0.3679422</span>      <span class="number">0.1875709</span></span><br><span class="line"><span class="number">4</span>  <span class="number">0.3259756</span>  -<span class="number">0.8753429</span>     -<span class="number">0.7189046</span></span><br><span class="line"><span class="number">5</span>  <span class="number">1.3138889</span>  -<span class="number">0.8349721</span>     -<span class="number">0.9305048</span></span><br><span class="line"></span><br><span class="line">  horsepower_z   weight_z acceleration_z</span><br><span class="line"><span class="number">1</span>  -<span class="number">0.28320032</span>  <span class="number">0.5386915</span>     <span class="number">1.29988821</span></span><br><span class="line"><span class="number">2</span>   <span class="number">1.50450532</span>  <span class="number">1.3943873</span>    -<span class="number">1.06420891</span></span><br><span class="line"><span class="number">3</span>   <span class="number">0.03201748</span>  <span class="number">0.1614095</span>    -<span class="number">0.12178037</span></span><br><span class="line"><span class="number">4</span>  -<span class="number">0.43500729</span> -<span class="number">0.6304741</span>    -<span class="number">0.06498252</span></span><br><span class="line"><span class="number">5</span>  -<span class="number">0.98076471</span> -<span class="number">1.0286895</span>     <span class="number">0.81059100</span></span><br><span class="line"></span><br><span class="line">Clustering vector:</span><br><span class="line">  [<span class="number">1</span>] <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"> [<span class="number">23</span>] <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"> [<span class="number">45</span>] <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"> [<span class="number">67</span>] <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"> [<span class="number">89</span>] <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">[<span class="number">111</span>] <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">[<span class="number">133</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line">[<span class="number">155</span>] <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">[<span class="number">177</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line">[<span class="number">199</span>] <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">[<span class="number">221</span>] <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">[<span class="number">243</span>] <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line">[<span class="number">265</span>] <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">[<span class="number">287</span>] <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">[<span class="number">309</span>] <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line">[<span class="number">331</span>] <span class="number">5</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line">[<span class="number">353</span>] <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line">[<span class="number">375</span>] <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">5</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line">[<span class="number">397</span>] <span class="number">5</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Within cluster sum of squares by cluster:</span><br><span class="line">[<span class="number">1</span>]  <span class="number">53.49325</span> <span class="number">134.03814</span>  <span class="number">51.86729</span>  <span class="number">96.53647</span></span><br><span class="line">[<span class="number">5</span>] <span class="number">115.59778</span></span><br><span class="line"> (between_SS / total_SS =  <span class="number">81.0</span> %)</span><br><span class="line"></span><br><span class="line">Available components:</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"cluster"</span>      <span class="string">"centers"</span>      <span class="string">"totss"</span></span><br><span class="line">[<span class="number">4</span>] <span class="string">"withinss"</span>     <span class="string">"tot.withinss"</span> <span class="string">"betweenss"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"size"</span>         <span class="string">"iter"</span>         <span class="string">"ifault"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We performed cluster analysis on six dimensions and thus cannot visualize the complete analysis. However, we can creatively use a pairwise plot to get an idea of the clustering and visualize the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pairs(auto[,<span class="number">2</span>:<span class="number">7</span>], col=c(<span class="number">1</span>:<span class="number">5</span>)[fit$cluster])</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_1.jpeg" alt=""></p>
</li>
<li><p>The clusplot function from the cluster package can help us visualize the clustering based on the first two principal components by generating a bivariate cluster plot using the following command:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(cluster)</span><br><span class="line">&gt; clusplot(auto[,<span class="number">10</span>:<span class="number">15</span>], fit$cluster, color = <span class="literal">TRUE</span>, shade = <span class="literal">TRUE</span>, labels=<span class="number">0</span>, lines=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_2.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-41"><a href="#How-it-works…-41" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the data is loaded.</p>
<p>In step 2 a convenience function is defined to standardize several variables at once. Although the scale function does this, the names it assigns to the standardized variables mimic the original ones and hence can cause confusion. This convenience function creates more meaningful names by appending _z to the original variable names.</p>
<p>In step 3 the convenience function is used to scale only the variables of interest—we leave out No, model_year, and car_name.</p>
<p>In step 4 the K-means clustering algorithm is run by invoking the kmeans function and then printing the resulting object. We used K=5 as an illustration. The next section, There’s more…, shows how we can settle on a suitable value for K. While invoking the kmeans function, we have the option of selecting the specific K-means clustering algorithm by passing a value for the algorithm argument. If left out, the function uses the Hartigan Wong algorithm by default. Other options are Lloyd, Forgy, and MacQueen.</p>
<p>From the output, we can see that the resulting model contains information about the centers of the clusters, information about which cluster each case of the data falls under, the sum of squares within each cluster, and finally, the proportion of total variability that the K clusters retain. We see that the 5-cluster solution retains 81 percent of the variability.</p>
<p>The output also shows the components of the fitted model, from which we can extract relevant information. The following table summarizes the information:</p>
<p>|Command|Function|<br>|:=—–|——–|<br>|fit$cluster|The clustering vector, specifying the cluster to which each case belongs.|<br>|fit$centers|The center of each cluster.|<br>|fit$totss|Total sum of squares of the variables used. We used standardized values and hence this number represents the total sum of squares of these standardized values.|<br>|fit$withinss|Within sum of squares for each cluster.|<br>|fit$tot.withinss|Total of the withinss values.|<br>|fit$betweenss|Total sum of squares if we represent each case by just the center of its cluster.|<br>|fit$size|Number of cases in each cluster.|<br>|fit$iter|Number of iterations used.|<br>|fit$ifault|An indicator of a possible algorithm problem—for experts.|</p>
<p>In step 5 a scatterplot matrix is generated and the points are colored based on the clustering vector from the results of K-means clustering.</p>
<p>In step 6 use the clusplot function from the cluster package to generate a bivariate plot of the first two principal components (see Reducing dimensionality with principal components analysis in this chapter). From the bottom of the plot, we see that the first two principal components explain nearly 92 percent of the overall variability and hence the plot can be treated as a good representation of the overall clustering along the six original dimensions.</p>
<h3 id="There’s-more…-30"><a href="#There’s-more…-30" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>Once the value of K is known, K-means clustering can be performed. We now provide you with a recipe to ease the process of choosing a suitable value for K.</p>
<h3 id="Use-a-convenience-function-to-choose-a-value-for-K"><a href="#Use-a-convenience-function-to-choose-a-value-for-K" class="headerlink" title="Use a convenience function to choose a value for K"></a>Use a convenience function to choose a value for K</h3><p>Using what we covered, you can try out various values of K and choose a suitable one. To avoid the repetitive tasks involved in doing this, we suggest the following convenience function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rdacb.kmeans.plot &lt;- <span class="keyword">function</span> (data, num_clust = <span class="number">15</span>, seed = <span class="number">9876</span>) &#123;</span><br><span class="line">  set.seed(seed)</span><br><span class="line">  ss &lt;- numeric(num_clust)</span><br><span class="line">  ss[<span class="number">1</span>] &lt;- (nrow(data) - <span class="number">1</span>) * sum(apply(data, <span class="number">2</span>, var))</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">2</span>:num_clust) &#123;</span><br><span class="line">    ss[i] &lt;- sum(kmeans(data, centers = i)$withinss)</span><br><span class="line">  &#125;</span><br><span class="line">  plot(<span class="number">1</span>:num_clust, ss, type = <span class="string">"b"</span>, pch = <span class="number">18</span>, xlab = <span class="string">"# Clusters"</span>, ylab = <span class="string">"Total within_ss across clusters"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since the method generates a plot and helps you identify the place where the gain in performance tapers off—the elbow in the graph—it is sometimes referred to as the “elbow” technique.</p>
<p>The preceding function generates and plots the total withinss across all clusters for values of K between 1 and 15. We can also supply an upper limit for K through the num_clust argument. Armed with the function, we can standardize the variables of interest as in the main recipe and then run:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rdacb.kmeans.plot(auto[,<span class="number">10</span>:<span class="number">15</span>])</span><br></pre></td></tr></table></figure>
<p><img src="img/5_2_3.jpeg" alt=""></p>
<p>From the resulting plot, we can identify the value of K where the drop in the total withinss tapers off—the elbow in the graph. We may choose K=4 or K=5 in this situation. If we really wanted very few clusters, K=3 may also be a good choice. We can always get a very low value for withinss by increasing the number of clusters. However, we want to strike a balance between the value of withinss and the number of clusters.</p>
<h3 id="See-also…-20"><a href="#See-also…-20" class="headerlink" title="See also…"></a>See also…</h3><p>Performing cluster analysis using hierarchical clustering in this chapter</p>
<h2 id="Performing-cluster-analysis-using-hierarchical-clustering"><a href="#Performing-cluster-analysis-using-hierarchical-clustering" class="headerlink" title="Performing cluster analysis using hierarchical clustering"></a>Performing cluster analysis using hierarchical clustering</h2><p>The hclust function in the package stats helps us perform hierarchical clustering.</p>
<h3 id="Getting-ready-44"><a href="#Getting-ready-44" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the data files for this chapter, do it now and ensure that the auto-mpg.csv file is in R’s working directory.</p>
<p>We will hierarchically cluster the data based on the variables mpg, cylinders, displacement, horsepower, weight, and acceleration.</p>
<h3 id="How-to-do-it…-45"><a href="#How-to-do-it…-45" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To perform cluster analysis using hierarchical clustering, follow these steps:</p>
<ol>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Define a convenience function to standardize the relevant variables and append the resulting variables to the original data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rdacb.scale.many &lt;- <span class="keyword">function</span> (dat, column_nos) &#123;</span><br><span class="line">  nms &lt;- names(dat)</span><br><span class="line">  <span class="keyword">for</span> (col <span class="keyword">in</span> column_nos) &#123;</span><br><span class="line">    name &lt;- paste0(nms[col], <span class="string">"_z"</span>)</span><br><span class="line">    dat[name] &lt;- scale(dat[, col])</span><br><span class="line">  &#125;</span><br><span class="line">  cat(paste(<span class="string">"Scaled"</span>, length(column_nos), <span class="string">"variable(s)\n"</span>))</span><br><span class="line"> dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the preceding convenience function to standardize the variables of interest. We will ignore the variables No, <code>model_year</code>, and <code>car_name</code>:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- rdacb.scale.many(auto, <span class="number">2</span>:<span class="number">7</span>)</span><br><span class="line">&gt; <span class="comment"># See the variables now in auto</span></span><br><span class="line">&gt; names(auto)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"No"</span>             <span class="string">"mpg"</span></span><br><span class="line"> [<span class="number">3</span>] <span class="string">"cylinders"</span>      <span class="string">"displacement"</span></span><br><span class="line"> [<span class="number">5</span>] <span class="string">"horsepower"</span>     <span class="string">"weight"</span></span><br><span class="line"> [<span class="number">7</span>] <span class="string">"acceleration"</span>   <span class="string">"model_year"</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"car_name"</span>       <span class="string">"mpg_z"</span></span><br><span class="line">[<span class="number">11</span>] <span class="string">"cylinders_z"</span>    <span class="string">"displacement_z"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"horsepower_z"</span>   <span class="string">"weight_z"</span></span><br><span class="line">[<span class="number">15</span>] <span class="string">"acceleration_z"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the distance matrix to provide as input to the hclust function in the next step. We use Euclidean distances here:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dis &lt;- dist(auto[,<span class="number">10</span>:<span class="number">15</span>], method = <span class="string">"euclidean"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the hclust function to perform hierarchical clustering:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fit &lt;- hclust(dis, method = <span class="string">"ward"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the dendrogram representing the result of clustering. The result looks very crowded at the bottom because the function plots every single case in the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(fit, labels = <span class="literal">FALSE</span>, hang = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_4.jpeg" alt=""></p>
</li>
<li><p>Select a value for K and place a rectangle around each of the K clusters. We use k=4 in the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rect.hclust(fit, k=<span class="number">4</span>, border=<span class="string">"blue"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_5.jpeg" alt=""></p>
</li>
<li><p>Get the cluster to which each case belongs:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; cluster &lt;- cutree(fit, k=<span class="number">4</span>)</span><br><span class="line">&gt; cluster</span><br><span class="line">  [<span class="number">1</span>] <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"> [<span class="number">26</span>] <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"> [<span class="number">51</span>] <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"> [<span class="number">76</span>] <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line">[<span class="number">101</span>] <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">[<span class="number">126</span>] <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">[<span class="number">151</span>] <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">[<span class="number">176</span>] <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line">[<span class="number">201</span>] <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">[<span class="number">226</span>] <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line">[<span class="number">251</span>] <span class="number">1</span> <span class="number">4</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">[<span class="number">276</span>] <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">[<span class="number">301</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line">[<span class="number">326</span>] <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">[<span class="number">351</span>] <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line">[<span class="number">376</span>] <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">4</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-42"><a href="#How-it-works…-42" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the data is read and in step 2 we define the convenience function for scaling a set of variables in a data frame.</p>
<p>In step 3 the convenience function is used to scale only the variables of interest. We leave out the No, <code>model_year</code>, and <code>car_name</code> variables.</p>
<p>In step 4 the distance matrix is created based on the standardized values of the relevant variables. We have computed Euclidean distances; other possibilities are: maximum, manhattan, canberra, binary, and minkowski.</p>
<p>In step 5 the distance matrix is passed to the hclust function to create the clustering model. We specified method = “ward” to use Ward’s method, which tries to get compact spherical clusters. The hclust function also supports single, complete, average, mcquitty, median, and centroid.</p>
<p>In step 6 the resulting dendrogram is plotted. We specified labels=FALSE because we have too many cases and printing them will only add clutter. With a smaller dataset, using labels = TRUE will make sense. The hang argument controls the distance from the bottom of the dendrogram to the labels. Since we are not using labels, we specified hang = 0 to prevent numerous vertical lines below the dendrogram.</p>
<p>The dendrogram shows all the cases at the bottom (too numerous to distinguish in our plot) and shows the step-by-step agglomeration of the clusters. The dendrogram is organized in such a way that we can obtain a desired set of clusters, say K, by drawing a horizontal line in such a way that it cuts across exactly K vertical lines on the dendrogram.</p>
<p>Step 7 show how to use the rect.hclust function to demarcate the cases comprising the various clusters for a selected value of k.</p>
<p>Step 8 shows how we can use the cutree function to identify, for a specific K, which cluster each case of our data belongs to.</p>
<h3 id="See-also…-21"><a href="#See-also…-21" class="headerlink" title="See also…"></a>See also…</h3><p>Performing cluster analysis using K-means clustering in this chapter</p>
<h2 id="Reducing-dimensionality-with-principal-component-analysis"><a href="#Reducing-dimensionality-with-principal-component-analysis" class="headerlink" title="Reducing dimensionality with principal component analysis"></a>Reducing dimensionality with principal component analysis</h2><p>The stats package offers the prcomp function to perform PCA. This recipe shows you how to perform PCA using these capabilities.</p>
<h3 id="Getting-ready-45"><a href="#Getting-ready-45" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that the BostonHousing.csv file is in your R working directory. We want to predict MEDV based on the remaining 13 predictor variables. We will use PCA to reduce the dimensionality.</p>
<h3 id="How-to-do-it…-46"><a href="#How-to-do-it…-46" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To reduce dimensionality with PCA, follow the steps:</p>
<ol>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh &lt;- read.csv(<span class="string">"BostonHousing.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the correlation matrix to check whether some variables are highly correlated and whether PCA has the potential to yield some dimensionality reduction. Since we are interested in reducing the dimensionality of the predictor variables, we leave out the outcome variable MEDV:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; round(cor(bh[,-<span class="number">14</span>]),<span class="number">2</span>)</span><br><span class="line">         CRIM    ZN INDUS  CHAS   NOX    RM   AGE</span><br><span class="line">CRIM     <span class="number">1.00</span> -<span class="number">0.20</span>  <span class="number">0.41</span> -<span class="number">0.06</span>  <span class="number">0.42</span> -<span class="number">0.22</span>  <span class="number">0.35</span></span><br><span class="line">ZN      -<span class="number">0.20</span>  <span class="number">1.00</span> -<span class="number">0.53</span> -<span class="number">0.04</span> -<span class="number">0.52</span>  <span class="number">0.31</span> -<span class="number">0.57</span></span><br><span class="line">INDUS    <span class="number">0.41</span> -<span class="number">0.53</span>  <span class="number">1.00</span>  <span class="number">0.06</span>  <span class="number">0.76</span> -<span class="number">0.39</span>  <span class="number">0.64</span></span><br><span class="line">CHAS    -<span class="number">0.06</span> -<span class="number">0.04</span>  <span class="number">0.06</span>  <span class="number">1.00</span>  <span class="number">0.09</span>  <span class="number">0.09</span>  <span class="number">0.09</span></span><br><span class="line">NOX      <span class="number">0.42</span> -<span class="number">0.52</span>  <span class="number">0.76</span>  <span class="number">0.09</span>  <span class="number">1.00</span> -<span class="number">0.30</span>  <span class="number">0.73</span></span><br><span class="line">RM      -<span class="number">0.22</span>  <span class="number">0.31</span> -<span class="number">0.39</span>  <span class="number">0.09</span> -<span class="number">0.30</span>  <span class="number">1.00</span> -<span class="number">0.24</span></span><br><span class="line">AGE      <span class="number">0.35</span> -<span class="number">0.57</span>  <span class="number">0.64</span>  <span class="number">0.09</span>  <span class="number">0.73</span> -<span class="number">0.24</span>  <span class="number">1.00</span></span><br><span class="line">DIS     -<span class="number">0.38</span>  <span class="number">0.66</span> -<span class="number">0.71</span> -<span class="number">0.10</span> -<span class="number">0.77</span>  <span class="number">0.21</span> -<span class="number">0.75</span></span><br><span class="line">RAD      <span class="number">0.63</span> -<span class="number">0.31</span>  <span class="number">0.60</span> -<span class="number">0.01</span>  <span class="number">0.61</span> -<span class="number">0.21</span>  <span class="number">0.46</span></span><br><span class="line">TAX      <span class="number">0.58</span> -<span class="number">0.31</span>  <span class="number">0.72</span> -<span class="number">0.04</span>  <span class="number">0.67</span> -<span class="number">0.29</span>  <span class="number">0.51</span></span><br><span class="line">PTRATIO  <span class="number">0.29</span> -<span class="number">0.39</span>  <span class="number">0.38</span> -<span class="number">0.12</span>  <span class="number">0.19</span> -<span class="number">0.36</span>  <span class="number">0.26</span></span><br><span class="line">B       -<span class="number">0.39</span>  <span class="number">0.18</span> -<span class="number">0.36</span>  <span class="number">0.05</span> -<span class="number">0.38</span>  <span class="number">0.13</span> -<span class="number">0.27</span></span><br><span class="line">LSTAT    <span class="number">0.46</span> -<span class="number">0.41</span>  <span class="number">0.60</span> -<span class="number">0.05</span>  <span class="number">0.59</span> -<span class="number">0.61</span>  <span class="number">0.60</span></span><br><span class="line">          DIS   RAD   TAX PTRATIO     B LSTAT</span><br><span class="line">CRIM    -<span class="number">0.38</span>  <span class="number">0.63</span>  <span class="number">0.58</span>    <span class="number">0.29</span> -<span class="number">0.39</span>  <span class="number">0.46</span></span><br><span class="line">ZN       <span class="number">0.66</span> -<span class="number">0.31</span> -<span class="number">0.31</span>   -<span class="number">0.39</span>  <span class="number">0.18</span> -<span class="number">0.41</span></span><br><span class="line">INDUS   -<span class="number">0.71</span>  <span class="number">0.60</span>  <span class="number">0.72</span>    <span class="number">0.38</span> -<span class="number">0.36</span>  <span class="number">0.60</span></span><br><span class="line">CHAS    -<span class="number">0.10</span> -<span class="number">0.01</span> -<span class="number">0.04</span>   -<span class="number">0.12</span>  <span class="number">0.05</span> -<span class="number">0.05</span></span><br><span class="line">NOX     -<span class="number">0.77</span>  <span class="number">0.61</span>  <span class="number">0.67</span>    <span class="number">0.19</span> -<span class="number">0.38</span>  <span class="number">0.59</span></span><br><span class="line">RM       <span class="number">0.21</span> -<span class="number">0.21</span> -<span class="number">0.29</span>   -<span class="number">0.36</span>  <span class="number">0.13</span> -<span class="number">0.61</span></span><br><span class="line">AGE     -<span class="number">0.75</span>  <span class="number">0.46</span>  <span class="number">0.51</span>    <span class="number">0.26</span> -<span class="number">0.27</span>  <span class="number">0.60</span></span><br><span class="line">DIS      <span class="number">1.00</span> -<span class="number">0.49</span> -<span class="number">0.53</span>   -<span class="number">0.23</span>  <span class="number">0.29</span> -<span class="number">0.50</span></span><br><span class="line">RAD     -<span class="number">0.49</span>  <span class="number">1.00</span>  <span class="number">0.91</span>    <span class="number">0.46</span> -<span class="number">0.44</span>  <span class="number">0.49</span></span><br><span class="line">TAX     -<span class="number">0.53</span>  <span class="number">0.91</span>  <span class="number">1.00</span>    <span class="number">0.46</span> -<span class="number">0.44</span>  <span class="number">0.54</span></span><br><span class="line">PTRATIO -<span class="number">0.23</span>  <span class="number">0.46</span>  <span class="number">0.46</span>    <span class="number">1.00</span> -<span class="number">0.18</span>  <span class="number">0.37</span></span><br><span class="line">B        <span class="number">0.29</span> -<span class="number">0.44</span> -<span class="number">0.44</span>   -<span class="number">0.18</span>  <span class="number">1.00</span> -<span class="number">0.37</span></span><br><span class="line">LSTAT   -<span class="number">0.50</span>  <span class="number">0.49</span>  <span class="number">0.54</span>    <span class="number">0.37</span> -<span class="number">0.37</span>  <span class="number">1.00</span></span><br></pre></td></tr></table></figure>
<p> Ignoring the main diagonal, we see several correlations above 0.5, and a PCA can help to reduce the dimensionality.</p>
</li>
<li><p>We can perform the preceding step visually as well by plotting the scatterplot matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(bh[,-<span class="number">14</span>])</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_6.jpeg" alt=""></p>
</li>
<li><p>Build the PCA model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh.pca &lt;- prcomp(bh[,-<span class="number">14</span>], scale = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine the rotations for the principal components generated:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&gt; print(bh.pca)</span><br><span class="line"></span><br><span class="line">Standard deviations:</span><br><span class="line"> [<span class="number">1</span>] <span class="number">2.4752472</span> <span class="number">1.1971947</span> <span class="number">1.1147272</span> <span class="number">0.9260535</span> <span class="number">0.9136826</span></span><br><span class="line"> [<span class="number">6</span>] <span class="number">0.8108065</span> <span class="number">0.7316803</span> <span class="number">0.6293626</span> <span class="number">0.5262541</span> <span class="number">0.4692950</span></span><br><span class="line">[<span class="number">11</span>] <span class="number">0.4312938</span> <span class="number">0.4114644</span> <span class="number">0.2520104</span></span><br><span class="line"></span><br><span class="line">Rotation:</span><br><span class="line">                 PC1         PC2         PC3         PC4</span><br><span class="line">CRIM     <span class="number">0.250951397</span> -<span class="number">0.31525237</span>  <span class="number">0.24656649</span> -<span class="number">0.06177071</span></span><br><span class="line">ZN      -<span class="number">0.256314541</span> -<span class="number">0.32331290</span>  <span class="number">0.29585782</span> -<span class="number">0.12871159</span></span><br><span class="line">INDUS    <span class="number">0.346672065</span>  <span class="number">0.11249291</span> -<span class="number">0.01594592</span> -<span class="number">0.01714571</span></span><br><span class="line">CHAS     <span class="number">0.005042434</span>  <span class="number">0.45482914</span>  <span class="number">0.28978082</span> -<span class="number">0.81594136</span></span><br><span class="line">NOX      <span class="number">0.342852313</span>  <span class="number">0.21911553</span>  <span class="number">0.12096411</span>  <span class="number">0.12822614</span></span><br><span class="line">RM      -<span class="number">0.189242570</span>  <span class="number">0.14933154</span>  <span class="number">0.59396117</span>  <span class="number">0.28059184</span></span><br><span class="line">AGE      <span class="number">0.313670596</span>  <span class="number">0.31197778</span> -<span class="number">0.01767481</span>  <span class="number">0.17520603</span></span><br><span class="line">DIS     -<span class="number">0.321543866</span> -<span class="number">0.34907000</span> -<span class="number">0.04973627</span> -<span class="number">0.21543585</span></span><br><span class="line">RAD      <span class="number">0.319792768</span> -<span class="number">0.27152094</span>  <span class="number">0.28725483</span> -<span class="number">0.13234996</span></span><br><span class="line">TAX      <span class="number">0.338469147</span> -<span class="number">0.23945365</span>  <span class="number">0.22074447</span> -<span class="number">0.10333509</span></span><br><span class="line">PTRATIO  <span class="number">0.204942258</span> -<span class="number">0.30589695</span> -<span class="number">0.32344627</span> -<span class="number">0.28262198</span></span><br><span class="line">B       -<span class="number">0.202972612</span>  <span class="number">0.23855944</span> -<span class="number">0.30014590</span> -<span class="number">0.16849850</span></span><br><span class="line">LSTAT    <span class="number">0.309759840</span> -<span class="number">0.07432203</span> -<span class="number">0.26700025</span> -<span class="number">0.06941441</span></span><br><span class="line">                 PC5         PC6          PC7          PC8</span><br><span class="line">CRIM     <span class="number">0.082156919</span> -<span class="number">0.21965961</span>  <span class="number">0.777607207</span> -<span class="number">0.153350477</span></span><br><span class="line">ZN       <span class="number">0.320616987</span> -<span class="number">0.32338810</span> -<span class="number">0.274996280</span>  <span class="number">0.402680309</span></span><br><span class="line">INDUS   -<span class="number">0.007811194</span> -<span class="number">0.07613790</span> -<span class="number">0.339576454</span> -<span class="number">0.173931716</span></span><br><span class="line">CHAS     <span class="number">0.086530945</span>  <span class="number">0.16749014</span>  <span class="number">0.074136208</span>  <span class="number">0.024662148</span></span><br><span class="line">NOX      <span class="number">0.136853557</span> -<span class="number">0.15298267</span> -<span class="number">0.199634840</span> -<span class="number">0.080120560</span></span><br><span class="line">RM      -<span class="number">0.423447195</span>  <span class="number">0.05926707</span>  <span class="number">0.063939924</span>  <span class="number">0.326752259</span></span><br><span class="line">AGE      <span class="number">0.016690847</span> -<span class="number">0.07170914</span>  <span class="number">0.116010713</span>  <span class="number">0.600822917</span></span><br><span class="line">DIS      <span class="number">0.098592247</span>  <span class="number">0.02343872</span> -<span class="number">0.103900440</span>  <span class="number">0.121811982</span></span><br><span class="line">RAD     -<span class="number">0.204131621</span> -<span class="number">0.14319401</span> -<span class="number">0.137942546</span> -<span class="number">0.080358311</span></span><br><span class="line">TAX     -<span class="number">0.130460565</span> -<span class="number">0.19293428</span> -<span class="number">0.314886835</span> -<span class="number">0.082774347</span></span><br><span class="line">PTRATIO -<span class="number">0.584002232</span>  <span class="number">0.27315330</span>  <span class="number">0.002323869</span>  <span class="number">0.317884202</span></span><br><span class="line">B       -<span class="number">0.345606947</span> -<span class="number">0.80345454</span>  <span class="number">0.070294759</span>  <span class="number">0.004922915</span></span><br><span class="line">LSTAT    <span class="number">0.394561129</span> -<span class="number">0.05321583</span>  <span class="number">0.087011169</span>  <span class="number">0.424352926</span></span><br><span class="line">               PC9         PC10        PC11         PC12</span><br><span class="line">CRIM     <span class="number">0.26039028</span> -<span class="number">0.019369130</span> -<span class="number">0.10964435</span> -<span class="number">0.086761070</span></span><br><span class="line">ZN       <span class="number">0.35813749</span> -<span class="number">0.267527234</span>  <span class="number">0.26275629</span>  <span class="number">0.071425278</span></span><br><span class="line">INDUS    <span class="number">0.64441615</span>  <span class="number">0.363532262</span> -<span class="number">0.30316943</span>  <span class="number">0.113199629</span></span><br><span class="line">CHAS    -<span class="number">0.01372777</span>  <span class="number">0.006181836</span>  <span class="number">0.01392667</span>  <span class="number">0.003982683</span></span><br><span class="line">NOX     -<span class="number">0.01852201</span> -<span class="number">0.231056455</span>  <span class="number">0.11131888</span> -<span class="number">0.804322567</span></span><br><span class="line">RM       <span class="number">0.04789804</span>  <span class="number">0.431420193</span>  <span class="number">0.05316154</span> -<span class="number">0.152872864</span></span><br><span class="line">AGE     -<span class="number">0.06756218</span> -<span class="number">0.362778957</span> -<span class="number">0.45915939</span>  <span class="number">0.211936074</span></span><br><span class="line">DIS     -<span class="number">0.15329124</span>  <span class="number">0.171213138</span> -<span class="number">0.69569257</span> -<span class="number">0.390941129</span></span><br><span class="line">RAD     -<span class="number">0.47089067</span> -<span class="number">0.021909452</span>  <span class="number">0.03654388</span>  <span class="number">0.107025890</span></span><br><span class="line">TAX     -<span class="number">0.17656339</span>  <span class="number">0.035168348</span> -<span class="number">0.10483575</span>  <span class="number">0.215191126</span></span><br><span class="line">PTRATIO  <span class="number">0.25442836</span> -<span class="number">0.153430488</span>  <span class="number">0.17450534</span> -<span class="number">0.209598826</span></span><br><span class="line">B       -<span class="number">0.04489802</span>  <span class="number">0.096515117</span>  <span class="number">0.01927490</span> -<span class="number">0.041723158</span></span><br><span class="line">LSTAT   -<span class="number">0.19522139</span>  <span class="number">0.600711409</span>  <span class="number">0.27138243</span> -<span class="number">0.055225960</span></span><br><span class="line">               PC13</span><br><span class="line">CRIM     <span class="number">0.045952304</span></span><br><span class="line">ZN      -<span class="number">0.080918973</span></span><br><span class="line">INDUS   -<span class="number">0.251076540</span></span><br><span class="line">CHAS     <span class="number">0.035921715</span></span><br><span class="line">NOX      <span class="number">0.043630446</span></span><br><span class="line">RM       <span class="number">0.045567096</span></span><br><span class="line">AGE     -<span class="number">0.038550683</span></span><br><span class="line">DIS     -<span class="number">0.018298538</span></span><br><span class="line">RAD     -<span class="number">0.633489720</span></span><br><span class="line">TAX      <span class="number">0.720233448</span></span><br><span class="line">PTRATIO  <span class="number">0.023398052</span></span><br><span class="line">B       -<span class="number">0.004463073</span></span><br><span class="line">LSTAT    <span class="number">0.024431677</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine the importance of the principal components:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; summary(bh.pca)</span><br><span class="line"></span><br><span class="line">Importance of components:</span><br><span class="line">                         PC1    PC2     PC3     PC4</span><br><span class="line">Standard deviation     <span class="number">2.4752</span> <span class="number">1.1972</span> <span class="number">1.11473</span> <span class="number">0.92605</span></span><br><span class="line">Proportion of Variance <span class="number">0.4713</span> <span class="number">0.1103</span> <span class="number">0.09559</span> <span class="number">0.06597</span></span><br><span class="line">Cumulative Proportion  <span class="number">0.4713</span> <span class="number">0.5816</span> <span class="number">0.67713</span> <span class="number">0.74310</span></span><br><span class="line">                           PC5     PC6     PC7     PC8</span><br><span class="line">Standard deviation     <span class="number">0.91368</span> <span class="number">0.81081</span> <span class="number">0.73168</span> <span class="number">0.62936</span></span><br><span class="line">Proportion of Variance <span class="number">0.06422</span> <span class="number">0.05057</span> <span class="number">0.04118</span> <span class="number">0.03047</span></span><br><span class="line">Cumulative Proportion  <span class="number">0.80732</span> <span class="number">0.85789</span> <span class="number">0.89907</span> <span class="number">0.92954</span></span><br><span class="line">                          PC9    PC10    PC11    PC12</span><br><span class="line">Standard deviation     <span class="number">0.5263</span> <span class="number">0.46930</span> <span class="number">0.43129</span> <span class="number">0.41146</span></span><br><span class="line">Proportion of Variance <span class="number">0.0213</span> <span class="number">0.01694</span> <span class="number">0.01431</span> <span class="number">0.01302</span></span><br><span class="line">Cumulative Proportion  <span class="number">0.9508</span> <span class="number">0.96778</span> <span class="number">0.98209</span> <span class="number">0.99511</span></span><br><span class="line">                        PC13</span><br><span class="line">Standard deviation     <span class="number">0.25201</span></span><br><span class="line">Proportion of Variance <span class="number">0.00489</span></span><br><span class="line">Cumulative Proportion  <span class="number">1.00000</span></span><br></pre></td></tr></table></figure>
<p> Note that from the reported cumulative proportions, the first seven principal components account for almost 90% of the variance.</p>
</li>
<li><p>Visualize the importance of the components through a scree plot or a barplot:<br> For a barplot use the following command:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># barplot</span></span><br><span class="line">&gt; plot(bh.pca)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_7.jpeg" alt=""></p>
<p> For a scree plot the following command can be used:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># scree plot</span></span><br><span class="line">&gt; plot(bh.pca, type = <span class="string">"lines"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_8.jpeg" alt=""></p>
</li>
<li><p>Create a biplot of the PCA results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; biplot(bh.pca, col = c(<span class="string">"gray"</span>, <span class="string">"black"</span>))</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_9.jpeg" alt=""></p>
</li>
<li><p>Use the x component of bh.pca to see the computed principal component values for each of these cases:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; head(bh.pca$x, <span class="number">3</span>)</span><br><span class="line">           PC1       PC2        PC3       PC4</span><br><span class="line">[<span class="number">1</span>,] -<span class="number">2.096223</span> <span class="number">0.7723484</span>  <span class="number">0.3426037</span> <span class="number">0.8908924</span></span><br><span class="line">[<span class="number">2</span>,] -<span class="number">1.455811</span> <span class="number">0.5914000</span> -<span class="number">0.6945120</span> <span class="number">0.4869766</span></span><br><span class="line">[<span class="number">3</span>,] -<span class="number">2.072547</span> <span class="number">0.5990466</span>  <span class="number">0.1669564</span> <span class="number">0.7384734</span></span><br><span class="line">           PC5        PC6       PC7        PC8</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">0.4226521</span> -<span class="number">0.3150264</span> <span class="number">0.3183257</span> -<span class="number">0.2955393</span></span><br><span class="line">[<span class="number">2</span>,] -<span class="number">0.1956820</span>  <span class="number">0.2639620</span> <span class="number">0.5533137</span>  <span class="number">0.2234488</span></span><br><span class="line">[<span class="number">3</span>,] -<span class="number">0.9336102</span>  <span class="number">0.4476516</span> <span class="number">0.4840809</span> -<span class="number">0.1050622</span></span><br><span class="line">             PC9        PC10        PC11</span><br><span class="line">[<span class="number">1</span>,] -<span class="number">0.42451671</span> -<span class="number">0.63957348</span> -<span class="number">0.03296774</span></span><br><span class="line">[<span class="number">2</span>,] -<span class="number">0.16679701</span> -<span class="number">0.08415319</span> -<span class="number">0.64017631</span></span><br><span class="line">[<span class="number">3</span>,]  <span class="number">0.06970615</span>  <span class="number">0.18020170</span> -<span class="number">0.48707471</span></span><br><span class="line">          PC12        PC13</span><br><span class="line">[<span class="number">1</span>,] -<span class="number">0.01942101</span>  <span class="number">0.36561351</span></span><br><span class="line">[<span class="number">2</span>,]  <span class="number">0.12567304</span> -<span class="number">0.07064958</span></span><br><span class="line">[<span class="number">3</span>,] -<span class="number">0.13319472</span> -<span class="number">0.01400794</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>See the rotations and standard deviations using the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; bh.pca$rotation</span><br><span class="line">&gt; bh.pca$sdev</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-43"><a href="#How-it-works…-43" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the data is read.</p>
<p>In step 2 the correlation matrix of the relevant dimensions is generated to examine if there is scope for PCA to yield some dimensionality reduction. If most of the correlations are low, then PCA might not yield any reductions.</p>
<p>In step 3 the same is done graphically by showing a scatterplot matrix of the relevant variables.</p>
<p>In step 4 the PCA model is generated using the prcomp function. We used scale=TRUE to generate the model based on the correlation matrix and not the covariance matrix.</p>
<p>In step 5 the resulting model is printed. It shows the standard deviations of the variables used and the rotations for all the principal components in decreasing order of importance.</p>
<p>In step 6 the summary function is used to get different information on the model. This display is also ordered in decreasing order of importance of the components. For each principal component, this shows its standard deviation, proportion of variance, and the cumulative proportion of variance. We can use this to identify the components that capture most of the variability in the dataset. For example, the output tells us that the top 7 of the 13 principal components account for almost 90 percent of the variance.</p>
<p>In step 7 a barplot as well as a scree plot of the variances by PCA is generated using the plot function.</p>
<p>Step 8 shows how to generate the biplot. It uses the first two principal components as the main axes and shows how each variable loads on these two components. The top and right axes correspond to the scores of the data points on the two principal components.</p>
<p>In step 9 the predict function is used to view the principal component scores for each of our data points. You can also use this function to compute the principal component scores for new data:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; predict(bh.pca, newdata = …)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Chapter-6-Lessons-from-History-–-Time-Series-Analysis"><a href="#Chapter-6-Lessons-from-History-–-Time-Series-Analysis" class="headerlink" title="Chapter 6. Lessons from History – Time Series Analysis"></a>Chapter 6. Lessons from History – Time Series Analysis</h1><p>In this chapter, we will cover:</p>
<ul>
<li>Creating and examining date objects</li>
<li>Operating on date objects</li>
<li>Performing preliminary analyses on time series data</li>
<li>Using time series objects</li>
<li>Decomposing time series</li>
<li>Filtering time series data</li>
<li>Smoothing and forecasting using the Holt-Winters method</li>
<li>Building an automated ARIMA Model</li>
</ul>
<h2 id="Introduction-5"><a href="#Introduction-5" class="headerlink" title="Introduction"></a>Introduction</h2><p>R has exceptional features for time series analysis and this chapter covers the topic through a chosen set of recipes. The stats package provides a basic set of features and several other packages go beyond.</p>
<h2 id="Creating-and-examining-date-objects"><a href="#Creating-and-examining-date-objects" class="headerlink" title="Creating and examining date objects"></a>Creating and examining date objects</h2><p>The base R package provides date functionality. This grab-bag recipe shows you several date-related operations in R. R internally represents dates as the number of days from 1 January, 1970.</p>
<h3 id="Getting-ready-46"><a href="#Getting-ready-46" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>In this recipe, we will only be using features from the base package and not from any external data. Therefore, you do not need to perform any preparatory steps.</p>
<h3 id="How-to-do-it…-47"><a href="#How-to-do-it…-47" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Internally, R represents dates as the number of days from 1 January, 1970:</p>
<ol>
<li><p>Get today’s date:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Sys.Date()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a date object from a string:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Supply year as two digits</span></span><br><span class="line">&gt; <span class="comment"># Note correspondence between separators in the date string and the format string</span></span><br><span class="line">&gt; as.Date(<span class="string">"1/1/80"</span>, format = <span class="string">"%m/%d/%y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Supply year as 4 digits</span></span><br><span class="line">&gt; <span class="comment"># Note uppercase Y below instead of lowercase y as above</span></span><br><span class="line">&gt; as.Date(<span class="string">"1/1/1980"</span>, format = <span class="string">"%m/%d/%Y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># If you omit format string, you must give date as "yyyy/mm/dd" or as "yyyy-mm-dd"</span></span><br><span class="line">&gt; as.Date(<span class="string">"1970/1/1"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1970-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; as.Date(<span class="string">"70/1/1"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"0070-01-01"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Use other options for separators (this example uses hyphens) in the format string, and also see the underlying numeric value:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt &lt;- as.Date(<span class="string">"1-1-70"</span>, format = <span class="string">"%m-%d-%y"</span>)</span><br><span class="line">&gt; as.numeric(dt)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Explore other format string options:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; as.Date(<span class="string">"Jan 15, 2015"</span>, format = <span class="string">"%b %d, %Y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-01-15"</span></span><br><span class="line"></span><br><span class="line">&gt; as.Date(<span class="string">"January 15, 15"</span>, format = <span class="string">"%B %d, %y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-01-15"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create dates from numbers by typecasting:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt &lt;- <span class="number">1000</span></span><br><span class="line">&gt; class(dt) &lt;- <span class="string">"Date"</span></span><br><span class="line">&gt; dt                 <span class="comment"># 1000 days from 1/1/70</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1972-09-27"</span></span><br><span class="line"></span><br><span class="line">&gt; dt &lt;- -<span class="number">1000</span></span><br><span class="line">&gt; class(dt) &lt;- <span class="string">"Date"</span></span><br><span class="line">&gt; dt                 <span class="comment"># 1000 days before 1/1/70</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1967-04-07"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create dates directly from numbers by setting the origin date:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; as.Date(<span class="number">1000</span>, origin = as.Date(<span class="string">"1980-03-31"</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1982-12-26"</span></span><br><span class="line"></span><br><span class="line">&gt; as.Date(-<span class="number">1000</span>, origin = as.Date(<span class="string">"1980-03-31"</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1977-07-05"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Examine date components:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt &lt;- as.Date(<span class="number">1000</span>, origin = as.Date(<span class="string">"1980-03-31"</span>))</span><br><span class="line">&gt; dt</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1982-12-26"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Get year as four digits</span></span><br><span class="line">&gt; format(dt, <span class="string">"%Y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1982"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Get the year as a number rather than as character string</span></span><br><span class="line">&gt; as.numeric(format(dt, <span class="string">"%Y"</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">1982</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Get year as two digits</span></span><br><span class="line">&gt; format(dt, <span class="string">"%y"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"82"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Get month</span></span><br><span class="line">&gt; format(dt, <span class="string">"%m"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"12"</span></span><br><span class="line"></span><br><span class="line">&gt; as.numeric(format(dt, <span class="string">"%m"</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Get month as string</span></span><br><span class="line">&gt; format(dt, <span class="string">"%b"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"Dec"</span></span><br><span class="line"></span><br><span class="line">&gt; format(dt, <span class="string">"%B"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"December"</span></span><br><span class="line"></span><br><span class="line">&gt; months(dt)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"December"</span></span><br><span class="line"></span><br><span class="line">&gt; weekdays(dt)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"Sunday"</span></span><br><span class="line"></span><br><span class="line">&gt; quarters(dt)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Q4"</span></span><br><span class="line"></span><br><span class="line">&gt; julian(dt)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">4742</span></span><br><span class="line">attr(,<span class="string">"origin"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"1970-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; julian(dt, origin = as.Date(<span class="string">"1980-03-31"</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">1000</span></span><br><span class="line">attr(,<span class="string">"origin"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-03-31"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-44"><a href="#How-it-works…-44" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 shows how to get the system date.</p>
<p>Steps 2 through 4 show how to create dates from strings. You can see that, by specifying the format string appropriately, we can read dates from almost any string representation. We can use any separators, as long as we mimic them in the format string. The following table summarizes the formatting options for the components of the date:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Format specifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%d</td>
<td>Day of month as a number—for example, 15</td>
</tr>
<tr>
<td style="text-align:left">%m</td>
<td>Month as a number—for example, 10</td>
</tr>
<tr>
<td style="text-align:left">%b</td>
<td>Abbreviated string representation of month—for example, “Jan”</td>
</tr>
<tr>
<td style="text-align:left">%B</td>
<td>Complete string representation of month—for example, “January”</td>
</tr>
<tr>
<td style="text-align:left">%y</td>
<td>Year as two digits—for example, 87</td>
</tr>
<tr>
<td style="text-align:left">%Y</td>
<td>Year as four digits—for example, 2001</td>
</tr>
</tbody>
</table>
<p>Step 5 shows how an integer can be typecast as a date. Internally, R represents dates as the number of days from 1 January, 1970 and hence zero corresponds to 1 January, 1970. We can convert positive and negative numbers to dates. Negative numbers give dates before 1/1/1970.</p>
<p>Step 6 shows how to find the date with a specific offset from a given date (origin).</p>
<p>Step 7 shows how to examine the individual components of a date object using the format function along with the appropriate format specification (see the preceding table) for the desired component. Step 7 also shows the use of the months, weekdays, and julian functions for getting the month, day of the week, and the Julian date corresponding to a date. If we omit the origin in the julian function, R assumes 1/1/1970 as the origin.</p>
<h3 id="See-also…-22"><a href="#See-also…-22" class="headerlink" title="See also…"></a>See also…</h3><p>The Operating on date objects recipe in this chapter</p>
<h2 id="Operating-on-date-objects"><a href="#Operating-on-date-objects" class="headerlink" title="Operating on date objects"></a>Operating on date objects</h2><p>R supports many useful manipulations with date objects such as date addition and subtraction, and the creation of date sequences. This recipe shows many of these operations in action. For details on creating and examining date objects, see the previous recipe Creating and examining date objects, in this chapter.</p>
<h3 id="Getting-ready-47"><a href="#Getting-ready-47" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>The base R package provides date functionality, and you do not need any preparatory steps.</p>
<h3 id="How-to-do-it…-48"><a href="#How-to-do-it…-48" class="headerlink" title="How to do it…"></a>How to do it…</h3><ol>
<li><p>Perform the addition and subtraction of days from date objects:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt &lt;- as.Date(<span class="string">"1/1/2001"</span>, format = <span class="string">"%m/%d/%Y"</span>)</span><br><span class="line">&gt; dt</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"2001-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; dt + <span class="number">100</span>                 <span class="comment"># Date 100 days from dt</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"2001-04-11"</span></span><br><span class="line"></span><br><span class="line">&gt; dt + <span class="number">31</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"2001-02-01"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Subtract date objects to find the number of days between two dates:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt1 &lt;- as.Date(<span class="string">"1/1/2001"</span>, format = <span class="string">"%m/%d/%Y"</span>)</span><br><span class="line">&gt; dt2 &lt;- as.Date(<span class="string">"2/1/2001"</span>, format = <span class="string">"%m/%d/%Y"</span>)</span><br><span class="line">&gt; dt1-dt1</span><br><span class="line"></span><br><span class="line">Time difference of <span class="number">0</span> days</span><br><span class="line"></span><br><span class="line">&gt; dt2-dt1</span><br><span class="line"></span><br><span class="line">Time difference of <span class="number">31</span> days</span><br><span class="line"></span><br><span class="line">&gt; dt1-dt2</span><br><span class="line"></span><br><span class="line">Time difference of -<span class="number">31</span> days</span><br><span class="line"></span><br><span class="line">&gt; as.numeric(dt2-dt1)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">31</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Compare date objects:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; dt2 &gt; dt1</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">&gt; dt2 == dt1</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create date sequences:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; d1 &lt;- as.Date(<span class="string">"1980/1/1"</span>)</span><br><span class="line">&gt; d2 &lt;- as.Date(<span class="string">"1982/1/1"</span>)</span><br><span class="line">&gt; <span class="comment"># Specify start date, end date and interval</span></span><br><span class="line">&gt; seq(d1, d2, <span class="string">"month"</span>)</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>] <span class="string">"1980-01-01"</span> <span class="string">"1980-02-01"</span> <span class="string">"1980-03-01"</span> <span class="string">"1980-04-01"</span></span><br><span class="line"> [<span class="number">5</span>] <span class="string">"1980-05-01"</span> <span class="string">"1980-06-01"</span> <span class="string">"1980-07-01"</span> <span class="string">"1980-08-01"</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"1980-09-01"</span> <span class="string">"1980-10-01"</span> <span class="string">"1980-11-01"</span> <span class="string">"1980-12-01"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"1981-01-01"</span> <span class="string">"1981-02-01"</span> <span class="string">"1981-03-01"</span> <span class="string">"1981-04-01"</span></span><br><span class="line">[<span class="number">17</span>] <span class="string">"1981-05-01"</span> <span class="string">"1981-06-01"</span> <span class="string">"1981-07-01"</span> <span class="string">"1981-08-01"</span></span><br><span class="line">[<span class="number">21</span>] <span class="string">"1981-09-01"</span> <span class="string">"1981-10-01"</span> <span class="string">"1981-11-01"</span> <span class="string">"1981-12-01"</span></span><br><span class="line">[<span class="number">25</span>] <span class="string">"1982-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; d3 &lt;- as.Date(<span class="string">"1980/1/5"</span>)</span><br><span class="line">&gt; seq(d1, d3, <span class="string">"day"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-01-01"</span> <span class="string">"1980-01-02"</span> <span class="string">"1980-01-03"</span> <span class="string">"1980-01-04"</span></span><br><span class="line">[<span class="number">5</span>] <span class="string">"1980-01-05"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># more interval options</span></span><br><span class="line">&gt; seq(d1, d2, <span class="string">"2 months"</span>)</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>] <span class="string">"1980-01-01"</span> <span class="string">"1980-03-01"</span> <span class="string">"1980-05-01"</span> <span class="string">"1980-07-01"</span></span><br><span class="line"> [<span class="number">5</span>] <span class="string">"1980-09-01"</span> <span class="string">"1980-11-01"</span> <span class="string">"1981-01-01"</span> <span class="string">"1981-03-01"</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"1981-05-01"</span> <span class="string">"1981-07-01"</span> <span class="string">"1981-09-01"</span> <span class="string">"1981-11-01"</span></span><br><span class="line">[<span class="number">13</span>] <span class="string">"1982-01-01"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Specify start date, interval and sequence length</span></span><br><span class="line">&gt; seq(from = d1, by = <span class="string">"4 months"</span>, length.out = <span class="number">4</span> )</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-01-01"</span> <span class="string">"1980-05-01"</span> <span class="string">"1980-09-01"</span> <span class="string">"1981-01-01"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Find a future or past date from a given date, based on an interval:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; seq(from = d1, by = <span class="string">"3 weeks"</span>, length.out = <span class="number">2</span>)[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"1980-01-22"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-45"><a href="#How-it-works…-45" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 shows how you can add and subtract days from a date to get the resulting date.</p>
<p>Step 2 shows how you can find the number of days between two dates through subtraction. The result is a difftime object that you can convert into a number if needed.</p>
<p>Step 3 shows the logical comparison of dates.</p>
<p>Step 4 shows two different ways to create sequences of dates. In one, you specify the from date, the to date, and the fixed interval by between the sequence elements as a string. In the other, you specify the from date, the interval, and the number of sequence elements you want. If using the latter approach, you have to name the arguments.</p>
<p>Step 5 shows how you can create sequences by specifying the intervals more flexibly.</p>
<h3 id="See-also…-23"><a href="#See-also…-23" class="headerlink" title="See also…"></a>See also…</h3><p>The Creating and examining date objects recipe in this chapter</p>
<h2 id="Performing-preliminary-analyses-on-time-series-data"><a href="#Performing-preliminary-analyses-on-time-series-data" class="headerlink" title="Performing preliminary analyses on time series data"></a>Performing preliminary analyses on time series data</h2><p>Before creating proper time series objects, we may want to do some preliminary analyses. This recipe shows you how.</p>
<h3 id="Getting-ready-48"><a href="#Getting-ready-48" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>The base R package provides all the necessary functionality. If you have not already downloaded the data files for this chapter, please do it now and ensure that they are located in your R working directory.</p>
<h3 id="How-to-do-it…-49"><a href="#How-to-do-it…-49" class="headerlink" title="How to do it…"></a>How to do it…</h3><ol>
<li><p>Read the file. We will use a data file that has the share prices of Walmart (downloaded from Yahoo Finance) between March 11, 1999 and January 15, 2015:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; wm &lt;- read.csv(<span class="string">"walmart.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>View the data as a line chart:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(wm$Adj.Close, type = <span class="string">"l"</span>)</span><br></pre></td></tr></table></figure>
<p> The data can be viewed as a line chart as follows:</p>
<p> <img src="img/5_2_10.jepg" alt=""></p>
</li>
<li><p>Compute and plot daily price movements:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; d &lt;- diff(wm$Adj.Close)</span><br><span class="line">&gt; plot(d, type = <span class="string">"l"</span>)</span><br></pre></td></tr></table></figure>
<p> The plotted daily price movements appear as follows:</p>
<p> <img src="img/5_2_11.jpeg" alt=""></p>
</li>
<li><p>Generate a histogram of the daily price changes, along with a density plot:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; hist(d, prob = <span class="literal">TRUE</span>, ylim = c(<span class="number">0</span>,<span class="number">0.8</span>), main = <span class="string">"Walmart stock"</span>, col = <span class="string">"blue"</span>)</span><br><span class="line">&gt; lines(density(d), lwd = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p> The following histogram shows daily price change:</p>
<p> <img src="img/5_2_12.jpeg" alt=""></p>
</li>
<li><p>Compute one-period returns:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; wmm &lt;- read.csv(<span class="string">"walmart-monthly.csv"</span>)</span><br><span class="line">&gt; wmm.ts &lt;- ts(wmm$Adj.Close)</span><br><span class="line">&gt; d &lt;- diff(wmm.ts)</span><br><span class="line">&gt; wmm.return &lt;- d/lag(wmm.ts, k=-<span class="number">1</span>)</span><br><span class="line">&gt; hist(wmm.return, prob = <span class="literal">TRUE</span>, col = <span class="string">"blue"</span>)</span><br></pre></td></tr></table></figure>
<p> The following histogram shows the output of the preceding command:</p>
<p> <img src="img/5_2_13.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-46"><a href="#How-it-works…-46" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data and step 2 plots it as a line chart.</p>
<p>Step 3 uses the diff function to generate single-period differences. It then uses the plot function to plot the differences. By default, the diff function computes single-period differences. You can use the lag argument to compute differences for greater lags. For example, the following calculates two-period lagged differences:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; diff(wmm$Adj.Close, lag = <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>Step 4 generates a histogram of one-period price changes. It uses prob=TRUE to generate a histogram based on proportions, and then adds on a density plot as well to give a higher-granularity view of the shape of the distribution.</p>
<p>Step 5 computes one-period returns for the stock. It does this by dividing the one-period differences by the stock value at the first of the two periods that the difference is based on. It then generates a histogram of the returns.</p>
<h3 id="See-also…-24"><a href="#See-also…-24" class="headerlink" title="See also…"></a>See also…</h3><p>The Using time series objects recipe in this chapter</p>
<h2 id="Using-time-series-objects"><a href="#Using-time-series-objects" class="headerlink" title="Using time series objects"></a>Using time series objects</h2><p>In this recipe, we look at various features to create and plot time-series objects. We will consider data with single and multiple time series.</p>
<h3 id="Getting-ready-49"><a href="#Getting-ready-49" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the data files for this chapter, do it now and ensure that the files are in your R working directory.</p>
<h3 id="How-to-do-it…-50"><a href="#How-to-do-it…-50" class="headerlink" title="How to do it…"></a>How to do it…</h3><ol>
<li><p>Read the data. The file has 100 rows and a single column named sales:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; s &lt;- read.csv(<span class="string">"ts-example.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the data to a simplistic time series object without any explicit notion of time:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.ts &lt;- ts(s)</span><br><span class="line">&gt; class(s.ts)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"ts"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the time series:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(s.ts)</span><br></pre></td></tr></table></figure>
<p> <img src="img/5_2_14.jpeg" alt=""></p>
</li>
<li><p>Create a proper time series object with time points:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.ts.a &lt;- ts(s, start = <span class="number">2002</span>)</span><br><span class="line">&gt; s.ts.a</span><br><span class="line">Time Series:</span><br><span class="line">Start = <span class="number">2002</span></span><br><span class="line">End = <span class="number">2101</span></span><br><span class="line">Frequency = <span class="number">1</span></span><br><span class="line">       sales</span><br><span class="line">  [<span class="number">1</span>,]    <span class="number">51</span></span><br><span class="line">  [<span class="number">2</span>,]    <span class="number">56</span></span><br><span class="line">  [<span class="number">3</span>,]    <span class="number">37</span></span><br><span class="line">  [<span class="number">4</span>,]   <span class="number">101</span></span><br><span class="line">  [<span class="number">5</span>,]    <span class="number">66</span></span><br><span class="line">  (output truncated)</span><br><span class="line">&gt; plot(s.ts.a)</span><br><span class="line">&gt; <span class="comment"># results show that R treated this as an annual</span></span><br><span class="line">&gt; <span class="comment"># time series with 2002 as the starting year</span></span><br></pre></td></tr></table></figure>
<p> The result of the preceding commands is seen in the following graph:</p>
<p> <img src="img/5_2_15.jpeg" alt=""></p>
<p> To create a monthly time series run the following command:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Create a monthly time series</span></span><br><span class="line">&gt; s.ts.m &lt;- ts(s, start = c(<span class="number">2002</span>,<span class="number">1</span>), frequency = <span class="number">12</span>)</span><br><span class="line">&gt; s.ts.m</span><br><span class="line"></span><br><span class="line">     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</span><br><span class="line"><span class="number">2002</span>  <span class="number">51</span>  <span class="number">56</span>  <span class="number">37</span> <span class="number">101</span>  <span class="number">66</span>  <span class="number">63</span>  <span class="number">45</span>  <span class="number">68</span>  <span class="number">70</span> <span class="number">107</span>  <span class="number">86</span> <span class="number">102</span></span><br><span class="line"><span class="number">2003</span>  <span class="number">90</span> <span class="number">102</span>  <span class="number">79</span>  <span class="number">95</span>  <span class="number">95</span> <span class="number">101</span> <span class="number">128</span> <span class="number">109</span> <span class="number">139</span> <span class="number">119</span> <span class="number">124</span> <span class="number">116</span></span><br><span class="line"><span class="number">2004</span> <span class="number">106</span> <span class="number">100</span> <span class="number">114</span> <span class="number">133</span> <span class="number">119</span> <span class="number">114</span> <span class="number">125</span> <span class="number">167</span> <span class="number">149</span> <span class="number">165</span> <span class="number">135</span> <span class="number">152</span></span><br><span class="line"><span class="number">2005</span> <span class="number">155</span> <span class="number">167</span> <span class="number">169</span> <span class="number">192</span> <span class="number">170</span> <span class="number">180</span> <span class="number">175</span> <span class="number">207</span> <span class="number">164</span> <span class="number">204</span> <span class="number">180</span> <span class="number">203</span></span><br><span class="line"><span class="number">2006</span> <span class="number">215</span> <span class="number">222</span> <span class="number">205</span> <span class="number">202</span> <span class="number">203</span> <span class="number">209</span> <span class="number">200</span> <span class="number">199</span> <span class="number">218</span> <span class="number">221</span> <span class="number">225</span> <span class="number">212</span></span><br><span class="line"><span class="number">2007</span> <span class="number">250</span> <span class="number">219</span> <span class="number">242</span> <span class="number">241</span> <span class="number">267</span> <span class="number">249</span> <span class="number">253</span> <span class="number">242</span> <span class="number">251</span> <span class="number">279</span> <span class="number">298</span> <span class="number">260</span></span><br><span class="line"><span class="number">2008</span> <span class="number">269</span> <span class="number">257</span> <span class="number">279</span> <span class="number">273</span> <span class="number">275</span> <span class="number">314</span> <span class="number">288</span> <span class="number">286</span> <span class="number">290</span> <span class="number">288</span> <span class="number">304</span> <span class="number">291</span></span><br><span class="line"><span class="number">2009</span> <span class="number">314</span> <span class="number">290</span> <span class="number">312</span> <span class="number">319</span> <span class="number">334</span> <span class="number">307</span> <span class="number">315</span> <span class="number">321</span> <span class="number">339</span> <span class="number">348</span> <span class="number">323</span> <span class="number">342</span></span><br><span class="line"><span class="number">2010</span> <span class="number">340</span> <span class="number">348</span> <span class="number">354</span> <span class="number">291</span></span><br><span class="line">&gt; plot(s.ts.m)  <span class="comment"># note x axis on plot</span></span><br></pre></td></tr></table></figure>
<p> The following plot can be seen as a result of the preceding commands:</p>
<p> <img src="img/5_2_16.jpeg" alt=""></p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Specify frequency = 4 for quarterly data</span></span><br><span class="line">&gt; s.ts.q &lt;- ts(s, start = <span class="number">2002</span>, frequency = <span class="number">4</span>)</span><br><span class="line">&gt; s.ts.q</span><br><span class="line"></span><br><span class="line">     Qtr1 Qtr2 Qtr3 Qtr4</span><br><span class="line"><span class="number">2002</span>   <span class="number">51</span>   <span class="number">56</span>   <span class="number">37</span>  <span class="number">101</span></span><br><span class="line"><span class="number">2003</span>   <span class="number">66</span>   <span class="number">63</span>   <span class="number">45</span>   <span class="number">68</span></span><br><span class="line"><span class="number">2004</span>   <span class="number">70</span>  <span class="number">107</span>   <span class="number">86</span>  <span class="number">102</span></span><br><span class="line"><span class="number">2005</span>   <span class="number">90</span>  <span class="number">102</span>   <span class="number">79</span>   <span class="number">95</span></span><br><span class="line"><span class="number">2006</span>   <span class="number">95</span>  <span class="number">101</span>  <span class="number">128</span>  <span class="number">109</span></span><br><span class="line">(output truncated)</span><br><span class="line">&gt; plot(s.ts.q)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Query time series objects (we use the s.ts.m object we created in the previous step):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># When does the series start?</span></span><br><span class="line">&gt; start(s.ts.m)</span><br><span class="line">[<span class="number">1</span>] <span class="number">2002</span>    <span class="number">1</span></span><br><span class="line">&gt; <span class="comment"># When does it end?</span></span><br><span class="line">&gt; end(s.ts.m)</span><br><span class="line">[<span class="number">1</span>] <span class="number">2010</span>    <span class="number">4</span></span><br><span class="line">&gt; <span class="comment"># What is the frequency?</span></span><br><span class="line">&gt; frequency(s.ts.m)</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a time series object with multiple time series. This data file contains US monthly consumer prices for white flour and unleaded gas for the years 1980 through 2014 (downloaded from the website of the US Bureau of Labor Statistics):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; prices &lt;- read.csv(<span class="string">"prices.csv"</span>)</span><br><span class="line">&gt; prices.ts &lt;- ts(prices, start=c(<span class="number">1980</span>,<span class="number">1</span>), frequency = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot a time series object with multiple time series:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(prices.ts)</span><br></pre></td></tr></table></figure>
<p> The plot in two separate panels appears as follows:</p>
<p> <img src="img/5_2_17.jpeg" alt=""></p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Plot both series in one panel with suitable legend</span></span><br><span class="line">&gt; plot(prices.ts, plot.type = <span class="string">"single"</span>, col = <span class="number">1</span>:<span class="number">2</span>)</span><br><span class="line">&gt; legend(<span class="string">"topleft"</span>, colnames(prices.ts), col = <span class="number">1</span>:<span class="number">2</span>, lty = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p> Two series plotted in one panel appear as shown here:</p>
<p> <img src="img/5_2_18.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-47"><a href="#How-it-works…-47" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data.</p>
<p>Step 2 uses the ts function to generate a time series object based on the raw data.</p>
<p>Step 3 uses the plot function to generate a line plot of the time series. We see that the time axis does not provide much information. Time series objects can represent time in more friendly terms.</p>
<p>Step 4 shows how to create time series objects with a better notion of time. It shows how we can treat a data series as an annual, monthly, or quarterly time series. The start and frequency parameters help us to control these data series.</p>
<p>Although the time series we provide is just a list of sequential values, in reality our data can have an implicit notion of time attached to it. For example, the data can be annual numbers, monthly numbers, or quarterly ones (or something else, such as 10-second observations of something). Given just the raw numbers (as in our data file, ts-example.csv), the ts function cannot figure out the time aspect and by default assumes no secondary time interval at all.</p>
<p>We can use the frequency parameter to tell ts how to interpret the time aspect of the data. The frequency parameter controls how many secondary time intervals there are in one major time interval. If we do not explicitly specify it, by default frequency takes on a value of 1. Thus, the following code treats the data as an annual sequence, starting in 2002:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.ts.a &lt;- ts(s, start = <span class="number">2002</span>)</span><br></pre></td></tr></table></figure>
<p>The following code, on the other hand, treats the data as a monthly time series, starting in January 2002. If we specify the start parameter as a number, then R treats it as starting at the first subperiod, if any, of the specified start period. When we specify frequency as different from 1, then the start parameter can be a vector such as c(2002,1) to specify the series, the major period, and the subperiod where the series starts. c(2002,1) represents January 2002:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.ts.m &lt;- ts(s, start = c(<span class="number">2002</span>,<span class="number">1</span>), frequency = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<p>Similarly, the following code treats the data as a quarterly sequence, starting in the first quarter of 2002:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.ts.q &lt;- ts(s, start = <span class="number">2002</span>, frequency = <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>The frequency values of 12 and 4 have a special meaning—they represent monthly and quarterly time sequences.</p>
<p>We can supply start and end, just one of them, or none. If we do not specify either, then R treats the start as 1 and figures out end based on the number of data points. If we supply one, then R figures out the other based on the number of data points.</p>
<p>While start and end do not play a role in computations, frequency plays a big role in determining seasonality, which captures periodic fluctuations.</p>
<p>If we have some other specialized time series, we can specify the frequency parameter appropriately. Here are two examples:</p>
<ul>
<li>With measurements taken every 10 minutes and seasonality pegged to the hour, we should specify frequency as 6</li>
<li>With measurements taken every 10 minutes and seasonality pegged to the day, use frequency = 24*6 (6 measurements per hour times 24 hours per day)</li>
</ul>
<p>Step 5 shows the use of the functions start, end, and frequency to query time series objects.</p>
<p>Steps 6 and 7 show that R can handle data files that contain multiple time series.</p>
<h3 id="See-also…-25"><a href="#See-also…-25" class="headerlink" title="See also…"></a>See also…</h3><p>The Performing preliminary analyses on time series objects recipe in this chapter</p>
<h2 id="Decomposing-time-series"><a href="#Decomposing-time-series" class="headerlink" title="Decomposing time series"></a>Decomposing time series</h2><p>The stats package provides many functions to process time series. This recipe covers the use of the decompose and stl functions to extract the seasonal, trend, and random components of time series.</p>
<h3 id="Getting-ready-50"><a href="#Getting-ready-50" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the data files for this chapter, do it now and ensure that the files are in your R working directory.</p>
<h3 id="How-to-do-it…-51"><a href="#How-to-do-it…-51" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>The following steps decompose time series:</p>
<ol>
<li><p>Read the data. The file has the Bureau of Labor Statistics monthly price data for unleaded gas and white flour for 1980 through 2014:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prices &lt;- read.csv(<span class="string">"prices.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create and plot the time series of gas prices:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; prices.ts = ts(prices, start = c(<span class="number">1980</span>,<span class="number">1</span>), frequency = <span class="number">12</span>)</span><br><span class="line">&gt; plot(prices.ts[,<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>The plot shows seasonality in gas prices. The amplitude of fluctuations seems to increase with time and hence this looks like a multiplicative time series. Thus, we will use the log of the prices to make it additive. Use the stl function to perform a Loess decomposition of the gas prices:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; prices.stl &lt;- stl(log(prices.ts[,<span class="number">1</span>]), s.window = <span class="string">"period"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the results of stl:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(prices.stl)</span><br></pre></td></tr></table></figure>
<p> The following plot is the result of the preceding command:</p>
<p> <img src="img/5_3_1.jpeg" alt=""></p>
</li>
</ol>
<ol>
<li><p>Alternately, you can use the decompose function to perform a decomposition by moving averages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; prices.dec &lt;- decompose(log(prices.ts[,<span class="number">2</span>]))</span><br><span class="line">&gt; plot(prices.dec)</span><br></pre></td></tr></table></figure>
<p> The following graph shows the output of the preceding command:</p>
<p> <img src="img/5_3_2.jpeg" alt=""></p>
</li>
<li><p>Adjust the gas prices for seasonality and plot it:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; gas.seasonally.adjusted &lt;- prices.ts[,<span class="number">2</span>] - prices.dec$seasonal</span><br><span class="line">&gt; plot(gas.seasonally.adjusted)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-48"><a href="#How-it-works…-48" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data and Step 2 creates and plots the time series. For more details, see the recipe, Using time series objects, earlier in this chapter.</p>
<p>Step 3 shows the use of the stl function to decompose an additive time series. Since our earlier plot indicated that the amplitude of the fluctuations increased with time, thereby suggesting a multiplicative time series, we applied the log function to convert it into an additive time series and then decomposed it.</p>
<p>Step 4 uses the plot function to plot the results.</p>
<p>Step 5 uses the decompose function to perform a decomposition through moving averages and then plots it.</p>
<p>Step 6 adjusts gas prices for seasonality by subtracting the seasonal component from the original time series of the gas prices, and then plots the resulting time series.</p>
<h3 id="See-also…-26"><a href="#See-also…-26" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>The Using time series objects recipe in this chapter</li>
<li>The Filtering time series data recipe in this chapter</li>
<li>The Smoothing and forecasting using the Holt-Winters method recipe in this chapter</li>
</ul>
<h2 id="Filtering-time-series-data"><a href="#Filtering-time-series-data" class="headerlink" title="Filtering time series data"></a>Filtering time series data</h2><p>This recipe shows how we can use the filter function from the stats package to compute moving averages.</p>
<h3 id="Getting-ready-51"><a href="#Getting-ready-51" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already done so, download the data files for this chapter and ensure that they are available in your R working directory.</p>
<h3 id="How-to-do-it…-52"><a href="#How-to-do-it…-52" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To filter time series data, follow these steps:</p>
<ol>
<li><p>Read the data. The file has fictitious weekly sales data for some product:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; s &lt;- read.csv(<span class="string">"ts-example.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the filtering vector. We assume a seven-period filter:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; n &lt;- <span class="number">7</span></span><br><span class="line">&gt; wts &lt;- rep(<span class="number">1</span>/n, n)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the symmetrically filtered values (three past values, one current value, and three future values) and one-sided values (one current and six past values:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; s.filter1 &lt;- filter(s$sales, filter = wts, sides = <span class="number">2</span>)</span><br><span class="line">&gt; s.filter2 &lt;- filter(s$sales, filter = wts, sides = <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the filtered values:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(s$sales, type = <span class="string">"l"</span>)</span><br><span class="line">&gt; lines(s.filter1, col = <span class="string">"blue"</span>, lwd = <span class="number">3</span>)</span><br><span class="line">&gt; lines(s.filter2, col = <span class="string">"red"</span>, lwd = <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p> The plotted filtered values appear as follows:</p>
<p> <img src="img/5_4_1.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-49"><a href="#How-it-works…-49" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data.</p>
<p>Step 2 creates the filtering weights. We used a window of seven periods. This means that the weighted average of the current value and six others will comprise the filtered value at the current position.</p>
<p>Step 3 computes the two-sided filter (the weighted average of the current value and three prior and three succeeding values) and a one-sided filter based on the current value and six prior ones.</p>
<p>Step 4 plots the original data and the symmetric and one-sided filters. We can see that the two-sided filter tracks the changes earlier.</p>
<h3 id="See-also…-27"><a href="#See-also…-27" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>The Using time series objects recipe in this chapter</li>
<li>The Decomposing time series recipe in this chapter</li>
<li>The Smoothing and forecasting using the Holt-Winters method recipe in this chapter</li>
</ul>
<h2 id="Smoothing-and-forecasting-using-the-Holt-Winters-method"><a href="#Smoothing-and-forecasting-using-the-Holt-Winters-method" class="headerlink" title="Smoothing and forecasting using the Holt-Winters method"></a>Smoothing and forecasting using the Holt-Winters method</h2><p>The stats package contains functionality for applying the HoltWinters method for exponential smoothing in the presence of trends and seasonality, and the forecast package extends this to forecasting. This recipe addresses these topics.</p>
<h3 id="Getting-ready-52"><a href="#Getting-ready-52" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and place them in your R working directory. Install and load the forecast package.</p>
<h3 id="How-to-do-it…-53"><a href="#How-to-do-it…-53" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To apply the HoltWinters method for exponential smoothing and forecasting, follow these steps:</p>
<ol>
<li><p>Read the data. The file has monthly stock prices from Yahoo! Finance for Infosys between March 1999 and January 2015:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy &lt;- read.csv(<span class="string">"infy-monthly.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the time series object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy.ts &lt;- ts(infy$Adj.Close, start = c(<span class="number">1999</span>,<span class="number">3</span>),    frequency = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Perform Holt-Winters exponential smoothing:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy.hw &lt;- HoltWinters(infy.ts)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(infy.hw, col = <span class="string">"blue"</span>, col.predicted = <span class="string">"red"</span>)</span><br></pre></td></tr></table></figure>
<p> The plotted result can be seen as follows:</p>
<p> <img src="img.5_4_2.jpeg" alt=""></p>
</li>
</ol>
<p>Examine the results:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># See the squared errors</span></span><br><span class="line">&gt; infy.hw$SSE</span><br><span class="line">[<span class="number">1</span>] <span class="number">1446.232</span></span><br><span class="line">&gt; <span class="comment"># The alpha beta and gamma used for filtering</span></span><br><span class="line">&gt; infy.hw$alpha</span><br><span class="line">    alpha</span><br><span class="line"><span class="number">0.5658932</span></span><br><span class="line">&gt; infy.hw$beta</span><br><span class="line">       beta</span><br><span class="line"><span class="number">0.009999868</span></span><br><span class="line">&gt; infy.hw$gamma</span><br><span class="line">gamma</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">&gt; <span class="comment"># the fitted values</span></span><br><span class="line">&gt; head(infy.hw$fitted)</span><br><span class="line">         xhat    level     trend      season</span><br><span class="line">[<span class="number">1</span>,] <span class="number">13.91267</span> <span class="number">11.00710</span> <span class="number">0.5904618</span>  <span class="number">2.31510417</span></span><br><span class="line">[<span class="number">2</span>,] <span class="number">18.56803</span> <span class="number">15.11025</span> <span class="number">0.6255882</span>  <span class="number">2.83218750</span></span><br><span class="line">[<span class="number">3</span>,] <span class="number">15.17744</span> <span class="number">17.20828</span> <span class="number">0.6403124</span> -<span class="number">2.67114583</span></span><br><span class="line">[<span class="number">4</span>,] <span class="number">19.01611</span> <span class="number">18.31973</span> <span class="number">0.6450237</span>  <span class="number">0.05135417</span></span><br><span class="line">[<span class="number">5</span>,] <span class="number">15.23710</span> <span class="number">18.66703</span> <span class="number">0.6420466</span> -<span class="number">4.07197917</span></span><br><span class="line">[<span class="number">6</span>,] <span class="number">18.45236</span> <span class="number">18.53545</span> <span class="number">0.6343104</span> -<span class="number">0.71739583</span></span><br></pre></td></tr></table></figure>
<p>Generate and plot forecasts with the Holt-Winters model:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(forecast)</span><br><span class="line">&gt; infy.forecast &lt;- forecast(infy.hw, h=<span class="number">20</span>)</span><br><span class="line">&gt; plot(infy.forecast)</span><br></pre></td></tr></table></figure>
<p>The following is the resulting plot:</p>
<p><img src="img/5_4_3.jpeg" alt=""></p>
<h3 id="How-it-works…-50"><a href="#How-it-works…-50" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data and in step 2 the time series object, ts, is created. For more details, see the recipe, Using time series objects, earlier in this chapter.</p>
<p>In step 3 the HoltWinters function is used to smooth the data.</p>
<p>In step 4 the resulting HoltWinters object is plotted. It shows the original time series as well as the smoothed values.</p>
<p>Step 5 shows the functions available to extract information from the Holt-Winters model object.</p>
<p>In step 6 the predict.HoltWinters function is used to predict future values. The colored bands show the 85 % and 95 % confidence intervals.</p>
<h3 id="See-also…-28"><a href="#See-also…-28" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>The Using time series objects recipe in this chapter</li>
<li>The Decomposing time series recipe in this chapter</li>
<li>The Filtering time series data recipe in this chapter</li>
</ul>
<h2 id="Building-an-automated-ARIMA-model"><a href="#Building-an-automated-ARIMA-model" class="headerlink" title="Building an automated ARIMA model"></a>Building an automated ARIMA model</h2><p>The forecast package provides the auto.arima function to fit the best ARIMA models for a univariate time series.</p>
<h3 id="Getting-ready-53"><a href="#Getting-ready-53" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and place them in your R working directory. Install and load the forecast package.</p>
<h3 id="How-to-do-it…-54"><a href="#How-to-do-it…-54" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To build an automated ARIMA model, follow these steps:</p>
<ol>
<li><p>Read the data. The file has monthly stock prices from Yahoo! Finance for Infosys between March 1999 and January 2015:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy &lt;- read.csv(<span class="string">"infy-monthly.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the time series object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy.ts &lt;- ts(infy$Adj.Close, start = c(<span class="number">1999</span>,<span class="number">3</span>), frequency = <span class="number">12</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the ARIMA model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy.arima &lt;- auto.arima(infy.ts)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Generate the forecast using the ARIMA model:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; infy.forecast &lt;- forecast(infy.arima, h=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the results:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(infy.forecast)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>The plotted result can be seen as follows:</p>
<p><img src="img/5_4_4.jpeg" alt=""></p>
<h3 id="How-it-works…-51"><a href="#How-it-works…-51" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 reads the data.</p>
<p>In step 2, the time series object, ts, is created. For more details, see the recipe Using time series objects, earlier in this chapter.</p>
<p>In step 3, the auto.arima function in the forecast package is used to generate the ARIMA model. This function conducts an orderly search to generate the best ARIMA model according to the AIC, AICc, or the BIC value. We control the criterion used through the ic parameter (for example, ic = “aicc”). If we provide no value, the function uses AICc.</p>
<p>In step 4, the forecast for the specified time horizon (the h parameter) is generated.</p>
<p>Step 5 plots the results. The two bands show the 85 percent and the 95 percent confidence intervals. You can control the color of the data line through the col parameter and the color of the forecast line through fcol.</p>
<h3 id="See-also…-29"><a href="#See-also…-29" class="headerlink" title="See also…"></a>See also…</h3><p>The Using time series objects recipe in this chapter</p>
<hr>
<h1 id="Chapter-7-It’s-All-About-Your-Connections-–-Social-Network-Analysis"><a href="#Chapter-7-It’s-All-About-Your-Connections-–-Social-Network-Analysis" class="headerlink" title="Chapter 7. It’s All About Your Connections – Social Network Analysis"></a>Chapter 7. It’s All About Your Connections – Social Network Analysis</h1><p>In this chapter, you will cover:</p>
<ul>
<li>Downloading social network data using public APIs</li>
<li>Creating adjacency matrices and edge lists</li>
<li>Plotting social network data</li>
<li>Computing important network metrics</li>
</ul>
<h2 id="Introduction-6"><a href="#Introduction-6" class="headerlink" title="Introduction"></a>Introduction</h2><p>When we think of the term “social network,” sites such as Twitter, Facebook, Google+, LinkedIn, and Meetup immediately come to mind. However, data analysts have applied the concepts of social network analysis in domains as varied as co-authorship networks, human networks, the spread of disease, migratory birds, and interlocking corporate board memberships, just to name a few. In this chapter, we will cover recipes to make sense of social network data. R provides multiple packages to manipulate social network data; we address the most prominent of these, igraph.</p>
<h2 id="Downloading-social-network-data-using-public-APIs"><a href="#Downloading-social-network-data-using-public-APIs" class="headerlink" title="Downloading social network data using public APIs"></a>Downloading social network data using public APIs</h2><p>Social networking websites provide public APIs to enable us to download their data. In this recipe, we cover the process of downloading data from Meetup.com using their public API. You can adapt this basic approach to download data from other websites. In this recipe, we get the data in JSON format and then import it into an R data frame.</p>
<h3 id="Getting-ready-54"><a href="#Getting-ready-54" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>In this recipe, you will download data from Meetup.com. To gain access to the data, you need to be a member:</p>
<ul>
<li>If you do not have an account in <a href="http://www.meetup.com" target="_blank" rel="external">http://www.meetup.com</a>, sign up and become a member of a couple of groups.</li>
<li>You need your own API key to download data through scripts. Get your own by clicking on the API Key link on <a href="http://www.meetup.com/meetup_api/" target="_blank" rel="external">http://www.meetup.com/meetup_api/</a>. Save the key.</li>
</ul>
<p>You can replicate the steps in this recipe without additional information. However, if you would like more details, you can read about the API at <a href="http://www.meetup.com/meetup_api/" target="_blank" rel="external">http://www.meetup.com/meetup_api/</a>.</p>
<p>Download the groups.json file and place it in your R working directory.</p>
<h3 id="How-to-do-it…-55"><a href="#How-to-do-it…-55" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>In this recipe, we see how to get data from the console and how R scripts are used:</p>
<ol>
<li>Download information about Meetup groups that satisfy certain criteria. <a href="http://www.meetup.com" target="_blank" rel="external">http://www.meetup.com</a> allows you to download data from their Console by filling up fields to define your criteria. Alternately, you can also construct a suitable URL to directly get the data. The former approach has some limitations when downloading large volumes of data.</li>
<li>In this recipe, we first show you how to get data from the console. We then show you how to use R scripts that use URLs for larger data volumes. We will first get a list of groups. Use your browser to visit <code>http://www.meetup.com/meetup_api/</code>. Click on Console and then click on the first link under Groups on the right (GET /2/groups). Enter the topic you are interested in and enter your two character ISO country code (see <code>http://en.wikipedia.org/wiki/ISO_3166-1</code> for country codes) and city or zip code. You can specify “radius” to restrict the number of groups returned. We used hiking for topic, US for country, 08816 for zip code, and 25 for radius. Click on Show Response to see the results. If you get an error, try with different values. If you used different selection criteria, you may see many groups. From the earlier results, you will notice information on many attributes for each group. You can use the “only” field to get some of these attributes, for example, to get only the group ID, name, and number of members, enter id, name, members in the “only” textbox (note that there is no space after the commas).</li>
<li>You can also get information using a URL directly, but you will need to use your API key for this. For example, the following URL gets the ID, name, and number of members for all hiking-related groups in Amsterdam, NL (replace &lt;<your api="" key="">&gt; with the API key you downloaded earlier in the Getting started part of this recipe; no angle braces needed):<br><code>http://api.meetup.com/2/groups?topic=hiking&amp;country=NL&amp;city=Amsterdam&amp;only=id,name,members&amp;key=&lt;&lt;your api key&gt;&gt;</code></your></li>
</ol>
<p>You will note that the results look different in the console when using the URL directly, but this is just a formatting issue. The console pretty prints the JSON, whereas we see unformatted JSON when we use a URL.</p>
<ol>
<li>We will now save the downloaded data; the process depends on whether you used the console approach in step 2 or the URL approach in step 3. If you used the console approach, you should select the block of text starting with the { before results and ending with the very last }. Paste the copied text into a text editor and save the file as groups.json. On the other hand, if you used the URL approach of step 3, right-click and select “Save As” to save the displayed results as a file named groups.json in your R working directory. You can also use the groups.json file that you downloaded earlier.</li>
<li><p>We will now load the data from the saved JSON file into an R data frame. For details, refer to the recipe Reading JSON data in Chapter 1, Acquire and Prepare the Ingredients – Your Data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(jsonlite)</span><br><span class="line">&gt; g &lt;- fromJSON(<span class="string">"groups.json"</span>)</span><br><span class="line">&gt; groups &lt;- g$results</span><br><span class="line">&gt; head(groups)</span><br></pre></td></tr></table></figure>
</li>
<li><p>For each group, we will now use the Meetup.com API to download member information into a data frame called users. Among the code files that you downloaded for this chapter is a file called rdacb.getusers.R. Source this file into your R environment now and run the following code. For each group from our list of groups, this code uses the Meetup.com API to get the group’s members. It generates a data frame with a set of <code>group_id</code>, <code>user_id</code> pairs. In the following command, replace &lt;<apikey>&gt; with your actual API key from the Getting ready section. Be sure to enclose the key in double quotes and also be sure that you do not have any angle brackets in the command. This command can take a while to execute because of the sheer number of web requests and the volume of data involved. If you get an error message, see the How it works… section for this recipe:</apikey></p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">source</span>(<span class="string">"rdacb.getusers.R"</span>)</span><br><span class="line">&gt; <span class="comment"># in command below, substitute your api key for</span></span><br><span class="line">&gt; <span class="comment"># &lt;&lt;apikey&gt;&gt; and enclose it in double-quotes</span></span><br><span class="line">&gt; members &lt;- rdacb.getusers(groups, &lt;&lt;apikey&gt;&gt;)</span><br><span class="line">This creates a data frame with the variables (`group_id`, `user_id`).</span><br></pre></td></tr></table></figure>
</li>
<li><p>The members data frame now has information about the social network, and normally we will use it for all further processing. However, since it is very large, many of the steps in subsequent recipes will take a lot of processing time. For convenience, we reduce the size of the social network by retaining only members who belong to more than 16 groups. This step uses data tables; see Chapter 9, Work Smarter, Not harder – Efficient and Elegant R code for more details. If you would like to work with the complete network, execute the users &lt;- members command and skip to step 8 without executing these two code lines:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(data.table)</span><br><span class="line">&gt; users &lt;- setDT(members)[,.SD[.N &gt; <span class="number">16</span>], by = user_id]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Save the members data before further processing:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; save(users,file=<span class="string">"meetup_users.Rdata"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-52"><a href="#How-it-works…-52" class="headerlink" title="How it works…"></a>How it works…</h3><p>Steps 2 and 3 get data from Meetup.com using their console.</p>
<p>By default, Meetup APIs return 20 results (JSON documents) for each call. However, by adding page=n in the console or in the URL (where n is a number), we can get more documents (up to a maximum of 200). The API response contains metadata information including the number of documents returned (in the count element), the total documents available (the total_count element), the URL used to get the response, and the URL to get the next set of results (the next element).</p>
<p>Step 4 saves the results displayed in the browser as groups.json in your R working directory.</p>
<p>Step 5 loads the JSON data file into an R data frame using the fromJSON function in the jsonlite package. For more details on this, refer to the recipe Reading JSON data in Chapter 1, Acquire and Prepare the Ingredients – Your Data.</p>
<p>The returned object g contains the results in the results element, and we assign g$results (a data frame) to the variable groups.</p>
<p>Step 6 uses the rdacb.getusers convenience function to iterate through each group and get its members. The function constructs the appropriate API URL using group id. Since each call returns only a fixed number of users, the while loop of the function iterates till it gets all the users. The next element of the result returned tells us if the group has more members.</p>
<p>There can be groups with no members and hence we check if temp$results returns a data frame. The API returns group and user IDs as they are in Meetup.com.</p>
<p>If the Meetup.com site is overloaded with several API requests during the time of your invocation, you may get an error message “Error in function (type, msg, asError = TRUE) : Empty reply from server”. Retry the same step again. Depending on the number of groups and the number of members in each group, this step can take a long time.</p>
<p>At this point, we have the data for a very large social network. Subsequent recipes in this chapter use the social network that we create in this recipe. Some of the steps in subsequent recipes can take a lot of processing time if run on the complete network. Using a smaller network will suffice for illustration. Therefore, step 7 uses data.table to retain only members who belong to more than 16 groups.</p>
<p>Step 8 saves the member data in a file for possible future use. We now have a two-mode network, where the first mode is a set of groups and the second mode is the list of members. From this, we can either create a network of users based on common group memberships or a network of groups based on common members. In the rest of this chapter, we do the former.</p>
<p>We created a data frame in which each row represents a membership of an individual user in a group. From this information, we can create representations of social networks.</p>
<h3 id="See-also…-30"><a href="#See-also…-30" class="headerlink" title="See also…"></a>See also…</h3><ul>
<li>Reading JSON data in Chapter 1, Acquire and Prepare the Ingredients – Your Data</li>
<li>Slicing, dicing, and combining data with data tables in Chapter 9, Work Smarter, Not Harder – Efficient and Elegant R Code</li>
</ul>
<h2 id="Creating-adjacency-matrices-and-edge-lists"><a href="#Creating-adjacency-matrices-and-edge-lists" class="headerlink" title="Creating adjacency matrices and edge lists"></a>Creating adjacency matrices and edge lists</h2><p>We can represent social network data in different formats. We cover two common representations: sparse adjacency matrices and edge lists.</p>
<p>Taking data from the Meetup.com social networking site (from the previous recipe in this chapter—Downloading social network data using public APIs), this recipe shows how you can convert a data frame with membership information into a sparse adjacency matrix and then to an edge list.</p>
<p>In this application, nodes represent users of Meetup.com and an edge connects two nodes if they are members of at least one common group. The number of common groups for a pair of people will represent the weight of the connection.</p>
<h3 id="Getting-ready-55"><a href="#Getting-ready-55" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not yet installed the Matrix package, you should do so now using the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"Matrix"</span>)</span><br></pre></td></tr></table></figure>
<p>If you completed the prior recipe Downloading social network data using public APIs and have the meetup_users.Rdata file, you can use it. Otherwise, you can download that data file from the book’s website and place it in your R working directory.</p>
<h3 id="How-to-do-it…-56"><a href="#How-to-do-it…-56" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To create adjacency matrices and edge lists, follow these steps:</p>
<ol>
<li><p>Load Meetup.com user information from the <code>meetup_users.Rdata file</code>. This creates a data frame called users which has the variables (<code>user_id</code>, <code>group_id</code>):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="string">"meetup_users.Rdata"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a sparse matrix with groups on the rows and users on the columns with TRUE on each (<code>group_id</code>, <code>user_id</code>) position, where the group has the user as a member. If you have a large number of users, this step will take a long time. It also needs a lot of memory to create a sparse matrix. If your R session freezes, you will have to either find a computer with more RAM or reduce the number of users and try again:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(Matrix)</span><br><span class="line">&gt; grp.membership = sparseMatrix(`users$group_id`, `users$user_id`, x = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use the sparse matrix to create an adjacency matrix with users on both rows and columns with the number of common groups between a pair of users as the matrix element:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; adjacency = t(grp.membership) %*% grp.membership</span><br></pre></td></tr></table></figure>
</li>
<li><p>We can use the group membership matrix to create a network of groups instead of users with groups as the nodes and edges representing common memberships across groups. In this example, we will consider only a network of users.</p>
</li>
<li><p>Use the adjacency matrix to create an edge list:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; users.edgelist &lt;- as.data.frame(summary(adjacency))</span><br><span class="line">&gt; names(users.edgelist)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"i"</span> <span class="string">"j"</span> <span class="string">"x"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The relationship between any two users is reciprocal. That is, if users 25 and 326 have 32 groups in common, then the edge list currently duplicates that information as (25, 362, 32) and (362, 25, 32). We need to keep only one of these. Also, our adjacency matrix has non-zero diagonal elements and the edge list has edges corresponding to those. We can eliminate these by keeping only the edges corresponding to the upper or lower triangle of the adjacency matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extract upper triangle of the edgelist</span></span><br><span class="line">&gt; users.edgelist.upper &lt;- users.edgelist[users.edgelist$i &lt; users.edgelist$j,]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Save the data, just in case:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; save(users.edgelist.upper, file = <span class="string">"users_edgelist_upper.Rdata"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-53"><a href="#How-it-works…-53" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the users’ group membership data from the <code>meetup_users</code>.Rdata saved file. This creates a users data frame with the (<code>user_id</code>, <code>group_id</code>) structure. From this, we want to create a network in which the nodes are users and a pair of users has an edge if they are members of at least one common group. We want to have the number of common group memberships as the weight of an edge.</p>
<p>Step 2 converts the information in the group membership data frame to a sparse matrix with groups on the rows and users on the columns. To clarify, the following table shows a sample matrix with four groups and nine users. The first group has users 1, 4, and 7 as members, while the second has users 1, 3, 4, and 6 as members, and so on. We have shown the complete matrix here, but step 2 creates a much more space efficient sparse representation of this information:</p>
<p><img src="img/7_1_1.jpeg" alt=""></p>
<p>While the sparse matrix has all the network information, several social network analysis functions work with the data represented as an “adjacency matrix” or as an “edge list.” We want to create a social network of Meetup.com users. The adjacency matrix will have the shape of a square matrix with users on both rows and columns, and the number of shared groups as the matrix element. For the sample data in the preceding figure, the adjacency matrix will look like this:</p>
<p><img src="img/7_1_2.jpeg" alt=""></p>
<p>Step 3 creates a sparse adjacency matrix from the earlier sparse group membership matrix. From the earlier figure, we see that users 1 and 4 have three groups in common (groups 1, 2, and 3) and thus the elements (1, 4) and (4, 1) of the matrix have a 3 in them. The diagonal elements simply indicate the number of groups to which the corresponding users belong. User 1 belongs to three groups and hence (1, 1) has a 3. We only need the upper or lower triangle of the matrix, and we take care of that in a later step.</p>
<p>Step 4 creates an edge list from the sparse adjacency matrix. An edge list will have the following structure: (<code>user_id1</code>, <code>users_id2</code>, number of common groups). For the sample data in the preceding figure, the edge list will look like this (only 10 of the 47 edges are shown in the following figure). Once again, we need only the upper or lower triangle of this, and we take care of that in a later step:</p>
<p><img src="img/7_1_3.jpeg" alt=""></p>
<p>We have a symmetric network. Saying that users A and B have n groups in common is the same thing as saying that users B and A have n groups in common. Thus, we do not need to represent both of these in the adjacency matrix or in the edge list. We also do not need any edges connecting users to themselves and thus do not need the diagonal elements in the sparse matrix or elements with the same value for i and j in the edge list.</p>
<p>Step 6 eliminates the redundant edges and the edges that connect a user to themselves.</p>
<p>Step 7 saves the sparse network for possible future use.</p>
<p>We have created both a sparse adjacency matrix and an edge list representation of the social network of users in our chosen Meetup groups. We can use these representations for social network analyses.</p>
<h3 id="See-also…-31"><a href="#See-also…-31" class="headerlink" title="See also…"></a>See also…</h3><p>Downloading social network data using public APIs, from this chapter</p>
<h2 id="Plotting-social-network-data"><a href="#Plotting-social-network-data" class="headerlink" title="Plotting social network data"></a>Plotting social network data</h2><p>This recipe covers the features in the igraph package to create graph objects, plot them, and extract network information from graph objects.</p>
<h3 id="Getting-ready-56"><a href="#Getting-ready-56" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already installed the igraph package, do it now using the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"igraph"</span>)</span><br></pre></td></tr></table></figure>
<p>Also, download the <code>users_edgelist_upper.Rdata</code> file from the book’s data files to your R working directory. Alternately, if you worked through the previous recipe Creating adjacency matrices and edge lists from this chapter, you will have created the file and ensured that it is in your R working directory.</p>
<h3 id="How-to-do-it…-57"><a href="#How-to-do-it…-57" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To plot social network data using igraph, follow these steps:</p>
<ol>
<li><p>Load the data. The following code will restore, from the saved file, a data frame called users.edgelist.upper:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="string">"users_edgelist_upper.Rdata"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The data file that we have provided users.edgelist.upper should now have 1953 rows of data. Plotting such a network will take too much time—even worse, we will get too dense a plot to get any meaningful information. Just for convenience, we will create a much smaller network by filtering our edge list. We will consider as connected only users who have more than 16 common group memberships and create a far smaller network for illustration only:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;  edgelist.filtered &lt;-</span><br><span class="line">        users.edgelist.upper[users.edgelist.upper$x &gt; <span class="number">16</span>, ]</span><br><span class="line"></span><br><span class="line">&gt; edgelist.filtered  <span class="comment"># Your results could differ</span></span><br><span class="line"></span><br><span class="line">                 i         j  x</span><br><span class="line"><span class="number">34364988</span>   <span class="number">2073657</span>   <span class="number">3823125</span> <span class="number">17</span></span><br><span class="line"><span class="number">41804209</span>   <span class="number">2073657</span>   <span class="number">4379102</span> <span class="number">18</span></span><br><span class="line"><span class="number">53937250</span>   <span class="number">2073657</span>   <span class="number">5590181</span> <span class="number">17</span></span><br><span class="line"><span class="number">62598651</span>   <span class="number">3823125</span>   <span class="number">6629901</span> <span class="number">18</span></span><br><span class="line"><span class="number">190318039</span>  <span class="number">5286367</span>  <span class="number">13657677</span> <span class="number">17</span></span><br><span class="line"><span class="number">190321739</span>  <span class="number">8417076</span>  <span class="number">13657677</span> <span class="number">17</span></span><br><span class="line"><span class="number">205800861</span>  <span class="number">5054895</span>  <span class="number">14423171</span> <span class="number">18</span></span><br><span class="line"><span class="number">252063744</span>  <span class="number">5054895</span>  <span class="number">33434002</span> <span class="number">18</span></span><br><span class="line"><span class="number">252064197</span>  <span class="number">5590181</span>  <span class="number">33434002</span> <span class="number">17</span></span><br><span class="line"><span class="number">252064967</span>  <span class="number">6629901</span>  <span class="number">33434002</span> <span class="number">18</span></span><br><span class="line"><span class="number">252071701</span> <span class="number">10973799</span>  <span class="number">33434002</span> <span class="number">17</span></span><br><span class="line"><span class="number">252076384</span> <span class="number">13657677</span>  <span class="number">33434002</span> <span class="number">17</span></span><br><span class="line"><span class="number">254937514</span>  <span class="number">5227777</span>  <span class="number">34617262</span> <span class="number">17</span></span><br><span class="line"><span class="number">282621070</span>  <span class="number">5590181</span>  <span class="number">46801552</span> <span class="number">19</span></span><br><span class="line"><span class="number">282621870</span>  <span class="number">6629901</span>  <span class="number">46801552</span> <span class="number">18</span></span><br><span class="line"><span class="number">282639752</span> <span class="number">33434002</span>  <span class="number">46801552</span> <span class="number">20</span></span><br><span class="line"><span class="number">307874358</span> <span class="number">33434002</span>  <span class="number">56882992</span> <span class="number">17</span></span><br><span class="line"><span class="number">335204492</span> <span class="number">33434002</span>  <span class="number">69087262</span> <span class="number">17</span></span><br><span class="line"><span class="number">486425803</span> <span class="number">33434002</span> <span class="number">147010712</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">&gt; nrow(edgelist.filtered)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">19</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Renumber the users. Since we filtered the graph significantly, we have only 18 unique users left, but they retain their original user IDs. We will find it convenient to sequence them with unique numbers from 1 through 18. This step is not strictly needed, but will make the social network graph look cleaner:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; uids &lt;- unique(c(edgelist.filtered$i, edgelist.filtered$j))</span><br><span class="line">&gt; i &lt;- match(edgelist.filtered$i, uids)</span><br><span class="line">&gt; j &lt;- match(edgelist.filtered$j, uids)</span><br><span class="line">&gt; nw.new &lt;- data.frame(i, j, x = edgelist.filtered$x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create the graph object and plot the network:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(igraph)</span><br><span class="line">&gt; g &lt;- graph.data.frame(nw.new, directed=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; g</span><br><span class="line">IGRAPH UN-- <span class="number">18</span> <span class="number">19</span> --</span><br><span class="line">+ attr: name (v/c), x (e/n)</span><br><span class="line">&gt; <span class="comment"># Save the graph for use in later recipes:</span></span><br><span class="line">&gt; save(g, file = <span class="string">"undirected-graph.Rdata"</span>)</span><br><span class="line">&gt; plot.igraph(g, vertex.size = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p> Your plot may look different in terms of layout, but if you look carefully, you will see that the nodes and edges are identical:</p>
<p> <img src="img/7_1_4.jpeg" alt=""></p>
</li>
<li><p>Plot the graph object with a different layout:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot.igraph(g,layout=layout.circle, vertex.size = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p> The following graph is the output of the preceding command:</p>
<p> <img src="img/7_1_5.jpeg" alt=""></p>
</li>
<li><p>Plot the graph object using colors for the vertices and edges:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot.igraph(g,edge.curved=<span class="literal">TRUE</span>,vertex.color=<span class="string">"pink"</span>, edge.color=<span class="string">"black"</span>)</span><br></pre></td></tr></table></figure>
<p> Again, your plot may be laid out differently, but should be functionally identical to the following plot:</p>
<p> <img src="img/7_1_6.jpeg" alt=""></p>
</li>
<li><p>Plot the graph with node size proportional to node degree:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; V(g)$size=degree(g) * <span class="number">4</span></span><br><span class="line">&gt; plot.igraph(g,edge.curved=<span class="literal">TRUE</span>,vertex.color=<span class="string">"pink"</span>, edge.color=<span class="string">"black"</span>)</span><br></pre></td></tr></table></figure>
<p> The output is similar to the following plot:</p>
<p> <img src="img/7_1_7.jpeg" alt=""></p>
</li>
<li><p>Plot the graph with the node size and color based on degree:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; color &lt;- ifelse(degree(g) &gt; <span class="number">5</span>,<span class="string">"red"</span>,<span class="string">"blue"</span>)</span><br><span class="line">&gt; size &lt;- degree(g)*<span class="number">4</span></span><br><span class="line">&gt; plot.igraph(g,vertex.label=<span class="literal">NA</span>,layout= layout.fruchterman.reingold,vertex.color=color,vertex.size=size)</span><br></pre></td></tr></table></figure>
<p> A plot identical to the following will be obtained:</p>
<p> <img src="img/7_1_8.jpeg" alt=""></p>
</li>
<li><p>Plot the graph with the edge thickness proportional to edge weights:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; E(g)$x</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>] <span class="number">17</span> <span class="number">18</span> <span class="number">17</span> <span class="number">18</span> <span class="number">17</span> <span class="number">17</span> <span class="number">18</span> <span class="number">18</span> <span class="number">17</span> <span class="number">18</span> <span class="number">17</span> <span class="number">17</span> <span class="number">17</span> <span class="number">19</span> <span class="number">18</span> <span class="number">20</span> <span class="number">17</span> <span class="number">17</span> <span class="number">17</span></span><br><span class="line"></span><br><span class="line">&gt; plot.igraph(g,edge.curved=<span class="literal">TRUE</span>,edge.color=<span class="string">"black"</span>, edge.width=E(g)$x/<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p> The output is similar to the following plot:</p>
<p> <img src="img/7_1_9.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-54"><a href="#How-it-works…-54" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 loads the saved network data in the form of an edge list.</p>
<p>With so much data, we will not find a plot to be a useful visual aid because it will be too crowded. Thus, for illustration, we redefine two users (nodes) to be related (connected in the social network) only if they have more than 16 group memberships in common.</p>
<p>Step 2 filters the edge list and retains only edges that meet the preceding criterion.</p>
<p>Although we have filtered the data, users still retain their original IDs, which are big numbers. Having user numbers in sequence starting with 1 might be nice.</p>
<p>Step 3 does this conversion.</p>
<p>Step 4 uses the graph.data.frame function from the igraph package to create a graph object. The function treats the first two columns of the nw.new data frame argument as the edge list, and treats the rest of the columns as edge attributes.</p>
<p>We created an undirected graph by specifying directed = FALSE. Specifying directed = TRUE (or omitting this argument altogether, since TRUE is the default) will create a directed graph.</p>
<p>Here g is an Undirected Named graph represented by UN. A graph is treated as named, if the vertex has a name attribute. The third letter indicates if the graph is weighted (W), and the fourth letter indicates if it is a bipartite (B) graph. The two numbers indicate the number of vertices and the number of edges. The second line + attr: name (v/c), x (e/n) gives details about the attributes. The name attribute represents the vertex, and the attribute x represents the edge.</p>
<p>The step then uses the plot.igraph function from the igraph package to plot it.</p>
<p>We specified the vertex.size argument to ensure that the node circles were large enough to fit the node numbers.</p>
<p>Step 5 plots the very same graph but with the nodes laid out on the circumference of a circle.</p>
<p>Step 6 shows other options which should be self-explanatory.</p>
<p>In step 7, we set the node (or vertex) size. We use V(g) to access each vertex in the graph object and use the $ operator to extract attributes, for example, V(g)$size. Similarly, we can use E(g) to access the edges.</p>
<p>Step 8 goes further by assigning node color and size based on a node’s degree. It also shows the use of the layout option.</p>
<h3 id="There’s-more…-31"><a href="#There’s-more…-31" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We can do much more with the graph object that the graph.data.frame function of the igraph package creates.</p>
<h4 id="Specifying-plotting-preferences"><a href="#Specifying-plotting-preferences" class="headerlink" title="Specifying plotting preferences"></a>Specifying plotting preferences</h4><p>We showed only a few options to control the look of the plot. You have many more options for controlling the look of the edges, nodes, and other aspects. The documentation of plot.igraph mentions these options. When using them, remember to prefix the node options with (vertex.) and edge options with (edge.).</p>
<h4 id="Plotting-directed-graphs"><a href="#Plotting-directed-graphs" class="headerlink" title="Plotting directed graphs"></a>Plotting directed graphs</h4><p>In step 4 of the main recipe, we created an undirected graph. Here, we create a directed graph object dg:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; dg &lt;- graph.data.frame(nw.new)</span><br><span class="line">&gt; <span class="comment"># save for later use</span></span><br><span class="line">&gt; save(dg, file = <span class="string">"directed-graph.Rdata"</span>)</span><br><span class="line">&gt; plot.igraph(dg,edge.curved=<span class="literal">TRUE</span>,edge.color=<span class="string">"black"</span>, edge.width=E(dg)$x/<span class="number">10</span>,vertex.label.cex=<span class="number">.6</span>)</span><br></pre></td></tr></table></figure>
<p>On plotting the preceding graph, we get the following output:</p>
<p><img src="img/7_1_10.jpeg" alt=""></p>
<h4 id="Creating-a-graph-object-with-weights"><a href="#Creating-a-graph-object-with-weights" class="headerlink" title="Creating a graph object with weights"></a>Creating a graph object with weights</h4><p>If the name of the third column in the edge list passed to graph.data.frame is called weight, it creates a weighted graph. Hence, we can rename the third column from x to weight and redraw the graph:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; nw.weights &lt;- nw.new</span><br><span class="line">&gt; names(nw.weights) &lt;- c(<span class="string">"i"</span>,<span class="string">"j"</span>,<span class="string">"weight"</span>)</span><br><span class="line">&gt; g.weights &lt;- graph.data.frame(nw.weights, directed=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; g.weights</span><br><span class="line">IGRAPH UNW- <span class="number">18</span> <span class="number">19</span> --</span><br><span class="line">+ attr: name (v/c), weight (e/n)</span><br></pre></td></tr></table></figure>
<p>When we check the graph properties, we see W in the third position of UNW-.</p>
<h4 id="Extracting-the-network-as-an-adjacency-matrix-from-the-graph-object"><a href="#Extracting-the-network-as-an-adjacency-matrix-from-the-graph-object" class="headerlink" title="Extracting the network as an adjacency matrix from the graph object"></a>Extracting the network as an adjacency matrix from the graph object</h4><p>Earlier, we created an edge list from a sparse adjacency matrix. Here, we show how to get the sparse adjacency matrix from the graph object that we created in step 4 of the main recipe. In the following, we used type=”upper” to get the upper triangular matrix. Other options are lower and both.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; get.adjacency(g,type=<span class="string">"upper"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">18</span> x <span class="number">18</span> sparse Matrix of class <span class="string">"dgCMatrix"</span></span><br><span class="line">   [[ suppressing <span class="number">18</span> column names <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span> <span class="keyword">...</span> ]]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>  . <span class="number">1</span> . . . <span class="number">1</span> . . . . . <span class="number">1</span> . . . . . .</span><br><span class="line"><span class="number">2</span>  . . . . . . <span class="number">1</span> . . . . . . . . . . .</span><br><span class="line"><span class="number">3</span>  . . . . . . . . <span class="number">1</span> . . . . . . . . .</span><br><span class="line"><span class="number">4</span>  . . . . . . . . <span class="number">1</span> . . . . . . . . .</span><br><span class="line"><span class="number">5</span>  . . . . . . . . . . <span class="number">1</span> . <span class="number">1</span> . . . . .</span><br><span class="line"><span class="number">6</span>  . . . . . . . . . . <span class="number">1</span> . . . <span class="number">1</span> . . .</span><br><span class="line"><span class="number">7</span>  . . . . . . . . . . <span class="number">1</span> . . . <span class="number">1</span> . . .</span><br><span class="line"><span class="number">8</span>  . . . . . . . . . . <span class="number">1</span> . . . . . . .</span><br><span class="line"><span class="number">9</span>  . . . . . . . . . . <span class="number">1</span> . . . . . . .</span><br><span class="line"><span class="number">10</span> . . . . . . . . . . . . . <span class="number">1</span> . . . .</span><br><span class="line"><span class="number">11</span> . . . . . . . . . . . . . . <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">12</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">13</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">14</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">15</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">16</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">17</span> . . . . . . . . . . . . . . . . . .</span><br><span class="line"><span class="number">18</span> . . . . . . . . . . . . . . . . . .</span><br></pre></td></tr></table></figure>
<p>In the preceding code, we did not get back the weights and got back a 0-1 sparse matrix instead.</p>
<p>If we want the weights, we can implement the following techniques.</p>
<h4 id="Extracting-an-adjacency-matrix-with-weights"><a href="#Extracting-an-adjacency-matrix-with-weights" class="headerlink" title="Extracting an adjacency matrix with weights"></a>Extracting an adjacency matrix with weights</h4><p>The graph.data.frame function from the igraph package treats the first two columns of the data frame supplied as making up the edge list and the rest of the columns as edge attributes. By default, the get.adjacency function does not return any edge attributes and instead returns a simple 0-1 sparse matrix of connections.</p>
<p>However, you can pass the attr argument to tell the function which of the remaining attributes you want as the elements of the sparse matrix (and hence the edge weight). In our situation, this attribute will be x, representing the number of common group memberships between two users. In the following, we have specified type = “lower” to get the lower triangular matrix. Other options are upper and both.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; get.adjacency(g, type = <span class="string">"lower"</span>, attr = <span class="string">"x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">18</span> x <span class="number">18</span> sparse Matrix of class <span class="string">"dgCMatrix"</span></span><br><span class="line">   [[ suppressing <span class="number">18</span> column names <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span> <span class="keyword">...</span> ]]</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>   .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">2</span>  <span class="number">17</span>  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">3</span>   .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">4</span>   .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">5</span>   .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">6</span>  <span class="number">17</span>  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">7</span>   . <span class="number">18</span>  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">8</span>   .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">9</span>   .  . <span class="number">17</span> <span class="number">17</span>  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">10</span>  .  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">11</span>  .  .  .  . <span class="number">18</span> <span class="number">17</span> <span class="number">18</span> <span class="number">17</span> <span class="number">17</span>  .  . . . . . . . .</span><br><span class="line"><span class="number">12</span> <span class="number">18</span>  .  .  .  .  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">13</span>  .  .  .  . <span class="number">18</span>  .  .  .  .  .  . . . . . . . .</span><br><span class="line"><span class="number">14</span>  .  .  .  .  .  .  .  .  . <span class="number">17</span>  . . . . . . . .</span><br><span class="line"><span class="number">15</span>  .  .  .  .  . <span class="number">19</span> <span class="number">18</span>  .  .  . <span class="number">20</span> . . . . . . .</span><br><span class="line"><span class="number">16</span>  .  .  .  .  .  .  .  .  .  . <span class="number">17</span> . . . . . . .</span><br><span class="line"><span class="number">17</span>  .  .  .  .  .  .  .  .  .  . <span class="number">17</span> . . . . . . .</span><br><span class="line"><span class="number">18</span>  .  .  .  .  .  .  .  .  .  . <span class="number">17</span> . . . . . . .</span><br></pre></td></tr></table></figure>
<h4 id="Extracting-edge-list-from-graph-object"><a href="#Extracting-edge-list-from-graph-object" class="headerlink" title="Extracting edge list from graph object"></a>Extracting edge list from graph object</h4><p>You can use the get.data.frame on an igraph object, to get the edge list:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; y &lt;- get.data.frame(g)</span><br></pre></td></tr></table></figure>
<p>Use this to get only the vertices:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; y &lt;- get.data.frame(g,<span class="string">"vertices"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Creating-bipartite-network-graph"><a href="#Creating-bipartite-network-graph" class="headerlink" title="Creating bipartite network graph"></a>Creating bipartite network graph</h4><p>Say we have a set of groups and a set of users with each user belonging to several groups and each group potentially has several members.</p>
<p>We can represent this information as a bipartite graph with the groups forming one set, the users forming the other, and edges linking members of one set to the other. You can use the graph.incidence function from the igraph package to create and visualize this network:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&gt; set.seed(<span class="number">2015</span>)</span><br><span class="line">&gt; g1 &lt;- rbinom(<span class="number">10</span>,<span class="number">1</span>,<span class="number">.5</span>)</span><br><span class="line">&gt; g2 &lt;- rbinom(<span class="number">10</span>,<span class="number">1</span>,<span class="number">.5</span>)</span><br><span class="line">&gt; g3 &lt;- rbinom(<span class="number">10</span>,<span class="number">1</span>,<span class="number">.5</span>)</span><br><span class="line">&gt; g4 &lt;- rbinom(<span class="number">10</span>,<span class="number">1</span>,<span class="number">.5</span>)</span><br><span class="line">&gt; membership &lt;- data.frame(g1, g2, g3, g4)</span><br><span class="line">&gt; names(membership)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"g1"</span> <span class="string">"g2"</span> <span class="string">"g3"</span> <span class="string">"g4"</span></span><br><span class="line"></span><br><span class="line">&gt; rownames(membership) = c(<span class="string">"u1"</span>, <span class="string">"u2"</span>, <span class="string">"u3"</span>, <span class="string">"u4"</span>, <span class="string">"u5"</span>, <span class="string">"u6"</span>, <span class="string">"u7"</span>, <span class="string">"u8"</span>, <span class="string">"u9"</span>, <span class="string">"u10"</span>)</span><br><span class="line"></span><br><span class="line">&gt; rownames(membership)</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>] <span class="string">"u1"</span>  <span class="string">"u2"</span>  <span class="string">"u3"</span>  <span class="string">"u4"</span>  <span class="string">"u5"</span>  <span class="string">"u6"</span>  <span class="string">"u7"</span>  <span class="string">"u8"</span></span><br><span class="line"> [<span class="number">9</span>] <span class="string">"u9"</span>  <span class="string">"u10"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Create the bipartite graph through the</span></span><br><span class="line">&gt; <span class="comment"># graph.incidence function</span></span><br><span class="line">&gt; bg &lt;- graph.incidence(membership)</span><br><span class="line">&gt; bg</span><br><span class="line"></span><br><span class="line">IGRAPH UN-B <span class="number">14</span> <span class="number">17</span> --</span><br><span class="line">+ attr: type (v/l), name (v/c)</span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># The B above tells us that this is a bipartite graph</span></span><br><span class="line">&gt; <span class="comment"># Explore bg</span></span><br><span class="line">&gt; V(bg)$type</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"> [<span class="number">9</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># FALSE represents the users and TRUE represents the groups</span></span><br><span class="line">&gt; <span class="comment"># See node names</span></span><br><span class="line">&gt; V(bg)$name</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"u1"</span>  <span class="string">"u2"</span>  <span class="string">"u3"</span>  <span class="string">"u4"</span>  <span class="string">"u5"</span>  <span class="string">"u6"</span>  <span class="string">"u7"</span>  <span class="string">"u8"</span></span><br><span class="line">[<span class="number">9</span>] <span class="string">"u9"</span>  <span class="string">"u10"</span> <span class="string">"g1"</span>  <span class="string">"g2"</span>  <span class="string">"g3"</span>  <span class="string">"g4"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># create a layout</span></span><br><span class="line">&gt; lay &lt;- layout.bipartite(bg)</span><br><span class="line">&gt; <span class="comment"># plot it</span></span><br><span class="line">&gt; plot(bg, layout=lay, vertex.size = <span class="number">20</span>)</span><br><span class="line">&gt; <span class="comment"># save for later use</span></span><br><span class="line">&gt; save(bg, file = <span class="string">"bipartite-graph.Rdata"</span>)</span><br></pre></td></tr></table></figure>
<p>We created a random network of four groups and ten users which when plotted appears as follows:</p>
<p><img src="img/7_1_11.jpeg" alt=""></p>
<h4 id="Generating-projections-of-a-bipartite-network"><a href="#Generating-projections-of-a-bipartite-network" class="headerlink" title="Generating projections of a bipartite network"></a>Generating projections of a bipartite network</h4><p>Very often, we need to extract adjacency information about one or both types of nodes in a bipartite network. In the preceding example with users and groups, we may want to consider two users as related or connected if they have a common group membership and create a graph only of the users. Analogously, we may consider two groups as connected if they have at least one user in common. Use the bipartite.projection function to achieve this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Generate the two projections</span></span><br><span class="line">&gt; p &lt;- bipartite.projection(bg)</span><br><span class="line">&gt; p</span><br><span class="line"></span><br><span class="line">$proj1</span><br><span class="line">IGRAPH UNW- <span class="number">10</span> <span class="number">24</span> --</span><br><span class="line">+ attr: name (v/c), weight (e/n)</span><br><span class="line"></span><br><span class="line">$proj2</span><br><span class="line">IGRAPH UNW- <span class="number">4</span> <span class="number">5</span> --</span><br><span class="line">+ attr: name (v/c), weight (e/n)</span><br><span class="line"></span><br><span class="line">&gt; plot(p$proj1, vertex.size = <span class="number">20</span>)</span><br><span class="line">&gt; plot(p$proj2, vertex.size = <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<p>The first projection is plotted as follows:</p>
<p><img src="img/7_1_12.jpeg" alt=""></p>
<p>The next projection is generated as follows:</p>
<p><img src="img/7_1_13.jpeg" alt=""></p>
<h3 id="See-also…-32"><a href="#See-also…-32" class="headerlink" title="See also…"></a>See also…</h3><p>Creating adjacency matrices and edge lists from this chapter</p>
<h2 id="Computing-important-network-metrics"><a href="#Computing-important-network-metrics" class="headerlink" title="Computing important network metrics"></a>Computing important network metrics</h2><p>This recipe covers the methods used to compute some of the common metrics used on social networks.</p>
<h3 id="Getting-ready-57"><a href="#Getting-ready-57" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not yet installed the igraph package, do it now. If you worked through the earlier recipes in this chapter, you should have the data files directed-graph.Rdata, undirected-graph.Rdata, and bipartite-graph.Rdata and should ensure that they are in your R working directory. If not, you should download these data files and place them in your R working directory.</p>
<h3 id="How-to-do-it…-58"><a href="#How-to-do-it…-58" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To compute important network metrics, follow these steps:</p>
<ol>
<li><p>Load the data files:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="string">"undirected-graph.Rdata"</span>)</span><br><span class="line">&gt; load(<span class="string">"directed-graph.Rdata"</span>)</span><br><span class="line">&gt; load(<span class="string">"bipartite-graph.Rdata"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The degree centrality can be measured as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; degree(dg)</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">9</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; degree(g)</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span></span><br><span class="line"> <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">9</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; degree(dg, <span class="string">"7"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line">&gt; degree(dg, <span class="number">9</span>, mode = <span class="string">"in"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line">&gt; degree(dg, <span class="number">9</span>, mode = <span class="string">"out"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># Proportion of vertices with degree 0, 1, 2, etc.</span></span><br><span class="line">&gt; options(digits=<span class="number">3</span>)</span><br><span class="line">&gt; degree.distribution(bg)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">0.0714</span> <span class="number">0.2857</span> <span class="number">0.1429</span> <span class="number">0.3571</span></span><br><span class="line">[<span class="number">5</span>] <span class="number">0.0714</span> <span class="number">0.0000</span> <span class="number">0.0000</span> <span class="number">0.0714</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The betweenness centrality can be measured as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; betweenness(dg)</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span></span><br><span class="line"> <span class="number">0</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">5</span>  <span class="number">5</span>  <span class="number">0</span> <span class="number">10</span>  <span class="number">0</span> <span class="number">32</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt; betweenness(g)</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>    <span class="number">2</span>    <span class="number">3</span>    <span class="number">4</span>    <span class="number">5</span>    <span class="number">6</span>    <span class="number">7</span>    <span class="number">8</span>    <span class="number">9</span>   <span class="number">10</span>   <span class="number">11</span>   <span class="number">12</span></span><br><span class="line"><span class="number">15.0</span>  <span class="number">2.0</span>  <span class="number">0.0</span>  <span class="number">0.0</span> <span class="number">14.0</span> <span class="number">22.0</span> <span class="number">11.0</span>  <span class="number">0.0</span> <span class="number">27.0</span>  <span class="number">0.0</span> <span class="number">86.5</span>  <span class="number">0.0</span></span><br><span class="line">  <span class="number">13</span>   <span class="number">14</span>   <span class="number">15</span>   <span class="number">16</span>   <span class="number">17</span>   <span class="number">18</span></span><br><span class="line"> <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">0.5</span>  <span class="number">0.0</span>  <span class="number">0.0</span>  <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">&gt; betweenness(dg, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">&gt; edge.betweenness(dg)</span><br><span class="line"></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">2</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">6</span>  <span class="number">1</span>  <span class="number">5</span>  <span class="number">8</span>  <span class="number">8</span>  <span class="number">5</span> <span class="number">15</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"></span><br><span class="line">&gt; edge.betweenness(dg,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>The closeness centrality can be measured as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; options(digits=<span class="number">3</span>)</span><br><span class="line">&gt; closeness(dg,mode=<span class="string">"in"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line"><span class="number">0.00327</span> <span class="number">0.00346</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00346</span></span><br><span class="line">      <span class="number">7</span>       <span class="number">8</span>       <span class="number">9</span>      <span class="number">10</span>      <span class="number">11</span>      <span class="number">12</span></span><br><span class="line"><span class="number">0.00366</span> <span class="number">0.00327</span> <span class="number">0.00368</span> <span class="number">0.00327</span> <span class="number">0.00637</span> <span class="number">0.00346</span></span><br><span class="line">     <span class="number">13</span>      <span class="number">14</span>      <span class="number">15</span>      <span class="number">16</span>      <span class="number">17</span>      <span class="number">18</span></span><br><span class="line"><span class="number">0.00346</span> <span class="number">0.00346</span> <span class="number">0.00690</span> <span class="number">0.00671</span> <span class="number">0.00671</span> <span class="number">0.00671</span></span><br><span class="line"></span><br><span class="line">&gt; closeness(dg,mode=<span class="string">"out"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line"><span class="number">0.00617</span> <span class="number">0.00472</span> <span class="number">0.00469</span> <span class="number">0.00469</span> <span class="number">0.00481</span> <span class="number">0.00446</span></span><br><span class="line">      <span class="number">7</span>       <span class="number">8</span>       <span class="number">9</span>      <span class="number">10</span>      <span class="number">11</span>      <span class="number">12</span></span><br><span class="line"><span class="number">0.00446</span> <span class="number">0.00444</span> <span class="number">0.00444</span> <span class="number">0.00346</span> <span class="number">0.00420</span> <span class="number">0.00327</span></span><br><span class="line">     <span class="number">13</span>      <span class="number">14</span>      <span class="number">15</span>      <span class="number">16</span>      <span class="number">17</span>      <span class="number">18</span></span><br><span class="line"><span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span></span><br><span class="line"></span><br><span class="line">&gt; closeness(dg,mode=<span class="string">"all"</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line"><span class="number">0.01333</span> <span class="number">0.01316</span> <span class="number">0.01220</span> <span class="number">0.01220</span> <span class="number">0.01429</span> <span class="number">0.01515</span></span><br><span class="line">      <span class="number">7</span>       <span class="number">8</span>       <span class="number">9</span>      <span class="number">10</span>      <span class="number">11</span>      <span class="number">12</span></span><br><span class="line"><span class="number">0.01493</span> <span class="number">0.01389</span> <span class="number">0.01471</span> <span class="number">0.00346</span> <span class="number">0.01724</span> <span class="number">0.01124</span></span><br><span class="line">     <span class="number">13</span>      <span class="number">14</span>      <span class="number">15</span>      <span class="number">16</span>      <span class="number">17</span>      <span class="number">18</span></span><br><span class="line"><span class="number">0.01190</span> <span class="number">0.00346</span> <span class="number">0.01493</span> <span class="number">0.01389</span> <span class="number">0.01389</span> <span class="number">0.01389</span></span><br><span class="line"></span><br><span class="line">&gt; closeness(dg)</span><br><span class="line"></span><br><span class="line">      <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span>       <span class="number">5</span>       <span class="number">6</span></span><br><span class="line"><span class="number">0.00617</span> <span class="number">0.00472</span> <span class="number">0.00469</span> <span class="number">0.00469</span> <span class="number">0.00481</span> <span class="number">0.00446</span></span><br><span class="line">      <span class="number">7</span>       <span class="number">8</span>       <span class="number">9</span>      <span class="number">10</span>      <span class="number">11</span>      <span class="number">12</span></span><br><span class="line"><span class="number">0.00446</span> <span class="number">0.00444</span> <span class="number">0.00444</span> <span class="number">0.00346</span> <span class="number">0.00420</span> <span class="number">0.00327</span></span><br><span class="line">     <span class="number">13</span>      <span class="number">14</span>      <span class="number">15</span>      <span class="number">16</span>      <span class="number">17</span>      <span class="number">18</span></span><br><span class="line"><span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span> <span class="number">0.00327</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-55"><a href="#How-it-works…-55" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 computes various metrics dealing with the degree of the vertices in a graph. Degree measures the number of edges connected to a vertex or node. Degree distribution provides the frequency of all degree measures up to the maximum degree. For an undirected graph, the degree is always the total adjacent edges. However, for a directed graph, the degree depends on the mode argument passed. Mode can be out, in, all, or total. Both all and total return the total degree of that node or vertex. You should be able to verify some of the numbers from the plots provided earlier.</p>
<p>Centrality determines how individual nodes fit within a network. High centrality nodes are influencers: positive and negative. There are different types of centrality, and we discuss a few important ones here.</p>
<p>Step 2, computes betweenness, which quantifies the number of times a node falls in the shortest path between two other nodes. Nodes with high betweenness sit between two different clusters. To travel from any node in one cluster to any other node in the second cluster, one will likely need to travel through this particular node.</p>
<p>Edge betweenness computes the number of shortest paths through a particular edge. If a graph includes the weight attribute, then it is used by default. In our example, we have an attribute x. You will get different results if you rename the column to weight.</p>
<p>Step 3 computes closeness, which quantifies the extent to which a node is close to other nodes. It is a measure of the total distance from a node to all others. A node with high closeness has easy access to many other nodes. In a directed graph, if mode is not specified, then out is the default. In an undirected graph, mode does not play any role and is ignored.</p>
<p><strong>Tip</strong></p>
<p>Closeness measures the extent of access a node has to others, and betweenness measures the extent to which a node acts as an intermediary.</p>
<h3 id="There’s-more…-32"><a href="#There’s-more…-32" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We show a few additional options to work on the graph objects.</p>
<h4 id="Getting-edge-sequences"><a href="#Getting-edge-sequences" class="headerlink" title="Getting edge sequences"></a>Getting edge sequences</h4><p>You can look at the edges—the connections—in the figure showing the directed graph in Plotting directed graphs. You can identify edges as E(1) … E(19):</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; E(dg)</span><br><span class="line">Edge sequence:</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  -&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>]  <span class="number">1</span>  -&gt; <span class="number">12</span></span><br><span class="line">[<span class="number">3</span>]  <span class="number">1</span>  -&gt; <span class="number">6</span></span><br><span class="line">[<span class="number">4</span>]  <span class="number">2</span>  -&gt; <span class="number">7</span></span><br><span class="line">[<span class="number">5</span>]  <span class="number">3</span>  -&gt; <span class="number">9</span></span><br><span class="line">[<span class="number">6</span>]  <span class="number">4</span>  -&gt; <span class="number">9</span></span><br><span class="line">[<span class="number">7</span>]  <span class="number">5</span>  -&gt; <span class="number">13</span></span><br><span class="line">[<span class="number">8</span>]  <span class="number">5</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">9</span>]  <span class="number">6</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">10</span>] <span class="number">7</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">11</span>] <span class="number">8</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">12</span>] <span class="number">9</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">13</span>] <span class="number">10</span> -&gt; <span class="number">14</span></span><br><span class="line">[<span class="number">14</span>] <span class="number">6</span>  -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">15</span>] <span class="number">7</span>  -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">16</span>] <span class="number">11</span> -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">17</span>] <span class="number">11</span> -&gt; <span class="number">16</span></span><br><span class="line">[<span class="number">18</span>] <span class="number">11</span> -&gt; <span class="number">17</span></span><br><span class="line">[<span class="number">19</span>] <span class="number">11</span> -&gt; <span class="number">18</span></span><br></pre></td></tr></table></figure>
<h4 id="Getting-immediate-and-distant-neighbors"><a href="#Getting-immediate-and-distant-neighbors" class="headerlink" title="Getting immediate and distant neighbors"></a>Getting immediate and distant neighbors</h4><p>The neighbors function lists the neighbors of a given node (excluding itself):</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; neighbors(g, <span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">2</span>  <span class="number">6</span> <span class="number">12</span></span><br><span class="line">&gt; neighbors(bg, <span class="string">"u1"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line">&gt; <span class="comment"># for a bipartite graph, refer to nodes by node name and</span></span><br><span class="line">&gt; <span class="comment"># get results also as node names</span></span><br><span class="line">&gt; V(bg)$name[neighbors(bg,<span class="string">"g1"</span>)]</span><br><span class="line">[<span class="number">1</span>] <span class="string">"u2"</span>  <span class="string">"u9"</span>  <span class="string">"u10"</span></span><br></pre></td></tr></table></figure>
<p>The neighborhood function gets the list of neighbors lying at most a specified distance from a given node or a set of nodes. The node in question is always included in the list since it is of distance 0 from itself:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">#immediate neighbors of node 1</span></span><br><span class="line">&gt; neighborhood(dg, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">6</span> <span class="number">12</span></span><br><span class="line"></span><br><span class="line">&gt; neighborhood(dg, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">6</span> <span class="number">12</span>  <span class="number">7</span> <span class="number">11</span> <span class="number">15</span></span><br></pre></td></tr></table></figure>
<h4 id="Adding-vertices-or-nodes"><a href="#Adding-vertices-or-nodes" class="headerlink" title="Adding vertices or nodes"></a>Adding vertices or nodes</h4><p>We can add nodes to an existing graph object:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">#Add a new vertex</span></span><br><span class="line">&gt; g.new &lt;- g + vertex(<span class="number">19</span>)</span><br><span class="line">&gt; <span class="comment"># Add 2 new vertices</span></span><br><span class="line">&gt; g.new &lt;- g + vertices(<span class="number">19</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Adding-edges"><a href="#Adding-edges" class="headerlink" title="Adding edges"></a>Adding edges</h4><p>If we need to add a new relationship between nodes 15 and 20, we can do the following:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; g.new &lt;- g.new + edge(<span class="number">15</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Deleting-isolates-from-a-graph"><a href="#Deleting-isolates-from-a-graph" class="headerlink" title="Deleting isolates from a graph"></a>Deleting isolates from a graph</h4><p>Isolated nodes have no connections or edges and therefore have degree 0. We can use this to select vertices that have 0 degree and delete them using delete.vertices as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; g.new &lt;- delete.vertices(g.new, V(g.new)[ degree(g.new)==<span class="number">0</span> ])</span><br></pre></td></tr></table></figure>
<p>We can also use delete.vertices to delete a specific vertex. This function creates a new graph. If the vertex does not exist in the graph, you will see an error message Invalid vertex names. Plot the new graph to check if the isolated vertex has been removed:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; g.new &lt;- delete.vertices(g.new,<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<p>Deletion reassigns the vertex IDs even in some cases when edges are deleted. Hence, if you are using IDs instead of vertex names, exercise caution as the IDs may change.</p>
<h4 id="Creating-subgraphs"><a href="#Creating-subgraphs" class="headerlink" title="Creating subgraphs"></a>Creating subgraphs</h4><p>You can create new graphs by selecting the vertices you are interested in using the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; g.sub &lt;- induced.subgraph(g, c(<span class="number">5</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">7</span>))</span><br></pre></td></tr></table></figure>
<p>You can also create new graphs by selecting the edges you are interested in using the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; E(dg)</span><br><span class="line"></span><br><span class="line">Edge sequence:</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span>  -&gt; <span class="number">2</span></span><br><span class="line">[<span class="number">2</span>]  <span class="number">1</span>  -&gt; <span class="number">12</span></span><br><span class="line">[<span class="number">3</span>]  <span class="number">1</span>  -&gt; <span class="number">6</span></span><br><span class="line">[<span class="number">4</span>]  <span class="number">2</span>  -&gt; <span class="number">7</span></span><br><span class="line">[<span class="number">5</span>]  <span class="number">3</span>  -&gt; <span class="number">9</span></span><br><span class="line">[<span class="number">6</span>]  <span class="number">4</span>  -&gt; <span class="number">9</span></span><br><span class="line">[<span class="number">7</span>]  <span class="number">5</span>  -&gt; <span class="number">13</span></span><br><span class="line">[<span class="number">8</span>]  <span class="number">5</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">9</span>]  <span class="number">6</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">10</span>] <span class="number">7</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">11</span>] <span class="number">8</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">12</span>] <span class="number">9</span>  -&gt; <span class="number">11</span></span><br><span class="line">[<span class="number">13</span>] <span class="number">10</span> -&gt; <span class="number">14</span></span><br><span class="line">[<span class="number">14</span>] <span class="number">6</span>  -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">15</span>] <span class="number">7</span>  -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">16</span>] <span class="number">11</span> -&gt; <span class="number">15</span></span><br><span class="line">[<span class="number">17</span>] <span class="number">11</span> -&gt; <span class="number">16</span></span><br><span class="line">[<span class="number">18</span>] <span class="number">11</span> -&gt; <span class="number">17</span></span><br><span class="line">[<span class="number">19</span>] <span class="number">11</span> -&gt; <span class="number">18</span></span><br><span class="line"></span><br><span class="line">&gt; eids &lt;- c(<span class="number">1</span>:<span class="number">2</span>, <span class="number">9</span>:<span class="number">15</span>)</span><br><span class="line">&gt; dg.sub &lt;- subgraph.edges(dg, eids)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Chapter-8-Put-Your-Best-Foot-Forward-–-Document-and-Present-Your-Analysis"><a href="#Chapter-8-Put-Your-Best-Foot-Forward-–-Document-and-Present-Your-Analysis" class="headerlink" title="Chapter 8. Put Your Best Foot Forward – Document and Present Your Analysis"></a>Chapter 8. Put Your Best Foot Forward – Document and Present Your Analysis</h1><p>In this chapter, you will cover:</p>
<ul>
<li>Generating reports of your data analysis with R Markdown and knitR</li>
<li>Creating interactive web applications with shiny</li>
<li>Creating PDF presentations of your analysis with R Presentation</li>
</ul>
<h2 id="Introduction-7"><a href="#Introduction-7" class="headerlink" title="Introduction"></a>Introduction</h2><p>Other than helping us analyze data, R has libraries that help you with professional presentations as well. You can perform the following tasks:</p>
<p>Create professional web pages that showcase your analysis and allow others to actively experiment with the underlying data<br>Generate PDF reports of your analysis; your report can include embedded R commands for the system to execute and fill live data and charts so that, when the data changes, you can regenerate the report with a single button click<br>Generate PDF presentations of your analysis<br>This chapter provides recipes for you to exploit all of these capabilities.</p>
<h2 id="Generating-reports-of-your-data-analysis-with-R-Markdown-and-knitr"><a href="#Generating-reports-of-your-data-analysis-with-R-Markdown-and-knitr" class="headerlink" title="Generating reports of your data analysis with R Markdown and knitr"></a>Generating reports of your data analysis with R Markdown and knitr</h2><p>R Markdown provides a simple syntax to define analysis reports. Based on such a report definition, knitr can generate reports in HTML, PDF, Microsoft Word format, and several presentation formats. R Markdown documents contain regular text, embedded R code chunks, and inline R code. knitr parses the markdown document and inserts the results of executing the R code at specified locations within regular text to produce a well-formatted report.</p>
<p>R Markdown extends the regular markdown format to enable us to embed R code.</p>
<p>We can create R Markdown documents either in RStudio or directly in R using the markdown package. In this recipe, we describe the RStudio approach.</p>
<h3 id="Getting-ready-58"><a href="#Getting-ready-58" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and place the auto-mpg.csv and knitr.Rmd files in a known location (this need not necessarily be the working directory of your R installation).</p>
<p>Install the latest version of the knitr and rmarkdown packages:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"knitr"</span>)</span><br><span class="line">&gt; install.packages(<span class="string">"rmarkdown"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-59"><a href="#How-to-do-it…-59" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To generate reports using rmarkdown and knitr, follow these steps:</p>
<ol>
<li>Open RStudio.</li>
<li>Create a new R Markdown document as follows:</li>
<li>Select the menu option by navigating to File | New File | R Markdown.</li>
<li><p>Enter the title as “Introduction”, leave the other defaults as is, and click on OK.</p>
<p> This generates a sample R Markdown document that we can edit to suit our needs. The sample document resembles the following screenshot:</p>
<p> <img src="img/8_1_1.jpeg" alt=""></p>
</li>
<li><p>Take a quick look at the document. You do not need to understand everything in it. In this step, we are just trying to get an overview.</p>
</li>
<li>Generate an HTML document based on the markdown file. Depending on the width of your editing pane, you may either see just the knitr icon (a blue bale of wool and a knitting needle) with a downward-facing arrow or the icon and the text Knit HTML beside it. If you only see the icon, click on the downward arrow beside the icon and select Knit HTML. If you see the text in addition to the icon, just click on Knit HTML to generate the HTML document. RStudio may render the report in a separate window or in the top pane on the right side. The menu that you used to generate HTML has options to control where RStudio will render the report—choose either View in pane or View in window.</li>
<li>With the same file, you can generate a PDF or Word document by invoking the appropriate menu option. To generate a Word document, you need to have Microsoft Word installed on your system and, to generate a PDF, you need to have the Latex PDF generator pdflatex installed. Note that the output item in the metadata changes according to the output format you choose from the menu.</li>
<li>Now that you have an idea of the process, use the menu option by navigating to File | Open file to open the knitr.Rmd file. Before proceeding further, edit line 40 of the file and change the root.dir location to wherever you downloaded the files for this chapter. For ease of discussion, we show the output incrementally.</li>
<li><p>The metadata section is between two lines, each with just three hyphens, shown as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="string">"Markdown Document"</span></span><br><span class="line">author: <span class="string">"Shanthi Viswanathan"</span></span><br><span class="line">date: <span class="string">"December 8, 2014"</span></span><br><span class="line">output:</span><br><span class="line">  html_document:</span><br><span class="line">    theme: cosmo</span><br><span class="line">    toc: yes</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p> <img src="img/8_1_2.jpeg" alt=""></p>
</li>
<li><p>The Introduction section of the R Markdown document appears as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* * *</span><br><span class="line"><span class="comment"># Introduction</span></span><br><span class="line">This is an *R Markdown document*. Markdown is a simple formatting syntax <span class="keyword">for</span> authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;http://rmarkdown.rstudio.com&gt;.</span><br></pre></td></tr></table></figure>
<p>When you click the <strong>Knit</strong> button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document.</p>
<p>This is also seen in the following screenshot:</p>
<p><img src="img/8_1_3.jpeg" alt=""></p>
</li>
<li><p>The HTML content of the document is as follows:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#HTML Content</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> This is a new paragraph written with the HTML tag</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span> Pros <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span> Cons <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Easy to use<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>Need to Plan ahead <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the document it appears as follows:</p>
<p><img src="img/8_1_4.jpeg" alt=""></p>
</li>
<li><p>Embed the R Code. Change the following root.dir path to the folder where you stored the auto-mpg.csv and knitr.Rmd files:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Embed Code</span></span><br><span class="line"><span class="comment">## Set Directory</span></span><br><span class="line">You can embed any R code chunk within <span class="number">3</span> ticks. If you add echo=<span class="literal">FALSE</span> the code chunk is not displayed <span class="keyword">in</span> the document. We can set knitr options either globally or within a code segment. The options set globally are used throughout the document.</span><br><span class="line"></span><br><span class="line">We set the root.dir before loading any files. By enabling cache=<span class="literal">TRUE</span>, a code chunk is executed only when there is a change from the prior execution. This enhances knitr performance.</span><br><span class="line"></span><br><span class="line">```&#123;r setup, echo=FALSE, message=FALSE, warning=FALSE&#125;</span><br><span class="line">knitr::opts_chunk$set(cache=TRUE)</span><br><span class="line">knitr::opts_knit$set(root.dir = "/Users/shanthiviswanathan/projects/RCookbook/chapter8/")</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    This can be seen in the following screenshot:</span><br><span class="line"></span><br><span class="line">    ![](img/8_1_5.jpeg)</span><br><span class="line"></span><br><span class="line">13. Load the data:</span><br><span class="line"></span><br><span class="line">    ```R</span><br><span class="line">    ##Load Data</span><br><span class="line">    ```&#123;r loadData, echo=FALSE&#125;</span><br><span class="line">    auto &lt;- read.csv(&quot;auto-mpg.csv&quot;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">14. Plot the data:</span><br><span class="line"></span><br><span class="line">    ```R</span><br><span class="line">    ```&#123;r plotData &#125;</span><br><span class="line">    plot(auto$mpg~auto$weight)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    The output of the preceding command can be seen here:</span><br><span class="line"></span><br><span class="line">    ![](img/8_1_6.jpeg)</span><br><span class="line"></span><br><span class="line">15. Plot with the format options:</span><br><span class="line"></span><br><span class="line">    ```R</span><br><span class="line">    ```&#123;r plotFormatData, echo=FALSE, fig.height=4, fig.width=8&#125;</span><br><span class="line">    plot(auto$mpg~auto$weight)</span><br><span class="line">    str(auto)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    The following screenshot shows the plotted output:</span><br><span class="line"></span><br><span class="line">    ![](img/8_1_7.jpeg)</span><br><span class="line"></span><br><span class="line">16. Embed the code within a sentence:</span><br><span class="line"></span><br><span class="line">    There are `r nrow(auto)` cars in the auto data set.</span><br><span class="line">    Here&apos;s the output of the preceding command:</span><br><span class="line"></span><br><span class="line">    ![](img/8_1_8.jpeg)</span><br><span class="line"></span><br><span class="line">### How it works...</span><br><span class="line"></span><br><span class="line">Step 1 opens RStudio.</span><br><span class="line"></span><br><span class="line">Step 2 creates a new R Markdown document. A new document includes a default metadata section between lines containing three dashes. This metadata section includes the title and output sections and can optionally also specify the author and date.</span><br><span class="line"></span><br><span class="line">Step 4 shows you how to generate the HTML document. If running in RStudio, you can indicate the desired output format by selecting the appropriate menu option. However, it is possible to run knitr within a standard R environment; in this case, the output specified in the markdown document determines the format of the output document.</span><br><span class="line"></span><br><span class="line">Step 5 shows you how to generate a PDF or Word document based on the markdown document.</span><br><span class="line"></span><br><span class="line">Step 6 opens a precreated document that illustrates many of the important features of knitr. We explain the code in parts here.</span><br><span class="line"></span><br><span class="line">Step 7 contains the metadata of the document:</span><br><span class="line"></span><br><span class="line">- There are three output types: Word, PDF, and HTML.</span><br><span class="line">- The initial three hyphens indicate the start of the metadata section.</span><br><span class="line">- toc:TRUE causes the table of contents to be generated based on the headings in the document. This is explained in in the next section.</span><br><span class="line">- The final three hyphens end the metadata section.</span><br><span class="line"></span><br><span class="line">Step 8 contains the Introduction section of our sample document:</span><br><span class="line"></span><br><span class="line">- The three asterisks on a line by itself cause a horizontal line to be output.</span><br><span class="line">- Lines starting with a single # signify a first-level heading and, if toc:TRUE is set in the metadata, it is added in the table of contents. Lines starting with ## signify second-level headings.</span><br><span class="line">- Text surrounded by a single asterisk displays as italic, and text surrounded by double asterisks displays as bold.</span><br><span class="line">- Text starting with &lt;http and ending with &gt; is displayed as a URL.</span><br><span class="line">- Checkout *There&apos;s more...* for the most commonly used syntax.</span><br><span class="line"></span><br><span class="line">Step 9 includes the HTML content of our sample document:</span><br><span class="line"></span><br><span class="line">- Regular HTML coding can be embedded in a R Markdown document. knitr will only properly display the HTML if the output format is set in HTML; you must leave an empty line before starting the HTML code.</span><br><span class="line">- In this segment, we used the HTML table syntax to produce a table.</span><br><span class="line"></span><br><span class="line">Step 10 shows how to embed R code in a markdown document:</span><br><span class="line"></span><br><span class="line">- R code fragments or chunks begin on new lines with three back quotes (```) at the start. These chunks end with a line containing just three back quotes. The text of the R code segment starts with r, followed by an optional name for the chunk (we can choose any unique name).</span><br><span class="line">- We recommend that you do not mix the code for knitr settings with regular R code in a single chunk. Keep them in separate chunks. In this step, we set cache=TRUE and also set the home directory for knitr. The knitr options set here apply to the whole document. Thus, cache is enabled for each R code chunk that follows this setting.</span><br><span class="line">- We set up display options for the current code chunk. If echo=FALSE, then the code chunk is not displayed in the document. Similarly, message=FALSE and warning=FALSE suppress any R messages and warnings in the document.</span><br><span class="line"></span><br><span class="line">Step 11 loads data from a file:</span><br><span class="line"></span><br><span class="line">- We show a code chunk named loadData to read a .csv file into a variable. This code chunk does not appear in the report because we have chosen echo=FALSE.</span><br><span class="line">- The location of the file is taken from the directory that we set in the earlier step. Also, since we have enabled cache, the file is not read each time the document is generated.</span><br><span class="line"></span><br><span class="line">Steps 12 and 13 plot data:</span><br><span class="line"></span><br><span class="line">- We create a code chunk called plotData. The R code appears in the report because the default value for echo is TRUE. If an R code chunk produces any output, knitr automatically includes that output in the generated report.</span><br><span class="line"></span><br><span class="line">Step 14 illustrates how to embed R code in-line:</span><br><span class="line"></span><br><span class="line">- We enclose the R code between a set of single back quotes. knitr substitutes the output of the R command in place of the in line R code.</span><br><span class="line">- Thus, nrow(auto) returns the number of autos and is included in the generated document.</span><br><span class="line"></span><br><span class="line">### There&apos;s more...</span><br><span class="line"></span><br><span class="line">The following is a list of the most commonly used markdown syntax elements. See http://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf for a complete list of markdown syntax elements:</span><br><span class="line"></span><br><span class="line">|Option|Syntax|Remarks|</span><br><span class="line">|:-----|------|-------|</span><br><span class="line">|Italics|\*text\*||</span><br><span class="line">|Bold|\*\*text\*\*||</span><br><span class="line">|New Paragraph|Leave 2 spaces after the end of the line||</span><br><span class="line">|Header1–6|# text, ## text, ### text, and so on|Headers display the word in an appropriate font|</span><br><span class="line">|Horizontal Rule `&lt;hr&gt;`|\*\*\*|Draws a horizontal line|</span><br><span class="line">|Unordered List (*, +, -)|\* List Item 1|Note that the space between * and the list item + and – can also be used|</span><br><span class="line">|Unordered SubItem|+ sub item 1|Use an indented + to create a sublist or an indented – or an indented * to create sublists|</span><br><span class="line">|Ordered list|1. List item; 1. Another List item|Even for the ordered list, the indented + is used to create subitems|</span><br><span class="line"></span><br><span class="line">The following table shows the various display options in a code chunk:</span><br><span class="line"></span><br><span class="line">|Option|Description|Possible Values|</span><br><span class="line">|-----|-----------|----------------|</span><br><span class="line">|eval|Evaluate the code in the code chunk|TRUE, FALSE; default: TRUE|</span><br><span class="line">|echo|Display code along with the output|TRUE, FALSE;default: TRUE|</span><br><span class="line">|warning|Display warning messages|TRUE, FALSE; default: TRUE|</span><br><span class="line">|error|Display errors|TRUE, FALSE; default: FALSE|</span><br><span class="line">|message|Display R messages|TRUE, FALSE; default: TRUE|</span><br><span class="line">|results|Display results|markup, asis, hold, hide; default: markup|</span><br><span class="line">|cache|Cache the results|TRUE, FALSE; default: FALSE|</span><br><span class="line"></span><br><span class="line">#### Using the render function</span><br><span class="line"></span><br><span class="line">In RStudio, document output can be generated using knitr by clicking on the knit button. You can also directly enter a command in the R command line. If you leave out the second argument, then the output specification in the markdown document determines the output format:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">rmarkdown::render(&quot;introduction.Rmd&quot;,&quot;pdf_document&quot;).</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>To create the output in all formats mentioned in the markdown document, use the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmarkdown::render(<span class="string">"introduction.Rmd"</span>,<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure>
<h4 id="Adding-output-options"><a href="#Adding-output-options" class="headerlink" title="Adding output options"></a>Adding output options</h4><p>The following output options can be added:</p>
<ul>
<li>Type of output document to build:<br>output:<code>html_document</code>, output:<code>pdf_document</code>, output:<code>beamer_presentation</code>, output:<code>ioslides_presentation</code>, output:<code>word_document</code></li>
<li>Number the section headings. If the sections are not named, then they are incrementally numbered: <code>number_sections</code> = <code>TRUE</code></li>
<li>The <code>fig_width</code>, <code>fig_height</code> options are the default width and height in inches. figures:<code>fig_width=7</code>, <code>fig_height=5</code></li>
<li>Theme: Visual theme; pass null to use custom CSS</li>
<li>CSS: Include filename</li>
</ul>
<h2 id="Creating-interactive-web-applications-with-shiny"><a href="#Creating-interactive-web-applications-with-shiny" class="headerlink" title="Creating interactive web applications with shiny"></a>Creating interactive web applications with shiny</h2><p>The shiny package helps in building interactive web applications using R. This recipe illustrates the main components of a shiny application through examples.</p>
<h3 id="Getting-ready-59"><a href="#Getting-ready-59" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store them in your R working directory. The code for this chapter contains files in various subfolders (named DummyApp, SimpleApp, TabApp, ConditionalApp, and SingleFileApp). Copy these folders into your R working directory.</p>
<p>Install and load the shiny package as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"shiny"</span>)</span><br></pre></td></tr></table></figure>
<p>Restart RStudio after installing shiny.</p>
<h3 id="How-to-do-it…-60"><a href="#How-to-do-it…-60" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To create interactive web applications with shiny, follow the steps below:</p>
<ol>
<li><p>Get a feel for shiny by examining a dummy application with no functionality. The folder called DummyApp in your R working directory contains the ui.R and server.R files with the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ui.R</span></span><br><span class="line"><span class="keyword">library</span>(shiny)</span><br><span class="line">shinyUI(pageWithSidebar(</span><br><span class="line">   headerPanel(<span class="string">"Dummy Application"</span>),</span><br><span class="line">   sidebarPanel(     h3(<span class="string">'Sidebar text'</span>)   ),</span><br><span class="line">   mainPanel(       h3(<span class="string">'Main Panel text'</span>)   ) ))</span><br><span class="line"></span><br><span class="line"><span class="comment">#server.R</span></span><br><span class="line"><span class="keyword">library</span>(shiny)</span><br><span class="line">shinyServer(<span class="keyword">function</span>(input,output) &#123; &#125; )</span><br></pre></td></tr></table></figure>
<p> Run the application using runApp(“DummyApp”). If you have the files loaded in the code pane in RStudio, click on Run App.</p>
</li>
<li><p>The SimpleApp directory in your R working directory contains the files ui.R and server.R with the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ui.R</span></span><br><span class="line"><span class="keyword">library</span>(shiny)</span><br><span class="line">shinyUI(fluidPage(</span><br><span class="line">  titlePanel(<span class="string">"Simple Shiny Application"</span>),</span><br><span class="line">  sidebarLayout(</span><br><span class="line">    sidebarPanel(</span><br><span class="line">      p(<span class="string">"Create plots using the auto data"</span>),</span><br><span class="line">      selectInput(<span class="string">"x"</span>, <span class="string">"Select X axis"</span>,</span><br><span class="line">      choices = c(<span class="string">"weight"</span>,<span class="string">"cylinders"</span>,<span class="string">"acceleration"</span>))</span><br><span class="line">    ),</span><br><span class="line">    mainPanel(</span><br><span class="line">          h4(textOutput(<span class="string">"outputString"</span>)),</span><br><span class="line">         plotOutput(<span class="string">"autoplot"</span>))   )</span><br><span class="line">  ))</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># server.R</span></span><br><span class="line">auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br><span class="line">shinyServer(<span class="keyword">function</span>(input, output) &#123;</span><br><span class="line">     output$outputString &lt;- renderText(paste(<span class="string">"mpg ~"</span>,</span><br><span class="line">        input$x))</span><br><span class="line">    output$autoplot &lt;- renderPlot(</span><br><span class="line">        plot(as.formula(paste(<span class="string">"mpg ~"</span>,input$x)),data=auto))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Enter the runApp(“SimpleApp”) command or, if the preceding files are loaded in the code pane, click on Run App to run the shiny application in the RStudio environment. The application opens in a separate window. When the application is running, RStudio cannot execute any command. Either close the application window, or press the Esc key in RStudio to exit the application.</p>
</li>
</ol>
<h3 id="How-it-works…-56"><a href="#How-it-works…-56" class="headerlink" title="How it works…"></a>How it works…</h3><p>A shiny application typically includes a folder with the ui.R and server.R files. The code in ui.R controls the user interface, and server.R controls the data that the application renders on the user interface as well as how the application responds to user actions on the interface.</p>
<p>In step 1, the dummy application presents a simple static user interface with no scope for user interaction.</p>
<p>The shinyUI function of ui.R constructs the user interface. In DummyApp, the function constructs the user interface with three static elements. It uses the pageWithSidebar function to create a page with static text in headerPanel, sidebarPanel, and mainPanel.</p>
<p>The shinyServer function in the server.R file controls how the application responds to user actions. This function represents the listeners on the server side. For every user action, the shinyServer function gets the relevant values from the user interface. The relevant parts of the server’s listener get executed and send the output back to the user interface, which then updates the screen with the new values. The reactivity of the shiny package is explained as follows. Since DummyApp has no elements with which a user can actually interact and also has an empty shinyServer function, it cannot respond to user actions.</p>
<p>Step 2 builds a simple application in the SimpleApp folder. This application showcases the elements of a reactive application—one where the application truly reacts to user actions on the user interface. shiny has functions to generate static html as well as html code for user interface widgets, such as buttons, checkboxes, and drop-down lists, among others. The ui.R file in SimpleApp shows the use of the p function to add an HTML paragraph, the selectInput function to create a drop-down listbox, the textOutput and h4 function to create a level 4 heading text, and the plotOutput function to plot the output image from the server.</p>
<p>shiny has several layout options to customize the look and feel of the user interface. In this recipe, we used fluidPage with three panels: titlePanel, sidebarPanel, and mainPanel.</p>
<p>shiny uses reactive-programming. A user input—such as the user entering text, selecting an item from a list, or clicking on a button—is a reactive source. A server output, such as a plot or data table, is a reactive endpoint that appears on the user’s browser window. Whenever a reactive source changes, the reactive end point that uses the source is notified to re-execute. In this recipe, both renderText and renderPlot are reactive. renderText depends on input x, which means that renderText() is executed each time the user selects a different x. renderPlot depends on both x and the color and hence any change to either of these two input values causes renderPlot to be invoked.</p>
<p>When you run the application, the preceding statements shinyServer(function(input, output) in server.R are executed just once during the first application load. After this, only the relevant portions of the listener function execute for each change in the user interface.</p>
<p>We loaded the auto-mpg.csv data file here once for the application. We typically load packages, data, and dependent R source files once during the initial load of the application.</p>
<h3 id="There’s-more…-33"><a href="#There’s-more…-33" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>For a complete tutorial on shiny, refer to <a href="http://shiny.rstudio.com/tutorial" target="_blank" rel="external">http://shiny.rstudio.com/tutorial</a>. We provide a few key additions relating to building shiny web applications here.</p>
<h4 id="Adding-images"><a href="#Adding-images" class="headerlink" title="Adding images"></a>Adding images</h4><p>To add images in the user interface, save the image file in the www directory under the application folder. Include the saved image file in ui.R with height and width in pixels as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img(src = <span class="string">"myappimage.png"</span>, height = <span class="number">72</span>, width = <span class="number">72</span>)</span><br></pre></td></tr></table></figure>
<p>The css, javascript, and jquery files are all stored in the www folder.</p>
<h4 id="Adding-HTML"><a href="#Adding-HTML" class="headerlink" title="Adding HTML"></a>Adding HTML</h4><p>shiny provides R functions for several HTML markup tags. We have seen a sample of the R function h3(“text here”) in our first dummy application. Similarly, there are R functions such as p(), h1() to include paragraph, header 1, and so on, in a shiny application.</p>
<h4 id="Adding-tab-sets"><a href="#Adding-tab-sets" class="headerlink" title="Adding tab sets"></a>Adding tab sets</h4><p>Tabs are created by the tabPanel() function and each tab can hold its own output UI components. The TabApp folder has the ui.R and server.R files for a tabbed user interface. We give the main excerpts from each in the following code:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Excerpt from ui.R</span></span><br><span class="line">mainPanel(</span><br><span class="line">      tabsetPanel(</span><br><span class="line">        tabPanel(<span class="string">"Plot"</span>, textOutput(<span class="string">"outputString"</span>),</span><br><span class="line">                 plotOutput(<span class="string">"plot"</span>)),</span><br><span class="line">        tabPanel(<span class="string">"Summary"</span>, verbatimTextOutput(<span class="string">"summary"</span>)),</span><br><span class="line">        tabPanel(<span class="string">"Table"</span>, tableOutput(<span class="string">"table"</span>)),</span><br><span class="line">        tabPanel(<span class="string">"DataTable"</span>, dataTableOutput(<span class="string">"datatable"</span>))</span><br><span class="line">      )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
<p>Add functionality in server.R to get the summary, table, and the data.table output:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment"># Excerpt from server.R to generate a summary of the data</span></span><br><span class="line">  output$summary &lt;- renderPrint(&#123;</span><br><span class="line">    summary(auto)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Generate an HTML table view of the data</span></span><br><span class="line">  output$table &lt;- renderTable(&#123;</span><br><span class="line">    data.frame(x=auto)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Generate an HTML table view of the data</span></span><br><span class="line">  output$datatable &lt;- renderDataTable(&#123;</span><br><span class="line">    auto</span><br><span class="line">  &#125;, options = list(aLengthMenu = c(<span class="number">5</span>, <span class="number">25</span>, <span class="number">50</span>), iDisplayLength = <span class="number">5</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The options argument in renderDataTable expects a list. The preceding code specifies the items in the list and the number of items to display in the drop-down box.</p>
<p>Run the application with runApp(“TabApp”) to see the tabs and tab contents. If not all items are visible in the “table” tab, increase the size of the browser window.</p>
<h4 id="Adding-a-dynamic-UI"><a href="#Adding-a-dynamic-UI" class="headerlink" title="Adding a dynamic UI"></a>Adding a dynamic UI</h4><p>You can create dynamic user interfaces in two different ways: using conditionalPanel or renderUI. We show an example of each in this section.</p>
<p>We use conditionalPanel to show or hide a UI component based on a condition. In this sample, we draw a histogram or scatterplot of mpg based on user selection. For the scatterplot, we fix mpg on the y axis and allow the user to pick a variable for the x axis. Hence, we need to show the list of possible variables for the x axis only when the user chooses the scatterplot option. In ui.R, we check for the condition with input.plotType != ‘hist’ and then display the list of choices to the user:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sidebarPanel(</span><br><span class="line">  selectInput(<span class="string">"plotType"</span>, <span class="string">"Plot Type"</span>,</span><br><span class="line">    c(<span class="string">"Scatter plot"</span> = <span class="string">"scatter"</span>, Histogram = <span class="string">"hist"</span>)),</span><br><span class="line">conditionalPanel(condition=<span class="string">"input.plotType != 'hist'"</span>,</span><br><span class="line">  selectInput(<span class="string">"xaxis"</span>,<span class="string">"X Axis Variable"</span>,</span><br><span class="line">     choices = c(Weight=<span class="string">"wt"</span>, Cylinders=<span class="string">"cyl"</span>, <span class="string">"Horse Power"</span>=<span class="string">"hp"</span>))</span><br><span class="line"> )),</span><br><span class="line">mainPanel( plotOutput(<span class="string">"plot"</span>))</span><br></pre></td></tr></table></figure>
<p>To check how conditionalPanel works, execute runApp(“conditionalApp”) in your R environment and select the plot type. You will see “X Axis Variable” only when you choose scatter plot. In the case of conditionalPanel, the entire work is done in ui.R and is executed by the client.</p>
<p>In the preceding example, we had a fixed set of choices for the variables and hence we could build selectInput with these choices. What if this list is not known and is dependent on the user’s selection of a dataset? The application in the renderUIApp folder illustrates this. In this application, the server builds the list of variable names dynamically based on the dataset chosen.</p>
<p>In the UI component, we need a placeholder, uiOutput(“var”), to display the list that will be populated by the server every time a different dataset is chosen in the user interface.</p>
<p>In the server component, we use the renderUI function call to populate output$var using the variable names of the chosen dataset. In this sample, we also use a reactive expression as given here:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datasetInput &lt;- reactive(&#123;</span><br><span class="line">  <span class="keyword">switch</span>(input$dataset,</span><br><span class="line">    <span class="string">"rock"</span> = rock,</span><br><span class="line">    <span class="string">"mtcars"</span> = mtcars)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>A reactive expression reads input and returns an output. It regenerates the output only when the input it depends on changes. Every time it generates the output, it caches the output and uses it until the input changes. The reactive expression can be called from another reactive expression or from a <code>render*</code> function.</p>
<h4 id="Creating-single-file-web-application"><a href="#Creating-single-file-web-application" class="headerlink" title="Creating single file web application"></a>Creating single file web application</h4><p>In R 3.0.0 Version, a shiny application can include just a single app.R file in a separate folder along with any needed data files and dependent R source code files. Create a new SingleFileApp folder and save the downloaded app.R here. Take a look at the downloaded app.R file and start the application by entering the runApp(“SingleFileApp”) command.</p>
<p>In app.R, the shinyApp(ui = ui, server = server) line is executed first by R. This shinyApp function returns an object of class shiny.appobj to the console. When this object is printed, the shiny app is launched in a separate window.</p>
<p>It is possible to create a single-file shiny application without a specific application directory and with a filename other than app.R. There should be a call to the shinyApp function, which is what tells R that it is a shiny application. We can then run print(source(“appfilename”)) to launch the application. The caveat if you run with a different name is that, when you modify the file, the application is not automatically relaunched.</p>
<h2 id="Creating-PDF-presentations-of-your-analysis-with-R-Presentation"><a href="#Creating-PDF-presentations-of-your-analysis-with-R-Presentation" class="headerlink" title="Creating PDF presentations of your analysis with R Presentation"></a>Creating PDF presentations of your analysis with R Presentation</h2><p>Rpres, built into RStudio, enables you to create PDF slide presentations of your data analysis. In this recipe, we develop a small application that showcases the important Rpres features.</p>
<h3 id="Getting-ready-60"><a href="#Getting-ready-60" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the sample-image.png and Introduction.Rpres files in your R working directory.</p>
<h3 id="How-to-do-it…-61"><a href="#How-to-do-it…-61" class="headerlink" title="How to do it…"></a>How to do it…</h3><ol>
<li>Open RStudio.</li>
<li>Create a new R Presentation document using the following steps:</li>
</ol>
<ul>
<li>Navigate to File | New File and click on R Presentation.</li>
<li>Enter the filename as RPresentation and save it in your R working directory.</li>
<li>RStudio creates a file with the extension Rpres. This file includes a default title slide (the very first slide) and a few other sample slides. Creating this file also results in a preview being displayed in the upper right of the RStudio environment.</li>
<li>Fill in author and date and click on Preview.</li>
<li>By default, the preview appears in RStudio itself. However, to see all features properly, drop down the menu on the top right of the tab where the presentation appears and select View in browser.</li>
<li>Click on the arrow button at the bottom right to navigate through the slides.</li>
</ul>
<ol>
<li>Open the R Presentation document that you downloaded earlier:</li>
</ol>
<ul>
<li>Navigate to File | Open File.</li>
<li>Open the Introduction.Rpres file.</li>
</ul>
<ol>
<li><p>To embed an image use the following code:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Slide with image</span><br><span class="line">===============</span><br><span class="line">![Sample Image](sample-image.png)</span><br></pre></td></tr></table></figure>
</li>
<li><p>To create a two-column layout perform the following steps:</p>
</li>
</ol>
<ul>
<li>The two columns are separated by <em>*</em> on a separate line.</li>
<li><p>Add the following slide:</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Two Columns</span><br><span class="line">===============</span><br><span class="line">left:<span class="number">40</span>%</span><br><span class="line"></span><br><span class="line">**ColumnOne**</span><br><span class="line">-  this slide has two columns</span><br><span class="line">-   the first column has text</span><br><span class="line">-   the second column has an image</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line">**ColumnTwo**</span><br><span class="line"></span><br><span class="line">![Sample Image](sample-image.png)Two Columns</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>To add a transition to the slides:</p>
<p> Global transition setting:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Introduction</span><br><span class="line">========================================================</span><br><span class="line">author: Shanthi Viswanathan</span><br><span class="line">date: <span class="number">16</span> Dec <span class="number">2014</span></span><br><span class="line">transition:rotate</span><br><span class="line">transition-speed:slow</span><br></pre></td></tr></table></figure>
</li>
<li><p>To add incremental displays:</p>
<p> Add the following in the first slide:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Incremental Display</span><br><span class="line">========================================================</span><br><span class="line">transition: concave</span><br><span class="line">incremental: true</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-57"><a href="#How-it-works…-57" class="headerlink" title="How it works…"></a>How it works…</h3><p>In steps 1 and 2, a simple presentation is created.</p>
<p>In step 3, an R presentation file is opened. When a text is followed by a set of = characters (at least 3 on a line by itself) it is taken as the slide title.</p>
<p>In step 4, an image is added with the standard markdown syntax of the exclamation mark followed in square brackets by the alt text, followed by the image file’s name in parentheses. The image occupies the entire slide if it is the only content on that slide.</p>
<p>In step 5, a two-column slide is created. The two columns are separated by three * characters. This time, the image occupies the entire column into which it is added.</p>
<p>The double asterisks signify a column. By default, the two columns occupy 50% of the slide width. In a two-column layout, each column by default occupies 50% of the slide width. Use left or right to change this. We used left: 40%.</p>
<p>A transition effect can be applied to all slides within a presentation or specifically for each slide. The default transition is linear. To apply to all slides, add it to the title slide as in step 6.</p>
<p>By default, all elements on the slide appear when RPres shows the slide. We can change this by setting incremental = TRUE. With this setting, list items, code blocks, and paragraphs are displayed incrementally with a mouse-click. The first paragraph in a slide is immediately displayed and the increment rule is applied to the subsequent content. In step 7, we see this behavior in the display of bullet points.</p>
<h3 id="There’s-more…-34"><a href="#There’s-more…-34" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We now describe additional options to control the display.</p>
<h4 id="Using-hyperlinks"><a href="#Using-hyperlinks" class="headerlink" title="Using hyperlinks"></a>Using hyperlinks</h4><p>External or internal links can be added to an R presentation. External links use the same R Markdown syntax. For internal links, we first need to add an id to a slide and then create a link using it, as the following code shows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Two Columns</span><br><span class="line">========</span><br><span class="line">id: twocols</span><br><span class="line"></span><br><span class="line">First Slide</span><br><span class="line">========</span><br><span class="line">[Go to Slide](<span class="comment">#/twocols)e</span></span><br></pre></td></tr></table></figure>
<h4 id="Controlling-the-display"><a href="#Controlling-the-display" class="headerlink" title="Controlling the display"></a>Controlling the display</h4><p>The default size of an R presentation is 960 x 700 pixels. However, adding a specific width or height to a slide can change its default size:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Slide with plot</span><br><span class="line">========================================================</span><br><span class="line">title: false</span><br><span class="line">```&#123;r renderplot,echo=FALSE,out.width="1920px"&#125;</span><br><span class="line">plot(cars)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">If the entire plot is not displayed in the slide when viewed in a browser, you can include fig.width and fig.height as follows:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">Slide with plot</span><br><span class="line">========================================================</span><br><span class="line">title: false</span><br><span class="line">```&#123;r renderplot,echo=FALSE, fig.width=8,fig.height=4,</span><br><span class="line">out.width=&quot;1920px&quot;&#125;</span><br><span class="line">plot(cars)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### Enhancing the look of the presentation</span><br><span class="line"></span><br><span class="line">You can set the font in the title slide, after which the font is applied to all the slides. This global font can also be overridden in specific slides:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">Introduction</span><br><span class="line">========================================================</span><br><span class="line">author: Shanthi Viswanathan</span><br><span class="line">date: 16 Dec 2014</span><br><span class="line">font-family: Arial</span><br></pre></td></tr></table></figure>
<p>You can include a .css file in the title slide and use the styles defined in the .css file in the slides as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Introduction</span><br><span class="line">========================================================</span><br><span class="line">author: Shanthi Viswanathan</span><br><span class="line">date: <span class="number">16</span> Dec <span class="number">2014</span></span><br><span class="line">css: custom.css</span><br><span class="line"></span><br><span class="line">Two Columns</span><br><span class="line">===============</span><br><span class="line">class: highlight</span><br><span class="line">left:<span class="number">70</span>%</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Chapter-9-Work-Smarter-Not-Harder-–-Efficient-and-Elegant-R-Code"><a href="#Chapter-9-Work-Smarter-Not-Harder-–-Efficient-and-Elegant-R-Code" class="headerlink" title="Chapter 9. Work Smarter, Not Harder – Efficient and Elegant R Code"></a>Chapter 9. Work Smarter, Not Harder – Efficient and Elegant R Code</h1><p>In this chapter, we will cover recipes for doing the following without explicit iteration:</p>
<ul>
<li>Exploiting vectorized operations</li>
<li>Processing entire rows or columns using the apply function</li>
<li>Applying a function to all elements of a collection with lapply and sapply</li>
<li>Applying functions to subsets of a vector</li>
<li>Using the split-apply-combine strategy with plyr</li>
<li>Slicing, dicing, and combining data with data tables</li>
</ul>
<h2 id="Introduction-8"><a href="#Introduction-8" class="headerlink" title="Introduction"></a>Introduction</h2><p>The R programming language, being procedural, provides looping control structures. Most people will therefore tend to automatically use these control structures in their own code and end up with performance issues because R handles loops very inefficiently. Serious number crunching and handling large datasets in R require us to exploit powerful, alternative ways to write succinct, elegant, and efficient code as follows:</p>
<ul>
<li>Vectorized operations process collections as a whole instead of operating element by element</li>
<li>The apply family of functions processes rows, columns, or lists as a whole without the need for explicit iteration</li>
<li>The plyr package provides a wide range of **ply functions with additional functionality, including parallel processing</li>
<li>The data.table package provides helpful functions to manipulate data easily and efficiently</li>
</ul>
<p>This chapter provides recipes using all of these features.</p>
<h2 id="Exploiting-vectorized-operations"><a href="#Exploiting-vectorized-operations" class="headerlink" title="Exploiting vectorized operations"></a>Exploiting vectorized operations</h2><p>Some R functions can operate on vectors as a whole. The function can either be a built-in R function or a custom function. In your own code, before you resort to a loop to process all elements of a vector, see whether you can exploit an existing vectorized function.</p>
<h3 id="Getting-ready-61"><a href="#Getting-ready-61" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that the auto-mpg.csv file is in your R working directory.</p>
<h3 id="How-to-do-it…-62"><a href="#How-to-do-it…-62" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To exploit vectorized operations follow these steps:</p>
<ol>
<li><p>Operate on all elements of vector(s) without explicit iteration (vectorized operations):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; first.name &lt;- c(<span class="string">"John"</span>, <span class="string">"Jane"</span>, <span class="string">"Tom"</span>, <span class="string">"Zach"</span>)</span><br><span class="line">&gt; last.name &lt;- c(<span class="string">"Doe"</span>, <span class="string">"Smith"</span>, <span class="string">"Glock"</span>, <span class="string">"Green"</span>)</span><br><span class="line">&gt; <span class="comment"># The paste function below operates on vectors</span></span><br><span class="line">&gt; paste(first.name,last.name)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"John Doe"</span>   <span class="string">"Jane Smith"</span> <span class="string">"Tom Glock"</span>  <span class="string">"Zach Green"</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># This works even with different sized vectors</span></span><br><span class="line">&gt; new.last.name &lt;- c(<span class="string">"Dalton"</span>)</span><br><span class="line">&gt; paste(first.name,new.last.name)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"John Dalton"</span>   <span class="string">"Jane Dalton"</span>  <span class="string">"Tom Dalton"</span>  <span class="string">"Zach Dalton"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Use vectorized operations within your own functions:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; username &lt;- <span class="keyword">function</span>(first, last) &#123;</span><br><span class="line">   tolower(paste0(last, substr(first,<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&gt; username(first.name,last.name)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"doej"</span>   <span class="string">"smithj"</span>  <span class="string">"glockt"</span> <span class="string">"greenz"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Apply an arithmetic operation implicitly on all elements of a vector:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>)</span><br><span class="line">&gt; auto$kmpg &lt;- auto$mpg*<span class="number">1.6</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-58"><a href="#How-it-works…-58" class="headerlink" title="How it works…"></a>How it works…</h3><p>By operating on entire vectors at a time, vectorized operations eliminate the need for explicit loops. R processes loops inefficiently because it interprets the statements in a loop over and over again. Thus, loops with much iteration tend to perform poorly. Vectorized operations help us to get around this bottleneck, while at the same time making our code compact and more elegant.</p>
<p>Several built-in functions are vectorized and step 1 illustrates this with the paste function that concatenates strings.</p>
<p>The later part of step 1 shows that, if the vectors have unequal length, then the shorter vector recycles the list of vectors as needed. The new.last.name vector of size 1 repeats itself to match the size of the first.name vector. Hence, the last name Dalton is pasted to each element of first.name.</p>
<p>Vector operations work for built-in functions, custom functions, and arithmetic operations. A custom function to generate usernames using the two vectors first.name and last.name is seen in step 3.</p>
<p>Vector operations work even when we combine vectors and scalars in arithmetic operations. A new variable is created in step 4 in the auto data frame to represent fuel efficiency in kilometers per gallon (kmpg) using a simple formula combining a vector and a scalar.</p>
<h3 id="There’s-more…-35"><a href="#There’s-more…-35" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>R functions such as sum, min, max, range, and prod combine their arguments into vectors:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">15</span></span><br></pre></td></tr></table></figure>
<p>On the contrary, beware of functions such as mean and median that do not combine arguments into vectors and yield misleading results:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; mean(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; mean(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="Processing-entire-rows-or-columns-using-the-apply-function"><a href="#Processing-entire-rows-or-columns-using-the-apply-function" class="headerlink" title="Processing entire rows or columns using the apply function"></a>Processing entire rows or columns using the apply function</h2><p>The apply function can apply a user-specified function to all rows or columns of a matrix and return an appropriate collection with the results.</p>
<h3 id="Getting-ready-62"><a href="#Getting-ready-62" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>This recipe uses no external objects or resources.</p>
<h3 id="How-to-do-it…-63"><a href="#How-to-do-it…-63" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To process entire rows or columns using the apply function, follow these steps:</p>
<ol>
<li><p>Calculate row minimums for a matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; m &lt;- matrix(seq(<span class="number">1</span>,<span class="number">16</span>), <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">&gt; m</span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span>   <span class="number">15</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span>   <span class="number">16</span></span><br><span class="line"></span><br><span class="line">&gt; apply(m, <span class="number">1</span>, min)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate column maximums for a matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(m, <span class="number">2</span>, max)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]  <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a new matrix by squaring every element of a given matrix:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(m,c(<span class="number">1</span>,<span class="number">2</span>),<span class="keyword">function</span>(x) x^<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>   <span class="number">25</span>   <span class="number">81</span>  <span class="number">169</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">4</span>   <span class="number">36</span>  <span class="number">100</span>  <span class="number">196</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">9</span>   <span class="number">49</span>  <span class="number">121</span>  <span class="number">225</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="number">16</span>   <span class="number">64</span>  <span class="number">144</span>  <span class="number">256</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Apply a function to every row and pass an argument to the function:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(m, <span class="number">1</span>, quantile, probs=c(<span class="number">.4</span>,<span class="number">.8</span>))</span><br><span class="line">    [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line"><span class="number">40</span>%  <span class="number">5.8</span>  <span class="number">6.8</span>  <span class="number">7.8</span>  <span class="number">8.8</span></span><br><span class="line"><span class="number">80</span>% <span class="number">10.6</span> <span class="number">11.6</span> <span class="number">12.6</span> <span class="number">13.6</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-59"><a href="#How-it-works…-59" class="headerlink" title="How it works…"></a>How it works…</h3><p>Step 1 creates a matrix and generates the row minimums for it.</p>
<ul>
<li>The first argument for apply is a matrix or array.</li>
<li>The second argument (called the margin) specifies how we want to split the matrix or array into pieces. For a two-dimensional structure, we can operate on rows as 1, columns as 2, or elements as c(1,2). For matrices of more than two dimensions, margin can be more than two and specifies the dimension(s) of interest (see the There’s more… section).</li>
<li>The third argument is a function—built-in or custom. In fact, we can even specify an unnamed function in-line as step 3 shows.</li>
</ul>
<p>The apply function invokes the specified function with each row, column, or element of the matrix depending on the second argument.</p>
<p>The return value from apply depends on margin and the type of return value from the user-specified function.</p>
<p>If we supply more than three arguments to apply, it passes these along to the specified function. The probs argument in step 4 serves as an example. In step 4, apply passes along the probs vector to the quantile function.</p>
<p><strong>Tip</strong></p>
<p>To calculate row/column means or sums for a matrix, use the highly optimized colMeans, rowMeans, colSums, and rowSums functions instead of apply.</p>
<h3 id="There’s-more…-36"><a href="#There’s-more…-36" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The apply function can use an array of any dimension as input. Also, you can use apply on a data frame after converting it into a matrix using as.matrix.</p>
<h4 id="Using-apply-on-a-three-dimensional-array"><a href="#Using-apply-on-a-three-dimensional-array" class="headerlink" title="Using apply on a three-dimensional array"></a>Using apply on a three-dimensional array</h4><ol>
<li><p>Create a three-dimensional array:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; array.3d &lt;- array( seq(<span class="number">100</span>,<span class="number">69</span>), dim = c(<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>))</span><br><span class="line">&gt; array.3d</span><br><span class="line"></span><br><span class="line">, , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">100</span>   <span class="number">96</span>   <span class="number">92</span>   <span class="number">88</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">99</span>   <span class="number">95</span>   <span class="number">91</span>   <span class="number">87</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="number">98</span>   <span class="number">94</span>   <span class="number">90</span>   <span class="number">86</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="number">97</span>   <span class="number">93</span>   <span class="number">89</span>   <span class="number">85</span></span><br><span class="line"></span><br><span class="line">, , <span class="number">2</span></span><br><span class="line"></span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]   <span class="number">84</span>   <span class="number">80</span>   <span class="number">76</span>   <span class="number">72</span></span><br><span class="line">[<span class="number">2</span>,]   <span class="number">83</span>   <span class="number">79</span>   <span class="number">75</span>   <span class="number">71</span></span><br><span class="line">[<span class="number">3</span>,]   <span class="number">82</span>   <span class="number">78</span>   <span class="number">74</span>   <span class="number">70</span></span><br><span class="line">[<span class="number">4</span>,]   <span class="number">81</span>   <span class="number">77</span>   <span class="number">73</span>   <span class="number">69</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate the sum across the first and second dimensions. We get a one-dimensional array with two elements:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(array.3d, <span class="number">3</span>, sum)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1480</span> <span class="number">1224</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="comment"># verify</span></span><br><span class="line">&gt; sum(<span class="number">85</span>:<span class="number">100</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1480</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate the sum across the third dimension. We get a two-dimensional array:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; apply(array.3d,c(<span class="number">1</span>,<span class="number">2</span>),sum)</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,]  <span class="number">184</span>  <span class="number">176</span>  <span class="number">168</span>  <span class="number">160</span></span><br><span class="line">[<span class="number">2</span>,]  <span class="number">182</span>  <span class="number">174</span>  <span class="number">166</span>  <span class="number">158</span></span><br><span class="line">[<span class="number">3</span>,]  <span class="number">180</span>  <span class="number">172</span>  <span class="number">164</span>  <span class="number">156</span></span><br><span class="line">[<span class="number">4</span>,]  <span class="number">178</span>  <span class="number">170</span>  <span class="number">162</span>  <span class="number">154</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Applying-a-function-to-all-elements-of-a-collection-with-lapply-and-sapply"><a href="#Applying-a-function-to-all-elements-of-a-collection-with-lapply-and-sapply" class="headerlink" title="Applying a function to all elements of a collection with lapply and sapply"></a>Applying a function to all elements of a collection with lapply and sapply</h2><p>The lapply function works on objects of type vector, list, or data frame. It applies a user-specified function to each element of the passed-in object and returns a list of the results.</p>
<h3 id="Getting-ready-63"><a href="#Getting-ready-63" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the data:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(&quot;auto-mpg.csv&quot;, stringsAsFactors=FALSE)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-64"><a href="#How-to-do-it…-64" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To apply a function to all elements of a collection with lapply and sapply, follow these instructions:</p>
<ol>
<li><p>Operate on a simple vector:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; lapply(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), sqrt)</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.414214</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">3</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.732051</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Use lapply and sapply to calculate the means of a list of collections:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; x &lt;- list(a = <span class="number">1</span>:<span class="number">10</span>, b = c(<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>,<span class="number">1000</span>), c=seq(<span class="number">5</span>,<span class="number">50</span>,by=<span class="number">5</span>))</span><br><span class="line">&gt; lapply(x, mean)</span><br><span class="line"></span><br><span class="line">$a</span><br><span class="line">[<span class="number">1</span>] <span class="number">5.5</span></span><br><span class="line">$b</span><br><span class="line">[<span class="number">1</span>] <span class="number">277.75</span></span><br><span class="line">$c</span><br><span class="line">[<span class="number">1</span>] <span class="number">27.5</span></span><br><span class="line"></span><br><span class="line">&gt; class(lapply(x,mean))</span><br><span class="line">[<span class="number">1</span>] <span class="string">"list"</span></span><br><span class="line"></span><br><span class="line">&gt; sapply(x, mean)</span><br><span class="line"></span><br><span class="line">     a      b      c</span><br><span class="line">  <span class="number">5.50</span> <span class="number">277.75</span>  <span class="number">27.50</span></span><br><span class="line"></span><br><span class="line">&gt; class(sapply(x,mean))</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"numeric"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate the minimum value for each variable in the auto data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(auto[,<span class="number">2</span>:<span class="number">8</span>], min)</span><br><span class="line">         mpg    cylinders displacement   horsepower</span><br><span class="line">           <span class="number">9</span>            <span class="number">3</span>           <span class="number">68</span>           <span class="number">46</span></span><br><span class="line">      weight acceleration   model_year</span><br><span class="line">        <span class="number">1613</span>            <span class="number">8</span>           <span class="number">70</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-60"><a href="#How-it-works…-60" class="headerlink" title="How it works…"></a>How it works…</h3><p>The lapply function accepts three arguments—the first argument is the object, the second is the user-specified function, and the optional third argument specifies the additional arguments to the user-specified function. The lapply function always returns a list irrespective of the type of the first argument.</p>
<p>In step 1, the lapply function is used to apply sqrt to each element of a vector. The lapply function always returns a list.</p>
<p>In step 2, a list with three elements is involved, each of which is a vector. It calculates the mean of these vectors. The lapply function returns a list, whereas sapply returns a vector in this case.</p>
<p>In step 3, sapply is used to apply a function to columns of a data frame. For obvious reasons, we pass only the numeric columns.</p>
<h3 id="There’s-more…-37"><a href="#There’s-more…-37" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The sapply function returns a vector if every element of the result is of length 1. If every element of the result list is a vector of the same length, then sapply returns a matrix. However, if we specify simplify=F, then sapply always returns a list. The default is simplify=T. See the following:</p>
<h4 id="Dynamic-output"><a href="#Dynamic-output" class="headerlink" title="Dynamic output"></a>Dynamic output</h4><p>In the next two examples, sapply returns a matrix. If the function that it executes has row and column names defined, then sapply uses these for the matrix:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(auto[,<span class="number">2</span>:<span class="number">6</span>], summary)</span><br><span class="line"></span><br><span class="line">              mpg cylinders displacement horsepower weight</span><br><span class="line">    Min.     <span class="number">9.00</span>     <span class="number">3.000</span>         <span class="number">68.0</span>       <span class="number">46.0</span>   <span class="number">1613</span></span><br><span class="line">    1st Qu. <span class="number">17.50</span>     <span class="number">4.000</span>        <span class="number">104.2</span>       <span class="number">76.0</span>   <span class="number">2224</span></span><br><span class="line">    Median  <span class="number">23.00</span>     <span class="number">4.000</span>        <span class="number">148.5</span>       <span class="number">92.0</span>   <span class="number">2804</span></span><br><span class="line">    Mean    <span class="number">23.51</span>     <span class="number">5.455</span>        <span class="number">193.4</span>      <span class="number">104.1</span>   <span class="number">2970</span></span><br><span class="line">    3rd Qu. <span class="number">29.00</span>     <span class="number">8.000</span>        <span class="number">262.0</span>      <span class="number">125.0</span>   <span class="number">3608</span></span><br><span class="line">    Max.    <span class="number">46.60</span>     <span class="number">8.000</span>        <span class="number">455.0</span>      <span class="number">230.0</span>   <span class="number">5140</span></span><br><span class="line"></span><br><span class="line">    &gt; sapply(auto[,<span class="number">2</span>:<span class="number">6</span>], range)</span><br><span class="line"></span><br><span class="line">          mpg cylinders displacement horsepower weight</span><br><span class="line">    [<span class="number">1</span>,]  <span class="number">9.0</span>         <span class="number">3</span>           <span class="number">68</span>         <span class="number">46</span>   <span class="number">1613</span></span><br><span class="line">    [<span class="number">2</span>,] <span class="number">46.6</span>         <span class="number">8</span>          <span class="number">455</span>        <span class="number">230</span>   <span class="number">5140</span></span><br></pre></td></tr></table></figure>
<h4 id="One-caution"><a href="#One-caution" class="headerlink" title="One caution"></a>One caution</h4><p>As we mentioned earlier, the output type of sapply depends on the input object. However, because of how R operates with data frames, it is possible to get an “unexpected” output:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(auto[,<span class="number">2</span>:<span class="number">6</span>], min)</span><br><span class="line"></span><br><span class="line">         mpg    cylinders displacement   horsepower       weight</span><br><span class="line">           <span class="number">9</span>            <span class="number">3</span>           <span class="number">68</span>           <span class="number">46</span>         <span class="number">1613</span></span><br></pre></td></tr></table></figure>
<p>In the preceding example, auto[,2:6] returns a data frame and hence the input to sapply is a data frame object. Each variable (or column) of the data frame is passed as an input to the min function, and we get the output as a vector with column names taken from the input object. Try this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(auto[,<span class="number">2</span>], min)</span><br><span class="line"></span><br><span class="line">  [<span class="number">1</span>] <span class="number">28.0</span> <span class="number">19.0</span> <span class="number">36.0</span> <span class="number">28.0</span> <span class="number">21.0</span> <span class="number">23.0</span> <span class="number">15.5</span> <span class="number">32.9</span> <span class="number">16.0</span> <span class="number">13.0</span> <span class="number">12.0</span> <span class="number">30.7</span></span><br><span class="line"> [<span class="number">13</span>] <span class="number">13.0</span> <span class="number">27.9</span> <span class="number">13.0</span> <span class="number">23.8</span> <span class="number">29.0</span> <span class="number">14.0</span> <span class="number">14.0</span> <span class="number">29.0</span> <span class="number">20.5</span> <span class="number">26.6</span> <span class="number">20.0</span> <span class="number">20.0</span></span><br><span class="line"> [<span class="number">25</span>] <span class="number">26.4</span> <span class="number">16.0</span> <span class="number">40.8</span> <span class="number">15.0</span> <span class="number">18.0</span> <span class="number">35.0</span> <span class="number">26.5</span> <span class="number">13.0</span> <span class="number">25.8</span> <span class="number">39.1</span> <span class="number">25.0</span> <span class="number">14.0</span></span><br><span class="line"> [<span class="number">37</span>] <span class="number">19.4</span> <span class="number">30.0</span> <span class="number">32.0</span> <span class="number">26.0</span> <span class="number">20.6</span> <span class="number">17.5</span> <span class="number">18.0</span> <span class="number">14.0</span> <span class="number">27.0</span> <span class="number">25.1</span> <span class="number">14.0</span> <span class="number">19.1</span></span><br><span class="line"> [<span class="number">49</span>] <span class="number">17.0</span> <span class="number">23.5</span> <span class="number">21.5</span> <span class="number">19.0</span> <span class="number">22.0</span> <span class="number">19.4</span> <span class="number">20.0</span> <span class="number">32.0</span> <span class="number">30.9</span> <span class="number">29.0</span> <span class="number">14.0</span> <span class="number">14.0</span></span><br><span class="line"> [<span class="number">61</span>] ……..</span><br></pre></td></tr></table></figure>
<p>This happened because R treats auto[,2:6] as a data frame, but auto[,2] as just a vector. Hence, in the former case sapply operated on each column separately and in the latter case it operated on each element of a vector.</p>
<p>We can fix the preceding code by coercing the auto[,2] vector to a data frame and then pass this data frame object as an input to the min function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(as.data.frame(auto[,<span class="number">2</span>]), min)</span><br><span class="line">auto[, <span class="number">2</span>]</span><br><span class="line">        <span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>In the following example, we add simplify=F to force the return value to a list:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; sapply(as.data.frame(auto[,<span class="number">2</span>]), min, simplify=<span class="literal">F</span>)</span><br><span class="line">$`auto[, 2]`</span><br><span class="line">[<span class="number">1</span>] <span class="number">9</span></span><br></pre></td></tr></table></figure>
<h2 id="Applying-functions-to-subsets-of-a-vector"><a href="#Applying-functions-to-subsets-of-a-vector" class="headerlink" title="Applying functions to subsets of a vector"></a>Applying functions to subsets of a vector</h2><p>The tapply function applies a function to each partition of the dataset. Hence, when we need to evaluate a function over subsets of a vector defined by a factor, tapply comes in handy.</p>
<h3 id="Getting-ready-64"><a href="#Getting-ready-64" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the data and create factors for the cylinders variable:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-65"><a href="#How-to-do-it…-65" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To apply functions to subsets of a vector, follow these steps:</p>
<ol>
<li><p>Calculate mean mpg for each cylinder type:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; tapply(auto$mpg,auto$cylinders,mean)</span><br><span class="line"></span><br><span class="line">    3cyl     4cyl     5cyl     6cyl     8cyl</span><br><span class="line"><span class="number">20.55000</span> <span class="number">29.28676</span> <span class="number">27.36667</span> <span class="number">19.98571</span> <span class="number">14.96311</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>We can even specify multiple factors as a list. The following example shows only one factor since the out file has only one, but it serves as a template that you can adapt:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; tapply(auto$mpg,list(cyl=auto$cylinders),mean)</span><br><span class="line"></span><br><span class="line">cyl</span><br><span class="line">    3cyl     4cyl     5cyl     6cyl     8cyl</span><br><span class="line"><span class="number">20.55000</span> <span class="number">29.28676</span> <span class="number">27.36667</span> <span class="number">19.98571</span> <span class="number">14.96311</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-61"><a href="#How-it-works…-61" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the mean function is applied to the auto$mpg vector grouped according to the auto$cylinders vector. The grouping factor should be of the same length as the input vector so that each element of the first vector can be associated with a group.</p>
<p>The tapply function creates groups of the first argument based on each element’s group affiliation as defined by the second argument and passes each group to the user-specified function.</p>
<p>Step 2 shows that we can actually group by several factors specified as a list. In this case, tapply applies the function to each unique combination of the specified factors.</p>
<h3 id="There’s-more…-38"><a href="#There’s-more…-38" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The by function is similar to tapply and applies the function to a group of rows in a dataset, but by passing in the entire data frame. The following examples clarify this.</p>
<h4 id="Applying-a-function-on-groups-from-a-data-frame"><a href="#Applying-a-function-on-groups-from-a-data-frame" class="headerlink" title="Applying a function on groups from a data frame"></a>Applying a function on groups from a data frame</h4><p>In the following example, we find the correlation between mpg and weight for each cylinder type:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; by(auto, auto$cylinders, <span class="keyword">function</span>(x) cor(x$mpg, x$weight))</span><br><span class="line">auto$cylinders: 3cyl</span><br><span class="line">[<span class="number">1</span>] <span class="number">0.6191685</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">auto$cylinders: 4cyl</span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.5430774</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">auto$cylinders: 5cyl</span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.04750808</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">auto$cylinders: 6cyl</span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.4634435</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">auto$cylinders: 8cyl</span><br><span class="line">[<span class="number">1</span>] -<span class="number">0.5569099</span></span><br></pre></td></tr></table></figure>
<h2 id="Using-the-split-apply-combine-strategy-with-plyr"><a href="#Using-the-split-apply-combine-strategy-with-plyr" class="headerlink" title="Using the split-apply-combine strategy with plyr"></a>Using the split-apply-combine strategy with plyr</h2><p>Many data analysis tasks involve first splitting the data into subsets, applying some operation on each subset, and then combining the results suitably. A common wrinkle in applying this happens to be the numerous possible combinations of input and output object types. The plyr package provides simple functions to apply this pattern while simplifying the specification of the object types through systematic naming of the functions.</p>
<p>A plyr function name has three parts:</p>
<ul>
<li>The first letter represents the input object type</li>
<li>The second letter represents the output object type</li>
<li>The third to fifth letters are always ply</li>
</ul>
<p>In the plyr function names, d represents a data frame, l represents a list, and a represents an array. For example, ddply has its input and output as data frames, and ldply takes a list input and produces a data frame as output. Sometimes, we apply functions only for their side effects (such as plots) and do not want the output objects at all. In such cases, we can use _ for the second part. Therefore, d_ply()takes a data frame as input and produces no output—only the side effects of the function application occur.</p>
<h3 id="Getting-ready-65"><a href="#Getting-ready-65" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv file in your R working directory. Read the data and create factors for auto$cylinders:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
<p>Install the plyr package in your R environment if you do not have it already. This can be done using the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"plyr"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(plyr)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-66"><a href="#How-to-do-it…-66" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use the split-apply-combine strategy for data analysis with plyr follow these steps:</p>
<ol>
<li><p>Calculate mean mpg for each cylinder type (two versions):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; ddply(auto, <span class="string">"cylinders"</span>, <span class="keyword">function</span>(df) mean(df$mpg))</span><br><span class="line">&gt; ddply(auto, ~ cylinders, <span class="keyword">function</span>(df) mean(df$mpg))</span><br><span class="line">cylinders       V1</span><br><span class="line"><span class="number">1</span>      3cyl <span class="number">20.55000</span></span><br><span class="line"><span class="number">2</span>      4cyl <span class="number">29.28676</span></span><br><span class="line"><span class="number">3</span>      5cyl <span class="number">27.36667</span></span><br><span class="line"><span class="number">4</span>      6cyl <span class="number">19.98571</span></span><br><span class="line"><span class="number">5</span>      8cyl <span class="number">14.96311</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate the mean, minimum, and maximum mpg for each cylinder type and model year:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt; ddply(auto, c(<span class="string">"cylinders"</span>,<span class="string">"model_year"</span>), <span class="keyword">function</span>(df) c(mean=mean(df$mpg), min=min(df$mpg), max=max(df$mpg)))</span><br><span class="line">&gt; ddply(auto, ~ cylinders + model_year, <span class="keyword">function</span>(df) c(mean=mean(df$mpg), min=min(df$mpg), max=max(df$mpg)))</span><br><span class="line"></span><br><span class="line">   cylinders model_year     mean  min  max</span><br><span class="line"><span class="number">1</span>       3cyl         <span class="number">72</span> <span class="number">19.00000</span> <span class="number">19.0</span> <span class="number">19.0</span></span><br><span class="line"><span class="number">2</span>       3cyl         <span class="number">73</span> <span class="number">18.00000</span> <span class="number">18.0</span> <span class="number">18.0</span></span><br><span class="line"><span class="number">3</span>       3cyl         <span class="number">77</span> <span class="number">21.50000</span> <span class="number">21.5</span> <span class="number">21.5</span></span><br><span class="line"><span class="number">4</span>       3cyl         <span class="number">80</span> <span class="number">23.70000</span> <span class="number">23.7</span> <span class="number">23.7</span></span><br><span class="line"><span class="number">5</span>       4cyl         <span class="number">70</span> <span class="number">25.28571</span> <span class="number">24.0</span> <span class="number">27.0</span></span><br><span class="line"><span class="number">6</span>       4cyl         <span class="number">71</span> <span class="number">27.46154</span> <span class="number">22.0</span> <span class="number">35.0</span></span><br><span class="line"><span class="number">7</span>       4cyl         <span class="number">72</span> <span class="number">23.42857</span> <span class="number">18.0</span> <span class="number">28.0</span></span><br><span class="line"><span class="number">8</span>       4cyl         <span class="number">73</span> <span class="number">22.72727</span> <span class="number">19.0</span> <span class="number">29.0</span></span><br><span class="line"><span class="number">9</span>       4cyl         <span class="number">74</span> <span class="number">27.80000</span> <span class="number">24.0</span> <span class="number">32.0</span></span><br><span class="line"><span class="number">10</span>      4cyl         <span class="number">75</span> <span class="number">25.25000</span> <span class="number">22.0</span> <span class="number">33.0</span></span><br><span class="line"><span class="number">11</span>      4cyl         <span class="number">76</span> <span class="number">26.76667</span> <span class="number">19.0</span> <span class="number">33.0</span></span><br><span class="line"><span class="number">12</span>      4cyl         <span class="number">77</span> <span class="number">29.10714</span> <span class="number">21.5</span> <span class="number">36.0</span></span><br><span class="line"><span class="number">13</span>      4cyl         <span class="number">78</span> <span class="number">29.57647</span> <span class="number">21.1</span> <span class="number">43.1</span></span><br><span class="line"><span class="number">14</span>      4cyl         <span class="number">79</span> <span class="number">31.52500</span> <span class="number">22.3</span> <span class="number">37.3</span></span><br><span class="line"><span class="number">15</span>      4cyl         <span class="number">80</span> <span class="number">34.61200</span> <span class="number">23.6</span> <span class="number">46.6</span></span><br><span class="line"><span class="number">16</span>      4cyl         <span class="number">81</span> <span class="number">32.81429</span> <span class="number">25.8</span> <span class="number">39.1</span></span><br><span class="line"><span class="number">17</span>      4cyl         <span class="number">82</span> <span class="number">32.07143</span> <span class="number">23.0</span> <span class="number">44.0</span></span><br><span class="line"><span class="number">18</span>      5cyl         <span class="number">78</span> <span class="number">20.30000</span> <span class="number">20.3</span> <span class="number">20.3</span></span><br><span class="line"><span class="number">19</span>      5cyl         <span class="number">79</span> <span class="number">25.40000</span> <span class="number">25.4</span> <span class="number">25.4</span></span><br><span class="line"><span class="number">20</span>      5cyl         <span class="number">80</span> <span class="number">36.40000</span> <span class="number">36.4</span> <span class="number">36.4</span></span><br><span class="line"><span class="number">21</span>      6cyl         <span class="number">70</span> <span class="number">20.50000</span> <span class="number">18.0</span> <span class="number">22.0</span></span><br><span class="line"><span class="number">22</span>      6cyl         <span class="number">71</span> <span class="number">18.00000</span> <span class="number">16.0</span> <span class="number">19.0</span></span><br><span class="line"><span class="number">23</span>      6cyl         <span class="number">73</span> <span class="number">19.00000</span> <span class="number">16.0</span> <span class="number">23.0</span></span><br><span class="line"><span class="number">24</span>      6cyl         <span class="number">74</span> <span class="number">17.85714</span> <span class="number">15.0</span> <span class="number">21.0</span></span><br><span class="line"><span class="number">25</span>      6cyl         <span class="number">75</span> <span class="number">17.58333</span> <span class="number">15.0</span> <span class="number">21.0</span></span><br><span class="line"><span class="number">26</span>      6cyl         <span class="number">76</span> <span class="number">20.00000</span> <span class="number">16.5</span> <span class="number">24.0</span></span><br><span class="line"><span class="number">27</span>      6cyl         <span class="number">77</span> <span class="number">19.50000</span> <span class="number">17.5</span> <span class="number">22.0</span></span><br><span class="line"><span class="number">28</span>      6cyl         <span class="number">78</span> <span class="number">19.06667</span> <span class="number">16.2</span> <span class="number">20.8</span></span><br><span class="line"><span class="number">29</span>      6cyl         <span class="number">79</span> <span class="number">22.95000</span> <span class="number">19.8</span> <span class="number">28.8</span></span><br><span class="line"><span class="number">30</span>      6cyl         <span class="number">80</span> <span class="number">25.90000</span> <span class="number">19.1</span> <span class="number">32.7</span></span><br><span class="line"><span class="number">31</span>      6cyl         <span class="number">81</span> <span class="number">23.42857</span> <span class="number">17.6</span> <span class="number">30.7</span></span><br><span class="line"><span class="number">32</span>      6cyl         <span class="number">82</span> <span class="number">28.33333</span> <span class="number">22.0</span> <span class="number">38.0</span></span><br><span class="line"><span class="number">33</span>      8cyl         <span class="number">70</span> <span class="number">14.11111</span>  <span class="number">9.0</span> <span class="number">18.0</span></span><br><span class="line"><span class="number">34</span>      8cyl         <span class="number">71</span> <span class="number">13.42857</span> <span class="number">12.0</span> <span class="number">14.0</span></span><br><span class="line"><span class="number">35</span>      8cyl         <span class="number">72</span> <span class="number">13.61538</span> <span class="number">11.0</span> <span class="number">17.0</span></span><br><span class="line"><span class="number">36</span>      8cyl         <span class="number">73</span> <span class="number">13.20000</span> <span class="number">11.0</span> <span class="number">16.0</span></span><br><span class="line"><span class="number">37</span>      8cyl         <span class="number">74</span> <span class="number">14.20000</span> <span class="number">13.0</span> <span class="number">16.0</span></span><br><span class="line"><span class="number">38</span>      8cyl         <span class="number">75</span> <span class="number">15.66667</span> <span class="number">13.0</span> <span class="number">20.0</span></span><br><span class="line"><span class="number">39</span>      8cyl         <span class="number">76</span> <span class="number">14.66667</span> <span class="number">13.0</span> <span class="number">17.5</span></span><br><span class="line"><span class="number">40</span>      8cyl         <span class="number">77</span> <span class="number">16.00000</span> <span class="number">15.0</span> <span class="number">17.5</span></span><br><span class="line"><span class="number">41</span>      8cyl         <span class="number">78</span> <span class="number">19.05000</span> <span class="number">17.5</span> <span class="number">20.2</span></span><br><span class="line"><span class="number">42</span>      8cyl         <span class="number">79</span> <span class="number">18.63000</span> <span class="number">15.5</span> <span class="number">23.9</span></span><br><span class="line"><span class="number">43</span>      8cyl         <span class="number">81</span> <span class="number">26.60000</span> <span class="number">26.6</span> <span class="number">26.6</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-62"><a href="#How-it-works…-62" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 ddply is used. This function takes a data frame as input and produces a data frame as output. The first argument is the auto data frame. The second argument cylinders describes the way to split the data. The third argument is the function to perform on the resulting components. We can add additional arguments if the function needs arguments. We can specify the splitting factor using the formula interface, ~ cylinders, as the second option of step 1 shows.</p>
<p>Step 2 shows how data splitting can occur across multiple variables as well. We use the c(“cylinders”,”model_year”) vector format to split the data using two variables. We also named the variables as mean, min, and max instead of the default V1, V2, and so on. The second option here also shows the use of the formula interface.</p>
<h3 id="There’s-more…-39"><a href="#There’s-more…-39" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>In this section, we discuss the transform and summarize functions as well as the identity function I.</p>
<h4 id="Adding-a-new-column-using-transform"><a href="#Adding-a-new-column-using-transform" class="headerlink" title="Adding a new column using transform"></a>Adding a new column using transform</h4><p>Suppose you want to add a new column to reflect each auto’s deviation from the mean mpg of the cylinder group to which it belongs:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- ddply(auto, .(cylinders), transform, mpg.deviation = round(mpg - mean(mpg),<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h4 id="Using-summarize-along-with-the-plyr-function"><a href="#Using-summarize-along-with-the-plyr-function" class="headerlink" title="Using summarize along with the plyr function"></a>Using summarize along with the plyr function</h4><p>The following command shows the output when summarize is used:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ddply(auto, .(cylinders), summarize, freq=length(cylinders), meanmpg=mean(mpg))</span><br><span class="line">cylinders freq  meanmpg</span><br><span class="line"><span class="number">1</span>      3cyl    <span class="number">4</span> <span class="number">20.55000</span></span><br><span class="line"><span class="number">2</span>      4cyl  <span class="number">204</span> <span class="number">29.28676</span></span><br><span class="line"><span class="number">3</span>      5cyl    <span class="number">3</span> <span class="number">27.36667</span></span><br><span class="line"><span class="number">4</span>      6cyl   <span class="number">84</span> <span class="number">19.98571</span></span><br><span class="line"><span class="number">5</span>      8cyl  <span class="number">103</span> <span class="number">14.96311</span></span><br></pre></td></tr></table></figure>
<p>We calculate the number of rows and the mean mpg of the data frame grouped by cylinders.</p>
<h4 id="Concatenating-the-list-of-data-frames-into-a-big-data-frame"><a href="#Concatenating-the-list-of-data-frames-into-a-big-data-frame" class="headerlink" title="Concatenating the list of data frames into a big data frame"></a>Concatenating the list of data frames into a big data frame</h4><p>Run the following commands:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; autos &lt;- list(auto, auto)</span><br><span class="line">&gt; big.df &lt;- ldply(autos, I)</span><br></pre></td></tr></table></figure>
<p>The ldply function takes a list input and spits out a data frame output. The identity function I returns the input as is. If the input is a list then there is no split by argument; each list element is passed as an argument to the function.</p>
<h2 id="Slicing-dicing-and-combining-data-with-data-tables"><a href="#Slicing-dicing-and-combining-data-with-data-tables" class="headerlink" title="Slicing, dicing, and combining data with data tables"></a>Slicing, dicing, and combining data with data tables</h2><p>R provides several packages to do data analysis and data manipulation. Over and above the apply family of functions, the most commonly used packages are plyr, reshape, dplyr, and data.table. In this recipe, we will cover data.table, which processes large amounts of data very efficiently without our having to write detailed procedural code.</p>
<h3 id="Getting-ready-66"><a href="#Getting-ready-66" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Download the files for this chapter and store the auto-mpg.csv, employees.csv, and departments.csv files in your R working directory. Read the data and create factors for cylinders in auto-mpg.csv:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; auto$cylinders &lt;- factor(auto$cylinders, levels = c(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>), labels = c(<span class="string">"3cyl"</span>, <span class="string">"4cyl"</span>, <span class="string">"5cyl"</span>, <span class="string">"6cyl"</span>, <span class="string">"8cyl"</span>))</span><br></pre></td></tr></table></figure>
<p>Install the data.table package in your R environment as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"data.table"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(data.table)</span><br><span class="line">&gt; autoDT &lt;- data.table(auto)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-67"><a href="#How-to-do-it…-67" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>In this recipe, we cover data.table which processes large amounts of data very efficiently without our having to write detailed procedural code. To do this follow these steps:</p>
<ol>
<li><p>Calculate the mean mpg for each cylinder type:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[, mean(mpg), by=cylinders]</span><br><span class="line"></span><br><span class="line">   cylinders       V1</span><br><span class="line"><span class="number">1</span>:      4cyl <span class="number">29.28676</span></span><br><span class="line"><span class="number">2</span>:      3cyl <span class="number">20.55000</span></span><br><span class="line"><span class="number">3</span>:      6cyl <span class="number">19.98571</span></span><br><span class="line"><span class="number">4</span>:      8cyl <span class="number">14.96311</span></span><br><span class="line"><span class="number">5</span>:      5cyl <span class="number">27.36667</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a column for the mean mpg for each cylinder type:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[, meanmpg := mean(mpg), by=cylinders]</span><br><span class="line"></span><br><span class="line">&gt; autoDT[<span class="number">1</span>:<span class="number">5</span>,c(<span class="number">1</span>:<span class="number">3</span>,<span class="number">9</span>:<span class="number">10</span>), with=<span class="literal">FALSE</span>]</span><br><span class="line"></span><br><span class="line">   No mpg cylinders            car_name  meanmpg</span><br><span class="line"><span class="number">1</span>:  <span class="number">1</span>  <span class="number">28</span>      4cyl chevrolet vega <span class="number">2300</span> <span class="number">29.28676</span></span><br><span class="line"><span class="number">2</span>:  <span class="number">2</span>  <span class="number">19</span>      3cyl     mazda rx2 coupe <span class="number">20.55000</span></span><br><span class="line"><span class="number">3</span>:  <span class="number">3</span>  <span class="number">36</span>      4cyl        honda accord <span class="number">29.28676</span></span><br><span class="line"><span class="number">4</span>:  <span class="number">4</span>  <span class="number">28</span>      4cyl     datsun <span class="number">510</span> (sw) <span class="number">29.28676</span></span><br><span class="line"><span class="number">5</span>:  <span class="number">5</span>  <span class="number">21</span>      6cyl         amc gremlin <span class="number">19.98571</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create an index on cylinders by defining a key:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; setkey(autoDT,cylinders)</span><br><span class="line"></span><br><span class="line">&gt; tables()</span><br><span class="line"></span><br><span class="line">     NAME   NROW NCOL MB</span><br><span class="line">[<span class="number">1</span>,] autoDT  <span class="number">398</span>   <span class="number">10</span>  <span class="number">1</span></span><br><span class="line">     COLS</span><br><span class="line">[<span class="number">1</span>,] No,mpg,cylinders,displacement,horsepower,weight,acceleration,model_year,car_name</span><br><span class="line">     KEY</span><br><span class="line">[<span class="number">1</span>,] cylinders</span><br><span class="line">Total: 1MB</span><br><span class="line"></span><br><span class="line">&gt; autoDT[<span class="string">"4cyl"</span>,c(<span class="number">1</span>:<span class="number">3</span>,<span class="number">9</span>:<span class="number">10</span>),with=<span class="literal">FALSE</span>]</span><br><span class="line"></span><br><span class="line">No  mpg cylinders              car_name  meanmpg</span><br><span class="line">  <span class="number">1</span>:   <span class="number">1</span> <span class="number">28.0</span>      4cyl   chevrolet vega <span class="number">2300</span> <span class="number">29.28676</span></span><br><span class="line">  <span class="number">2</span>:   <span class="number">3</span> <span class="number">36.0</span>      4cyl          honda accord <span class="number">29.28676</span></span><br><span class="line">  <span class="number">3</span>:   <span class="number">4</span> <span class="number">28.0</span>      4cyl       datsun <span class="number">510</span> (sw) <span class="number">29.28676</span></span><br><span class="line">  <span class="number">4</span>:   <span class="number">6</span> <span class="number">23.0</span>      4cyl            audi 100ls <span class="number">29.28676</span></span><br><span class="line">  <span class="number">5</span>:   <span class="number">8</span> <span class="number">32.9</span>      4cyl          datsun 200sx <span class="number">29.28676</span></span><br><span class="line"> ---</span><br><span class="line"><span class="number">200</span>: <span class="number">391</span> <span class="number">32.1</span>      4cyl    chevrolet chevette <span class="number">29.28676</span></span><br><span class="line"><span class="number">201</span>: <span class="number">392</span> <span class="number">23.9</span>      4cyl         datsun <span class="number">200</span>-sx <span class="number">29.28676</span></span><br><span class="line"><span class="number">202</span>: <span class="number">395</span> <span class="number">34.5</span>      4cyl  plymouth horizon tc3 <span class="number">29.28676</span></span><br><span class="line"><span class="number">203</span>: <span class="number">396</span> <span class="number">38.1</span>      4cyl toyota corolla tercel <span class="number">29.28676</span></span><br><span class="line"><span class="number">204</span>: <span class="number">397</span> <span class="number">30.5</span>      4cyl    chevrolet chevette <span class="number">29.28676</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Calculate mean, min and max mpg grouped by cylinder type:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[, list(meanmpg=mean(mpg), minmpg=min(mpg), maxmpg=max(mpg)), by=cylinders]</span><br><span class="line"></span><br><span class="line">   cylinders  meanmpg minmpg maxmpg</span><br><span class="line"><span class="number">1</span>:      3cyl <span class="number">20.55000</span>   <span class="number">18.0</span>   <span class="number">23.7</span></span><br><span class="line"><span class="number">2</span>:      4cyl <span class="number">29.28676</span>   <span class="number">18.0</span>   <span class="number">46.6</span></span><br><span class="line"><span class="number">3</span>:      5cyl <span class="number">27.36667</span>   <span class="number">20.3</span>   <span class="number">36.4</span></span><br><span class="line"><span class="number">4</span>:      6cyl <span class="number">19.98571</span>   <span class="number">15.0</span>   <span class="number">38.0</span></span><br><span class="line"><span class="number">5</span>:      8cyl <span class="number">14.96311</span>    <span class="number">9.0</span>   <span class="number">26.6</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-63"><a href="#How-it-works…-63" class="headerlink" title="How it works…"></a>How it works…</h3><p>Data tables in the data.table package outperform the <em>apply family of functions and the *</em>ply functions. The simple data.table syntax is DT[i,j,by], where the data table DT is subset using rows in i to calculate j grouped by by.</p>
<p>In step 1 mean(mpg) is calculated, grouped by cylinders for all rows of the data table; omitting i causes all rows of the data table to be included.</p>
<p>To create a new column for the calculated j, just add := as in step 2. Here, we added a new column meanmpg to the data table to store mean(mpg) for each cylinder type.</p>
<p>By default, with is set to TRUE and j is evaluated for subsets of the data frame. However, if we do not need any computation and just want to retrieve data, then we can specify with=FALSE. In this case, data tables behave just like data frames.</p>
<p>Unlike data frames, data tables do not have row names. Instead, we can define keys and use these keys for row indexing. Step 3 defines cylinders as the key, and then uses autoDT[“4cyl”,c(1:3,9:10),with=FALSE] to extract data for the key-column value 4cyl.</p>
<p>We can define multiple keys using setkeyv(DT, c(“col1”, “col2”)), where DT is the data table and col1 and col2 are the two columns in the data table. In step 3, if multiple keys are defined, then the syntax to extract the data is autoDT[.(“4cyl”),c(1:3,9:10),with=FALSE].</p>
<p>If, in DT[i, j, by], i is itself a data.table, then R joins the two data tables on keys. If keys are not defined, then an error is displayed. However, for by, keys are not required.</p>
<h3 id="There’s-more…-40"><a href="#There’s-more…-40" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>We see some advanced techniques using data.table.</p>
<h4 id="Adding-multiple-aggregated-columns"><a href="#Adding-multiple-aggregated-columns" class="headerlink" title="Adding multiple aggregated columns"></a>Adding multiple aggregated columns</h4><p>In step 2, we added one calculated column meanmpg. The := syntax computes the variable and merges it into the original data:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># calculate median and sd of mpg grouped by cylinders</span></span><br><span class="line">&gt; autoDT[,c(<span class="string">"medianmpg"</span>,<span class="string">"sdmpg"</span>) := list(median(mpg),sd(mpg)), by=cylinders]</span><br><span class="line">&gt; <span class="comment"># Display selected columns of autoDT table for the first 5 rows</span></span><br><span class="line">&gt; autoDT[<span class="number">1</span>:<span class="number">5</span>,c(<span class="number">3</span>,<span class="number">9</span>:<span class="number">12</span>), with=<span class="literal">FALSE</span>]</span><br><span class="line">   cylinders            car_name  meanmpg medianmpg    sdmpg</span><br><span class="line"><span class="number">1</span>:      3cyl     mazda rx2 coupe <span class="number">20.55000</span>     <span class="number">20.25</span> <span class="number">2.564501</span></span><br><span class="line"><span class="number">2</span>:      3cyl           maxda rx3 <span class="number">20.55000</span>     <span class="number">20.25</span> <span class="number">2.564501</span></span><br><span class="line"><span class="number">3</span>:      3cyl       mazda rx-<span class="number">7</span> gs <span class="number">20.55000</span>     <span class="number">20.25</span> <span class="number">2.564501</span></span><br><span class="line"><span class="number">4</span>:      3cyl          mazda rx-<span class="number">4</span> <span class="number">20.55000</span>     <span class="number">20.25</span> <span class="number">2.564501</span></span><br><span class="line"><span class="number">5</span>:      4cyl chevrolet vega <span class="number">2300</span> <span class="number">29.28676</span>     <span class="number">28.25</span> <span class="number">5.710156</span></span><br></pre></td></tr></table></figure>
<h4 id="Counting-groups"><a href="#Counting-groups" class="headerlink" title="Counting groups"></a>Counting groups</h4><p>We can easily count the number of rows in each group as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[,.N ,by=cylinders]</span><br><span class="line">   cylinders   N</span><br><span class="line"><span class="number">1</span>:      3cyl   <span class="number">4</span></span><br><span class="line"><span class="number">2</span>:      4cyl <span class="number">204</span></span><br><span class="line"><span class="number">3</span>:      5cyl   <span class="number">3</span></span><br><span class="line"><span class="number">4</span>:      6cyl  <span class="number">84</span></span><br><span class="line"><span class="number">5</span>:      8cyl <span class="number">103</span></span><br></pre></td></tr></table></figure>
<p>We can also count after subsetting as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[<span class="string">"4cyl"</span>,.N]</span><br><span class="line">[<span class="number">1</span>] <span class="number">204</span></span><br></pre></td></tr></table></figure>
<h4 id="Deleting-a-column"><a href="#Deleting-a-column" class="headerlink" title="Deleting a column"></a>Deleting a column</h4><p>We can easily delete a column by setting it to NULL as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; autoDT[,medianmpg:=<span class="literal">NULL</span>]</span><br></pre></td></tr></table></figure>
<h4 id="Joining-data-tables"><a href="#Joining-data-tables" class="headerlink" title="Joining data tables"></a>Joining data tables</h4><p>We can define one or more keys on data tables and use them for joins. Suppose that a data table DT has a key defined. Then if, in DT[i, j, by], i is also a data table, R outer joins the two data tables on the key of DT. It joins the first key field of DT with the first column of i, the second key field of DT with the second column of i, and so on. If no keys are defined in DT, then R returns an error:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; emp &lt;- read.csv(<span class="string">"employees.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; dept &lt;- read.csv(<span class="string">"departments-1.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; empDT &lt;- data.table(emp)</span><br><span class="line">&gt; deptDT &lt;- data.table(dept)</span><br><span class="line">&gt; setkey(empDT,<span class="string">"DeptId"</span>)</span><br></pre></td></tr></table></figure>
<p>At this point, we have two data tables empDT and deptDT and a key field in empDT. The department ID in deptDT also happens to be the first column. We can now join the two tables on department ID by the following code. Note that the column name in deptDT does not have to match the name of the key field in empDT—only the column position matters:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; combine &lt;- empDT[deptDT]</span><br><span class="line">&gt; combine[,.N]</span><br><span class="line">[<span class="number">1</span>] <span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>To prevent creating large result sets inadvertently, the data table’s join operation checks to see if the result set has become larger than the size of either table and stops with an error immediately. Unfortunately, this check results in an error in some perfectly valid situations.</p>
<p>For example, if there were two departments in the deptDT table that did not appear in the empDT table, then the outer join operation will yield 102 rows and not 100. Since the number of resultant rows is larger than the larger of the two tables, the preceding check results in an error message. The following code illustrates this:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; dept &lt;- read.csv(<span class="string">"departments-2.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; deptDT &lt;- data.table(dept)</span><br><span class="line">&gt; <span class="comment"># The following line gives an error</span></span><br><span class="line">&gt; combine &lt;- empDT[deptDT]</span><br><span class="line">Error <span class="keyword">in</span> vecseq(f__, len__, <span class="keyword">if</span> (allow.cartesian) <span class="literal">NULL</span> <span class="keyword">else</span> as.integer(max(nrow(x),  : Join results <span class="keyword">in</span> <span class="number">102</span> rows; more than <span class="number">100</span> = max(nrow(x),nrow(i)) … (error message truncated)</span><br></pre></td></tr></table></figure>
<p>If we know for sure that what we are doing is correct, we can force R to perform the join by using <code>allow.cartesian=TRUE</code>:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">combine &lt;- empDT[deptDT, allow.cartesian=<span class="literal">TRUE</span>]</span><br><span class="line">combine[,.N]</span><br><span class="line"><span class="number">102</span></span><br></pre></td></tr></table></figure>
<p>We get 102 rows because of the two departments that had no employees and the default outer join added two extra rows for these two departments. We can force an inner join by passing, nomatch=0 as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; mash &lt;- empDT[deptDT, nomatch=<span class="number">0</span>]</span><br><span class="line">&gt; mash[,.N]</span><br><span class="line">[<span class="number">1</span>] <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#### Using symbols</span></span><br><span class="line"></span><br><span class="line">We can use special symbols such as .SD, .EACHI, .N, .I, and .BY <span class="keyword">in</span> data.table to enhance the functionality. We already saw some examples on .N, which represents the number of rows or the last row.</span><br><span class="line"></span><br><span class="line">The .SD symbol holds all columns except the columns <span class="keyword">in</span> by and can be used only <span class="keyword">in</span> the j evaluation part of data.table. The .SDcols symbol is used along with .SD and has columns to be included or excluded <span class="keyword">in</span> the j part of data.table.</span><br><span class="line"></span><br><span class="line">The .EACHI symbol is used <span class="keyword">in</span> the by grouping to group each subset of the groups <span class="keyword">in</span> i. This needs a key to be defined. If there is no key, R throws an error.</span><br><span class="line"></span><br><span class="line">In the following example, we calculate the maximum salary <span class="keyword">in</span> each department. If we omit .SDcols=<span class="string">"Salary"</span> then R will <span class="keyword">try</span> to find the max <span class="keyword">for</span> all columns since, by default, .SD includes all columns. In this case, R will throw an error since there are columns with textual values <span class="keyword">in</span> the empDT data table:</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">&gt; empDT[deptDT, max(.SD), by=.EACHI, .SDcols="Salary"]</span><br><span class="line"></span><br><span class="line">   DeptId    V1</span><br><span class="line">1:      1 99211</span><br><span class="line">2:      2 98291</span><br><span class="line">3:      3 70655</span><br><span class="line">4:      4    NA</span><br><span class="line">5:      5 99397</span><br><span class="line">6:      6 92429</span><br><span class="line">7:      7    NA</span><br></pre></td></tr></table></figure>
<p>In the following example, we calculate the average salary in each department. We give the name AvgSalary to this calculated column. We can either use list or .() notation in the j evaluation part:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; empDT[,.(AvgSalary = lapply(.SD, mean)), by=<span class="string">"DeptId"</span>,.SDcols=<span class="string">"Salary"</span>]</span><br><span class="line"></span><br><span class="line">   DeptId AvgSalary</span><br><span class="line"><span class="number">1</span>:      <span class="number">1</span>  <span class="number">63208.02</span></span><br><span class="line"><span class="number">2</span>:      <span class="number">2</span>  <span class="number">59668.06</span></span><br><span class="line"><span class="number">3</span>:      <span class="number">3</span>  <span class="number">47603.64</span></span><br><span class="line"><span class="number">4</span>:      <span class="number">5</span>  <span class="number">59448.24</span></span><br><span class="line"><span class="number">5</span>:      <span class="number">6</span>  <span class="number">51957.44</span></span><br></pre></td></tr></table></figure>
<p>In the following example, we calculate the average salary in each department. We also include the department name DeptName by joining empDT with deptDT:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; empDT[deptDT,list(DeptName, AvgSalary = lapply(.SD, mean)), by=.EACHI,.SDcols=<span class="string">"Salary"</span>]</span><br><span class="line">   DeptId   DeptName AvgSalary</span><br><span class="line"><span class="number">1</span>:      <span class="number">1</span>    Finance  <span class="number">63208.02</span></span><br><span class="line"><span class="number">2</span>:      <span class="number">2</span>         HR  <span class="number">59668.06</span></span><br><span class="line"><span class="number">3</span>:      <span class="number">3</span>  Marketing  <span class="number">47603.64</span></span><br><span class="line"><span class="number">4</span>:      <span class="number">4</span>      Sales        <span class="literal">NA</span></span><br><span class="line"><span class="number">5</span>:      <span class="number">5</span>         IT  <span class="number">59448.24</span></span><br><span class="line"><span class="number">6</span>:      <span class="number">6</span>    Service  <span class="number">51957.44</span></span><br><span class="line"><span class="number">7</span>:      <span class="number">7</span> Facilities        <span class="literal">NA</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Chapter-10-Where-in-the-World-–-Geospatial-Analysis"><a href="#Chapter-10-Where-in-the-World-–-Geospatial-Analysis" class="headerlink" title="Chapter 10. Where in the World? – Geospatial Analysis"></a>Chapter 10. Where in the World? – Geospatial Analysis</h1><p>In this chapter, we will cover:</p>
<ul>
<li>Downloading and plotting a Google map of an area</li>
<li>Overlaying data on the downloaded Google map</li>
<li>Importing ESRI shape files into R</li>
<li>Using the sp package to plot geographic data</li>
<li>Getting maps from the maps package</li>
<li>Creating spatial data frames from regular data frames containing spatial and other data</li>
<li>Creating spatial data frames by combining regular data frames with spatial objects</li>
<li>Adding variables to an existing spatial data frame</li>
</ul>
<h2 id="Introduction-9"><a href="#Introduction-9" class="headerlink" title="Introduction"></a>Introduction</h2><p>Maps and other forms of geographical displays surround us. With the proliferation of location-aware mobile devices, people are also finding it increasingly easy to add spatial information to other data. We can also easily add a geographic dimension to other data based on the address and related information. As expected, R has packages to process and visualize geospatial data and therefore processing geospatial data has come within easy reach of most people. The sp, maptools, maps, rgdal, and RgoogleMaps packages have the necessary features. In this chapter, we cover recipes to perform the most common operations that most people will need: getting geospatial data into R and visualizing such data. People who need to perform more advanced operations should consult books dedicated to the topic.</p>
<h2 id="Downloading-and-plotting-a-Google-map-of-an-area"><a href="#Downloading-and-plotting-a-Google-map-of-an-area" class="headerlink" title="Downloading and plotting a Google map of an area"></a>Downloading and plotting a Google map of an area</h2><p>You can use the RgoogleMaps package to get and plot Google maps of specific areas based on latitude and longitude. This approach offers tremendous ease of use. However, we do not gain much control over the map elements and how we plot the maps. For fine control, you can use some of the later recipes in this chapter.</p>
<h3 id="Getting-ready-67"><a href="#Getting-ready-67" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the RgoogleMaps package using the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">"RgoogleMaps"</span>)</span><br></pre></td></tr></table></figure>
<h3 id="How-to-do-it…-68"><a href="#How-to-do-it…-68" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To download and use Google maps of an area, follow these steps:</p>
<ol>
<li><p>Load the RgoogleMaps package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RgoogleMaps)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Determine the latitude and longitude of the location for which you need a map. In this recipe, you will get the map for the neighborhood of Seton Hall University in New Jersey, USA. The location is: (lat, long) = (40.742634, -74.246215).</p>
</li>
<li><p>Get the static map from Google Maps and then plot it as follows:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; shu.map &lt;- GetMap(center = c(<span class="number">40.742634</span>, -<span class="number">74.246215</span>), zoom=<span class="number">17</span>)</span><br><span class="line">&gt; PlotOnStaticMap(shu.map)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_1_1.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-64"><a href="#How-it-works…-64" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 we load the RgoogleMaps package.</p>
<p>In step 2 the latitude and longitude of the location for which we want a map are determined.</p>
<p>Having determined the latitude and longitude of the location, step 3 uses the GetMap function to acquire and store the map in an R variable called shu.map. The zoom option controls the zoom level of the returned map. The zoom=1 option gives the whole world, and zoom=17 covers a square area approximately a quarter of a mile on each side.</p>
<p>In step 3 the PlotOnStaticMap function is used to plot the map.</p>
<h3 id="There’s-more…-41"><a href="#There’s-more…-41" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>In the main recipe, we acquired and stored the map in an R variable. However, we can store it as an image file as well. We also have several options for the kind of map we can download.</p>
<h4 id="Saving-the-downloaded-map-as-an-image-file"><a href="#Saving-the-downloaded-map-as-an-image-file" class="headerlink" title="Saving the downloaded map as an image file"></a>Saving the downloaded map as an image file</h4><p>Use the destfile option to save the downloaded map as an image file:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; shu.map = GetMap(center = c(<span class="number">40.742634</span>, -<span class="number">74.246215</span>), zoom=<span class="number">16</span>, destfile = <span class="string">"shu.jpeg"</span>, format = <span class="string">"jpeg"</span>)</span><br></pre></td></tr></table></figure>
<p>GetMap also supports other formats such as png and gif. See the help file for more details.</p>
<h4 id="Getting-a-satellite-image"><a href="#Getting-a-satellite-image" class="headerlink" title="Getting a satellite image"></a>Getting a satellite image</h4><p>By default, GetMap returns a road map. You can use the maptype argument to control what is returned as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; shu.map = GetMap(center = c(<span class="number">40.742634</span>, -<span class="number">74.246215</span>), zoom=<span class="number">16</span>, destfile = <span class="string">"shu.jpeg"</span>, format = <span class="string">"jpeg"</span>, maptype = <span class="string">"satellite"</span>)</span><br><span class="line">&gt; PlotOnStaticMap(shu.map)</span><br></pre></td></tr></table></figure>
<p><img src="img/10_1_2.jpeg" alt=""></p>
<p>GetMap supports other map types such as roadmap and terrain. See the help file for details.</p>
<h2 id="Overlaying-data-on-the-downloaded-Google-map"><a href="#Overlaying-data-on-the-downloaded-Google-map" class="headerlink" title="Overlaying data on the downloaded Google map"></a>Overlaying data on the downloaded Google map</h2><p>In addition to plotting static Google maps, RgoogleMaps also allows you to overlay your own data points on static maps. In this recipe, we will use a data file with wage and geospatial information to plot a Google map of the general area covered by the data points; we will then overlay the wage information. The RgoogleMaps package offers tremendous ease of use but does not allow you control over the map elements and how you plot the maps. For fine control, you can use some of the later recipes in this chapter.</p>
<h3 id="Getting-ready-68"><a href="#Getting-ready-68" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the RgoogleMaps package. If you have not already downloaded the nj-wages.csv file, do it now and ensure that it is in your R working directory. The file contains information downloaded from the New Jersey Department of Education mashed up with latitude and longitude information downloaded from <a href="http://federalgovernmentzipcodes.us" target="_blank" rel="external">http://federalgovernmentzipcodes.us</a>.</p>
<h3 id="How-to-do-it…-69"><a href="#How-to-do-it…-69" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To overlay data on the downloaded Google map, follow these steps:</p>
<ol>
<li><p>Load RgoogleMaps and read the data file:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RgoogleMaps)</span><br><span class="line">&gt; wages &lt;- read.csv(<span class="string">"nj-wages.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the wages into quantiles for ease of plotting:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; wages$wgclass &lt;- cut(wages$Avgwg, quantile(wages$Avgwg, probs=seq(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>)), labels=<span class="literal">FALSE</span>, include.lowest=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a color palette:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pal &lt;- palette(rainbow(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Attach the data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">attach</span>(wages)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get the Google map for the area covered by the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; MyMap &lt;- MapBackground(lat=Lat, lon=Long)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"http://maps.google.com/maps/api/staticmap?center=40.115,-74.715&amp;zoom=8&amp;size=640x640&amp;maptype=mobile&amp;format=png32&amp;sensor=true"</span></span><br><span class="line">center, zoom:  <span class="number">40.115</span> -<span class="number">74.715</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the map with the average wages overlaid with color and size proportional to the quintile:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; PlotOnStaticMap(MyMap, Lat, Long, pch=<span class="number">21</span>, cex = sqrt(wgclass),bg=pal[wgclass])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a legend:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; legend(<span class="string">"bottomright"</span>, legend=paste(<span class="string">"&lt;="</span>, round(tapply(Avgwg, wgclass, max))), pch=<span class="number">21</span>, pt.bg=pal, pt.cex=<span class="number">1.0</span>, bg=<span class="string">"gray"</span>, title=<span class="string">"Avg wgs"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_2_1.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-65"><a href="#How-it-works…-65" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the RgoogleMaps package is loaded and the data file is read. The file has geographic and other data for several school districts in New Jersey. We aim to show a Google map of the general area and to overlay the average wages for each school district on the map.</p>
<p>In step 2 the cut function is used on the Avgwg column to create a new column called wgclass. This column represents the quantile to which a school district belongs.</p>
<p>In step 3 a color palette is created with five colors—one for each quantile.</p>
<p>In step 4 the wages data frame is attached to ease variable references.</p>
<p>In step 5 the MapBackground function is used to get the static Google map for the general area. We pass all the latitudes and longitudes, and the MapBackground function uses these to determine the overall extent of the map.</p>
<p>In step 6 the PlotOnStaticMap function is used to plot the map from step 5. Apart from plotting the static map from step 5, this step also plots the individual points because the call passes the latitudes and longitudes as the second and third arguments to the call. The other arguments play the following roles:</p>
<ul>
<li>pch determines the character used to plot each point</li>
<li>cex determines the size of each point based on its quantile</li>
<li>bg determines the background color of each point based on its quantile</li>
</ul>
<p>In step 7 we add a legend by calling the legend function. The arguments work as follows:</p>
<ul>
<li>The first argument determines the position of the legend.</li>
<li>The legend function provides the vector of text for the legend. It creates the vector by finding the maximum Avgwg value for each wage class.</li>
<li>As before, pch determines the character used to plot each point.</li>
<li>The pt.bg argument determines the palette applied to the background color for the legend points.</li>
<li>The pt.cex argument determines the size of the legend points.</li>
<li>The bg argument determines the background color for the legend as a whole.</li>
<li>The title argument specifies the title for the legend.</li>
</ul>
<h2 id="Importing-ESRI-shape-files-into-R"><a href="#Importing-ESRI-shape-files-into-R" class="headerlink" title="Importing ESRI shape files into R"></a>Importing ESRI shape files into R</h2><p>Several organizations make ESRI shape files freely available, and you can adapt them for your purposes. Using RgoogleMaps is easy, and we have seen that it offers very little control over map elements and plotting. Importing shape files, on the other hand, gives us total control. We should prefer this approach when we need fine control over the rendering of individual elements rather than just plotting a map image as a whole. The rgdal package offers the functionality to download shape files into R in a format that the sp package can handle.</p>
<h3 id="Getting-ready-69"><a href="#Getting-ready-69" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the rgdal and sp packages. At the time of writing, installing rgdal on Mac OS X is tricky. Binary packages are unavailable and different versions of the OS require us to do different things. You will need to research this on the web and get it installed.</p>
<p>Copy the following files to your R working directory:</p>
<ul>
<li><code>ne_50m_admin_0_countries.shp</code></li>
<li><code>ne_50m_admin_0_countries.prj</code></li>
<li><code>ne_50m_admin_0_countries.shx</code></li>
<li><code>ne_50m_admin_0_countries.VERSION.txt</code></li>
<li><code>ne_50m_airports.shp</code></li>
<li><code>ne_50m_airports.prj</code></li>
<li><code>ne_50m_airports.shx</code>,</li>
<li><code>ne_50m_airports.VERSION.txt</code></li>
</ul>
<p>We obtained these files from <a href="http://www.naturalearthdata.com/" target="_blank" rel="external">http://www.naturalearthdata.com/</a>.</p>
<h3 id="How-to-do-it…-70"><a href="#How-to-do-it…-70" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To import ESRI shape files into R, follow these steps:</p>
<ol>
<li><p>Load the sp and rgdal packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(sp)</span><br><span class="line">&gt; <span class="keyword">library</span>(rgdal)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the ESRI file of countries:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; countries_sp &lt;- readOGR(<span class="string">"."</span>, <span class="string">"ne_50m_admin_0_countries"</span>)</span><br><span class="line"></span><br><span class="line">OGR data <span class="keyword">source</span> with driver: ESRI Shapefile</span><br><span class="line">Source: <span class="string">"."</span>, layer: <span class="string">"ne_50m_admin_0_countries"</span></span><br><span class="line">with <span class="number">241</span> features and <span class="number">63</span> fields</span><br><span class="line">Feature type: wkbPolygon with <span class="number">2</span> dimensions</span><br><span class="line"></span><br><span class="line">&gt; class(countries_sp)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"SpatialPolygonsDataFrame"</span></span><br><span class="line">attr(,<span class="string">"package"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"sp"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the ESRI file of airports:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; airports_sp &lt;- readOGR(<span class="string">"."</span>, <span class="string">"ne_50m_airports"</span>)</span><br><span class="line"></span><br><span class="line">OGR data <span class="keyword">source</span> with driver: ESRI Shapefile</span><br><span class="line">Source: <span class="string">"."</span>, layer: <span class="string">"ne_50m_airports"</span></span><br><span class="line">with <span class="number">281</span> features and <span class="number">10</span> fields</span><br><span class="line">Feature type: wkbPoint with <span class="number">2</span> dimensions</span><br><span class="line"></span><br><span class="line">&gt; class(airports_sp)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"SpatialPointsDataFrame"</span></span><br><span class="line">attr(,<span class="string">"package"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"sp"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-66"><a href="#How-it-works…-66" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the sp and rgdal packages are loaded.</p>
<p>In step 2 the readOGR function from the rgdal package is used to read the ne_50m_admin_0_countries.shp shape file layer. An ESRI shape file comes in layers with all files in a layer having the same filename and different filename extensions. Each file contains some information about the map in a layer. The first argument to the readOGR function specifies the dsn (data source name), or a directory containing the layer, and the second argument specifies the layer to be read.</p>
<p>The result of step 2 shows that readOGR returns an object of the SpatialPolygonsDataFrame class. The sp package defines several spatial classes including SpatialPolygonsDataFrame. This class stores spatial information for each country as a polygon, and additionally has nonspatial attributes for each country stored in a slot called data. Effectively, a SpatialPolygonsDataFrame object is a spatial object (a collection of polygons) embellished with nonspatial attributes.</p>
<p>Step 3 uses the readOGR function to read another layer called ne_50m_airports. Examining the class of this object reveals it to be a SpatialPointsDataFrame object. Like SpatialPolygonsDataFrame, a SpatialPointsDataFrame object is also a spatial object (a collection of points) embellished with nonspatial attributes.</p>
<h2 id="Using-the-sp-package-to-plot-geographic-data"><a href="#Using-the-sp-package-to-plot-geographic-data" class="headerlink" title="Using the sp package to plot geographic data"></a>Using the sp package to plot geographic data</h2><p>The sp package has the necessary features to store and plot geographic data. In this recipe, we will use the sp package to plot imported shape files.</p>
<h3 id="Getting-ready-70"><a href="#Getting-ready-70" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the packages rgdal and sp. If you have issues installing the rgdal package on Mac or Linux, refer to the earlier recipe for details.</p>
<p>Copy the following files to your R working directory:</p>
<ul>
<li><code>ne_50m_admin_0_countries.shp</code></li>
<li><code>ne_50m_admin_0_countries.prj</code></li>
<li><code>ne_50m_admin_0_countries.shx</code></li>
<li><code>ne_50m_admin_0_countries.VERSION.txt</code></li>
<li><code>ne_50m_airports.shp</code></li>
<li><code>ne_50m_airports.prj</code></li>
<li><code>ne_50m_airports.shx</code></li>
<li><code>ne_50m_airports.VERSION.txt</code></li>
</ul>
<p>We obtained these files from <a href="http://www.naturalearthdata.com/" target="_blank" rel="external">http://www.naturalearthdata.com/</a>.</p>
<h3 id="How-to-do-it…-71"><a href="#How-to-do-it…-71" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To plot geographic data using the sp package, follow these steps:</p>
<ol>
<li><p>Load the sp and rgdal packages:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(sp)</span><br><span class="line">&gt; <span class="keyword">library</span>(rgdal)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; countries_sp &lt;- readOGR(<span class="string">"."</span>, <span class="string">"ne_50m_admin_0_countries"</span>)</span><br><span class="line">&gt; airports_sp &lt;- readOGR(<span class="string">"."</span>, <span class="string">"ne_50m_airports"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the countries without color:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># without color</span></span><br><span class="line">&gt; plot(countries_sp)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_3_1.jpeg" alt=""></p>
</li>
</ol>
<ol>
<li><p>Plot the countries with color:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># with color</span></span><br><span class="line">&gt; plot(countries_sp, col = countries_sp@data$admin)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_3_2.jpeg" alt=""></p>
</li>
<li><p>Add the airports. Do not close the previous plot:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(airports_sp, add=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_3_3.jpeg" alt=""></p>
</li>
<li><p>Plot the economic level (factor):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; spplot(countries_sp, c(<span class="string">"economy"</span>))</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_3_4.jpeg" alt=""></p>
</li>
<li><p>Plot the population (numeric):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; spplot(countries_sp, c(<span class="string">"pop_est"</span>))</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_3_5.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-67"><a href="#How-it-works…-67" class="headerlink" title="How it works…"></a>How it works…</h3><p>If you have not already done so, you should read the recipe Importing ESRI shape files into R from this chapter.</p>
<p>In step 1 the sp and rgdal packages are loaded.</p>
<p>In step 2 readOGR is used to read the ESRI shape files of countries and airports.</p>
<p>Step 3 shows how to plot the countries without color using the plot function. The plot function plots several polygon objects in countries_sp.</p>
<p>Step 4, similar to step 3, plots countries but adds color to them.</p>
<p>Step 5 adds the airport information using the plot function, with the add=TRUE option. The airports_sp object contains several points, and the plot function plots each point with specified properties such as plot character and size.</p>
<p>In steps 6 and 7 the use of the spplot function is demonstrated, which exploits the lattice plotting features. These steps show that spplot can handle both factors and numeric values.</p>
<h2 id="Getting-maps-from-the-maps-package"><a href="#Getting-maps-from-the-maps-package" class="headerlink" title="Getting maps from the maps package"></a>Getting maps from the maps package</h2><p>The maps package has several pre-built maps that we can download and adapt. This recipe demonstrates the capabilities of these maps.</p>
<h3 id="Getting-ready-71"><a href="#Getting-ready-71" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the maps package.</p>
<h3 id="How-to-do-it…-72"><a href="#How-to-do-it…-72" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To get maps from the maps package, follow these steps:</p>
<ol>
<li><p>Load the maps package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(maps)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the world map:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># with country boundaries</span></span><br><span class="line">&gt; map(<span class="string">"world"</span>)</span><br><span class="line">&gt; <span class="comment"># without country boundaries</span></span><br><span class="line">&gt; map(<span class="string">"world"</span>, interior=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the world map with colors:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; map(<span class="string">"world"</span>, fill=<span class="literal">TRUE</span>, col=palette(rainbow(<span class="number">7</span>)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the map of a country:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># for most countries, we access the map as a region on the world map</span></span><br><span class="line">&gt; map(<span class="string">"world"</span>, <span class="string">"tanzania"</span>)</span><br><span class="line">&gt; <span class="comment"># some countries (Italy, France, USA) have dedicated maps that we can directly access by name</span></span><br><span class="line">&gt; map(<span class="string">"france"</span>)</span><br><span class="line">&gt; map(<span class="string">"italy"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot a map of the USA:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># with state boundaries</span></span><br><span class="line">&gt; map(<span class="string">"state"</span>)</span><br><span class="line">&gt; <span class="comment"># without state boundaries</span></span><br><span class="line">&gt; map(<span class="string">"state"</span>, interior = <span class="literal">FALSE</span>)</span><br><span class="line">&gt; <span class="comment"># with county boundaries</span></span><br><span class="line">&gt; map(<span class="string">"county"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot a map of a state in the USA:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># only state boundary</span></span><br><span class="line">&gt; map(<span class="string">"state"</span>, <span class="string">"new jersey"</span>)</span><br><span class="line">&gt; <span class="comment"># state with county boundaries</span></span><br><span class="line">&gt; map(<span class="string">"county"</span>, <span class="string">"new jersey"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-68"><a href="#How-it-works…-68" class="headerlink" title="How it works…"></a>How it works…</h3><p>The fact that the maps package has several databases has enabled us to access several capabilities of the maps.</p>
<h2 id="Creating-spatial-data-frames-from-regular-data-frames-containing-spatial-and-other-data"><a href="#Creating-spatial-data-frames-from-regular-data-frames-containing-spatial-and-other-data" class="headerlink" title="Creating spatial data frames from regular data frames containing spatial and other data"></a>Creating spatial data frames from regular data frames containing spatial and other data</h2><p>When you have a regular data frame that has spatial attributes in addition to other attributes, processing them becomes easier if you convert them to full-fledged spatial objects. This recipe shows how to accomplish this.</p>
<h3 id="Getting-ready-72"><a href="#Getting-ready-72" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the sp package. Download the nj-wages.csv file and ensure that it is in your R working directory.</p>
<h3 id="How-to-do-it…-73"><a href="#How-to-do-it…-73" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To process a a regular data frame with spatial attributes, follow these steps:</p>
<ol>
<li><p>Load the sp package:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(sp)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj &lt;- read.csv(<span class="string">"nj-wages.csv"</span>)</span><br><span class="line">&gt; class(nj)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"data.frame"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert nj into a spatial object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; coordinates(nj) &lt;- c(<span class="string">"Long"</span>, <span class="string">"Lat"</span>)</span><br><span class="line">&gt; class(nj)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"SpatialPointsDataFrame"</span></span><br><span class="line">attr(,<span class="string">"package"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"sp"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the points:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; plot(nj)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_6_1.jpeg" alt=""></p>
</li>
<li><p>Convert the points to lines and plot them:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.lines &lt;- SpatialLines(list(Lines(list(Line(coordinates(nj))), <span class="string">"linenj"</span>)))</span><br><span class="line">&gt; plot(nj.lines)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_6_2.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-69"><a href="#How-it-works…-69" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the sp package is loaded.</p>
<p>In step 2 the data file is read, showing that nj is now a regular data frame object.</p>
<p>In step 3 the Lat and Long variables are identified from the nj data frame as spatial coordinates through the coordinates function. We see that nj has now been transformed into a SpatialPointsDataFrame object—a full-fledged spatial object.</p>
<h2 id="Creating-spatial-data-frames-by-combining-regular-data-frames-with-spatial-objects"><a href="#Creating-spatial-data-frames-by-combining-regular-data-frames-with-spatial-objects" class="headerlink" title="Creating spatial data frames by combining regular data frames with spatial objects"></a>Creating spatial data frames by combining regular data frames with spatial objects</h2><p>Often we have data that has some geographical aspect to it (such as postal codes) but does not have sufficient geographic coordinate information for plotting. In order to display such information on a map representation, we will need to embellish the basic data with enough geographic coordinate information for plotting. The sp package has several SpatialXXXDataFrame classes to represent geographic information along with additional descriptive data. This recipe shows how we can create and plot such objects. In this recipe, we demonstrate how to get a map from the maps package and convert it into a SpatialPolygons object. We then add data from a normal data frame to create a SpatialPolygonsDataFrame object, which we then plot.</p>
<h3 id="Getting-ready-73"><a href="#Getting-ready-73" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the sp, maps, and maptools packages. Download the nj-county-data.csv file into your R working directory.</p>
<h3 id="How-to-do-it…-74"><a href="#How-to-do-it…-74" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>In this recipe we demonstrate how to get a map from the maps package, convert it into a SpatialPolygons object, and then add on data from a normal data frame to create a SpatialPolygonsDataFrame object, which we then plot. To do this, follow these steps:</p>
<ol>
<li><p>Load the packages needed:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(maps)</span><br><span class="line">&gt; <span class="keyword">library</span>(maptools) <span class="comment"># this also loads the sp package</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Get the county map of New Jersey:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.map &lt;- map(<span class="string">"county"</span>, <span class="string">"new jersey"</span>, fill=<span class="literal">TRUE</span>, plot=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; str(nj.map)</span><br><span class="line"></span><br><span class="line">List of <span class="number">4</span></span><br><span class="line"> $ x    : num [<span class="number">1</span>:<span class="number">774</span>] -<span class="number">75</span> -<span class="number">74.9</span> -<span class="number">74.9</span> -<span class="number">74.7</span> -<span class="number">74.7</span> <span class="keyword">...</span></span><br><span class="line"> $ y    : num [<span class="number">1</span>:<span class="number">774</span>] <span class="number">39.5</span> <span class="number">39.6</span> <span class="number">39.6</span> <span class="number">39.7</span> <span class="number">39.7</span> <span class="keyword">...</span></span><br><span class="line"> $ range: num [<span class="number">1</span>:<span class="number">4</span>] -<span class="number">75.6</span> -<span class="number">73.9</span> <span class="number">38.9</span> <span class="number">41.4</span></span><br><span class="line"> $ names: chr [<span class="number">1</span>:<span class="number">21</span>] <span class="string">"new jersey,atlantic"</span> <span class="string">"new jersey,bergen"</span> <span class="string">"new jersey,burlington"</span> <span class="string">"new jersey,camden"</span> <span class="keyword">...</span></span><br><span class="line"> - attr(*, <span class="string">"class"</span>)= chr <span class="string">"map"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Extract the county names:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; county_names &lt;- sapply(strsplit(nj.map$names, <span class="string">","</span>), <span class="keyword">function</span>(x) x[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
</li>
<li><p>Convert the map to SpatialPolygon:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.sp &lt;- map2SpatialPolygons(nj.map, IDs = county_names, proj4string = CRS(<span class="string">"+proj=longlat +ellps=WGS84"</span>))</span><br><span class="line">&gt; class(nj.sp)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"SpatialPolygons"</span></span><br><span class="line">attr(,<span class="string">"package"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"sp"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a regular data frame from the file:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.dat &lt;- read.csv(<span class="string">"nj-county-data.csv"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create row names to match those in the map:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; rownames(nj.dat) &lt;- nj.dat$name</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create SpatialPolygonsDataFrame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.spdf &lt;- SpatialPolygonsDataFrame(nj.sp, nj.dat)</span><br><span class="line">&gt; class(nj.spdf)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"SpatialPolygonsDataFrame"</span></span><br><span class="line">attr(,<span class="string">"package"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"sp"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the map:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># plain plot of the object</span></span><br><span class="line">&gt; plot(nj.spdf)</span><br><span class="line">&gt; <span class="comment"># Plot of population:</span></span><br><span class="line">&gt; spplot(nj.spdf, <span class="string">"population"</span>, main = <span class="string">"Population"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_7_1.jpeg" alt=""></p>
</li>
<li><p>Based on incomes, a comparison can be obtained between per capita income and median family income:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; spplot(nj.spdf, c(<span class="string">"per_capita_income"</span>,<span class="string">"median_family_income"</span>), main = <span class="string">"Incomes"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_7_2.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-70"><a href="#How-it-works…-70" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the maps, maptools, and sp packages are loaded.</p>
<p>In step 2 the Map function in the maps package is used to get the county map of New Jersey.</p>
<p>From the maps package, we can get maps as lines or as polygons. To color regions (such as countries on a world map or states or counties on country maps) based on their data values, we need to have the regions represented as polygons. The fill parameter controls whether or not we get a map as lines or as polygons. We used the fill = TRUE option to get the map as polygons.</p>
<p>We will first convert the map into a SpatialPolygons object and then add on nonspatial attribute values to make it a SpatialPolygonsDataFrame object.</p>
<p>Every polygon in a SpatialPolygons object must have a unique ID. From the output generated by step 2, we see that the individual regions (polygons, corresponding to the counties) in the map have names like new jersey,atlantic.</p>
<p>In step 3 just the county names from the region names in the map are extracted by applying the strsplit function to each of the region names. We use the extracted county names as identifiers for the polygons. To combine spatial data with normal data frames, identifiers of polygons are matched with the row names of regular data frames. This is why we need to assign identifiers for the polygons.</p>
<p>In step 4 the map2SpatialPolygons function from the maptools package is used to generate a SpatialPolygons object nj.sp from the map nj.map. This function uses the IDs argument supplied to name the polygons in the resultant SpatialPolygons object. If the length of the IDs argument does not match the number of polygons, then the function generates an error. At this point, we have a spatial object without any nonspatial attributes. Map files have geographic coordinate information in many different formats. The proj4string argument indicates the kind of coordinate information by creating a Coordinate Reference System (CRS) object. In the current example, we indicate that the coordinates are represented as longitudes and latitudes, and that the World Geodetic System 1984 (WGS84) standard is used. Depending on the coordinates in the map, other CRS objects may need to be created.</p>
<p>In step 5, data on the counties in New Jersey is read from a file and a normal data frame nj.dat is created. This data frame has no spatial attributes. We want to add the attributes from this data frame to the SpatialPolygons nj.sp to create a SpatialPolygonsDataFrame object.</p>
<p>In step 6 the county names are assigned as the row names for the data frame. We will shortly see why.</p>
<p>In step 7 the SpatialPolygonsDataFrame function is used to combine spatial and nonspatial information into a single SpatialPolygonsDataFrame object. The function uses the SpatialPolygons object nj.sp as well as the nj.dat data frame. It matches both objects by matching the row names in the data frame with the polygon IDs in the SpatialPolygon objects. This is why we assigned the county names as the row names in step 6 and also generated the county names in step 3. At this point, we have a SpatialPointsDataFrame object nj.spdf that contains both spatial and nonspatial information.</p>
<p>Step 8 shows that a regular plot of the SpatialPointsDataFrame object with the plot function displays only spatial information.</p>
<p>In step 9 the spplot function is used to plot the data and color each county based on its population. The last plot from step 9 clearly shows that spplot is based on the lattice package.</p>
<h2 id="Adding-variables-to-an-existing-spatial-data-frame"><a href="#Adding-variables-to-an-existing-spatial-data-frame" class="headerlink" title="Adding variables to an existing spatial data frame"></a>Adding variables to an existing spatial data frame</h2><p>This recipe shows how you can add variables to spatial data frame objects. One approach (see the recipe Creating spatial data frames by combining regular data frames with spatial objects, earlier in this chapter) will be to create all the necessary variables before creating the spatial data frame object. However, this might not always be feasible. This recipe shows how you can add nonspatial variables to an existing spatial data frame object.</p>
<h3 id="Getting-ready-74"><a href="#Getting-ready-74" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Install the sp, maps, and maptools packages. Download and place the nj-county-data.csv file in your R working directory.</p>
<h3 id="How-to-do-it…-75"><a href="#How-to-do-it…-75" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To add variables to an existing spatial data frame, follow these steps:</p>
<ol>
<li><p>Follow the following steps shown (from the recipe Creating spatial data frames by combining regular data frames with spatial objects, earlier in this chapter):</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(maps)</span><br><span class="line">&gt; <span class="keyword">library</span>(maptools)</span><br><span class="line">&gt; nj.map &lt;- map(<span class="string">"county"</span>, <span class="string">"new jersey"</span>, fill=<span class="literal">T</span>, plot=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; county_names &lt;- sapply(strsplit(nj.map$names, <span class="string">","</span>), <span class="keyword">function</span>(x) x[<span class="number">2</span>])</span><br><span class="line">&gt; nj.sp &lt;- map2SpatialPolygons(nj.map, IDs = county_names, proj4string = CRS(<span class="string">"+proj=longlat +ellps=WGS84"</span>))</span><br><span class="line">&gt; nj.dat &lt;- read.csv(<span class="string">"nj-county-data.csv"</span>)</span><br><span class="line">&gt; rownames(nj.dat) &lt;- nj.dat$name</span><br><span class="line">&gt; nj.spdf &lt;- SpatialPolygonsDataFrame(nj.sp, nj.dat)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Compute the population density for each county:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; pop_density &lt;- nj.spdf@data$population/nj.spdf@data$area_sq_mi</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add a new variable to nj.spdf:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; nj.spdf &lt;- spCbind(nj.spdf, pop_density)</span><br><span class="line">&gt; names(nj.spdf@data)</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>] <span class="string">"name"</span>                    <span class="string">"per_capita_income"</span></span><br><span class="line">[<span class="number">3</span>] <span class="string">"median_household_income"</span> <span class="string">"median_family_income"</span></span><br><span class="line">[<span class="number">5</span>] <span class="string">"population"</span>              <span class="string">"no_households"</span></span><br><span class="line">[<span class="number">7</span>] <span class="string">"area_sq_mi"</span>              <span class="string">"pop_density"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Plot the data:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; spplot(nj.spdf, <span class="string">"pop_density"</span>)</span><br></pre></td></tr></table></figure>
<p> <img src="img/10_8_1.jpeg" alt=""></p>
</li>
</ol>
<h3 id="How-it-works…-71"><a href="#How-it-works…-71" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1 the code from the recipe Creating spatial data frames by combining regular data frames with spatial objects is repeated to create the SpatialPointsDataFrame object of New Jersey with county level data.</p>
<p>In step 2 the underlying data frame is accessed through the nj.spdf@data variable and computes the population density based on the population and area_sq_mi variables.</p>
<p>In step 3 the maptools package method, spCbind, is used to add the new variable to the underlying data frame in the SpatialpointsDataFrame object nj.spdf.</p>
<p>In step 4 the new variable is then plotted.</p>
<hr>
<h1 id="Chapter-11-Playing-Nice-–-Connecting-to-Other-Systems"><a href="#Chapter-11-Playing-Nice-–-Connecting-to-Other-Systems" class="headerlink" title="Chapter 11. Playing Nice – Connecting to Other Systems"></a>Chapter 11. Playing Nice – Connecting to Other Systems</h1><p>In this chapter, we will cover the following recipes to connect to other systems:</p>
<ul>
<li>Using Java objects in R</li>
<li>Using JRI to call R functions from Java</li>
<li>Using Rserve to call R functions from Java</li>
<li>Executing R scripts from Java</li>
<li>Using the xlsx package to connect to Excel</li>
<li>Reading data from relational databases – MySQL</li>
<li>Reading data from NoSQL databases – MongoDB</li>
</ul>
<p>Introduction</p>
<p>R is an open source product and hence its capabilities are constantly expanding. R is specifically useful for its numerous statistical packages and powerful visualization. When applications written in other environments (such as Java, C++, Python, and Excel) need to exploit R’s special capabilities, we need to smoothly integrate these environments with R. In this chapter, we will discuss working with R from Java and Excel and reading data from databases.</p>
<p>The rJava package allows us to create and access Java objects using Java Native Interface (JNI) from within R. The Java-R Interface (JRI) and Rserve packages allow us to do the reverse by invoking R from within Java programs. We also discuss various ways to work on Excel files directly from R.</p>
<h2 id="Using-Java-objects-in-R"><a href="#Using-Java-objects-in-R" class="headerlink" title="Using Java objects in R"></a>Using Java objects in R</h2><p>Sometimes, we develop parts of an application in Java and need to access them from R. The rJava package allows us to access Java objects directly from within R.</p>
<h3 id="Getting-ready-75"><a href="#Getting-ready-75" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that these files are in your R working directory:</p>
<ol>
<li>Create a folder called javasamples and move all the files with extension .java or .class into this folder under your working directory.</li>
<li>Install rJava using the install.packages(“rJava”) command.</li>
<li>Load the package using the library(rJava) command.</li>
<li>For rJava to work in your environment, the JDK version should be identical for the following, and we explain how to get them in sync for Mac OS X:</li>
</ol>
<ul>
<li>The environment JDK version: Execute java –version in your command line to get the installed version of Java. You will be using this version to create .jar files or to compile Java programs.</li>
<li>The JDK version in R: After you install and load the rJava package, check the JVM version in the R environment. We execute the commands to check this in the previous step. This should match with the response you get in the java –version command.</li>
</ul>
<ol>
<li>If there is a mismatch in the versions and you are using Mac OS X, do the following to install the latest version of rJava from source:</li>
</ol>
<ul>
<li><p>Download the latest rJava source rJava_0.9-7.tar.gz from <a href="http://www.rforge.net/rJava/files/" target="_blank" rel="external">http://www.rforge.net/rJava/files/</a>. The filename can be different with each new version of rJava:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo R CMD javareconf</span><br></pre></td></tr></table></figure>
</li>
<li><p>Include the following lines in your shell profile file (.bash_profile in bash, .profile in csh, and so forth); make sure to change the following folders as per your environment:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home/</span><br><span class="line">export LD_LIBRARY_PATH=$JAVA_HOME/jre/lib/server</span><br><span class="line">export MAKEFLAGS=&quot;LDFLAGS=-Wl,-rpath $JAVA_HOME/lib/server&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Close your terminal window and reopen it so that the profile settings take effect.</p>
</li>
<li><p>Install the downloaded rJava package and make sure to change the filename:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo R CMD INSTALL rJava_0.9-7.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>Close R or RStudio session, whichever you are using, and reopen it from the same terminal window by executing open -a R or open -a RStudio.</p>
</li>
<li>Load the library again using library(rJava).</li>
<li>Check the JVM version using step 1.</li>
</ul>
<ol>
<li>Download the three JAR files JRI.jar, REngine.jar, and JRIEngine.jar from <a href="http://www.rforge.net/JRI/files/" target="_blank" rel="external">http://www.rforge.net/JRI/files/</a>; the RserveEngine.jar from <a href="http://www.rforge.net/Rserve/files/" target="_blank" rel="external">http://www.rforge.net/Rserve/files/</a>. Copy the four downloaded JAR files to the lib folder under your R working directory.</li>
<li>You can either use the class files provided or compile the Java code. These class files are created with JDK 1.8.0_25, and if your JDK version is different, follow the next step to compile all the Java programs.</li>
<li>To compile the downloaded Java programs, go to the javasamples folder and execute the javac -cp .:../lib/<em> </em>java command. You should see files with the class extensions for each of the downloaded Java programs.</li>
</ol>
<h3 id="How-to-do-it…-76"><a href="#How-to-do-it…-76" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use Java objects in R, follow these steps:</p>
<ol>
<li><p>From within R, start the JVM, check the Java version, and set classpath:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; .jinit()</span><br><span class="line"></span><br><span class="line">&gt; .jcall(<span class="string">"java/lang/System"</span>, <span class="string">"S"</span>, <span class="string">"getProperty"</span>, <span class="string">"java.runtime.version"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"1.8.0_25-b17"</span></span><br><span class="line"></span><br><span class="line">&gt; .jaddClassPath(getwd())</span><br><span class="line"></span><br><span class="line">&gt; .jclassPath()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"/Library/Frameworks/R.framework/Versions/3.1/Resources/library/rJava/java"</span></span><br><span class="line">[<span class="number">2</span>] <span class="string">"/Users/sv/book/Chapter11"</span>  =&gt; my working directory</span><br></pre></td></tr></table></figure>
</li>
<li><p>Perform these Java string operations in R:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; s &lt;- .jnew(<span class="string">"java/lang/String"</span>, <span class="string">"Hello World!"</span>)</span><br><span class="line">&gt; print(s)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"Java-Object&#123;Hello World!&#125;"</span></span><br><span class="line"></span><br><span class="line">&gt; .jstrVal(s)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello World!"</span></span><br><span class="line"></span><br><span class="line">&gt; .jcall(s,<span class="string">"S"</span>,<span class="string">"toLowerCase"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"hello world!"</span></span><br><span class="line"></span><br><span class="line">&gt; .jcall(s,<span class="string">"S"</span>,<span class="string">"replaceAll"</span>,<span class="string">"World"</span>,<span class="string">"SV"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello SV!"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Perform these Java vector operations:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; javaVector &lt;- .jnew(<span class="string">"java/util/Vector"</span>)</span><br><span class="line">&gt; months &lt;- month.abb</span><br><span class="line"></span><br><span class="line">&gt; sapply(months, javaVector$add)</span><br><span class="line"> Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec</span><br><span class="line"><span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">&gt; javaVector$size()</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">&gt; javaVector$toString()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"[Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec]"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Perform these Java array operations:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; monthsArray &lt;- .jarray(month.abb)</span><br><span class="line">&gt; yearsArray &lt;- .jarray(as.numeric(<span class="number">2010</span>:<span class="number">2015</span>))</span><br><span class="line">&gt; calArray &lt;- .jarray(list(monthsArray,yearsArray))</span><br><span class="line"></span><br><span class="line">&gt; print(monthsArray)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Java-Array-Object[Ljava/lang/String;:[Ljava.lang.String;@1ff4689e"</span></span><br><span class="line"></span><br><span class="line">&gt; .jevalArray(monthsArray)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"Jan"</span> <span class="string">"Feb"</span> <span class="string">"Mar"</span> <span class="string">"Apr"</span> <span class="string">"May"</span> <span class="string">"Jun"</span> <span class="string">"Jul"</span> <span class="string">"Aug"</span> <span class="string">"Sep"</span> <span class="string">"Oct"</span> <span class="string">"Nov"</span> <span class="string">"Dec"</span></span><br><span class="line"></span><br><span class="line">&gt; print(l &lt;- .jevalArray(calArray))</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Java-Object&#123;[Ljava.lang.String;@30f7f540&#125;"</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Java-Object&#123;[D@670655dd&#125;"</span></span><br><span class="line"></span><br><span class="line">&gt; lapply(l, .jevalArray)</span><br><span class="line">[[<span class="number">1</span>]]</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"Jan"</span> <span class="string">"Feb"</span> <span class="string">"Mar"</span> <span class="string">"Apr"</span> <span class="string">"May"</span> <span class="string">"Jun"</span> <span class="string">"Jul"</span> <span class="string">"Aug"</span> <span class="string">"Sep"</span> <span class="string">"Oct"</span> <span class="string">"Nov"</span> <span class="string">"Dec"</span></span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>]]</span><br><span class="line">[<span class="number">1</span>] <span class="number">2010</span> <span class="number">2011</span> <span class="number">2012</span> <span class="number">2013</span> <span class="number">2014</span> <span class="number">2015</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Insert this simple Java class HelloWorld:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; hw &lt;- .jnew(<span class="string">"javasamples.HelloWorld"</span>)</span><br><span class="line">&gt; hello &lt;- .jcall(hw,<span class="string">"S"</span>, <span class="string">"getString"</span>)</span><br><span class="line">&gt; hello</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello World"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Insert this simple Java class Greeting with a method that accepts an argument:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; greet &lt;- .jnew(<span class="string">"javasamples.Greeting"</span>)</span><br><span class="line">&gt; print(greet)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Java-Object&#123;Hi World!&#125;"</span></span><br><span class="line"></span><br><span class="line">&gt; g &lt;- .jcall(greet, <span class="string">"S"</span>, <span class="string">"getString"</span>, <span class="string">"Shanthi"</span>)</span><br><span class="line">&gt; print(g)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello Shanthi"</span></span><br><span class="line"></span><br><span class="line">&gt; .jstrVal(g)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello Shanthi"</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-72"><a href="#How-it-works…-72" class="headerlink" title="How it works…"></a>How it works…</h3><p>The .jinit() initializes the Java Virtual Machine (JVM) and needs to be executed before invoking any of the rJava functions. If you encounter errors at this point, the issue is usually a lack of sufficient memory. Close unwanted processes or programs, including R, and retry.</p>
<p>For rJava to work, we need to sync up the Java version in the system environment with the rJava version. We used the .jcall(“java/lang/System”, “S”, “getProperty”, “java.runtime.version”) command to get the Java version within the R environment.</p>
<p>After making sure that the Java versions are identical, the first thing we need to do to access any Java object is to set up classpath. We do this using .jaddClassPath. We pass the R working directory, since our Java classes reside here. However, if you have the Java class files in a different location or if you created a .jar file, include that location instead. Once the classpath is set using .jaddClassPath, you can verify it by executing .jclassPath().</p>
<p>Step 2 illustrates string operations. We use .jnew to instantiate any Java object. The classname is the full classname separated by “/“. Hence, we refer to the string class as java/lang/String instead of java.lang.string.</p>
<p>The jstrVal function emits the equivalent of toString() for any Java object. In our example, we get the content of string s.</p>
<p>We use .jcall to execute any method on a Java object. In jcall(s,”S”,”toLowerCase”), we are invoking the toLowerCase method on the string object s. The “S” in the call specifies the return type of the method invocation. In .jcall(s,”S”,”replaceAll”,”World”,”SV”), we invoke the replaceAll method and get a new replaced string back.</p>
<p>We list the possible return types in the following table:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Return Type</th>
<th>Java Type</th>
<th>Remarks</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">I</td>
<td>int</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td>double</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">J</td>
<td>long</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">F</td>
<td>float</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">V</td>
<td>void</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">Z</td>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td>char</td>
<td></td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td>byte (raw)</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>L&lt;class&gt;</code></td>
<td>Java object of class <code>&lt;class&gt;</code></td>
<td>Eg: Ljava/awt/Component</td>
</tr>
<tr>
<td style="text-align:left">S</td>
<td>java.lang.String</td>
<td>S is special for Ljava/long/object</td>
</tr>
<tr>
<td style="text-align:left"><code>[&lt;type&gt;</code></td>
<td>array of objects of <code>&lt;type&gt;</code></td>
<td><code>[D</code> for array of doubles</td>
</tr>
</tbody>
</table>
<p>Step 3 illustrates vector operations in Java from R. We first create a Java vector object using javaVector &lt;- .jnew(“java/util/Vector”). We then use the add method to add elements to this vector. Earlier in step 2, we used the .jcall function to invoke a method on an object, but now we use a shortcut that closely resembles what we typically do in Java. In Java, to call a method, we use the “.” operator and in R we use the $ operator. Thus, we use javaVector$add to invoke the add method on the javaVector object.</p>
<p>Step 4 illustrates Java array operations. The two key functions are .jarray to create an array object and .jevalArray to return an array object. We create three array objects monthsArray, yearsArray, and calArray using the .jarray function. When we print the array object using print(monthsArray), we get the object type of each of the array elements. However, when we execute .jevalArray(monthsArray), we get the contents of the array. The calArray object is a list of two Java array objects, and we also see how to extract array elements in this step.</p>
<p>Step 5 shows how to instantiate a custom Java object and invoke methods on it. If you have not already compiled the Java code, refer to Getting Ready at the beginning of this recipe for the instructions. We used .jnew to instantiate a HelloWorld object called hw. We always pass the classname along with the package to the .jnew function. Once the object is created, we can invoke methods. An example of invoking the getString method is shown here.</p>
<p>Step 6 shows the instantiation of another custom object Greeting and the invocation of a method. The arguments to the method follow the method name as in .jcall(greet,”S”, “getString”, “Shanthi”). Here, the string “Shanthi” is an argument passed to the getString method.</p>
<h3 id="There’s-more…-42"><a href="#There’s-more…-42" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The following are a few key additional useful commands to invoke Java objects from the R environment.</p>
<h4 id="Checking-JVM-properties"><a href="#Checking-JVM-properties" class="headerlink" title="Checking JVM properties"></a>Checking JVM properties</h4><p>You may want to check the Java Virtual Machine properties if you encounter issues in executing Java commands in the R console:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; jvm = .jnew(&quot;java.lang.System&quot;)</span><br><span class="line">&gt; jvm.props = jvm$getProperties()$toString()</span><br><span class="line">&gt; jvm.props &lt;- strsplit(gsub(&quot;\\&#123;(.*)&#125;&quot;, &quot;\\1&quot;, jvm.props), &quot;, &quot;)[[1]]</span><br><span class="line">&gt; jvm.props</span><br><span class="line"> [1] &quot;java.runtime.name=Java(TM) SE Runtime Environment&quot;</span><br><span class="line"> [2] &quot;sun.boot.library.path=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Libraries&quot;</span><br><span class="line"> [3] &quot;java.vm.version=20.65-b04-462&quot;</span><br><span class="line"> [4] &quot;awt.nativeDoubleBuffering=true&quot;</span><br><span class="line"> [5] &quot;gopherProxySet=false&quot;</span><br><span class="line"> [6] &quot;mrj.build=11M4609&quot;</span><br><span class="line"> [7] &quot;java.vm.vendor=Apple Inc.&quot;</span><br><span class="line"> [8] &quot;java.vendor.url=http://www.apple.com/&quot;</span><br><span class="line"> [9] &quot;path.separator=:&quot;</span><br><span class="line">[10] &quot;java.vm.name=Java HotSpot(TM) 64-Bit Server VM&quot;</span><br><span class="line">……….</span><br></pre></td></tr></table></figure>
<h4 id="Displaying-available-methods"><a href="#Displaying-available-methods" class="headerlink" title="Displaying available methods"></a>Displaying available methods</h4><p>The following commands are useful to get a list of available methods or to get the method signature:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; .jmethods(s,<span class="string">"trim"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"public java.lang.String java.lang.String.trim()"</span></span><br></pre></td></tr></table></figure>
<p>The preceding command indicates that the trim method can be invoked on a String object and it returns a String object:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># To get the list of available methods for an object</span></span><br><span class="line">&gt; .jmethods(s)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"public boolean java.lang.String.equals(java.lang.Object)"</span></span><br><span class="line"> [<span class="number">2</span>] <span class="string">"public java.lang.String java.lang.String.toString()"</span></span><br><span class="line"> [<span class="number">3</span>] <span class="string">"public int java.lang.String.hashCode()"</span></span><br><span class="line"> [<span class="number">4</span>] <span class="string">"public int java.lang.String.compareTo(java.lang.String)"</span></span><br><span class="line"> [<span class="number">5</span>] <span class="string">"public int java.lang.String.compareTo(java.lang.Object)"</span></span><br><span class="line"> [<span class="number">6</span>] <span class="string">"public int java.lang.String.indexOf(int)"</span></span><br><span class="line">…..</span><br></pre></td></tr></table></figure>
<h2 id="Using-JRI-to-call-R-functions-from-Java"><a href="#Using-JRI-to-call-R-functions-from-Java" class="headerlink" title="Using JRI to call R functions from Java"></a>Using JRI to call R functions from Java</h2><p>The JRI allows you to execute R commands inside Java applications as a single thread. JRI loads R libraries into Java and thus provides a Java API to R functions.</p>
<h3 id="Getting-ready-76"><a href="#Getting-ready-76" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Make sure all the steps in the earlier recipe Using Java objects in R are completed.</p>
<h3 id="How-to-do-it…-77"><a href="#How-to-do-it…-77" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use JRI to call R functions from Java, follow these steps:</p>
<ol>
<li>Set up environment variables R_HOME to where R has been installed and add the R bin directory to the environment variable PATH.</li>
<li><p>Open a new terminal window (on OS X and Linux systems) or open a command prompt window on Windows. Make sure to change the values according to your environment. The following commands help to set up environment variables on OS X and Linux systems. Make sure to change your directory location:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export R_HOME=/Library/Frameworks/R.framework/Resources</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/Library/Frameworks/R.framework/Resources/bin/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Execute the Java command as follows from the javasamples directory. Make sure to change the values according to your environment. Also, there is no space between –D and java.library.path:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd javasamples</span><br><span class="line">java  -Djava.library.path=/Library/Frameworks/R.framework/Resources/library/rJava/jri -cp ..:../lib/* javasamples.SimpleJRIStat</span><br><span class="line"></span><br><span class="line">1520.15</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-73"><a href="#How-it-works…-73" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1, we set up the environment variables R_HOME to where R has been installed and add the R bin directory to the environment variable PATH. If these environment variables are not set, then you will see the following error message:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;R_HOME is not set. Please set all required environment variables before running this program.</span><br><span class="line">Unable to start R.&quot;</span><br></pre></td></tr></table></figure>
<p>In step 2, we run the SimpleJRIStat Java program. Open the SimpleJRIStat.java code:</p>
<ul>
<li>In the main method, we first create an instance of Rengine to begin an R session.</li>
<li>We check to make sure that the R session is active with the waitForR method.</li>
<li>We create an array of doubles in Java and assign it to a variable called “values”. The values variable exists in the R environment and not in our Java environment.</li>
<li>The eval method of Rengine is equivalent to executing commands in the R console. The output from the eval method is an org.rosuda.JRI.REXP object. Depending on the content of REXP, methods such as asString(), asDouble() can be executed to extract the result returned by R. In our Java code, we use the R function mean to calculate the average of the array and assign it to a Java REXP variable mean.</li>
<li>We then use the asDouble method to get the value from mean and print it out.</li>
<li>We finally close the R session by calling the end method.</li>
</ul>
<p>To execute the Java code, we need to add the -Djava.library.path switch (there is no space between –D and java.library.path) and point to the rJava location. To use REngine from Java, we add the appropriate JAR files to the classpath. Since we are executing the command from the javasamples folder, we add .. to the classpath to refer to the parent folder where our library files are located under the lib folder.</p>
<h3 id="There’s-more…-43"><a href="#There’s-more…-43" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>It is possible to create graphs using R from a Java program. Let’s look at SimplePlot.java:</p>
<ul>
<li>In the main method, first we create an Rengine instance and check if the R session is created successfully.</li>
<li>We set the working directory in R either from the last argument that was passed while executing the command or from the current user directory from where the Java command was executed. The args.length == 0 expression indicates that no argument is passed during the execution of the code and hence we use the user directory as the R working directory.</li>
<li>We use the read.csv function to read the file in R and load it into an R variable auto.</li>
<li>We use the nrow function to get the number of rows in auto and print the value.</li>
<li>We set png as device and use auto.png as filename to be created.</li>
<li>We then use the plot function to plot weight vs mpg.</li>
<li>We turn the device off to flush the file contents.</li>
<li>We finally end the R session.</li>
</ul>
<p>To execute the Java code, use the following command. Change the argument to the call to reflect your R working directory where the auto-mpg.csv file resides:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.library.path=/Library/Frameworks/R.framework/Resources/library/rJava/jri/ -cp ..:../lib/* javasamples.SimplePlot /Users/sv/book/Chapter11</span><br></pre></td></tr></table></figure>
<h2 id="Using-Rserve-to-call-R-functions-from-Java"><a href="#Using-Rserve-to-call-R-functions-from-Java" class="headerlink" title="Using Rserve to call R functions from Java"></a>Using Rserve to call R functions from Java</h2><p>The Rserve package is a TCP/IP server that accepts requests from clients. RServe allows other technologies to access R. Every connection has a separate workspace and working directory.</p>
<h3 id="Getting-ready-77"><a href="#Getting-ready-77" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do so now and ensure that the files are in your R working directory:</p>
<ul>
<li>Create a javasamples folder and move all the files with extension Java and class into this folder under your working directory.</li>
<li>Install Rserve using install.packages(‘Rserve’).</li>
<li>Load the package using library(Rserve).</li>
<li>Download the three JAR files JRI.jar, REngine.jar, and JRIEngine.jar from <a href="http://www.rforge.net/JRI/files/" target="_blank" rel="external">http://www.rforge.net/JRI/files/</a> and the RserveEngine.jar from <a href="http://www.rforge.net/Rserve/files/" target="_blank" rel="external">http://www.rforge.net/Rserve/files/</a>. Copy the four downloaded JAR files to the lib folder under your R working directory.</li>
<li>You can either use the class files provided or compile the Java code. These class files are created with JDK 1.8.0_25 and, if your JDK version is different, follow the next step to compile all the Java programs.</li>
<li>To compile the downloaded Java programs, go to the javasamples folder and execute the javac -cp .:../lib/<em> </em>java command. You should see files with the class extensions for each of the downloaded Java programs.</li>
</ul>
<h3 id="How-to-do-it…-78"><a href="#How-to-do-it…-78" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To use Rserve to call R functions from Java, follow these steps:</p>
<ol>
<li><p>Start the Rserve server to accept client connections.</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; Rserve(args=<span class="string">"--no-save"</span>)  - On Mac and Linux</span><br><span class="line">&gt; Rserve() – on windows</span><br><span class="line">Rserv started <span class="keyword">in</span> daemon mode.</span><br></pre></td></tr></table></figure>
</li>
<li><p>Execute the Java program to draw ggplot in R and display the image. Change the argument to the call to reflect your R working directory where the auto-mpg.csv file resides:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..:../lib/* javasamples.SimpleGGPlot /Users/sv/book/Chapter11</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-74"><a href="#How-it-works…-74" class="headerlink" title="How it works…"></a>How it works…</h3><p>In step 1, we start the RServe server from R. If the server is already up and running, you will see the: <code>##&gt; SOCK_ERROR: bind error #48(address already in use)</code> message.</p>
<p>You can remove the current RServe process by killing it at the OS level. We can also start Rserve as a daemon process from the command line by executing R CMD Rserve.</p>
<p>Rserve can run locally or on a remote server accessible by multiple clients. To access the remote Rserve server, provide the hostname or the IP address of the server while creating the RConnection.</p>
<p>In step 2, we run the SimpleGGPlot Java program. To connect to RServe from Java, we add the appropriate jars to classpath. Since we are executing the command from the javasamples folder, we add .. to the classpath to refer to the parent folder where our library files are located under the lib folder. We also pass the folder name where the auto-mpg.csv file resides, since that folder is our R working directory.</p>
<p>We now explain the code in SimpleGGPlot.java:</p>
<ol>
<li>In the main method, first we create an RConnection object.</li>
<li>We invoke the eval method on the RConnection object to execute commands in R.</li>
<li>The RConnection object throws the REngineException and hence we add try and catch blocks to catch the exception.</li>
<li>We evaluate the following functions in R from Java:</li>
</ol>
<ul>
<li>We first load the ggplot2 package in R.</li>
<li>We set the working directory in R using the argument passed. If no argument is passed, then the user’s current directory is used to set the R working directory.</li>
<li>We read the contents of the auto-mpg.csv file using read.csv.</li>
<li>We create a device to save the graph and then generate ggplot for weight vs mpg.</li>
<li>We close the device to flush out the contents to the file.</li>
<li>We then read the binary content of the file.</li>
<li>The output of the eval or parseAndEval methods is the org.rosuda.REngine.REXP objects and, depending on the content of the REXP methods such as asString(), asBytes() can be executed to extract the result returned by R. In our Java code, we read the binary content of the file from the REXP object xp using asBytes().</li>
</ul>
<ol>
<li>We create an image object that we finally display in a JFrame as follows:</li>
</ol>
<p><img src="img/11_1_1.jpeg" alt=""></p>
<ol>
<li>We close the connection after the user closes the JFrame image window</li>
<li>If RServe is not running, then you will see a message:</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> org.rosuda.REngine.Rserve.RserveException: Cannot connect: Connection refused<span class="string">".</span></span><br></pre></td></tr></table></figure>
<h3 id="There’s-more…-44"><a href="#There’s-more…-44" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>In the recipe, Using JRI to call R functions from Java, we showed how to execute a function in R and retrieve the value from R in Java. Here, we show how to retrieve an array from R into Java.</p>
<h4 id="Retrieving-an-array-from-R"><a href="#Retrieving-an-array-from-R" class="headerlink" title="Retrieving an array from R"></a>Retrieving an array from R</h4><p>The following steps help in retrieving an array from R:</p>
<ol>
<li>Open the Java program SimpleRservStat.java:</li>
</ol>
<ul>
<li>We instantiate a new RConnection object.</li>
<li>We assign a Java array of doubles to an R variable</li>
<li>We calculate the mean of this array in R and print it in Java</li>
<li>We then calculate the range and, since range is an array, we invoke a method asDoubles() on the REXP object that is returned from the eval method</li>
<li>We then print the array of doubles after converting it into a string</li>
</ul>
<ol>
<li>Execute the following Java code command line from the javasamples directory—be sure to pass your own R working directory in place of the last part of the command:</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..:../lib<span class="comment">/* javasamples.SimpleRservStat /Users/sv/book/Chapter11</span></span><br></pre></td></tr></table></figure>
<h2 id="Executing-R-scripts-from-Java"><a href="#Executing-R-scripts-from-Java" class="headerlink" title="Executing R scripts from Java"></a>Executing R scripts from Java</h2><p>In earlier recipes, we executed R functions from within Java. In this recipe, we execute an R script from Java and read the results from R into Java for further processing.</p>
<h3 id="Getting-ready-78"><a href="#Getting-ready-78" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Make sure all the steps in the first recipe, Using Java objects in R, in this chapter are completed. Also make sure the auto-mpg.csv and corr.R files are in your R working directory.</p>
<h3 id="How-to-do-it…-79"><a href="#How-to-do-it…-79" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>Execute the Java program from your command prompt to invoke an R script from a Java program. Be sure to change the last part to reflect your R working directory:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.library.path=/Library/Frameworks/R.framework/Resources/<span class="keyword">library</span>/rJava/jri/ -cp ..:../lib/* javasamples.InvokeRScript mpg weight /Users/sv/book/Chapter11</span><br></pre></td></tr></table></figure>
<h3 id="How-it-works…-75"><a href="#How-it-works…-75" class="headerlink" title="How it works…"></a>How it works…</h3><p>We execute the Java program InvokeScript with three arguments. The first two arguments mention the columns of the auto table for which correlation is computed and the optional third argument is the working directory, where the auto-mpg.csv file and the R script reside.</p>
<p>Let’s look at the InvokeScript.java code:</p>
<ul>
<li>In the main method, first we create an Rengine instance and check if the R session is created successfully.</li>
<li><p>We check if there are at least two arguments passed to the InvokeScript Java program. If not, we display an error message:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">To execute, please provide 2 variable names from auto-mpg dataset.</span><br></pre></td></tr></table></figure>
</li>
<li><p>If the length of the arguments array, args.length, is equal to 2, we know that the user did not provide the R working directory; hence, take the user’s current directory as the working directory and set it in R.</p>
</li>
<li>We set two variables var1 and var2 from the arguments using the method assign. These variables are created in the R environment.</li>
<li>We then invoke the eval method to source the R script file corr.R.</li>
<li>We get the “result” into a REXP object.</li>
<li>We print the value by invoking the asDouble method on the REXP object.</li>
<li>Finally, we close the Rengine object to release the R session.</li>
</ul>
<p>Let’s look at the R script corr.R:</p>
<ul>
<li>Load the contents of the auto-mpg.csv file into an R object auto</li>
<li>Execute the cor function to calculate the correlation between the two variables that were passed as an argument to the Java program InvokeScript</li>
</ul>
<h2 id="Using-the-xlsx-package-to-connect-to-Excel"><a href="#Using-the-xlsx-package-to-connect-to-Excel" class="headerlink" title="Using the xlsx package to connect to Excel"></a>Using the xlsx package to connect to Excel</h2><p>There are multiple packages to connect Excel with R; in this recipe, we discuss the xlsx package. Other commonly used packages are RExcel and XLConnect.</p>
<h3 id="Getting-ready-79"><a href="#Getting-ready-79" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>If you have not already downloaded the files for this chapter, do it now and ensure that the files are in your R working directory:</p>
<ul>
<li>Install xlsx using install.packages(“xlsx”)</li>
<li>Load the library using library(xlsx)</li>
<li><p>Read the data:</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto &lt;- read.csv(<span class="string">"auto-mpg.csv"</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="How-to-do-it…-80"><a href="#How-to-do-it…-80" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To connect to Excel using the xlsx package, follow the steps:</p>
<ol>
<li><p>Save a data frame to an Excel workbook:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; write.xlsx(auto, file = <span class="string">"auto.xlsx"</span>, sheetName = <span class="string">"autobase"</span>, row.names = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add two new columns to the auto data frame:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto$kmpg &lt;- auto$mpg * <span class="number">1.6</span></span><br><span class="line">&gt; auto$mpg_deviation &lt;- (auto$mpg - mean(auto$mpg))/auto$mpg</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create Excel objects such as workbooks, worksheets, rows, and cells:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; auto.wb &lt;- createWorkbook()</span><br><span class="line">&gt; sheet1 &lt;- createSheet(auto.wb,<span class="string">"auto1"</span>)</span><br><span class="line">&gt; rows &lt;- createRow(sheet1, rowIndex=<span class="number">1</span>)</span><br><span class="line">&gt; cell.1 &lt;- createCell(rows, colIndex=<span class="number">1</span>)[[<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">&gt; setCellValue(cell.1, <span class="string">"Hello Auto Data!"</span>)</span><br><span class="line">&gt; addDataFrame(auto, sheet1, startRow=<span class="number">3</span>, row.names=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Assign styles to cells:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; cs &lt;- CellStyle(auto.wb) + Font(auto.wb, isBold=<span class="literal">TRUE</span>, color=<span class="string">"red"</span>)</span><br><span class="line">&gt; setCellStyle(cell.1, cs)</span><br><span class="line">&gt; saveWorkbook(auto.wb,<span class="string">"auto_wb.xlsx"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add another sheet to an Excel workbook:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; wb &lt;- loadWorkbook(<span class="string">"auto_wb.xlsx"</span>)</span><br><span class="line">&gt; sheet2 &lt;- createSheet(auto.wb,<span class="string">"auto2"</span>)</span><br><span class="line">&gt; addDataFrame(auto[,<span class="number">1</span>:<span class="number">9</span>], sheet2, row.names=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; saveWorkbook(auto.wb, <span class="string">"auto_wb.xlsx"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Add columns to a worksheet and save the workbook:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; wb &lt;- loadWorkbook(<span class="string">"auto_wb.xlsx"</span>)</span><br><span class="line">&gt; sheets &lt;- getSheets(wb)</span><br><span class="line">&gt; sheet &lt;- sheets[[<span class="number">2</span>]]</span><br><span class="line">&gt; addDataFrame(auto[,<span class="number">10</span>:<span class="number">11</span>], sheet, startColumn=<span class="number">10</span>, row.names=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; saveWorkbook(wb, <span class="string">"newauto.xlsx"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read from an Excel workbook:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; new.auto &lt;- read.xlsx(<span class="string">"newauto.xlsx"</span>, sheetIndex=<span class="number">2</span>)</span><br><span class="line">&gt; head(new.auto)</span><br><span class="line">&gt; new.auto &lt;- read.xlsx(<span class="string">"newauto.xlsx"</span>, sheetName=<span class="string">"auto2"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read a specific region from an Excel workbook:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sub.auto &lt;- read.xlsx(<span class="string">"newauto.xlsx"</span>, sheetName=<span class="string">"autobase"</span>, rowIndex=<span class="number">1</span>:<span class="number">4</span>, colIndex=<span class="number">1</span>:<span class="number">9</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-76"><a href="#How-it-works…-76" class="headerlink" title="How it works…"></a>How it works…</h3><p>There are multiple options for reading and saving a worksheet. We see a few examples.</p>
<p>Step 1 saves the auto data frame to a new worksheet called “autobase” and creates the Excel file. If we do not include row.names=FALSE, the row numbers are displayed as the first column in the spreadsheet.</p>
<p>Step 2 adds two additional columns to the auto data frame. The first column kmpg is kilometers per gallon and the second new column is the mean mpg deviation. We used vector operations to compute the columns.</p>
<p>Step 3 shows the following functions to create workbooks, worksheets, rows, and cells:</p>
<ul>
<li>createWorkbook: This creates a workbook object and returns a reference to the object.</li>
<li>createSheet: This creates a worksheet and gives it the name passed in. If a sheet name is not provided, a default sheet name sheetx is used.</li>
<li>createRow: This creates a row within the sheet. rowIndex specifies the row number.</li>
<li>createCell: This creates a cell in the given row at a specific column index.</li>
<li>setCellValue: This assigns a value to the specified cell.</li>
<li>addDataFrame: This includes a data frame to the specified sheet. By default, row.names are included and the starting row and column is 1. However, these can be passed as an argument to specify a different row and column index. In our example, we used startRow=3 since we manually created the first row to hold the heading followed by an empty row. We defaulted the column to 1.</li>
</ul>
<p>Step 4 shows how styles can be added to a cell. We can add styles while creating the row, column, or adding a data frame. Whatever you can do in Excel by way of styling can be done from within R. Here, we see an example of adding a color and font to our heading row cell.</p>
<p>Step 5 shows the addition of a new sheet. We use addDataFrame to add a data frame. Once again we use row.names=FALSE so as not to include the row numbers as a column. Since we did not specify the startRow, it is taken as 1. We save the workbook with the two new sheets as auto_wb.xlsx.</p>
<p>Step 6 uses the addDataFrame function to add a data frame to a worksheet. We first read the previously saved workbook file auto.xlsx using loadWorkbook and save it in a variable wb. We then call the getSheets function to get all the worksheets in this workbook. The getSheets function returns an array and we can get a specific sheet by mentioning its index. Hence, sheets[[2]] returns the second sheet in the workbook.</p>
<p>We add the two new columns that we created in step 2 to the sheet. We finally save the workbook.</p>
<p>Step 7 shows how to read directly from an Excel file using read.xlsx. We can refer to a specific sheet either using sheetIndex or sheetName. The sheetIndex attribute starts from 1.</p>
<p>Step 8 shows how to load a specific region from an Excel sheet. The rowIndex attribute is set to 1:4 and extracts the header row and the first three data rows.</p>
<h2 id="Reading-data-from-relational-databases-–-MySQL"><a href="#Reading-data-from-relational-databases-–-MySQL" class="headerlink" title="Reading data from relational databases – MySQL"></a>Reading data from relational databases – MySQL</h2><p>You can connect to relational databases using several different approaches.</p>
<p>The RODBC package provides access to most relational databases through the ODBC (Open Database Connectivity) interface. The RJDBC package provides access to databases through the JDBC interface and hence needs a Java environment.</p>
<p>There are database packages such as ROracle, RMySQL, and so on to provide connectivity to the specific relational databases.</p>
<p>Each of the aforementioned options performs differently and has different requirements. You should benchmark and select the package that performs best for your specific needs. In general, RJDBC performs poorly and hence you will likely choose RODBC or your database-specific R package. In this recipe, we describe the steps to work with the MySQL database.</p>
<h3 id="Getting-ready-80"><a href="#Getting-ready-80" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>First create a data frame to work with as follows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; customer &lt;- c(<span class="string">"John"</span>, <span class="string">"Peter"</span>, <span class="string">"Jane"</span>)</span><br><span class="line">&gt; orddt &lt;- as.Date(c(<span class="string">'2014-10-1'</span>,<span class="string">'2014-1-2'</span>,<span class="string">'2014-7-6'</span>))</span><br><span class="line">&gt; ordamt &lt;- c(<span class="number">280</span>, <span class="number">100.50</span>, <span class="number">40.25</span>)</span><br><span class="line">&gt; order &lt;- data.frame(customer,orddt,ordamt)</span><br></pre></td></tr></table></figure>
<p>Then install the MySQL server and create in it a database called Customer.</p>
<p>To use the RODBC package:</p>
<ol>
<li>Download and install MySQL Connector/ODBC for your operating system.</li>
<li>Create a DSN called order_dsn in the ODBC Configuration Manager by selecting the correct driver for your platform.</li>
<li>In R, execute install.packages(“RODBC”).</li>
</ol>
<p>To use the RJDBC package:</p>
<ol>
<li>Download and install MySQL Connector/J for your operating system.</li>
<li>Install Java Runtime and set the JAVA_HOME environment variable accordingly.</li>
<li>In R, execute install.packages(“RJDBC”).</li>
</ol>
<p>To use the RMySQL package:</p>
<ol>
<li>Download and install MySQL Connector/J for your operating system.</li>
<li>Create an environment variable MYSQL_HOME pointing to the folder where MySQL is installed.</li>
<li>Only on Windows: Copy libmysql.dll from the lib directory of your MySQL installation to the bin directory.</li>
<li>In R, execute install.packages(“RMySQL”).</li>
</ol>
<h3 id="How-to-do-it…-81"><a href="#How-to-do-it…-81" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>We show how to use each of the preceding packages to connect to the database.</p>
<h4 id="Using-RODBC"><a href="#Using-RODBC" class="headerlink" title="Using RODBC"></a>Using RODBC</h4><p>To use the RODBC package to connect to the database follow these steps:</p>
<ol>
<li><p>Load the RODBC library and create a connection object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RODBC)</span><br><span class="line">&gt; con &lt;- odbcConnect(<span class="string">"order_dsn"</span>, uid=<span class="string">"user"</span>, pwd=<span class="string">"pwd"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Save the order object into a table in the database:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sqlSave(con,order, <span class="string">"orders"</span>,append=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get all orders from the database table:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; custData &lt;- sqlQuery(con, <span class="string">"select * from orders"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Close the connection object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; close(con)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Using-RMySQL"><a href="#Using-RMySQL" class="headerlink" title="Using RMySQL"></a>Using RMySQL</h4><p>To use the RMySQL package, follow these steps:</p>
<ol>
<li><p>Load the RMySQL library and create a connection object:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RMySQL)</span><br><span class="line">&gt; con &lt;- dbConnect(<span class="string">"MySQL"</span>, dbname=<span class="string">"Customer"</span>, host=<span class="string">"127.0.0.1"</span>, port=<span class="number">8889</span>, username=<span class="string">"root"</span>, password=<span class="string">"root"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Save the order object into a table in the database:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbWriteTable(con,<span class="string">"orders"</span>, order)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get all orders from the database table:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbReadTable(con,<span class="string">"Orders"</span>)</span><br><span class="line">&gt; dbGetQuery(con,<span class="string">"select * from orders"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get all orders from the database table using a loop:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs &lt;- dbSendQuery(con, <span class="string">"select * from orders"</span>)</span><br><span class="line">&gt; <span class="keyword">while</span>(!dbHasCompleted(rs)) &#123;</span><br><span class="line">   fetch(rs,n=<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&gt; dbClearResult(rs)</span><br><span class="line">&gt; dbDisconnect(con)</span><br><span class="line">&gt; dbListConnections(dbDriver(<span class="string">"MySQL"</span>))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Using-RJDBC"><a href="#Using-RJDBC" class="headerlink" title="Using RJDBC"></a>Using RJDBC</h4><p>To use the RJDBC package follow these steps:</p>
<ol>
<li><p>Load the RJDBC library and create a connection object. Make sure to point to the correct location of the downloaded .jar file.</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(RJDBC)</span><br><span class="line">&gt; driver &lt;- JDBC(<span class="string">"com.mysql.jdbc.Driver"</span>, classpath= <span class="string">"/etc/jdbc/mysql-connector-java-5.1.34-bin.jar"</span>, <span class="string">"'"</span>)</span><br><span class="line">&gt; con &lt;- dbConnect(driver, <span class="string">"jdbc:mysql://host:port/Customer"</span> , <span class="string">"username"</span>,<span class="string">"password"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The remaining operations are identical to those in the Using RMySQL section.</p>
</li>
</ol>
<h3 id="How-it-works…-77"><a href="#How-it-works…-77" class="headerlink" title="How it works…"></a>How it works…</h3><p>The preceding code first creates a data frame called order with three rows. It then connects to a MySQL database using different methods.</p>
<h4 id="Using-RODBC-1"><a href="#Using-RODBC-1" class="headerlink" title="Using RODBC"></a>Using RODBC</h4><p>In this method we executed the following command:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; con &lt;- odbcConnect(<span class="string">"cust_dsn"</span>, uid=<span class="string">"user"</span>, pwd=<span class="string">"pwd"</span>)</span><br></pre></td></tr></table></figure>
<p>The con variable now has a connection to the database associated to the DSN. All subsequent database calls use this connection object. When all database operations are done, we close the connection.</p>
<p>Although we will typically not create tables or insert data from R, we have shown the code for this just for illustration. The sqlSave function saves the data in the R data object to the specified table. We used append=FALSE because the table does not already exist and hence we will want R to create the table first and then insert the data. If the table already exists, you can use append=TRUE.</p>
<p>The sqlQuery function executes the supplied query and returns the result set as a data frame.</p>
<h4 id="Using-RMySQL-1"><a href="#Using-RMySQL-1" class="headerlink" title="Using RMySQL"></a>Using RMySQL</h4><p>The RMySQL package uses the MYSQL_HOME environment variable to get to the needed libraries:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbWriteTable(con, <span class="string">"orders"</span>, order)</span><br></pre></td></tr></table></figure>
<p>The dbWriteTable function inserts records into the table. If the table does not exist, it creates the table. By default, row.names of the data frame is added as a column to the table; if it is not needed, remember to set it to FALSE:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbReadTable(con,<span class="string">"Orders"</span>)</span><br></pre></td></tr></table></figure>
<p>The dbReadTable function reads the table and creates a data frame:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbGetQuery(con,<span class="string">"select * from orders"</span>)</span><br></pre></td></tr></table></figure>
<p>The dbGetQuery function executes the query and returns all the results as a data frame. When the table is large, it is better to use dbSendQuery and fetch results as needed:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; rs &lt;- dbSendQuery(con, <span class="string">"select * from orders"</span>)</span><br><span class="line">&gt; <span class="keyword">while</span>(!dbHasCompleted(rs)) &#123;</span><br><span class="line">+    fetch(rs,n=<span class="number">2</span>)</span><br><span class="line">+ &#125;</span><br><span class="line">&gt; dbClearResult(rs)</span><br><span class="line">&gt; dbDisconnect(con)</span><br></pre></td></tr></table></figure>
<p>The dbSendQuery function returns rs, a result set object. When you fetch rows with this object, since n=2, two records are returned from the database. While using dbSendQuery, it is a good idea to use a loop until dbHasCompleted is TRUE. Remember to clear the pointer with dbClearResult and close the connection using dbDisconnect:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbListConnections(dbDriver(<span class="string">"MySQL"</span>))</span><br></pre></td></tr></table></figure>
<p>The dbListConnections function lists all the open connections.</p>
<h4 id="Using-RJDBC-1"><a href="#Using-RJDBC-1" class="headerlink" title="Using RJDBC"></a>Using RJDBC</h4><p>With JDBC, we can connect to any database. Hence, we need to tell R which driver to use. Once the driver is assigned in R, we use this later to create a connection to the database using the appropriate .jar files.</p>
<p>If connecting to a MySQL database, all the statements after getting the connection object are identical to those in the RMySQL scenario.</p>
<h3 id="There’s-more…-45"><a href="#There’s-more…-45" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The database-specific packages provide a lot of functionality, and pretty much most of what can be done within a SQL client can also be done from within an R environment. We show a few examples as follows.</p>
<h4 id="Fetching-all-rows"><a href="#Fetching-all-rows" class="headerlink" title="Fetching all rows"></a>Fetching all rows</h4><p>The following command is used to fetch all rows:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; fetch(rs,n=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>Use n=-1 to fetch all rows.</p>
<h4 id="When-the-SQL-query-is-long"><a href="#When-the-SQL-query-is-long" class="headerlink" title="When the SQL query is long"></a>When the SQL query is long</h4><p>When the SQL query is long, it becomes unwieldy to specify the whole query as one long string spanning several lines. Use the paste() function to break the query over multiple lines and make it more readable:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; dbSendQuery(con, statement=paste(</span><br><span class="line">   <span class="string">"select ordernumber, orderdate, customername"</span>,</span><br><span class="line">   <span class="string">"from orders o, customers c"</span>,</span><br><span class="line">   <span class="string">"where o.customer = c.customer"</span>,</span><br><span class="line">   <span class="string">"and c.state = 'NJ'"</span>,</span><br><span class="line">   <span class="string">"ORDER BY ordernumber"</span>))</span><br></pre></td></tr></table></figure>
<p><strong>Tip</strong></p>
<p>Note the use of the single quotes to specify a string literal.</p>
<h2 id="Reading-data-from-NoSQL-databases-–-MongoDB"><a href="#Reading-data-from-NoSQL-databases-–-MongoDB" class="headerlink" title="Reading data from NoSQL databases – MongoDB"></a>Reading data from NoSQL databases – MongoDB</h2><p>Unlike relational databases for which a somewhat standard approach works across all relational databases, the fluid state of NoSQL databases means that no such standard approach has yet evolved. We illustrate this with MongoDB using the rmongodb package.</p>
<h3 id="Getting-ready-81"><a href="#Getting-ready-81" class="headerlink" title="Getting ready"></a>Getting ready</h3><p>Prepare the environment by following these steps:</p>
<ol>
<li>Download and install MongoDB.</li>
<li>Start mongod as a background process and then start mongo.</li>
<li><p>Create a new database customer and a collection called orders:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; use customer</span><br><span class="line">&gt; db.orders.save(&#123;customername:<span class="string">"John"</span>, orderdate:ISODate(<span class="string">"2014-11-01"</span>),orderamount:<span class="number">1000</span>&#125;)</span><br><span class="line">&gt; db.orders.find()</span><br><span class="line">&gt; db.save</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-to-do-it…-82"><a href="#How-to-do-it…-82" class="headerlink" title="How to do it…"></a>How to do it…</h3><p>To read data from MongoDB, follow these steps:</p>
<ol>
<li><p>Install the rmongodb package and create a connection:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; install.packages(<span class="string">"rmongodb"</span>)</span><br><span class="line">&gt; <span class="keyword">library</span>(rmongodb)</span><br><span class="line">&gt; mongo &lt;- mongo.create()</span><br><span class="line">&gt; mongo.create(host = <span class="string">"127.0.0.1"</span>, db = <span class="string">"customer"</span>)</span><br><span class="line">&gt; mongo.is.connected(mongo)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Get all the collections in the MongoDB database:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; coll&lt;- mongo.get.database.collections(mongo,<span class="string">"customer"</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Find all records matching search criteria:</p>
 <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; json &lt;- <span class="string">"&#123;\"orderamount\":&#123;\"$lte\":25000&#125;, \"orderamount\":&#123;\"$gte\":1000&#125;&#125;"</span></span><br><span class="line">&gt; dat &lt;- mongo.find.all(mongo,coll,json)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="How-it-works…-78"><a href="#How-it-works…-78" class="headerlink" title="How it works…"></a>How it works…</h3><p>The mongo_create function creates a mongo session. If no argument is passed, it connects to the localhost at the default port 27017, where mongod is running.</p>
<p>Ensure that R has a valid mongo session using mongo.is.connected(mongo).</p>
<p>The mongo.get.database.collections function lists all the collections in that database.</p>
<p>The mongo.find.all function lists all the rows in that collection. By passing in a valid JSON object, the query results are limited by the search condition specified in the JSON object. If a JSON object is not passed, all rows are returned. R creates a data frame with the returned result.</p>
<h3 id="There’s-more…-46"><a href="#There’s-more…-46" class="headerlink" title="There’s more…"></a>There’s more…</h3><p>The fluidity of the NoSQL environment and the newness of MongoDB mean that the rmongodb package changes frequently. You should update the rmongodb package to get the latest enhancements into your R environment. You should consider validating JSON expressions before using them in code.</p>
<h4 id="Validating-your-JSON"><a href="#Validating-your-JSON" class="headerlink" title="Validating your JSON"></a>Validating your JSON</h4><p>Creating a JSON structure in R can get quite complex due to its special characters. Use the validate() function to ensure that the JSON structure is error-free:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">library</span>(jsonlite)</span><br><span class="line">&gt; json &lt;- <span class="string">"&#123;\"orderamount\":&#123;\"$lte\":25000&#125;, \"orderamount\":&#123;\"$gte\":1500&#125;&#125;"</span></span><br><span class="line">&gt; validate(json)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[R advanced(english edition)]]></title>
      <url>http://yoursite.com/2016/08/06/R-advanced-english/</url>
      <content type="html"><![CDATA[<p>Source on internet. <a href="https://github.com/hadley/adv-r/" target="_blank" rel="external">hadley</a>. <a id="more"></a></p>
<p>[TOC]</p>
<hr>
<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1><p>This is the companion website for “<a href="http://amzn.com/1466586966?tag=devtools-20" target="_blank" rel="external">Advanced R</a>“, a book in Chapman &amp; Hall’s R Series. The book is designed primarily for R users who want to improve their programming skills and understanding of the language.  It should also be useful for programmers coming to R from other languages, as it explains some of R’s quirks and shows how some parts that seem horrible do have a positive side.</p>
<p>(You may also be interested in “<a href="http://r-pkgs.had.co.nz/" target="_blank" rel="external">R Packages</a>“, a similar book teaching you how to make the most of R’s fantastic package system.)</p>
<hr>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>With more than 10 years experience programming in R, I’ve had the luxury of being able to spend a lot of time trying to figure out and understand how the language works. This book is my attempt to pass on what I’ve learned so that you can quickly become an effective R programmer. Reading it will help you avoid the mistakes I’ve made and dead ends I’ve gone down, and will teach you useful tools, techniques, and idioms that can help you to attack many types of problems. In the process, I hope to show that, despite its frustrating quirks, R is, at its heart, an elegant and beautiful language, well tailored for data analysis and statistics.</p>
<p>If you are new to R, you might wonder what makes learning such a quirky language worthwhile. To me, some of the best features are:</p>
<ul>
<li>It’s free, open source, and available on every major platform. As a result, if you do your analysis in R, anyone can easily replicate it.</li>
<li>A massive set of packages for statistical modelling, machine learning, visualisation, and importing and manipulating data. Whatever model or graphic you’re trying to do, chances are that someone has already tried to do it. At a minimum, you can learn from their efforts.</li>
<li>Cutting edge tools. Researchers in statistics and machine learning will often publish an R package to accompany their articles. This means immediate access to the very latest statistical techniques and implementations.</li>
<li>Deep-seated language support for data analysis. This includes features likes missing values, data frames, and subsetting.</li>
<li>A fantastic community. It is easy to get help from experts on the <a href="https://stat.ethz.ch/mailman/listinfo/r-help" target="_blank" rel="external">R-help mailing list</a>, <a href="http://stackoverflow.com/questions/tagged/r" target="_blank" rel="external">stackoverflow</a>, or subject-specific mailing lists like <a href="https://stat.ethz.ch/mailman/listinfo/r-sig-mixed-models" target="_blank" rel="external">R-SIG-mixed-models</a> or <a href="https://groups.google.com/forum/#!forum/ggplot2" target="_blank" rel="external">ggplot2</a>. You can also connect with other R learners via <a href="https://twitter.com/search?q=%23rstats" target="_blank" rel="external">twitter</a>, <a href="http://www.linkedin.com/groups/R-Project-Statistical-Computing-77616" target="_blank" rel="external">linkedin</a>, and through many local <a href="http://blog.revolutionanalytics.com/local-r-groups.html" target="_blank" rel="external">user groups</a>.</li>
<li>Powerful tools for communicating your results. R packages make it easy to produce html or pdf <a href="http://yihui.name/knitr/" target="_blank" rel="external">reports</a>, or create <a href="http://www.rstudio.com/shiny/" target="_blank" rel="external">interactive websites</a>.</li>
<li>A strong foundation in functional programming. The ideas of functional programming are well suited to solving many of the challenges of data analysis. R provides a powerful and flexible toolkit which allows you to write concise yet descriptive code.</li>
<li>An <a href="http://www.rstudio.com/ide/" target="_blank" rel="external">IDE</a> tailored to the needs of interactive data analysis and statistical programming.</li>
<li>Powerful metaprogramming facilities. R is not just a programming language, it is also an environment for interactive data analysis. Its metaprogramming capabilities allow you to write magically succinct and concise functions and provide an excellent environment for designing domain-specific languages.</li>
<li>Designed to connect to high-performance programming languages like C, Fortran, and C++.</li>
</ul>
<p>Of course, R is not perfect. R’s biggest challenge is that most R users are not programmers. This means that:</p>
<ul>
<li>Much of the R code you’ll see in the wild is written in haste to solve a pressing problem. As a result, code is not very elegant, fast, or easy to understand. Most users do not revise their code to address these shortcomings.</li>
<li>Compared to other programming languages, the R community tends to be more focussed on results instead of processes. Knowledge of software engineering   best practices is patchy: for instance, not enough R programmers use source<br>code control or automated testing.</li>
<li>Metaprogramming is a double-edged sword. Too many R functions use   tricks to reduce the amount of typing at the cost of making code that   is hard to understand and that can fail in unexpected ways.</li>
<li>Inconsistency is rife across contributed packages, even within base R.  You are confronted with over 20 years of evolution every time you use R.  Learning R can be tough because there are many special cases to remember.</li>
<li>R is not a particularly fast programming language, and poorly written R code  can be terribly slow. R is also a profligate user of memory.</li>
</ul>
<p>Personally, I think these challenges create a great opportunity for experienced programmers to have a profound positive impact on R and the R community. R users do care about writing high quality code, particularly for reproducible research, but they don’t yet have the skills to do so. I hope this book will not only help more R users to become R programmers but also encourage programmers from other languages to contribute to R.</p>
<h2 id="Who-should-read-this-book"><a href="#Who-should-read-this-book" class="headerlink" title="Who should read this book"></a><a href="id=&quot;who-should-read&quot;">Who should read this book</a></h2><p>This book is aimed at two complementary audiences:</p>
<ul>
<li><p>Intermediate R programmers who want to dive deeper into R and learn new<br>strategies for solving diverse problems.</p>
</li>
<li><p>Programmers from other languages who are learning R and want to understand<br>why R works the way it does.</p>
</li>
</ul>
<p>To get the most out of this book, you’ll need to have written a decent amount of code in R or another programming language. You might not know all the details, but you should be familiar with how functions work in R and although you may currently struggle to use them effectively, you should be familiar with the apply family (like <code>apply()</code> and <code>lapply()</code>).</p>
<h2 id="What-you-will-get-out-of-this-book"><a href="#What-you-will-get-out-of-this-book" class="headerlink" title="What you will get out of this book"></a><a href="id=&quot;what-you-will-get&quot;">What you will get out of this book</a></h2><p>This book describes the skills I think an advanced R programmer should have: the ability to produce quality code that can be used in a wide variety of circumstances.</p>
<p>After reading this book, you will:</p>
<ul>
<li>Be familiar with the fundamentals of R. You will understand complex data types  and the best ways to perform operations on them. You will have a deep  understanding of how functions work, and be able to recognise and use the four<br>object systems in R.</li>
<li>Understand what functional programming means, and why it is a useful tool for  data analysis. You’ll be able to quickly learn how to use existing tools, and  have the knowledge to create your own functional tools when needed.</li>
<li>Appreciate the double-edged sword of metaprogramming. You’ll be able to  create functions that use non-standard evaluation in a principled way,  saving typing and creating elegant code to express important operations.  You’ll also understand the dangers of metaprogramming and why you should be  careful about its use.</li>
<li>Have a good intuition for which operations in R are slow or use a lot of  memory. You’ll know how to use profiling to pinpoint performance  bottlenecks, and you’ll know enough C++ to convert slow R functions to<br>fast C++ equivalents.</li>
<li>Be comfortable reading and understanding the majority of R code.  You’ll recognise common idioms (even if you wouldn’t use them yourself)  and be able to critique others’ code.</li>
</ul>
<h2 id="Meta-techniques"><a href="#Meta-techniques" class="headerlink" title="Meta-techniques"></a><a href="id=&quot;meta-techniques&quot;">Meta-techniques</a></h2><p>There are two meta-techniques that are tremendously helpful for improving your skills as an R programmer: reading source code and adopting a scientific mindset.</p>
<p>Reading source code is important because it will help you write better code. A great place to start developing this skill is to look at the source code of the functions and packages you use most often. You’ll find things that are worth emulating in your own code and you’ll develop a sense of taste for what makes good R code. You will also see things that you don’t like, either because its virtues are not obvious or it offends your sensibilities. Such code is nonetheless valuable, because it helps make concrete your opinions on good and bad code.</p>
<p>A scientific mindset is extremely helpful when learning R. If you don’t understand how something works, develop a hypothesis, design some experiments, run them, and record the results. This exercise is extremely useful since if you can’t figure something out and need to get help, you can easily show others what you tried. Also, when you learn the right answer, you’ll be mentally prepared to update your world view. When I clearly describe a problem to someone else (the art of creating a <a href="http://stackoverflow.com/questions/5963269" target="_blank" rel="external">reproducible example</a>), I often figure out the solution myself.</p>
<h2 id="Recommended-reading"><a href="#Recommended-reading" class="headerlink" title="Recommended reading"></a><a href="id=&quot;recommended-reading&quot;">Recommended reading</a></h2><p>R is still a relatively young language, and the resources to help you understand it are still maturing. In my personal journey to understand R, I’ve found it particularly helpful to use resources from other programming languages. R has aspects of both functional and object-oriented (OO) programming languages. Learning how these concepts are expressed in R will help you leverage your existing knowledge of other programming languages, and will help you identify areas where you can improve.</p>
<p>To understand why R’s object systems work the way they do, I found <a href="http://mitpress.mit.edu/sicp/full-text/book/book.html" target="_blank" rel="external">The Structure and Interpretation of Computer Programs</a> (SICP) by Harold Abelson and Gerald Jay Sussman, particularly helpful. It’s a concise but deep book. After reading it, I felt for the first time that I could actually design my own object-oriented system. The book was my first introduction to the generic function style of OO common in R. It helped me understand its strengths and weaknesses. SICP also talks a lot about functional programming, and how to create simple functions which become powerful when combined.</p>
<p>To understand the trade-offs that R has made compared to other programming languages, I found <a href="http://amzn.com/0262220695?tag=devtools-20" target="_blank" rel="external">Concepts, Techniques and Models of Computer Programming</a> by Peter van Roy and Sef Haridi extremely helpful. It helped me understand that R’s copy-on-modify semantics make it substantially easier to reason about code, and that while its current implementation is not particularly efficient, it is a solvable problem.</p>
<p>If you want to learn to be a better programmer, there’s no place better to turn than <a href="http://amzn.com/020161622X?tag=devtools-20" target="_blank" rel="external"><em>The Pragmatic Programmer</em></a> by Andrew Hunt and David Thomas. This book is language agnostic, and provides great advice for how to be a better programmer.</p>
<h2 id="Getting-help"><a href="#Getting-help" class="headerlink" title="Getting help"></a><a href="id=&quot;getting-help&quot;">Getting help</a></h2><p>Currently, there are two main venues to get help when you’re stuck and can’t figure out what’s causing the problem: <a href="http://stackoverflow.com" target="_blank" rel="external">stackoverflow</a> and the R-help mailing list. You can get fantastic help in both venues, but they do have their own cultures and expectations. It’s usually a good idea to spend a little time lurking, learning about community expectations, before you put up your first post.</p>
<p>Some good general advice:</p>
<ul>
<li>Make sure you have the latest version of R and of the package (or packages)  you are having problems with. It may be that your problem is the result of  a recently fixed bug.</li>
<li>Spend some time creating a  <a href="http://stackoverflow.com/questions/5963269" target="_blank" rel="external">reproducible example</a>. This  is often a useful process in its own right, because in the course of making  the problem reproducible you often figure out what’s causing the problem.</li>
<li>Look for related problems before posting. If someone has already asked  your question and it has been answered, it’s much faster for everyone if you  use the existing answer.</li>
</ul>
<h2 id="Acknowledgments"><a href="#Acknowledgments" class="headerlink" title="Acknowledgments"></a><a href="id=&quot;intro-ack&quot;">Acknowledgments</a></h2><p>I would like to thank the tireless contributors to R-help and, more recently, <a href="http://stackoverflow.com/questions/tagged/r" target="_blank" rel="external">stackoverflow</a>. There are too many to name individually, but I’d particularly like to thank Luke Tierney, John Chambers, Dirk Eddelbuettel, JJ Allaire and Brian Ripley for generously giving their time and correcting my countless misunderstandings.</p>
<p>This book was <a href="https://github.com/hadley/adv-r/" target="_blank" rel="external">written in the open</a>, and chapters were advertised on <a href="https://twitter.com/hadleywickham" target="_blank" rel="external">twitter</a> when complete. It is truly a community effort: many people read drafts, fixed typos, suggested improvements, and contributed content. Without those contributors, the book wouldn’t be nearly as good as it is, and I’m deeply grateful for their help. Special thanks go to Peter Li, who read the book from cover-to-cover and provided many fixes. Other outstanding contributors were Aaron Schumacher, @crtahlin, Lingbing Feng, @juancentro, and @johnbaums.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#contribs &lt;- system("git --no-pager shortlog -ns &gt; contribs.txt", intern = T)</span></span><br><span class="line">contribs &lt;- read.delim(<span class="string">"contribs.txt"</span>, header = <span class="literal">FALSE</span>,</span><br><span class="line">  stringsAsFactors = <span class="literal">FALSE</span>)[-<span class="number">1</span>, ]</span><br><span class="line">names(contribs) &lt;- c(<span class="string">"n"</span>, <span class="string">"name"</span>)</span><br><span class="line"></span><br><span class="line">contribs &lt;- contribs[order(contribs$name), ]</span><br><span class="line">contribs$uname &lt;- ifelse(!grepl(<span class="string">" "</span>, contribs$name),</span><br><span class="line">  paste0(<span class="string">"@"</span>, contribs$name), contribs$name)</span><br><span class="line"></span><br><span class="line">cat(<span class="string">"Thanks go to all contributers in alphabetical order: "</span>)</span><br><span class="line">cat(paste0(contribs$uname, collapse = <span class="string">", "</span>))</span><br><span class="line">cat(<span class="string">".\n"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Conventions"><a href="#Conventions" class="headerlink" title="Conventions"></a><a href="id=&quot;conventions&quot;">Conventions</a></h2><p>Throughout this book I use <code>f()</code> to refer to functions, <code>g</code> to refer to variables and function parameters, and <code>h/</code> to paths.</p>
<p>Larger code blocks intermingle input and output. Output is commented so that if you have an electronic version of the book, e.g., <a href="http://adv-r.had.co.nz" target="_blank" rel="external">http://adv-r.had.co.nz</a>, you can easily copy and paste examples into R. Output comments look like <code>#&gt;</code> to distinguish them from regular comments.</p>
<h2 id="Colophon"><a href="#Colophon" class="headerlink" title="Colophon"></a><a href="id=&quot;colophon&quot;">Colophon</a></h2><p>This book was written in <a href="http://rmarkdown.rstudio.com/" target="_blank" rel="external">Rmarkdown</a> inside <a href="http://www.rstudio.com/ide/" target="_blank" rel="external">Rstudio</a>. <a href="http://yihui.name/knitr/" target="_blank" rel="external">knitr</a> and <a href="http://johnmacfarlane.net/pandoc/" target="_blank" rel="external">pandoc</a> converted the raw Rmarkdown to html and pdf. The <a href="http://adv-r.had.co.nz" target="_blank" rel="external">website</a> was made with <a href="http://jekyllrb.com/" target="_blank" rel="external">jekyll</a>, styled with <a href="http://getbootstrap.com/" target="_blank" rel="external">bootstrap</a>, and automatically published to Amazon’s <a href="http://aws.amazon.com/s3/" target="_blank" rel="external">S3</a> by <a href="https://travis-ci.org/" target="_blank" rel="external">travis-ci</a>. The complete source is available from <a href="https://github.com/hadley/adv-r" target="_blank" rel="external">github</a>.</p>
<p>Code is set in <a href="http://levien.com/type/myfonts/inconsolata.html" target="_blank" rel="external">inconsolata</a>.</p>
<hr>
<h1 id="Data-structures"><a href="#Data-structures" class="headerlink" title="Data structures"></a><a href="id=&quot;data-structures&quot;">Data structures</a></h1><p>This chapter summarises the most important data structures in base R. You’ve probably used many (if not all) of them before, but you may not have thought deeply about how they are interrelated. In this brief overview, I won’t discuss individual types in depth. Instead, I’ll show you how they fit together as a whole. If you need more details, you can find them in R’s documentation.</p>
<p>R’s base data structures can be organised by their dimensionality (1d, 2d, or nd) and whether they’re homogeneous (all contents must be of the same type) or heterogeneous (the contents can be of different types). This gives rise to the five data types most often used in data analysis:</p>
<table>
<thead>
<tr>
<th></th>
<th>Homogeneous</th>
<th>Heterogeneous</th>
</tr>
</thead>
<tbody>
<tr>
<td>1d</td>
<td>Atomic vector</td>
<td>List</td>
</tr>
<tr>
<td>2d</td>
<td>Matrix</td>
<td>Data frame</td>
</tr>
<tr>
<td>nd</td>
<td>Array</td>
</tr>
</tbody>
</table>
<p>Almost all other objects are built upon these foundations. In <a href="#oo">the OO field guide</a> you’ll see how more complicated objects are built of these simple pieces. Note that R has no 0-dimensional, or scalar types. Individual numbers or strings, which you might think would be scalars, are actually vectors of length one.</p>
<p>Given an object, the best way to understand what data structures it’s composed of is to use <code>str()</code>. <code>str()</code> is short for structure and it gives a compact, human readable description of any R data structure.</p>
<h5 id="Quiz"><a href="#Quiz" class="headerlink" title="Quiz"></a>Quiz</h5><p>Take this short quiz to determine if you need to read this chapter. If the answers quickly come to mind, you can comfortably skip this chapter. You can check your answers in <a href="#data-structure-answers">answers</a>.</p>
<ol>
<li>What are the three properties of a vector, other than its contents?</li>
<li>What are the four common types of atomic vectors? What are the two   rare types?</li>
<li>What are attributes? How do you get them and set them?</li>
<li>How is a list different from an atomic vector? How is a matrix different   from a data frame?</li>
<li>Can you have a list that is a matrix? Can a data frame have a column   that is a matrix?</li>
</ol>
<h5 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#vectors">Vectors</a> introduces you to atomic vectors and lists, R’s 1d  data structures.</li>
<li><a href="#attributes">Attributes</a> takes a small detour to discuss attributes,  R’s flexible metadata specification. Here you’ll learn about factors,  an important data structure created by setting attributes of an atomic  vector.</li>
<li><a href="#matrices-and-arrays">Matrices and arrays</a> introduces matrices and arrays,  data structures for storing 2d and higher dimensional data.</li>
<li><a href="#data-frames">Data frames</a> teaches you about the data frame, the most  important data structure for storing data in R. Data frames combine  the behaviour of lists and matrices to make a structure ideally suited for  the needs of statistical data.</li>
</ul>
<h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a><a href="id=&quot;vectors&quot;">Vectors</a></h2><p>The basic data structure in R is the vector. Vectors come in two flavours: atomic vectors and lists. They have three common properties:</p>
<ul>
<li>Type, <code>typeof()</code>, what it is.</li>
<li>Length, <code>length()</code>, how many elements it contains.</li>
<li>Attributes, <code>attributes()</code>, additional arbitrary metadata.</li>
</ul>
<p>They differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.</p>
<p>NB: <code>is.vector()</code> does not test if an object is a vector. Instead it returns <code>TRUE</code> only if the object is a vector with no attributes apart from names. Use <code>is.atomic(x) || is.list(x)</code> to test if an object is actually a vector.</p>
<h3 id="Atomic-vectors"><a href="#Atomic-vectors" class="headerlink" title="Atomic vectors"></a>Atomic vectors</h3><p>There are four common types of atomic vectors that I’ll discuss in detail: logical, integer, double (often called numeric), and character. There are two rare types that I will not discuss further: complex and raw.</p>
<p>Atomic vectors are usually created with <code>c()</code>, short for combine:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbl_var &lt;- c(1, 2.5, 4.5)</span><br><span class="line"># With the L suffix, you get an integer rather than a double</span><br><span class="line">int_var &lt;- c(1L, 6L, 10L)</span><br><span class="line"># Use TRUE and FALSE (or T and F) to create logical vectors</span><br><span class="line">log_var &lt;- c(TRUE, FALSE, T, F)</span><br><span class="line">chr_var &lt;- c(&quot;these are&quot;, &quot;some strings&quot;)</span><br></pre></td></tr></table></figure>
<p>Atomic vectors are always flat, even if you nest <code>c()</code>‘s:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c(1, c(2, c(3, 4)))</span><br><span class="line"># the same as</span><br><span class="line">c(1, 2, 3, 4)</span><br></pre></td></tr></table></figure>
<p>Missing values are specified with <code>NA</code>, which is a logical vector of length 1. <code>NA</code> will always be coerced to the correct type if used inside <code>c()</code>, or you can create <code>NA</code>s of a specific type with <code>NA_real_</code> (a double vector), <code>NA_integer_</code> and <code>NA_character_</code>.</p>
<h4 id="Types-and-tests"><a href="#Types-and-tests" class="headerlink" title="Types and tests"></a>Types and tests</h4><p>Given a vector, you can determine its type with <code>typeof()</code>, or check if it’s a specific type with an “is” function: <code>is.character()</code>, <code>is.double()</code>, <code>is.integer()</code>, <code>is.logical()</code>, or, more generally, <code>is.atomic()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int_var &lt;- c(1L, 6L, 10L)</span><br><span class="line">typeof(int_var)</span><br><span class="line">is.integer(int_var)</span><br><span class="line">is.atomic(int_var)</span><br><span class="line"></span><br><span class="line">dbl_var &lt;- c(1, 2.5, 4.5)</span><br><span class="line">typeof(dbl_var)</span><br><span class="line">is.double(dbl_var)</span><br><span class="line">is.atomic(dbl_var)</span><br></pre></td></tr></table></figure>
<p>NB: <code>is.numeric()</code> is a general test for the “numberliness” of a vector and returns <code>TRUE</code> for both integer and double vectors. It is not a specific test for double vectors, which are often called numeric.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is.numeric(int_var)</span><br><span class="line">is.numeric(dbl_var)</span><br></pre></td></tr></table></figure>
<h4 id="Coercion"><a href="#Coercion" class="headerlink" title="Coercion"></a>Coercion</h4><p>All elements of an atomic vector must be the same type, so when you attempt to combine different types they will be <strong>coerced</strong> to the most flexible type. Types from least to most flexible are: logical, integer, double, and character.</p>
<p>For example, combining a character and an integer yields a character:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(c(&quot;a&quot;, 1))</span><br></pre></td></tr></table></figure>
<p>When a logical vector is coerced to an integer or double, <code>TRUE</code> becomes 1 and <code>FALSE</code> becomes 0. This is very useful in conjunction with <code>sum()</code> and <code>mean()</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(FALSE, FALSE, TRUE)</span><br><span class="line">as.numeric(x)</span><br><span class="line"></span><br><span class="line"># Total number of TRUEs</span><br><span class="line">sum(x)</span><br><span class="line"></span><br><span class="line"># Proportion that are TRUE</span><br><span class="line">mean(x)</span><br></pre></td></tr></table></figure>
<p>Coercion often happens automatically. Most mathematical functions (<code>+</code>, <code>log</code>, <code>abs</code>, etc.) will coerce to a double or integer, and most logical operations (<code>&amp;</code>, <code>|</code>, <code>any</code>, etc) will coerce to a logical. You will usually get a warning message if the coercion might lose information. If confusion is likely, explicitly coerce with <code>as.character()</code>, <code>as.double()</code>, <code>as.integer()</code>, or <code>as.logical()</code>.</p>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Lists are different from atomic vectors because their elements can be of any type, including lists. You construct lists by using <code>list()</code> instead of <code>c()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(1:3, &quot;a&quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9))</span><br><span class="line">str(x)</span><br></pre></td></tr></table></figure>
<p>Lists are sometimes called <strong>recursive</strong> vectors, because a list can contain other lists. This makes them fundamentally different from atomic vectors.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(list(list(list())))</span><br><span class="line">str(x)</span><br><span class="line">is.recursive(x)</span><br></pre></td></tr></table></figure>
<p><code>c()</code> will combine several lists into one. If given a combination of atomic vectors and lists, <code>c()</code> will coerce the vectors to lists before combining them. Compare the results of <code>list()</code> and <code>c()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(list(1, 2), c(3, 4))</span><br><span class="line">y &lt;- c(list(1, 2), c(3, 4))</span><br><span class="line">str(x)</span><br><span class="line">str(y)</span><br></pre></td></tr></table></figure>
<p>The <code>typeof()</code> a list is <code>list</code>. You can test for a list with <code>is.list()</code> and coerce to a list with <code>as.list()</code>. You can turn a list into an atomic vector with <code>unlist()</code>. If the elements of a list have different types, <code>unlist()</code> uses the same coercion rules as <code>c()</code>.</p>
<p>Lists are used to build up many of the more complicated data structures in R. For example, both data frames (described in <a href="#data-frames">data frames</a>) and linear models objects (as produced by <code>lm()</code>) are lists:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">is.list(mtcars)</span><br><span class="line"></span><br><span class="line">mod &lt;- lm(mpg ~ wt, data = mtcars)</span><br><span class="line">is.list(mod)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises"><a href="#Exercises" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What are the six types of atomic vector? How does a list differ from an   atomic vector?</li>
<li>What makes <code>is.vector()</code> and <code>is.numeric()</code> fundamentally different to   <code>is.list()</code> and <code>is.character()</code>?</li>
<li><p>Test your knowledge of vector coercion rules by predicting the output of   the following uses of <code>c()</code>:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c(1, FALSE)</span><br><span class="line">c(&quot;a&quot;, 1)</span><br><span class="line">c(list(1), &quot;a&quot;)</span><br><span class="line">c(TRUE, 1L)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Why do you need to use <code>unlist()</code> to convert a list to an    atomic vector? Why doesn’t <code>as.vector()</code> work?</p>
</li>
<li>Why is <code>1 == &quot;1&quot;</code> true? Why is <code>-1 &lt; FALSE</code> true? Why is <code>&quot;one&quot; &lt; 2</code> false?</li>
<li>Why is the default missing value, <code>NA</code>, a logical vector? What’s special   about logical vectors? (Hint: think about <code>c(FALSE, NA_character_)</code>.)</li>
</ol>
<h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a><a href="id=&quot;attributes&quot;">Attributes</a></h2><p>All objects can have arbitrary additional attributes, used to store metadata about the object. Attributes can be thought of as a named list (with unique names). Attributes can be accessed individually with <code>attr()</code> or all at once (as a list) with <code>attributes()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- 1:10</span><br><span class="line">attr(y, &quot;my_attribute&quot;) &lt;- &quot;This is a vector&quot;</span><br><span class="line">attr(y, &quot;my_attribute&quot;)</span><br><span class="line">str(attributes(y))</span><br></pre></td></tr></table></figure>
<p>The <code>structure()</code> function returns a new object with modified attributes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">structure(1:10, my_attribute = &quot;This is a vector&quot;)</span><br></pre></td></tr></table></figure>
<p>By default, most attributes are lost when modifying a vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attributes(y[1])</span><br><span class="line">attributes(sum(y))</span><br></pre></td></tr></table></figure>
<p>The only attributes not lost are the three most important:</p>
<ul>
<li>Names, a character vector giving each element a name, described in  <a href="#vector-names">names</a>.</li>
<li>Dimensions, used to turn vectors into matrices and arrays,  described in <a href="#matrices-and-arrays">matrices and arrays</a>.</li>
<li>Class, used to implement the S3 object system, described in <a href="#s3">S3</a>.</li>
</ul>
<p>Each of these attributes has a specific accessor function to get and set values. When working with these attributes, use <code>names(x)</code>, <code>dim(x)</code>, and <code>class(x)</code>, not <code>attr(x, &quot;names&quot;)</code>, <code>attr(x, &quot;dim&quot;)</code>, and <code>attr(x, &quot;class&quot;)</code>.</p>
<h4 id="Names"><a href="#Names" class="headerlink" title="Names"></a><a href="id=&quot;vector-names&quot;">Names</a></h4><p>You can name a vector in three ways:</p>
<ul>
<li>When creating it: <code>x &lt;- c(a = 1, b = 2, c = 3)</code>.</li>
<li>By modifying an existing vector in place:  <code>x &lt;- 1:3; names(x) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</code>.</li>
<li>By creating a modified copy of a vector:  <code>x &lt;- setNames(1:3, c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</code>.</li>
</ul>
<p>Names don’t have to be unique. However, character subsetting, described in <a href="#lookup-tables">subsetting</a>, is the most important reason to use names and it is most useful when the names are unique.</p>
<p>Not all elements of a vector need to have a name. If some names are missing, <code>names()</code> will return an empty string for those elements. If all names are missing, <code>names()</code> will return <code>NULL</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- c(a = 1, 2, 3)</span><br><span class="line">names(y)</span><br><span class="line"></span><br><span class="line">z &lt;- c(1, 2, 3)</span><br><span class="line">names(z)</span><br></pre></td></tr></table></figure>
<p>You can create a new vector without names using <code>unname(x)</code>, or remove names in place with <code>names(x) &lt;- NULL</code>.</p>
<h3 id="Factors"><a href="#Factors" class="headerlink" title="Factors"></a>Factors</h3><p>One important use of attributes is to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data. Factors are built on top of integer vectors using two attributes: the <code>class()</code>, “factor”, which makes them behave differently from regular integer vectors, and the <code>levels()</code>, which defines the set of allowed values.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- factor(c(&quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;a&quot;))</span><br><span class="line">x</span><br><span class="line">class(x)</span><br><span class="line">levels(x)</span><br><span class="line"></span><br><span class="line"># You can&apos;t use values that are not in the levels</span><br><span class="line">x[2] &lt;- &quot;c&quot;</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"># NB: you can&apos;t combine factors</span><br><span class="line">c(factor(&quot;a&quot;), factor(&quot;b&quot;))</span><br></pre></td></tr></table></figure>
<p>Factors are useful when you know the possible values a variable may take, even if you don’t see all values in a given dataset. Using a factor instead of a character vector makes it obvious when some groups contain no observations:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sex_char &lt;- c(&quot;m&quot;, &quot;m&quot;, &quot;m&quot;)</span><br><span class="line">sex_factor &lt;- factor(sex_char, levels = c(&quot;m&quot;, &quot;f&quot;))</span><br><span class="line"></span><br><span class="line">table(sex_char)</span><br><span class="line">table(sex_factor)</span><br></pre></td></tr></table></figure>
<p>Sometimes when a data frame is read directly from a file, a column you’d thought would produce a numeric vector instead produces a factor. This is caused by a non-numeric value in the column, often a missing value encoded in a special way like <code>.</code> or <code>-</code>. To remedy the situation, coerce the vector from a factor to a character vector, and then from a character to a double vector. (Be sure to check for missing values after this process.) Of course, a much better plan is to discover what caused the problem in the first place and fix that; using the <code>na.strings</code> argument to <code>read.csv()</code> is often a good place to start.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Reading in &quot;text&quot; instead of from a file here:</span><br><span class="line">z &lt;- read.csv(text = &quot;value\n12\n1\n.\n9&quot;)</span><br><span class="line">typeof(z$value)</span><br><span class="line">as.double(z$value)</span><br><span class="line"># Oops, that&apos;s not right: 3 2 1 4 are the levels of a factor,</span><br><span class="line"># not the values we read in!</span><br><span class="line">class(z$value)</span><br><span class="line"># We can fix it now:</span><br><span class="line">as.double(as.character(z$value))</span><br><span class="line"># Or change how we read it in:</span><br><span class="line">z &lt;- read.csv(text = &quot;value\n12\n1\n.\n9&quot;, na.strings=&quot;.&quot;)</span><br><span class="line">typeof(z$value)</span><br><span class="line">class(z$value)</span><br><span class="line">z$value</span><br><span class="line"># Perfect! :)</span><br></pre></td></tr></table></figure>
<p>Unfortunately, most data loading functions in R automatically convert character vectors to factors. This is suboptimal, because there’s no way for those functions to know the set of all possible levels or their optimal order. Instead, use the argument <code>stringsAsFactors = FALSE</code> to suppress this behaviour, and then manually convert character vectors to factors using your knowledge of the data. A global option, <code>options(stringsAsFactors = FALSE)</code>, is available to control this behaviour, but I don’t recommend using it. Changing a global option may have unexpected consequences when combined with other code (either from packages, or code that you’re <code>source()</code>ing), and global options make code harder to understand because they increase the number of lines you need to read to understand how a single line of code will behave.</p>
<p>While factors look (and often behave) like character vectors, they are actually integers. Be careful when treating them like strings. Some string methods (like <code>gsub()</code> and <code>grepl()</code>) will coerce factors to strings, while others (like <code>nchar()</code>) will throw an error, and still others (like <code>c()</code>) will use the underlying integer values. For this reason, it’s usually best to explicitly convert factors to character vectors if you need string-like behaviour. In early versions of R, there was a memory advantage to using factors instead of character vectors, but this is no longer the case.</p>
<h3 id="Exercises-1"><a href="#Exercises-1" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>An early draft used this code to illustrate <code>structure()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">structure(1:5, comment = &quot;my attribute&quot;)</span><br></pre></td></tr></table></figure>
<p>But when you print that object you don’t see the comment attribute.<br>Why? Is the attribute missing, or is there something else special about<br>it? (Hint: try using help.)</p>
</li>
<li><p>What happens to a factor when you modify its levels?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- factor(letters)</span><br><span class="line">levels(f1) &lt;- rev(levels(f1))</span><br></pre></td></tr></table></figure>
</li>
<li><p>What does this code do? How do <code>f2</code> and <code>f3</code> differ from <code>f1</code>?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f2 &lt;- rev(factor(letters))</span><br><span class="line"></span><br><span class="line">f3 &lt;- factor(letters, levels = rev(letters))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Matrices-and-arrays"><a href="#Matrices-and-arrays" class="headerlink" title="Matrices and arrays"></a><a href="id=&quot;matrices-and-arrays&quot;">Matrices and arrays</a></h2><p>Adding a <code>dim()</code> attribute to an atomic vector allows it to behave like a multi-dimensional <strong>array</strong>. A special case of the array is the <strong>matrix</strong>, which has two dimensions. Matrices are used commonly as part of the mathematical machinery of statistics. Arrays are much rarer, but worth being aware of.</p>
<p>Matrices and arrays are created with <code>matrix()</code> and <code>array()</code>, or by using the assignment form of <code>dim()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Two scalar arguments to specify rows and columns</span><br><span class="line">a &lt;- matrix(1:6, ncol = 3, nrow = 2)</span><br><span class="line"># One vector argument to describe all dimensions</span><br><span class="line">b &lt;- array(1:12, c(2, 3, 2))</span><br><span class="line"></span><br><span class="line"># You can also modify an object in place by setting dim()</span><br><span class="line">c &lt;- 1:6</span><br><span class="line">dim(c) &lt;- c(3, 2)</span><br><span class="line">c</span><br><span class="line">dim(c) &lt;- c(2, 3)</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<p><code>length()</code> and <code>names()</code> have high-dimensional generalisations:</p>
<ul>
<li><code>length()</code> generalises to <code>nrow()</code> and <code>ncol()</code> for matrices, and <code>dim()</code>  for arrays.</li>
<li><code>names()</code> generalises to <code>rownames()</code> and <code>colnames()</code> for matrices, and  <code>dimnames()</code>, a list of character vectors, for arrays.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">length(a)</span><br><span class="line">nrow(a)</span><br><span class="line">ncol(a)</span><br><span class="line">rownames(a) &lt;- c(&quot;A&quot;, &quot;B&quot;)</span><br><span class="line">colnames(a) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line">length(b)</span><br><span class="line">dim(b)</span><br><span class="line">dimnames(b) &lt;- list(c(&quot;one&quot;, &quot;two&quot;), c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), c(&quot;A&quot;, &quot;B&quot;))</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<p><code>c()</code> generalises to <code>cbind()</code> and <code>rbind()</code> for matrices, and to <code>abind()</code> (provided by the <code>abind</code> package) for arrays. You can transpose a matrix with <code>t()</code>; the generalised equivalent for arrays is <code>aperm()</code>.</p>
<p>You can test if an object is a matrix or array using <code>is.matrix()</code> and <code>is.array()</code>, or by looking at the length of the <code>dim()</code>. <code>as.matrix()</code> and <code>as.array()</code> make it easy to turn an existing vector into a matrix or array.</p>
<p>Vectors are not the only 1-dimensional data structure. You can have matrices with a single row or single column, or arrays with a single dimension. They may print similarly, but will behave differently. The differences aren’t too important, but it’s useful to know they exist in case you get strange output from a function (<code>tapply()</code> is a frequent offender). As always, use <code>str()</code> to reveal the differences.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str(1:3)                   # 1d vector</span><br><span class="line">str(matrix(1:3, ncol = 1)) # column vector</span><br><span class="line">str(matrix(1:3, nrow = 1)) # row vector</span><br><span class="line">str(array(1:3, 3))         # &quot;array&quot; vector</span><br></pre></td></tr></table></figure>
<p>While atomic vectors are most commonly turned into matrices, the dimension attribute can also be set on lists to make list-matrices or list-arrays:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l &lt;- list(1:3, &quot;a&quot;, TRUE, 1.0)</span><br><span class="line">dim(l) &lt;- c(2, 2)</span><br><span class="line">l</span><br></pre></td></tr></table></figure>
<p>These are relatively esoteric data structures, but can be useful if you want to arrange objects into a grid-like structure. For example, if you’re running models on a spatio-temporal grid, it might be natural to preserve the grid structure by storing the models in a 3d array.</p>
<h3 id="Exercises-2"><a href="#Exercises-2" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What does <code>dim()</code> return when applied to a vector?</li>
<li>If <code>is.matrix(x)</code> is <code>TRUE</code>, what will <code>is.array(x)</code> return?</li>
<li><p>How would you describe the following three objects? What makes them    different to <code>1:5</code>?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x1 &lt;- array(1:5, c(1, 1, 5))</span><br><span class="line">x2 &lt;- array(1:5, c(1, 5, 1))</span><br><span class="line">x3 &lt;- array(1:5, c(5, 1, 1))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Data-frames"><a href="#Data-frames" class="headerlink" title="Data frames"></a><a href="id=&quot;data-frames&quot;">Data frames</a></h2><p>A data frame is the most common way of storing data in R, and if <a href="http://vita.had.co.nz/papers/tidy-data.pdf" target="_blank" rel="external">used systematically</a> makes data analysis easier. Under the hood, a data frame is a list of equal-length vectors. This makes it a 2-dimensional structure, so it shares properties of both the matrix and the list.  This means that a data frame has <code>names()</code>, <code>colnames()</code>, and <code>rownames()</code>, although <code>names()</code> and <code>colnames()</code> are the same thing. The <code>length()</code> of a data frame is the length of the underlying list and so is the same as <code>ncol()</code>; <code>nrow()</code> gives the number of rows.</p>
<p>As described in <a href="#subsetting">subsetting</a>, you can subset a data frame like a 1d structure (where it behaves like a list), or a 2d structure (where it behaves like a matrix).</p>
<h3 id="Creation"><a href="#Creation" class="headerlink" title="Creation"></a>Creation</h3><p>You create a data frame using <code>data.frame()</code>, which takes named vectors as input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</span><br><span class="line">str(df)</span><br></pre></td></tr></table></figure>
<p>Beware <code>data.frame()</code>‘s default behaviour which turns strings into factors. Use <code>stringAsFactors = FALSE</code> to suppress this behaviour:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(</span><br><span class="line">  x = 1:3,</span><br><span class="line">  y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;),</span><br><span class="line">  stringsAsFactors = FALSE)</span><br><span class="line">str(df)</span><br></pre></td></tr></table></figure>
<h3 id="Testing-and-coercion"><a href="#Testing-and-coercion" class="headerlink" title="Testing and coercion"></a>Testing and coercion</h3><p>Because a <code>data.frame</code> is an S3 class, its type reflects the underlying vector used to build it: the list. To check if an object is a data frame, use <code>class()</code> or test explicitly with <code>is.data.frame()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">typeof(df)</span><br><span class="line">class(df)</span><br><span class="line">is.data.frame(df)</span><br></pre></td></tr></table></figure>
<p>You can coerce an object to a data frame with <code>as.data.frame()</code>:</p>
<ul>
<li>A vector will create a one-column data frame.</li>
<li>A list will create one column for each element; it’s an error if they’re  not all the same length.</li>
<li>A matrix will create a data frame with the same number of columns and rows as the matrix.</li>
</ul>
<h3 id="Combining-data-frames"><a href="#Combining-data-frames" class="headerlink" title="Combining data frames"></a>Combining data frames</h3><p>You can combine data frames using <code>cbind()</code> and <code>rbind()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cbind(df, data.frame(z = 3:1))</span><br><span class="line">rbind(df, data.frame(x = 10, y = &quot;z&quot;))</span><br></pre></td></tr></table></figure>
<p>When combining column-wise, the number of rows must match, but row names are ignored. When combining row-wise, both the number and names of columns must match. Use <code>plyr::rbind.fill()</code> to combine data frames that don’t have the same columns.</p>
<p>It’s a common mistake to try and create a data frame by <code>cbind()</code>ing vectors together. This doesn’t work because <code>cbind()</code> will create a matrix unless one of the arguments is already a data frame. Instead use <code>data.frame()</code> directly:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bad &lt;- data.frame(cbind(a = 1:2, b = c(&quot;a&quot;, &quot;b&quot;)))</span><br><span class="line">str(bad)</span><br><span class="line">good &lt;- data.frame(a = 1:2, b = c(&quot;a&quot;, &quot;b&quot;),</span><br><span class="line">  stringsAsFactors = FALSE)</span><br><span class="line">str(good)</span><br></pre></td></tr></table></figure>
<p>The conversion rules for <code>cbind()</code> are complicated and best avoided by ensuring all inputs are of the same type.</p>
<h3 id="Special-columns"><a href="#Special-columns" class="headerlink" title="Special columns"></a>Special columns</h3><p>Since a data frame is a list of vectors, it is possible for a data frame to have a column that is a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3)</span><br><span class="line">df$y &lt;- list(1:2, 1:3, 1:4)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<p>However, when a list is given to <code>data.frame()</code>, it tries to put each item of the list into its own column, so this fails:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.frame(x = 1:3, y = list(1:2, 1:3, 1:4))</span><br></pre></td></tr></table></figure>
<p>A workaround is to use <code>I()</code>, which causes <code>data.frame()</code> to treat the list as one unit:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dfl &lt;- data.frame(x = 1:3, y = I(list(1:2, 1:3, 1:4)))</span><br><span class="line">str(dfl)</span><br><span class="line">dfl[2, &quot;y&quot;]</span><br></pre></td></tr></table></figure>
<p><code>I()</code> adds the <code>AsIs</code> class to its input, but this can usually be safely ignored.</p>
<p>Similarly, it’s also possible to have a column of a data frame that’s a matrix or array, as long as the number of rows matches the data frame:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dfm &lt;- data.frame(x = 1:3, y = I(matrix(1:9, nrow = 3)))</span><br><span class="line">str(dfm)</span><br><span class="line">dfm[2, &quot;y&quot;]</span><br></pre></td></tr></table></figure>
<p>Use list and array columns with caution: many functions that work with data frames assume that all columns are atomic vectors.</p>
<h3 id="Exercises-3"><a href="#Exercises-3" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What attributes does a data frame possess?</li>
<li>What does <code>as.matrix()</code> do when applied to a data frame with    columns of different types?</li>
<li>Can you have a data frame with 0 rows? What about 0 columns?</li>
</ol>
<h2 id="Answers"><a href="#Answers" class="headerlink" title="Answers"></a><a href="id=&quot;data-structure-answers&quot;">Answers</a></h2><ol>
<li>The three properties of a vector are type, length, and attributes.</li>
<li>The four common types of atomic vector are logical, integer, double     (sometimes called numeric), and character. The two rarer types are    complex and raw.</li>
<li>Attributes allow you to associate arbitrary additional metadata to    any object. You can get and set individual attributes with <code>attr(x, &quot;y&quot;)</code>    and <code>attr(x, &quot;y&quot;) &lt;- value</code>; or get and set all attributes at once with    <code>attributes()</code>.</li>
<li>The elements of a list can be any type (even a list); the elements of     an atomic vector are all of the same type. Similarly, every element of     a matrix must be the same type; in a data frame, the different columns     can have different types.</li>
<li>You can make “list-array” by assuming dimensions to a list. You can    make a matrix a column of a data frame with <code>df$x &lt;- matrix()</code>, or    using <code>I()</code> when creating a new data frame <code>data.frame(x = I(matrix()))</code>.</li>
</ol>
<hr>
<h1 id="Subsetting"><a href="#Subsetting" class="headerlink" title="Subsetting"></a><a href="id=&quot;subsetting&quot;">Subsetting</a></h1><p>R’s subsetting operators are powerful and fast. Mastery of subsetting allows you to succinctly express complex operations in a way that few other languages can match. Subsetting is hard to learn because you need to master a number of interrelated concepts:</p>
<ul>
<li>The three subsetting operators.</li>
<li>The six types of subsetting.</li>
<li>Important differences in behaviour for different objects (e.g., vectors,  lists, factors, matrices, and data frames).</li>
<li>The use of subsetting in conjunction with assignment.</li>
</ul>
<p>This chapter helps you master subsetting by starting with the simplest type of subsetting: subsetting an atomic vector with <code>[</code>. It then gradually extends your knowledge, first to more complicated data types (like arrays and lists), and then to the other subsetting operators, <code>[[</code> and <code>$</code>. You’ll then learn how subsetting and assignment can be combined to modify parts of an object, and, finally, you’ll see a large number of useful applications.</p>
<p>Subsetting is a natural complement to <code>str()</code>. <code>str()</code> shows you the structure of any object, and subsetting allows you to pull out the pieces that you’re interested in.</p>
<h5 id="Quiz-1"><a href="#Quiz-1" class="headerlink" title="Quiz"></a>Quiz</h5><p>Take this short quiz to determine if you need to read this chapter. If the answers quickly come to mind, you can comfortably skip this chapter. Check your answers in <a href="#subsetting-answers">answers</a>.</p>
<ol>
<li>What is the result of subsetting a vector with positive integers,    negative integers, a logical vector, or a character vector?</li>
<li>What’s the difference between <code>[</code>, <code>[[</code>, and <code>$</code> when applied to a list?</li>
<li>When should you use <code>drop = FALSE</code>?</li>
<li>If <code>x</code> is a matrix, what does <code>x[] &lt;- 0</code> do? How is it different to    <code>x &lt;- 0</code>?</li>
<li>How can you use a named vector to relabel categorical variables?</li>
</ol>
<h5 id="Outline-1"><a href="#Outline-1" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#data-types">Data types</a> starts by teaching you about <code>[</code>. You’ll start  by learning the six types of data that you can use to subset atomic vectors.  You’ll then learn how those six data types act when used to subset lists,  matrices, data frames, and S3 objects.</li>
<li><a href="#subsetting-operators">Subsetting operators</a> expands your knowledge of  subsetting operators to include <code>[[</code> and <code>$</code>, focussing on the important  principles of simplifying vs. preserving.</li>
<li>In <a href="#subassignment">Subsetting and assignment</a> you’ll learn the  art of subassignment, combining subsetting and assignment to modify parts  of an object.</li>
<li><a href="#applications">Applications</a> leads you through eight important, but  not obvious, applications of subsetting to solve problems that you  often encounter in a data analysis.</li>
</ul>
<h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a><a href="id=&quot;data-types&quot;">Data types</a></h2><p>It’s easiest to learn how subsetting works for atomic vectors, and then how it generalises to higher dimensions and other more complicated objects. We’ll start with <code>[</code>, the most commonly used operator. <a href="#subsetting-operators">Subsetting operators</a> will cover <code>[[</code> and <code>$</code>, the two other main subsetting operators.</p>
<h3 id="Atomic-vectors-1"><a href="#Atomic-vectors-1" class="headerlink" title="Atomic vectors"></a>Atomic vectors</h3><p>Let’s explore the different types of subsetting with a simple vector, <code>x</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(2.1, 4.2, 3.3, 5.4)</span><br></pre></td></tr></table></figure>
<p>Note that the number after the decimal point gives the original position in the vector.</p>
<p>There are five things that you can use to subset a vector:</p>
<ul>
<li><p><strong>Positive integers</strong> return elements at the specified positions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x[c(3, 1)]</span><br><span class="line">x[order(x)]</span><br><span class="line"></span><br><span class="line"># Duplicated indices yield duplicated values</span><br><span class="line">x[c(1, 1)]</span><br><span class="line"></span><br><span class="line"># Real numbers are silently truncated to integers</span><br><span class="line">x[c(2.1, 2.9)]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Negative integers</strong> omit elements at the specified positions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[-c(3, 1)]</span><br></pre></td></tr></table></figure>
<p>You can’t mix positive and negative integers in a single subset:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[c(-1, 2)]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Logical vectors</strong> select elements where the corresponding logical    value is <code>TRUE</code>. This is probably the most useful type of subsetting    because you write the expression that creates the logical vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x[c(TRUE, TRUE, FALSE, FALSE)]</span><br><span class="line">x[x &gt; 3]</span><br></pre></td></tr></table></figure>
<p>If the logical vector is shorter than the vector being subsetted, it<br>will be <em>recycled</em> to be the same length.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[c(TRUE, FALSE)]</span><br><span class="line"># Equivalent to</span><br><span class="line">x[c(TRUE, FALSE, TRUE, FALSE)]</span><br></pre></td></tr></table></figure>
<p>A missing value in the index always yields a missing value in the output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[c(TRUE, TRUE, NA, FALSE)]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Nothing</strong> returns the original vector. This is not useful   for vectors but is very useful for matrices, data frames, and arrays. It   can also be useful in conjunction with assignment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Zero</strong> returns a zero-length vector. This is not something you    usually do on purpose, but it can be helpful for generating test data.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x[0]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>If the vector is named, you can also use:</p>
<ul>
<li><p><strong>Character vectors</strong> to return elements with matching names.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(y &lt;- setNames(x, letters[1:4]))</span><br><span class="line">y[c(&quot;d&quot;, &quot;c&quot;, &quot;a&quot;)]</span><br><span class="line"></span><br><span class="line"># Like integer indices, you can repeat indices</span><br><span class="line">y[c(&quot;a&quot;, &quot;a&quot;, &quot;a&quot;)]</span><br><span class="line"></span><br><span class="line"># When subsetting with [ names are always matched exactly</span><br><span class="line">z &lt;- c(abc = 1, def = 2)</span><br><span class="line">z[c(&quot;a&quot;, &quot;d&quot;)]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Lists-1"><a href="#Lists-1" class="headerlink" title="Lists"></a>Lists</h3><p>Subsetting a list works in the same way as subsetting an atomic vector. Using <code>[</code> will always return a list; <code>[[</code> and <code>$</code>, as described below, let you pull out the components of the list.</p>
<h3 id="Matrices-and-arrays-1"><a href="#Matrices-and-arrays-1" class="headerlink" title="Matrices and arrays"></a><a href="id=&quot;matrix-subsetting&quot;">Matrices and arrays</a></h3><p>You can subset higher-dimensional structures in three ways:</p>
<ul>
<li>With multiple vectors.</li>
<li>With a single vector.</li>
<li>With a matrix.</li>
</ul>
<p>The most common way of subsetting matrices (2d) and arrays (&gt;2d) is a simple generalisation of 1d subsetting: you supply a 1d index for each dimension, separated by a comma. Blank subsetting is now useful because it lets you keep all rows or all columns.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- matrix(1:9, nrow = 3)</span><br><span class="line">colnames(a) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;)</span><br><span class="line">a[1:2, ]</span><br><span class="line">a[c(T, F, T), c(&quot;B&quot;, &quot;A&quot;)]</span><br><span class="line">a[0, -2]</span><br></pre></td></tr></table></figure>
<p>By default, <code>[</code> will simplify the results to the lowest possible dimensionality. See <a href="#simplify-preserve">simplifying vs. preserving</a> to learn how to avoid this.</p>
<p>Because matrices and arrays are implemented as vectors with special attributes, you can subset them with a single vector. In that case, they will behave like a vector. Arrays in R are stored in column-major order:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(vals &lt;- outer(1:5, 1:5, FUN = &quot;paste&quot;, sep = &quot;,&quot;))</span><br><span class="line">vals[c(4, 15)]</span><br></pre></td></tr></table></figure>
<p>You can also subset higher-dimensional data structures with an integer matrix (or, if named, a character matrix). Each row in the matrix specifies the location of one value, where each column corresponds to a dimension in the array being subsetted. This means that you use a 2 column matrix to subset a matrix, a 3 column matrix to subset a 3d array, and so on. The result is a vector of values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vals &lt;- outer(1:5, 1:5, FUN = &quot;paste&quot;, sep = &quot;,&quot;)</span><br><span class="line">select &lt;- matrix(ncol = 2, byrow = TRUE, c(</span><br><span class="line">  1, 1,</span><br><span class="line">  3, 1,</span><br><span class="line">  2, 4</span><br><span class="line">))</span><br><span class="line">vals[select]</span><br></pre></td></tr></table></figure>
<h3 id="Data-frames-1"><a href="#Data-frames-1" class="headerlink" title="Data frames"></a><a href="id=&quot;df-subsetting&quot;">Data frames</a></h3><p>Data frames possess the characteristics of both lists and matrices: if you subset with a single vector, they behave like lists; if you subset with two vectors, they behave like matrices.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3])</span><br><span class="line"></span><br><span class="line">df[df$x == 2, ]</span><br><span class="line">df[c(1, 3), ]</span><br><span class="line"></span><br><span class="line"># There are two ways to select columns from a data frame</span><br><span class="line"># Like a list:</span><br><span class="line">df[c(&quot;x&quot;, &quot;z&quot;)]</span><br><span class="line"># Like a matrix</span><br><span class="line">df[, c(&quot;x&quot;, &quot;z&quot;)]</span><br><span class="line"></span><br><span class="line"># There&apos;s an important difference if you select a single</span><br><span class="line"># column: matrix subsetting simplifies by default, list</span><br><span class="line"># subsetting does not.</span><br><span class="line">str(df[&quot;x&quot;])</span><br><span class="line">str(df[, &quot;x&quot;])</span><br></pre></td></tr></table></figure>
<h3 id="S3-objects"><a href="#S3-objects" class="headerlink" title="S3 objects"></a>S3 objects</h3><p>S3 objects are made up of atomic vectors, arrays, and lists, so you can always pull apart an S3 object using the techniques described above and the knowledge you gain from <code>str()</code>.</p>
<h3 id="S4-objects"><a href="#S4-objects" class="headerlink" title="S4 objects"></a>S4 objects</h3><p>There are also two additional subsetting operators that are needed for S4 objects: <code>@</code> (equivalent to <code>$</code>), and <code>slot()</code> (equivalent to <code>[[</code>). <code>@</code> is more restrictive than <code>$</code> in that it will return an error if the slot does not exist. These are described in more detail in <a href="#s4">the OO field guide</a>.</p>
<h3 id="Exercises-4"><a href="#Exercises-4" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Fix each of the following common data frame subsetting errors:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mtcars[mtcars$cyl = 4, ]</span><br><span class="line">mtcars[-1:4, ]</span><br><span class="line">mtcars[mtcars$cyl &lt;= 5]</span><br><span class="line">mtcars[mtcars$cyl == 4 | 6, ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Why does <code>x &lt;- 1:5; x[NA]</code> yield five missing values? (Hint: why is    it different from <code>x[NA_real_]</code>?)</p>
</li>
<li><p>What does <code>upper.tri()</code> return? How does subsetting a matrix with it    work? Do we need any additional subsetting rules to describe its behaviour?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- outer(1:5, 1:5, FUN = &quot;*&quot;)</span><br><span class="line">x[upper.tri(x)]</span><br></pre></td></tr></table></figure>
</li>
<li><p>Why does <code>mtcars[1:20]</code> return an error? How does it differ from the    similar <code>mtcars[1:20, ]</code>?</p>
</li>
<li>Implement your own function that extracts the diagonal entries from a    matrix (it should behave like <code>diag(x)</code> where <code>x</code> is a matrix).</li>
<li>What does <code>df[is.na(df)] &lt;- 0</code> do? How does it work?</li>
</ol>
<h2 id="Subsetting-operators"><a href="#Subsetting-operators" class="headerlink" title="Subsetting operators"></a><a href="id=&quot;subsetting-operators&quot;">Subsetting operators</a></h2><p>There are two other subsetting operators: <code>[[</code> and <code>$</code>. <code>[[</code> is similar to <code>[</code>, except it can only return a single value and it allows you to pull pieces out of a list. <code>$</code> is a useful shorthand for <code>[[</code> combined with character subsetting.</p>
<p>You need <code>[[</code> when working with lists. This is because when <code>[</code> is applied to a list it always returns a list: it never gives you the contents of the list. To get the contents, you need <code>[[</code>:</p>
<blockquote>
<p> “If list <code>x</code> is a train carrying objects, then <code>x[[5]]</code> is<br>the object in car 5; <code>x[4:6]</code> is a train of cars 4-6.”</p>
<p>— @RLangTip</p>
</blockquote>
<p>Because it can return only a single value, you must use <code>[[</code> with either a single positive integer or a string:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- list(a = 1, b = 2)</span><br><span class="line">a[[1]]</span><br><span class="line">a[[&quot;a&quot;]]</span><br><span class="line"></span><br><span class="line"># If you do supply a vector it indexes recursively</span><br><span class="line">b &lt;- list(a = list(b = list(c = list(d = 1))))</span><br><span class="line">b[[c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)]]</span><br><span class="line"># Same as</span><br><span class="line">b[[&quot;a&quot;]][[&quot;b&quot;]][[&quot;c&quot;]][[&quot;d&quot;]]</span><br></pre></td></tr></table></figure>
<p>Because data frames are lists of columns, you can use <code>[[</code> to extract a column from data frames: <code>mtcars[[1]]</code>, <code>mtcars[[&quot;cyl&quot;]]</code>.</p>
<p>S3 and S4 objects can override the standard behaviour of <code>[</code> and <code>[[</code> so they behave differently for different types of objects. The key difference is usually how you select between simplifying or preserving behaviours, and what the default is.</p>
<h3 id="Simplifying-vs-preserving-subsetting"><a href="#Simplifying-vs-preserving-subsetting" class="headerlink" title="Simplifying vs. preserving subsetting"></a><a href="id=&quot;simplify-preserve&quot;">Simplifying vs. preserving subsetting</a></h3><p>It’s important to understand the distinction between simplifying and preserving subsetting. Simplifying subsets returns the simplest possible data structure that can represent the output, and is useful interactively because it usually gives you what you want. Preserving subsetting keeps the structure of the output the same as the input, and is generally better for programming because the result will always be the same type. Omitting <code>drop = FALSE</code> when subsetting matrices and data frames is one of the most common sources of programming errors. (It will work for your test cases, but then someone will pass in a single column data frame and it will fail in an unexpected and unclear way.)</p>
<p>Unfortunately, how you switch between simplifying and preserving differs for different data types, as summarised in the table below.</p>
<table>
<thead>
<tr>
<th></th>
<th>Simplifying</th>
<th>Preserving</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vector</td>
<td><code>x[[1]]</code></td>
<td><code>x[1]</code></td>
</tr>
<tr>
<td>List</td>
<td><code>x[[1]]</code></td>
<td><code>x[1]</code></td>
</tr>
<tr>
<td>Factor</td>
<td><code>x[1:4, drop = T]</code></td>
<td><code>x[1:4]</code></td>
</tr>
<tr>
<td>Array</td>
<td><code>x[1, ]</code> <strong>or</strong> <code>x[, 1]</code></td>
<td><code>x[1, , drop = F]</code> <strong>or</strong> <code>x[, 1, drop = F]</code></td>
</tr>
<tr>
<td>Data frame</td>
<td><code>x[, 1]</code> <strong>or</strong> <code>x[[1]]</code></td>
<td><code>x[, 1, drop = F]</code> <strong>or</strong> <code>x[1]</code></td>
</tr>
</tbody>
</table>
<p>Preserving is the same for all data types: you get the same type of output as input. Simplifying behaviour varies slightly between different data types, as described below:</p>
<ul>
<li><p><strong>Atomic vector</strong>: removes names.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(a = 1, b = 2)</span><br><span class="line">x[1]</span><br><span class="line">x[[1]]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>List</strong>: return the object inside the list, not a single element list.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- list(a = 1, b = 2)</span><br><span class="line">str(y[1])</span><br><span class="line">str(y[[1]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Factor</strong>: drops any unused levels.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z &lt;- factor(c(&quot;a&quot;, &quot;b&quot;))</span><br><span class="line">z[1]</span><br><span class="line">z[1, drop = TRUE]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Matrix</strong> or <strong>array</strong>: if any of the dimensions has length 1,<br>drops that dimension.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- matrix(1:4, nrow = 2)</span><br><span class="line">a[1, , drop = FALSE]</span><br><span class="line">a[1, ]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Data frame</strong>: if output is a single column, returns a vector instead of<br>a data frame.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(a = 1:2, b = 1:2)</span><br><span class="line">str(df[1])</span><br><span class="line">str(df[[1]])</span><br><span class="line">str(df[, &quot;a&quot;, drop = FALSE])</span><br><span class="line">str(df[, &quot;a&quot;])</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title="$"></a><code>$</code></h3><p><code>$</code> is a shorthand operator, where <code>x$y</code> is equivalent to <code>x[[&quot;y&quot;, exact = FALSE]]</code>.  It’s often used to access variables in a data frame, as in <code>mtcars$cyl</code> or <code>diamonds$carat</code>.</p>
<p>One common mistake with <code>$</code> is to try and use it when you have the name of a column stored in a variable:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var &lt;- &quot;cyl&quot;</span><br><span class="line"># Doesn&apos;t work - mtcars$var translated to mtcars[[&quot;var&quot;]]</span><br><span class="line">mtcars$var</span><br><span class="line"></span><br><span class="line"># Instead use [[</span><br><span class="line">mtcars[[var]]</span><br></pre></td></tr></table></figure>
<p>There’s one important difference between <code>$</code> and <code>[[</code>. <code>$</code> does partial matching:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(abc = 1)</span><br><span class="line">x$a</span><br><span class="line">x[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure>
<p>If you want to avoid this behaviour you can set the global option <code>warnPartialMatchDollar</code> to <code>TRUE</code>. Use with caution: it may affect behaviour in other code you have loaded (e.g., from a package).</p>
<h3 id="Missing-out-of-bounds-indices"><a href="#Missing-out-of-bounds-indices" class="headerlink" title="Missing/out of bounds indices"></a>Missing/out of bounds indices</h3><p><code>[</code> and <code>[[</code> differ slightly in their behaviour when the index is out of bounds (OOB), for example, when you try to extract the fifth element of a length four vector, or subset a vector with <code>NA</code> or <code>NULL</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:4</span><br><span class="line">str(x[5])</span><br><span class="line">str(x[NA_real_])</span><br><span class="line">str(x[NULL])</span><br></pre></td></tr></table></figure>
<p>The following table summarises the results of subsetting atomic vectors and lists with <code>[</code> and <code>[[</code> and different types of OOB value.</p>
<table>
<thead>
<tr>
<th>Operator</th>
<th>Index</th>
<th>Atomic</th>
<th>List</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[</code></td>
<td>OOB</td>
<td><code>NA</code></td>
<td><code>list(NULL)</code></td>
</tr>
<tr>
<td><code>[</code></td>
<td><code>NA_real_</code></td>
<td><code>NA</code></td>
<td><code>list(NULL)</code></td>
</tr>
<tr>
<td><code>[</code></td>
<td><code>NULL</code></td>
<td><code>x[0]</code></td>
<td><code>list(NULL)</code></td>
</tr>
<tr>
<td><code>[[</code></td>
<td>OOB</td>
<td>Error</td>
<td>Error</td>
</tr>
<tr>
<td><code>[[</code></td>
<td><code>NA_real_</code></td>
<td>Error</td>
<td><code>NULL</code></td>
</tr>
<tr>
<td><code>[[</code></td>
<td><code>NULL</code></td>
<td>Error</td>
<td>Error</td>
</tr>
</tbody>
</table>
<p>If the input vector is named, then the names of OOB, missing, or <code>NULL</code> components will be <code>&quot;&lt;NA&gt;&quot;</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numeric()[1]</span><br><span class="line">numeric()[NA_real_]</span><br><span class="line">numeric()[NULL]</span><br><span class="line">numeric()[[1]]</span><br><span class="line">numeric()[[NA_real_]]</span><br><span class="line">numeric()[[NULL]]</span><br><span class="line"></span><br><span class="line">list()[1]</span><br><span class="line">list()[NA_real_]</span><br><span class="line">list()[NULL]</span><br><span class="line">list()[[1]]</span><br><span class="line">list()[[NA_real_]]</span><br><span class="line">list()[[NULL]]</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-5"><a href="#Exercises-5" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Given a linear model, e.g., <code>mod &lt;- lm(mpg ~ wt, data = mtcars)</code>, extract<br>the residual degrees of freedom. Extract the R squared from the model<br>summary (<code>summary(mod)</code>)</li>
</ol>
<h2 id="Subsetting-and-assignment"><a href="#Subsetting-and-assignment" class="headerlink" title="Subsetting and assignment"></a><a href="id=&quot;subassignment&quot;">Subsetting and assignment</a></h2><p>All subsetting operators can be combined with assignment to modify selected values of the input vector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:5</span><br><span class="line">x[c(1, 2)] &lt;- 2:3</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"># The length of the LHS needs to match the RHS</span><br><span class="line">x[-1] &lt;- 4:1</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"># Note that there&apos;s no checking for duplicate indices</span><br><span class="line">x[c(1, 1)] &lt;- 2:3</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"># You can&apos;t combine integer indices with NA</span><br><span class="line">x[c(1, NA)] &lt;- c(1, 2)</span><br><span class="line"># But you can combine logical indices with NA</span><br><span class="line"># (where they&apos;re treated as false).</span><br><span class="line">x[c(T, F, NA)] &lt;- 1</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"># This is mostly useful when conditionally modifying vectors</span><br><span class="line">df &lt;- data.frame(a = c(1, 10, NA))</span><br><span class="line">df$a[df$a &lt; 5] &lt;- 0</span><br><span class="line">df$a</span><br></pre></td></tr></table></figure>
<p>Subsetting with nothing can be useful in conjunction with assignment because it will preserve the original object class and structure. Compare the following two expressions. In the first, <code>mtcars</code> will remain as a data frame. In the second, <code>mtcars</code> will become a list.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtcars[] &lt;- lapply(mtcars, as.integer)</span><br><span class="line">mtcars &lt;- lapply(mtcars, as.integer)</span><br></pre></td></tr></table></figure>
<p>With lists, you can use subsetting + assignment + <code>NULL</code> to remove components from a list. To add a literal <code>NULL</code> to a list, use <code>[</code> and <code>list(NULL)</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(a = 1, b = 2)</span><br><span class="line">x[[&quot;b&quot;]] &lt;- NULL</span><br><span class="line">str(x)</span><br><span class="line"></span><br><span class="line">y &lt;- list(a = 1)</span><br><span class="line">y[&quot;b&quot;] &lt;- list(NULL)</span><br><span class="line">str(y)</span><br></pre></td></tr></table></figure>
<h2 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a><a href="id=&quot;applications&quot;">Applications</a></h2><p>The basic principles described above give rise to a wide variety of useful applications. Some of the most important are described below. Many of these basic techniques are wrapped up into more concise functions (e.g., <code>subset()</code>, <code>merge()</code>, <code>plyr::arrange()</code>), but it is useful to understand how they are implemented with basic subsetting. This will allow you to adapt to new situations that are not dealt with by existing functions.</p>
<h3 id="Lookup-tables"><a href="#Lookup-tables" class="headerlink" title="Lookup tables"></a><a href="id=&quot;lookup-tables&quot;">Lookup tables</a></h3><p>Character matching provides a powerful way to make lookup tables. Say you want to convert abbreviations:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(&quot;m&quot;, &quot;f&quot;, &quot;u&quot;, &quot;f&quot;, &quot;f&quot;, &quot;m&quot;, &quot;m&quot;)</span><br><span class="line">lookup &lt;- c(m = &quot;Male&quot;, f = &quot;Female&quot;, u = NA)</span><br><span class="line">lookup[x]</span><br><span class="line">unname(lookup[x])</span><br><span class="line"></span><br><span class="line"># Or with fewer output values</span><br><span class="line">c(m = &quot;Known&quot;, f = &quot;Known&quot;, u = &quot;Unknown&quot;)[x]</span><br></pre></td></tr></table></figure>
<p>If you don’t want names in the result, use <code>unname()</code> to remove them.</p>
<h3 id="Matching-and-merging-by-hand-integer-subsetting"><a href="#Matching-and-merging-by-hand-integer-subsetting" class="headerlink" title="Matching and merging by hand(integer subsetting)"></a><a href="id=&quot;matching-merging&quot;">Matching and merging by hand(integer subsetting)</a></h3><p>You may have a more complicated lookup table which has multiple columns of information. Suppose we have a vector of integer grades, and a table that describes their properties:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grades &lt;- c(1, 2, 2, 3, 1)</span><br><span class="line"></span><br><span class="line">info &lt;- data.frame(</span><br><span class="line">  grade = 3:1,</span><br><span class="line">  desc = c(&quot;Excellent&quot;, &quot;Good&quot;, &quot;Poor&quot;),</span><br><span class="line">  fail = c(F, F, T)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>We want to duplicate the info table so that we have a row for each value in <code>grades</code>. We can do this in two ways, either using <code>match()</code> and integer subsetting, or <code>rownames()</code> and character subsetting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">grades</span><br><span class="line"></span><br><span class="line"># Using match</span><br><span class="line">id &lt;- match(grades, info$grade)</span><br><span class="line">info[id, ]</span><br><span class="line"></span><br><span class="line"># Using rownames</span><br><span class="line">rownames(info) &lt;- info$grade</span><br><span class="line">info[as.character(grades), ]</span><br></pre></td></tr></table></figure>
<p>If you have multiple columns to match on, you’ll need to first collapse them to a single column (with <code>interaction()</code>, <code>paste()</code>, or <code>plyr::id()</code>).  You can also use <code>merge()</code> or <code>plyr::join()</code>, which do the same thing for you — read the source code to see how.</p>
<h3 id="Random-samples-bootstrap-integer-subsetting"><a href="#Random-samples-bootstrap-integer-subsetting" class="headerlink" title="Random samples/bootstrap (integer subsetting)"></a>Random samples/bootstrap (integer subsetting)</h3><p>You can use integer indices to perform random sampling or bootstrapping of a vector or data frame. <code>sample()</code> generates a vector of indices, then subsetting to access the values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = rep(1:3, each = 2), y = 6:1, z = letters[1:6])</span><br><span class="line"></span><br><span class="line"># Set seed for reproducibility</span><br><span class="line">set.seed(10)</span><br><span class="line"></span><br><span class="line"># Randomly reorder</span><br><span class="line">df[sample(nrow(df)), ]</span><br><span class="line"># Select 3 random rows</span><br><span class="line">df[sample(nrow(df), 3), ]</span><br><span class="line"># Select 6 bootstrap replicates</span><br><span class="line">df[sample(nrow(df), 6, rep = T), ]</span><br></pre></td></tr></table></figure>
<p>The arguments of <code>sample()</code> control the number of samples to extract, and whether sampling is performed with or without replacement.</p>
<h3 id="Ordering-integer-subsetting"><a href="#Ordering-integer-subsetting" class="headerlink" title="Ordering (integer subsetting)"></a>Ordering (integer subsetting)</h3><p><code>order()</code> takes a vector as input and returns an integer vector describing how the subsetted vector should be ordered:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(&quot;b&quot;, &quot;c&quot;, &quot;a&quot;)</span><br><span class="line">order(x)</span><br><span class="line">x[order(x)]</span><br></pre></td></tr></table></figure>
<p>To break ties, you can supply additional variables to <code>order()</code>, and you can change from ascending to descending order using <code>decreasing = TRUE</code>.  By default, any missing values will be put at the end of the vector; however, you can remove them with <code>na.last = NA</code> or put at the front with <code>na.last = FALSE</code>.</p>
<p>For two or more dimensions, <code>order()</code> and integer subsetting makes it easy to order either the rows or columns of an object:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Randomly reorder df</span><br><span class="line">df2 &lt;- df[sample(nrow(df)), 3:1]</span><br><span class="line">df2</span><br><span class="line"></span><br><span class="line">df2[order(df2$x), ]</span><br><span class="line">df2[, order(names(df2))]</span><br></pre></td></tr></table></figure>
<p>More concise, but less flexible, functions are available for sorting vectors, <code>sort()</code>, and data frames, <code>plyr::arrange()</code>.</p>
<h3 id="Expanding-aggregated-counts-integer-subsetting"><a href="#Expanding-aggregated-counts-integer-subsetting" class="headerlink" title="Expanding aggregated counts (integer subsetting)"></a>Expanding aggregated counts (integer subsetting)</h3><p>Sometimes you get a data frame where identical rows have been collapsed into one and a count column has been added. <code>rep()</code> and integer subsetting make it easy to uncollapse the data by subsetting with a repeated row index:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))</span><br><span class="line">rep(1:nrow(df), df$n)</span><br><span class="line">df[rep(1:nrow(df), df$n), ]</span><br></pre></td></tr></table></figure>
<h3 id="Removing-columns-from-data-frames-character-subsetting"><a href="#Removing-columns-from-data-frames-character-subsetting" class="headerlink" title="Removing columns from data frames (character subsetting)"></a>Removing columns from data frames (character subsetting)</h3><p>There are two ways to remove columns from a data frame. You can set individual columns to NULL:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3])</span><br><span class="line">df$z &lt;- NULL</span><br></pre></td></tr></table></figure>
<p>Or you can subset to return only the columns you want:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3, y = 3:1, z = letters[1:3])</span><br><span class="line">df[c(&quot;x&quot;, &quot;y&quot;)]</span><br></pre></td></tr></table></figure>
<p>If you know the columns you don’t want, use set operations to work out which colums to keep:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[setdiff(names(df), &quot;z&quot;)]</span><br></pre></td></tr></table></figure>
<h3 id="Selecting-rows-based-on-a-condition-logical-subsetting"><a href="#Selecting-rows-based-on-a-condition-logical-subsetting" class="headerlink" title="Selecting rows based on a condition (logical subsetting)"></a>Selecting rows based on a condition (logical subsetting)</h3><p>Because it allows you to easily combine conditions from multiple columns, logical subsetting is probably the most commonly used technique for extracting rows out of a data frame.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mtcars[mtcars$gear == 5, ]</span><br><span class="line">mtcars[mtcars$gear == 5 &amp; mtcars$cyl == 4, ]</span><br></pre></td></tr></table></figure>
<p>Remember to use the vector boolean operators <code>&amp;</code> and <code>|</code>, not the short-circuiting scalar operators <code>&amp;&amp;</code> and <code>||</code> which are more useful inside if statements. Don’t forget <a href="http://en.wikipedia.org/wiki/De_Morgan&#39;s_laws" target="_blank" rel="external">De Morgan’s laws</a>, which can be useful to simplify negations:</p>
<ul>
<li><code>!(X &amp; Y)</code> is the same as <code>!X | !Y</code></li>
<li><code>!(X | Y)</code> is the same as <code>!X &amp; !Y</code></li>
</ul>
<p>For example, <code>!(X &amp; !(Y | Z))</code> simplifies to <code>!X | !!(Y|Z)</code>, and then to <code>!X | Y | Z</code>.</p>
<p><code>subset()</code> is a specialised shorthand function for subsetting data frames, and saves some typing because you don’t need to repeat the name of the data frame. You’ll learn how it works in <a href="#nse">non-standard evaluation</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subset(mtcars, gear == 5)</span><br><span class="line">subset(mtcars, gear == 5 &amp; cyl == 4)</span><br></pre></td></tr></table></figure>
<h3 id="Boolean-algebra-vs-sets-logical-amp-integer-subsetting"><a href="#Boolean-algebra-vs-sets-logical-amp-integer-subsetting" class="headerlink" title="Boolean algebra vs. sets (logical &amp; integer subsetting)"></a>Boolean algebra vs. sets (logical &amp; integer subsetting)</h3><p>It’s useful to be aware of the natural equivalence between set operations (integer subsetting) and boolean algebra (logical subsetting). Using set operations is more effective when:</p>
<ul>
<li><p>You want to find the first (or last) <code>TRUE</code>.</p>
</li>
<li><p>You have very few <code>TRUE</code>s and very many <code>FALSE</code>s; a set representation<br>may be faster and require less storage.</p>
</li>
</ul>
<p><code>which()</code> allows you to convert a boolean representation to an integer representation. There’s no reverse operation in base R but we can easily create one:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- sample(10) &lt; 4</span><br><span class="line">which(x)</span><br><span class="line"></span><br><span class="line">unwhich &lt;- function(x, n) &#123;</span><br><span class="line">  out &lt;- rep_len(FALSE, n)</span><br><span class="line">  out[x] &lt;- TRUE</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line">unwhich(which(x), 10)</span><br></pre></td></tr></table></figure>
<p>Let’s create two logical vectors and their integer equivalents and then explore the relationship between boolean and set operations.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(x1 &lt;- 1:10 %% 2 == 0)</span><br><span class="line">(x2 &lt;- which(x1))</span><br><span class="line">(y1 &lt;- 1:10 %% 5 == 0)</span><br><span class="line">(y2 &lt;- which(y1))</span><br><span class="line"></span><br><span class="line"># X &amp; Y &lt;-&gt; intersect(x, y)</span><br><span class="line">x1 &amp; y1</span><br><span class="line">intersect(x2, y2)</span><br><span class="line"></span><br><span class="line"># X | Y &lt;-&gt; union(x, y)</span><br><span class="line">x1 | y1</span><br><span class="line">union(x2, y2)</span><br><span class="line"></span><br><span class="line"># X &amp; !Y &lt;-&gt; setdiff(x, y)</span><br><span class="line">x1 &amp; !y1</span><br><span class="line">setdiff(x2, y2)</span><br><span class="line"></span><br><span class="line"># xor(X, Y) &lt;-&gt; setdiff(union(x, y), intersect(x, y))</span><br><span class="line">xor(x1, y1)</span><br><span class="line">setdiff(union(x2, y2), intersect(x2, y2))</span><br></pre></td></tr></table></figure>
<p>When first learning subsetting, a common mistake is to use <code>x[which(y)]</code> instead of <code>x[y]</code>.  Here the <code>which()</code> achieves nothing: it switches from logical to integer subsetting but the result will be exactly the same. Also beware that <code>x[-which(y)]</code> is <strong>not</strong> equivalent to <code>x[!y]</code>: if <code>y</code> is all FALSE, <code>which(y)</code> will be <code>integer(0)</code> and <code>-integer(0)</code> is still <code>integer(0)</code>, so you’ll get no values, instead of all values. In general, avoid switching from logical to integer subsetting unless you want, for example, the first or last <code>TRUE</code> value.</p>
<h3 id="Exercises-6"><a href="#Exercises-6" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>How would you randomly permute the columns of a data frame? (This is an    important technique in random forests.) Can you simultaneously permute    the rows and columns in one step?</li>
<li>How would you select a random sample of <code>m</code> rows from a data frame?    What if the sample had to be contiguous (i.e., with an initial row, a    final row, and every row in between)?</li>
<li>How could you put the columns in a data frame in alphabetical order?</li>
</ol>
<h2 id="Answers-1"><a href="#Answers-1" class="headerlink" title="Answers"></a>Answers</h2><ol>
<li>Positive integers select elements at specific positions, negative integers    drop elements; logical vectors keep elements at positions corresponding to    <code>TRUE</code>; character vectors select elements with matching names.</li>
<li><code>[</code> selects sub-lists. It always returns a list; if you use it with a    single positive integer, it returns a list of length one. <code>[[</code> selects    an element within a list. <code>$</code> is a convenient shorthand: <code>x$y</code> is    equivalent to <code>x[[&quot;y&quot;]]</code>.</li>
<li>Use <code>drop = FALSE</code> if you are subsetting a matrix, array, or data frame    and you want to preserve the original dimensions. You should almost    always use it when subsetting inside a function.</li>
<li>If <code>x</code> is a matrix, <code>x[] &lt;- 0</code> will replace every element with 0,    keeping the same number of rows and columns. <code>x &lt;- 0</code> completely    replaces the matrix with the value 0.</li>
<li>A named character vector can act as a simple lookup table:    <code>c(x = 1, y = 2, z = 3)[c(&quot;y&quot;, &quot;z&quot;, &quot;x&quot;)]</code></li>
</ol>
<hr>
<h1 id="Vocabulary"><a href="#Vocabulary" class="headerlink" title="Vocabulary"></a><a href="id=&quot;vocabulary&quot;">Vocabulary</a></h1><p>An important part of being fluent in R is having a good working vocabulary. Below, I have listed the functions that I believe constitute such a vocabulary. You don’t need to be intimately familiar with the details of every function, but you should at least be aware that they all exist. If there are functions in this list that you’ve never heard of, I strongly recommend that you read their documentation.</p>
<p>I came up with this list by looking through all the functions in the base, stats, and utils packages, and extracting those that I think are most useful. The list also includes a few pointers to particularly important functions in other packages, and some of the more important <code>options()</code>.</p>
<h2 id="The-basics"><a href="#The-basics" class="headerlink" title="The basics"></a>The basics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># The first functions to learn</span><br><span class="line">?</span><br><span class="line">str</span><br><span class="line"></span><br><span class="line"># Important operators and assignment</span><br><span class="line">%in%, match</span><br><span class="line">=, &lt;-, &lt;&lt;-</span><br><span class="line">$, [, [[, head, tail, subset</span><br><span class="line">with</span><br><span class="line">assign, get</span><br><span class="line"></span><br><span class="line"># Comparison</span><br><span class="line">all.equal, identical</span><br><span class="line">!=, ==, &gt;, &gt;=, &lt;, &lt;=</span><br><span class="line">is.na, complete.cases</span><br><span class="line">is.finite</span><br><span class="line"></span><br><span class="line"># Basic math</span><br><span class="line">*, +, -, /, ^, %%, %/%</span><br><span class="line">abs, sign</span><br><span class="line">acos, asin, atan, atan2</span><br><span class="line">sin, cos, tan</span><br><span class="line">ceiling, floor, round, trunc, signif</span><br><span class="line">exp, log, log10, log2, sqrt</span><br><span class="line"></span><br><span class="line">max, min, prod, sum</span><br><span class="line">cummax, cummin, cumprod, cumsum, diff</span><br><span class="line">pmax, pmin</span><br><span class="line">range</span><br><span class="line">mean, median, cor, sd, var</span><br><span class="line">rle</span><br><span class="line"></span><br><span class="line"># Functions to do with functions</span><br><span class="line">function</span><br><span class="line">missing</span><br><span class="line">on.exit</span><br><span class="line">return, invisible</span><br><span class="line"></span><br><span class="line"># Logical &amp; sets</span><br><span class="line">&amp;, |, !, xor</span><br><span class="line">all, any</span><br><span class="line">intersect, union, setdiff, setequal</span><br><span class="line">which</span><br><span class="line"></span><br><span class="line"># Vectors and matrices</span><br><span class="line">c, matrix</span><br><span class="line"># automatic coercion rules character &gt; numeric &gt; logical</span><br><span class="line">length, dim, ncol, nrow</span><br><span class="line">cbind, rbind</span><br><span class="line">names, colnames, rownames</span><br><span class="line">t</span><br><span class="line">diag</span><br><span class="line">sweep</span><br><span class="line">as.matrix, data.matrix</span><br><span class="line"></span><br><span class="line"># Making vectors</span><br><span class="line">c</span><br><span class="line">rep, rep_len</span><br><span class="line">seq, seq_len, seq_along</span><br><span class="line">rev</span><br><span class="line">sample</span><br><span class="line">choose, factorial, combn</span><br><span class="line">(is/as).(character/numeric/logical/...)</span><br><span class="line"></span><br><span class="line"># Lists &amp; data.frames</span><br><span class="line">list, unlist</span><br><span class="line">data.frame, as.data.frame</span><br><span class="line">split</span><br><span class="line">expand.grid</span><br><span class="line"></span><br><span class="line"># Control flow</span><br><span class="line">if, &amp;&amp;, || (short circuiting)</span><br><span class="line">for, while</span><br><span class="line">next, break</span><br><span class="line">switch</span><br><span class="line">ifelse</span><br><span class="line"></span><br><span class="line"># Apply &amp; friends</span><br><span class="line">lapply, sapply, vapply</span><br><span class="line">apply</span><br><span class="line">tapply</span><br><span class="line">replicate</span><br></pre></td></tr></table></figure>
<h2 id="Common-data-structures"><a href="#Common-data-structures" class="headerlink" title="Common data structures"></a>Common data structures</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Date time</span><br><span class="line">ISOdate, ISOdatetime, strftime, strptime, date</span><br><span class="line">difftime</span><br><span class="line">julian, months, quarters, weekdays</span><br><span class="line">library(lubridate)</span><br><span class="line"></span><br><span class="line"># Character manipulation</span><br><span class="line">grep, agrep</span><br><span class="line">gsub</span><br><span class="line">strsplit</span><br><span class="line">chartr</span><br><span class="line">nchar</span><br><span class="line">tolower, toupper</span><br><span class="line">substr</span><br><span class="line">paste</span><br><span class="line">library(stringr)</span><br><span class="line"></span><br><span class="line"># Factors</span><br><span class="line">factor, levels, nlevels</span><br><span class="line">reorder, relevel</span><br><span class="line">cut, findInterval</span><br><span class="line">interaction</span><br><span class="line">options(stringsAsFactors = FALSE)</span><br><span class="line"></span><br><span class="line"># Array manipulation</span><br><span class="line">array</span><br><span class="line">dim</span><br><span class="line">dimnames</span><br><span class="line">aperm</span><br><span class="line">library(abind)</span><br></pre></td></tr></table></figure>
<h2 id="Statistics"><a href="#Statistics" class="headerlink" title="Statistics"></a>Statistics</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Ordering and tabulating</span><br><span class="line">duplicated, unique</span><br><span class="line">merge</span><br><span class="line">order, rank, quantile</span><br><span class="line">sort</span><br><span class="line">table, ftable</span><br><span class="line"></span><br><span class="line"># Linear models</span><br><span class="line">fitted, predict, resid, rstandard</span><br><span class="line">lm, glm</span><br><span class="line">hat, influence.measures</span><br><span class="line">logLik, df, deviance</span><br><span class="line">formula, ~, I</span><br><span class="line">anova, coef, confint, vcov</span><br><span class="line">contrasts</span><br><span class="line"></span><br><span class="line"># Miscellaneous tests</span><br><span class="line">apropos(&quot;\\.test$&quot;)</span><br><span class="line"></span><br><span class="line"># Random variables</span><br><span class="line">(q, p, d, r) * (beta, binom, cauchy, chisq, exp, f, gamma, geom,</span><br><span class="line">  hyper, lnorm, logis, multinom, nbinom, norm, pois, signrank, t,</span><br><span class="line">  unif, weibull, wilcox, birthday, tukey)</span><br><span class="line"></span><br><span class="line"># Matrix algebra</span><br><span class="line">crossprod, tcrossprod</span><br><span class="line">eigen, qr, svd</span><br><span class="line">%*%, %o%, outer</span><br><span class="line">rcond</span><br><span class="line">solve</span><br></pre></td></tr></table></figure>
<h2 id="Working-with-R"><a href="#Working-with-R" class="headerlink" title="Working with R"></a>Working with R</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Workspace</span><br><span class="line">ls, exists, rm</span><br><span class="line">getwd, setwd</span><br><span class="line">q</span><br><span class="line">source</span><br><span class="line">install.packages, library, require</span><br><span class="line"></span><br><span class="line"># Help</span><br><span class="line">help, ?</span><br><span class="line">help.search</span><br><span class="line">apropos</span><br><span class="line">RSiteSearch</span><br><span class="line">citation</span><br><span class="line">demo</span><br><span class="line">example</span><br><span class="line">vignette</span><br><span class="line"></span><br><span class="line"># Debugging</span><br><span class="line">traceback</span><br><span class="line">browser</span><br><span class="line">recover</span><br><span class="line">options(error = )</span><br><span class="line">stop, warning, message</span><br><span class="line">tryCatch, try</span><br></pre></td></tr></table></figure>
<h2 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Output</span><br><span class="line">print, cat</span><br><span class="line">message, warning</span><br><span class="line">dput</span><br><span class="line">format</span><br><span class="line">sink, capture.output</span><br><span class="line"></span><br><span class="line"># Reading and writing data</span><br><span class="line">data</span><br><span class="line">count.fields</span><br><span class="line">read.csv, write.csv</span><br><span class="line">read.delim, write.delim</span><br><span class="line">read.fwf</span><br><span class="line">readLines, writeLines</span><br><span class="line">readRDS, saveRDS</span><br><span class="line">load, save</span><br><span class="line">library(foreign)</span><br><span class="line"></span><br><span class="line"># Files and directories</span><br><span class="line">dir</span><br><span class="line">basename, dirname, tools::file_ext</span><br><span class="line">file.path</span><br><span class="line">path.expand, normalizePath</span><br><span class="line">file.choose</span><br><span class="line">file.copy, file.create, file.remove, file.rename, dir.create</span><br><span class="line">file.exists, file.info</span><br><span class="line">tempdir, tempfile</span><br><span class="line">download.file, library(downloader)</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Style-guide"><a href="#Style-guide" class="headerlink" title="Style guide"></a><a href="id=&quot;style&quot;">Style guide</a></h1><p>Good coding style is like using correct punctuation. You can manage without it, but it sure makes things easier to read. As with styles of punctuation, there are many possible variations. The following guide describes the style that I use (in this book and elsewhere). It is based on Google’s <a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">R style guide</a>, with a few tweaks. You don’t have to use my style, but you really should use a consistent style.</p>
<p>Good style is important because while your code only has one author, it’ll usually have multiple readers. This is especially true when you’re writing code with others. In that case, it’s a good idea to agree on a common style up-front. Since no style is strictly better than another, working with others may mean that you’ll need to sacrifice some preferred aspects of your style.</p>
<p>The formatR package, by Yihui Xie, makes it easier to clean up poorly formatted code. It can’t do everything, but it can quickly get your code from terrible to pretty good. Make sure to read <a href="http://yihui.name/formatR/" target="_blank" rel="external">the introduction</a> before using it.</p>
<h2 id="Notation-and-naming"><a href="#Notation-and-naming" class="headerlink" title="Notation and naming"></a>Notation and naming</h2><h3 id="File-names"><a href="#File-names" class="headerlink" title="File names"></a>File names</h3><p>File names should be meaningful and end in <code>.R</code>.</p>
<pre><code># Good
fit-models.R
utility-functions.R

# Bad
foo.r
stuff.r
</code></pre><p>If files need to be run in sequence, prefix them with numbers:</p>
<pre><code>0-download.R
1-parse.R
2-explore.R
</code></pre><h3 id="Object-names"><a href="#Object-names" class="headerlink" title="Object names"></a>Object names</h3><blockquote>
<p>“There are only two hard things in Computer Science: cache invalidation and<br>naming things.”</p>
<p>— Phil Karlton</p>
</blockquote>
<p>Variable and function names should be lowercase. Use an underscore (<code>_</code>) to separate words within a name. Generally, variable names should be nouns and function names should be verbs. Strive for names that are concise and meaningful (this is not easy!).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">day_one</span><br><span class="line">day_1</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line">first_day_of_the_month</span><br><span class="line">DayOne</span><br><span class="line">dayone</span><br><span class="line">djm1</span><br></pre></td></tr></table></figure>
<p>Where possible, avoid using names of existing functions and variables. This will cause confusion for the readers of your code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Bad</span><br><span class="line">T &lt;- FALSE</span><br><span class="line">c &lt;- 10</span><br><span class="line">mean &lt;- function(x) sum(x)</span><br></pre></td></tr></table></figure>
<h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><h3 id="Spacing"><a href="#Spacing" class="headerlink" title="Spacing"></a>Spacing</h3><p>Place spaces around all infix operators (<code>=</code>, <code>+</code>, <code>-</code>, <code>&lt;-</code>, etc.). The same rule applies when using <code>=</code> in function calls. Always put a space after a comma, and never before (just like in regular English).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">average &lt;- mean(feet / 12 + inches, na.rm = TRUE)</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line">average&lt;-mean(feet/12+inches,na.rm=TRUE)</span><br></pre></td></tr></table></figure>
<p>There’s a small exception to this rule: <code>:</code>, <code>::</code> and <code>:::</code> don’t need spaces around them.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">x &lt;- 1:10</span><br><span class="line">base::get</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line">x &lt;- 1 : 10</span><br><span class="line">base :: get</span><br></pre></td></tr></table></figure>
<p>Place a space before left parentheses, except in a function call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">if (debug) do(x)</span><br><span class="line">plot(x, y)</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line">if(debug)do(x)</span><br><span class="line">plot (x, y)</span><br></pre></td></tr></table></figure>
<p>Extra spacing (i.e., more than one space in a row) is ok if it improves alignment of equal signs or assignments (<code>&lt;-</code>).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list(</span><br><span class="line">  total = a + b + c,</span><br><span class="line">  mean  = (a + b + c) / n</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Do not place spaces around code in parentheses or square brackets (unless there’s a comma, in which case see above).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">if (debug) do(x)</span><br><span class="line">diamonds[5, ]</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line">if ( debug ) do(x)  # No spaces around debug</span><br><span class="line">x[1,]   # Needs a space after the comma</span><br><span class="line">x[1 ,]  # Space goes after comma not before</span><br></pre></td></tr></table></figure>
<h3 id="Curly-braces"><a href="#Curly-braces" class="headerlink" title="Curly braces"></a>Curly braces</h3><p>An opening curly brace should never go on its own line and should always be followed by a new line. A closing curly brace should always go on its own line, unless it’s followed by <code>else</code>.</p>
<p>Always indent the code inside curly braces.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line"></span><br><span class="line">if (y &lt; 0 &amp;&amp; debug) &#123;</span><br><span class="line">  message(&quot;Y is negative&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (y == 0) &#123;</span><br><span class="line">  log(x)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  y ^ x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Bad</span><br><span class="line"></span><br><span class="line">if (y &lt; 0 &amp;&amp; debug)</span><br><span class="line">message(&quot;Y is negative&quot;)</span><br><span class="line"></span><br><span class="line">if (y == 0) &#123;</span><br><span class="line">  log(x)</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">  y ^ x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It’s ok to leave very short statements on the same line:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (y &lt; 0 &amp;&amp; debug) message(&quot;Y is negative&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="Line-length"><a href="#Line-length" class="headerlink" title="Line length"></a>Line length</h3><p>Strive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. If you find yourself running out of room, this is a good indication that you should encapsulate some of the work in a separate function.</p>
<h3 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h3><p>When indenting your code, use two spaces. Never use tabs or mix tabs and spaces.</p>
<p>The only exception is if a function definition runs over multiple lines. In that case, indent the second line to where the definition starts:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">long_function_name &lt;- function(a = &quot;a long argument&quot;,</span><br><span class="line">                               b = &quot;another argument&quot;,</span><br><span class="line">                               c = &quot;another long argument&quot;) &#123;</span><br><span class="line">  # As usual code is indented by two spaces.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>Use <code>&lt;-</code>, not <code>=</code>, for assignment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Good</span><br><span class="line">x &lt;- 5</span><br><span class="line"># Bad</span><br><span class="line">x = 5</span><br></pre></td></tr></table></figure>
<h2 id="Organisation"><a href="#Organisation" class="headerlink" title="Organisation"></a>Organisation</h2><h3 id="Commenting-guidelines"><a href="#Commenting-guidelines" class="headerlink" title="Commenting guidelines"></a>Commenting guidelines</h3><p>Comment your code. Each line of a comment should begin with the comment symbol and a single space: <code>#</code>. Comments should explain the why, not the what.</p>
<p>Use commented lines of <code>-</code> and <code>=</code> to break up your file into easily readable chunks.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Load data ---------------------------</span><br><span class="line"></span><br><span class="line"># Plot data ---------------------------</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><p>Functions are a fundamental building block of R: to master many of the more advanced techniques in this book, you need a solid foundation in how functions work. You’ve probably already created many R functions, and you’re familiar with the basics of how they work. The focus of this chapter is to turn your existing, informal knowledge of functions into a rigorous understanding of what functions are and how they work. You’ll see some interesting tricks and techniques in this chapter, but most of what you’ll learn will be more important as the building blocks for more advanced techniques.</p>
<p>The most important thing to understand about R is that functions are objects in their own right. You can work with them exactly the same way you work with any other type of object. This theme will be explored in depth in <a href="#functional-programming">functional programming</a>.</p>
<h5 id="Quiz-2"><a href="#Quiz-2" class="headerlink" title="Quiz"></a>Quiz</h5><p>Answer the following questions to see if you can safely skip this chapter. You can find the answers at the end of the chapter in <a href="#function-answers">answers</a>.</p>
<ol>
<li>What are the three components of a function?</li>
<li><p>What does the following code return?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">f1 &lt;- function(x) &#123;</span><br><span class="line">  function() &#123;</span><br><span class="line">    x + 10</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">f1(1)()</span><br></pre></td></tr></table></figure>
</li>
<li><p>How would you more typically write this code?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`+`(1, `*`(2, 3))</span><br></pre></td></tr></table></figure>
</li>
<li><p>How could you make this call easier to read?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean(, TRUE, x = c(1:10, NA))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Does the following function throw an error when called? Why/why not?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f2 &lt;- function(a, b) &#123;</span><br><span class="line">  a * 10</span><br><span class="line">&#125;</span><br><span class="line">f2(10, stop(&quot;This is an error!&quot;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>What is an infix function? How do you write it? What’s a replacement    function? How do you write it?</p>
</li>
<li>What function do you use to ensure that a cleanup action occurs    regardless of how a function terminates?</li>
</ol>
<h5 id="Outline-2"><a href="#Outline-2" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#function-components">Function components</a> describes the three main  components of a function.</li>
<li><a href="#lexical-scoping">Lexical scoping</a> teaches you how R finds values from  names, the process of lexical scoping.</li>
<li><a href="#all-calls">Every operation is a function call</a> shows you that everything  that happens in R is a result of a function call, even if it doesn’t look  like it.</li>
<li><a href="#function-arguments">Function arguments</a> discusses the three ways of  supplying arguments to a function, how to call a function given a list of  arguments, and the impact of lazy evaluation.</li>
<li><a href="#special-calls">Special calls</a> describes two special types of function:  infix and replacement functions.</li>
<li><a href="#return-values">Return values</a> discusses how and when functions return  values, and how you can ensure that a function does something before it  exits.</li>
</ul>
<h5 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>The only package you’ll need is <code>pryr</code>, which is used to explore what happens when modifying vectors in place. Install it with <code>install.packages(&quot;pryr&quot;)</code>.</p>
<h2 id="Function-components"><a href="#Function-components" class="headerlink" title="Function components"></a><a href="id=&quot;function-components&quot;">Function components</a></h2><p>All R functions have three parts:</p>
<ul>
<li>the <code>body()</code>, the code inside the function.</li>
<li>the <code>formals()</code>, the list of arguments which controls how you can call the function.</li>
<li>the <code>environment()</code>, the “map” of the location of the function’s variables.</li>
</ul>
<p>When you print a function in R, it shows you these three important components. If the environment isn’t displayed, it means that the function was created in the global environment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) x^2</span><br><span class="line">f</span><br><span class="line">#&gt; function(x) x^2</span><br><span class="line"></span><br><span class="line">formals(f)</span><br><span class="line">#&gt; $x</span><br><span class="line">body(f)</span><br><span class="line">#&gt; x^2</span><br><span class="line">environment(f)</span><br><span class="line">#&gt; &lt;environment: R_GlobalEnv&gt;</span><br></pre></td></tr></table></figure>
<p>The assignment forms of <code>body()</code>, <code>formals()</code>, and <code>environment()</code> can also be used to modify functions.</p>
<p>Like all objects in R, functions can also possess any number of additional <code>attributes()</code>. One attribute used by base R is “srcref”, short for source reference, which points to the source code used to create the function. Unlike <code>body()</code>, this contains code comments and other formatting. You can also add attributes to a function. For example, you can set the <code>class()</code> and add a custom <code>print()</code> method.</p>
<h3 id="Primitive-functions"><a href="#Primitive-functions" class="headerlink" title="Primitive functions"></a>Primitive functions</h3><p>There is one exception to the rule that functions have three components. Primitive functions, like <code>sum()</code>, call C code directly with <code>.Primitive()</code> and contain no R code. Therefore their <code>formals()</code>, <code>body()</code>, and <code>environment()</code> are all <code>NULL</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum</span><br><span class="line">formals(sum)</span><br><span class="line">body(sum)</span><br><span class="line">environment(sum)</span><br></pre></td></tr></table></figure>
<p>Primitive functions are only found in the <code>base</code> package, and since they operate at a low level, they can be more efficient (primitive replacement functions don’t have to make copies), and can have different rules for argument matching (e.g., <code>switch</code> and <code>call</code>).  This, however, comes at a cost of behaving differently from all other functions in R. Hence the R core team generally avoids creating them unless there is no other option.</p>
<h3 id="Exercises-7"><a href="#Exercises-7" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What function allows you to tell if an object is a function? What function    allows you to tell if a function is a primitive function?</li>
<li><p>This code makes a list of all functions in the base package.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objs &lt;- mget(ls(&quot;package:base&quot;), inherits = TRUE)</span><br><span class="line">funs &lt;- Filter(is.function, objs)</span><br></pre></td></tr></table></figure>
<p>Use it to answer the following questions:</p>
<p>a. Which base function has the most arguments?</p>
<p>a. How many base functions have no arguments? What’s special about those<br>   functions?</p>
<p>a. How could you adapt the code to find all primitive functions?</p>
</li>
<li><p>What are the three important components of a function?</p>
</li>
<li>When does printing a function not show what environment it was created in?</li>
</ol>
<h2 id="Lexical-scoping"><a href="#Lexical-scoping" class="headerlink" title="Lexical scoping"></a><a href="id=&quot;lexical-scoping&quot;">Lexical scoping</a></h2><p>Scoping is the set of rules that govern how R looks up the value of a symbol. In the example below, scoping is the set of rules that R applies to go from the symbol <code>x</code> to its value <code>10</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>Understanding scoping allows you to:</p>
<ul>
<li><p>build tools by composing functions, as described in  <a href="#functional-programming">functional programming</a>.</p>
</li>
<li><p>overrule the usual evaluation rules and do non-standard evaluation, as  described in <a href="#nse">non-standard evaluation</a>.</p>
</li>
</ul>
<p>R has two types of scoping: <strong>lexical scoping</strong>, implemented automatically at the language level, and <strong>dynamic scoping</strong>, used in select functions to save typing during interactive analysis. We discuss lexical scoping here because it is intimately tied to function creation. Dynamic scoping is described in more detail in <a href="#scoping-issues">scoping issues</a>.</p>
<p>Lexical scoping looks up symbol values based on how functions were nested when they were created, not how they are nested when they are called. With lexical scoping, you don’t need to know how the function is called to figure out where the value of a variable will be looked up. You just need to look at the function’s definition.</p>
<p>The “lexical” in lexical scoping doesn’t correspond to the usual English definition (“of or relating to words or the vocabulary of a language as distinguished from its grammar and construction”) but comes from the computer science term “lexing”, which is part of the process that converts code represented as text to meaningful pieces that the programming language understands.</p>
<p>There are four basic principles behind R’s implementation of lexical scoping:</p>
<ul>
<li>name masking</li>
<li>functions vs. variables</li>
<li>a fresh start</li>
<li>dynamic lookup</li>
</ul>
<p>You probably know many of these principles already, although you might not have thought about them explicitly. Test your knowledge by mentally running through the code in each block before looking at the answers.</p>
<h3 id="Name-masking"><a href="#Name-masking" class="headerlink" title="Name masking"></a>Name masking</h3><p>The following example illustrates the most basic principle of lexical scoping, and you should have no problem predicting the output.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() &#123;</span><br><span class="line">  x &lt;- 1</span><br><span class="line">  y &lt;- 2</span><br><span class="line">  c(x, y)</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br><span class="line">rm(f)</span><br></pre></td></tr></table></figure>
<p>If a name isn’t defined inside a function, R will look one level up.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 2</span><br><span class="line">g &lt;- function() &#123;</span><br><span class="line">  y &lt;- 1</span><br><span class="line">  c(x, y)</span><br><span class="line">&#125;</span><br><span class="line">g()</span><br><span class="line">rm(x, g)</span><br></pre></td></tr></table></figure>
<p>The same rules apply if a function is defined inside another function: look inside the current function, then where that function was defined, and so on, all the way up to the global environment, and then on to other loaded packages. Run the following code in your head, then confirm the output by running the R code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1</span><br><span class="line">h &lt;- function() &#123;</span><br><span class="line">  y &lt;- 2</span><br><span class="line">  i &lt;- function() &#123;</span><br><span class="line">    z &lt;- 3</span><br><span class="line">    c(x, y, z)</span><br><span class="line">  &#125;</span><br><span class="line">  i()</span><br><span class="line">&#125;</span><br><span class="line">h()</span><br><span class="line">rm(x, h)</span><br></pre></td></tr></table></figure>
<p>The same rules apply to closures, functions created by other functions. Closures will be described in more detail in <a href="#functional-programming">functional programming</a>; here we’ll just look at how they interact with scoping. The following function, <code>j()</code>, returns a function.  What do you think this function will return when we call it?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">j &lt;- function(x) &#123;</span><br><span class="line">  y &lt;- 2</span><br><span class="line">  function() &#123;</span><br><span class="line">    c(x, y)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">k &lt;- j(1)</span><br><span class="line">k()</span><br><span class="line">rm(j, k)</span><br></pre></td></tr></table></figure>
<p>This seems a little magical (how does R know what the value of <code>y</code> is after the function has been called). It works because <code>k</code> preserves the environment in which it was defined and because the environment includes the value of <code>y</code>. <a href="#environments">Environments</a> gives some pointers on how you can dive in and figure out what values are stored in the environment associated with each function.</p>
<h3 id="Functions-vs-variables"><a href="#Functions-vs-variables" class="headerlink" title="Functions vs. variables"></a>Functions vs. variables</h3><p>The same principles apply regardless of the type of associated value — finding functions works exactly the same way as finding variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">l &lt;- function(x) x + 1</span><br><span class="line">m &lt;- function() &#123;</span><br><span class="line">  l &lt;- function(x) x * 2</span><br><span class="line">  l(10)</span><br><span class="line">&#125;</span><br><span class="line">m()</span><br><span class="line">rm(l, m)</span><br></pre></td></tr></table></figure>
<p>For functions, there is one small tweak to the rule. If you are using a name in a context where it’s obvious that you want a function (e.g., <code>f(3)</code>), R will ignore objects that are not functions while it is searching. In the following example <code>n</code> takes on a different value depending on whether R is looking for a function or a variable.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n &lt;- function(x) x / 2</span><br><span class="line">o &lt;- function() &#123;</span><br><span class="line">  n &lt;- 10</span><br><span class="line">  n(n)</span><br><span class="line">&#125;</span><br><span class="line">o()</span><br><span class="line">rm(n, o)</span><br></pre></td></tr></table></figure>
<p>However, using the same name for functions and other objects will make for confusing code, and is generally best avoided.</p>
<h3 id="A-fresh-start"><a href="#A-fresh-start" class="headerlink" title="A fresh start"></a><a href="id=&quot;fresh-start&quot;">A fresh start</a></h3><p>What happens to the values in between invocations of a function? What will happen the first time you run this function? What will happen the second time? (If you haven’t seen <code>exists()</code> before: it returns <code>TRUE</code> if there’s a variable of that name, otherwise it returns <code>FALSE</code>.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">j &lt;- function() &#123;</span><br><span class="line">  if (!exists(&quot;a&quot;)) &#123;</span><br><span class="line">    a &lt;- 1</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    a &lt;- a + 1</span><br><span class="line">  &#125;</span><br><span class="line">  print(a)</span><br><span class="line">&#125;</span><br><span class="line">j()</span><br><span class="line">rm(j)</span><br></pre></td></tr></table></figure>
<p>You might be surprised that it returns the same value, <code>1</code>, every time. This is because every time a function is called, a new environment is created to host execution. A function has no way to tell what happened the last time it was run; each invocation is completely independent. (We’ll see some ways to get around this in <a href="#mutable-state">mutable state</a>.)</p>
<h3 id="Dynamic-lookup"><a href="#Dynamic-lookup" class="headerlink" title="Dynamic lookup"></a>Dynamic lookup</h3><p>Lexical scoping determines where to look for values, not when to look for them. R looks for values when the function is run, not when it’s created. This means that the output of a function can be different depending on objects outside its environment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() x</span><br><span class="line">x &lt;- 15</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line">x &lt;- 20</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>You generally want to avoid this behaviour because it means the function is no longer self-contained. This is a common error — if you make a spelling mistake in your code, you won’t get an error when you create the function, and you might not even get one when you run the function, depending on what variables are defined in the global environment.</p>
<p>One way to detect this problem is the <code>findGlobals()</code> function from <code>codetools</code>. This function lists all the external dependencies of a function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() x + 1</span><br><span class="line">codetools::findGlobals(f)</span><br></pre></td></tr></table></figure>
<p>Another way to try and solve the problem would be to manually change the environment of the function to the <code>emptyenv()</code>, an environment which contains absolutely nothing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environment(f) &lt;- emptyenv()</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>This doesn’t work because R relies on lexical scoping to find <em>everything</em>, even the <code>+</code> operator. It’s never possible to make a function completely self-contained because you must always rely on functions defined in base R or other packages.</p>
<p>You can use this same idea to do other things that are extremely ill-advised. For example, since all of the standard operators in R are functions, you can override them with your own alternatives.  If you ever are feeling particularly evil, run the following code while your friend is away from their computer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`(` &lt;- function(e1) &#123;</span><br><span class="line">  if (is.numeric(e1) &amp;&amp; runif(1) &lt; 0.1) &#123;</span><br><span class="line">    e1 + 1</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    e1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">replicate(50, (1 + 2))</span><br><span class="line">rm(&quot;(&quot;)</span><br></pre></td></tr></table></figure>
<p>This will introduce a particularly pernicious bug: 10% of the time, 1 will be added to any numeric calculation inside parentheses. This is another good reason to regularly restart with a clean R session!</p>
<h3 id="Exercises-8"><a href="#Exercises-8" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>What does the following code return? Why? What does each of the three <code>c</code>‘s mean?</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- 10</span><br><span class="line">c(c = c)</span><br></pre></td></tr></table></figure>
</li>
<li><p>What are the four principles that govern how R looks for values?</p>
</li>
<li><p>What does the following function return? Make a prediction before   running the code yourself.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  f &lt;- function(x) &#123;</span><br><span class="line">    f &lt;- function(x) &#123;</span><br><span class="line">      x ^ 2</span><br><span class="line">    &#125;</span><br><span class="line">    f(x) + 1</span><br><span class="line">  &#125;</span><br><span class="line">  f(x) * 2</span><br><span class="line">&#125;</span><br><span class="line">f(10)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Every-operation-is-a-function-call"><a href="#Every-operation-is-a-function-call" class="headerlink" title="Every operation is a function call"></a><a href="id=&quot;all-calls&quot;">Every operation is a function call</a></h2><blockquote>
<p>“To understand computations in R, two slogans are helpful:</p>
<ul>
<li>Everything that exists is an object.</li>
<li>Everything that happens is a function call.”</li>
</ul>
<p>— John Chambers</p>
</blockquote>
<p>The previous example of redefining <code>(</code> works because every operation in R is a function call, whether or not it looks like one. This includes infix operators like <code>+</code>, control flow operators like <code>for</code>, <code>if</code>, and <code>while</code>, subsetting operators like <code>[]</code> and <code>$</code>, and even the curly brace <code>{</code>. This means that each pair of statements in the following example is exactly equivalent.  Note that <code>` </code>, the backtick, lets you refer to functions or variables that have otherwise reserved or illegal names:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10; y &lt;- 5</span><br><span class="line">x + y</span><br><span class="line">`+`(x, y)</span><br><span class="line"></span><br><span class="line">for (i in 1:2) print(i)</span><br><span class="line">`for`(i, 1:2, print(i))</span><br><span class="line"></span><br><span class="line">if (i == 1) print(&quot;yes!&quot;) else print(&quot;no.&quot;)</span><br><span class="line">`if`(i == 1, print(&quot;yes!&quot;), print(&quot;no.&quot;))</span><br><span class="line"></span><br><span class="line">x[3]</span><br><span class="line">`[`(x, 3)</span><br><span class="line"></span><br><span class="line">&#123; print(1); print(2); print(3) &#125;</span><br><span class="line">`&#123;`(print(1), print(2), print(3))</span><br></pre></td></tr></table></figure>
<p>It is possible to override the definitions of these special functions, but this is almost certainly a bad idea. However, there are occasions when it might be useful: it allows you to do something that would have otherwise been impossible. For example, this feature makes it possible for the <code>dplyr</code> package to translate R expressions into SQL expressions. <a href="#dsl">Domain specific languages</a> uses this idea to create domain specific languages that allow you to concisely express new concepts using existing R constructs.</p>
<p>It’s more often useful to treat special functions as ordinary functions. For example, we could use <code>sapply()</code> to add 3 to every element of a list by first defining a function <code>add()</code>, like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x, y) x + y</span><br><span class="line">sapply(1:10, add, 3)</span><br></pre></td></tr></table></figure>
<p>But we can also get the same effect using the built-in <code>+</code> function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sapply(1:5, `+`, 3)</span><br><span class="line">sapply(1:5, &quot;+&quot;, 3)</span><br></pre></td></tr></table></figure>
<p>Note the difference between <code>`+` </code> and <code>&quot;+&quot;</code>.  The first one is the value of the object called <code>+</code>, and the second is a string containing the character <code>+</code>.  The second version works because <code>sapply</code> can be given the name of a function instead of the function itself: if you read the source of <code>sapply()</code>, you’ll see the first line uses <code>match.fun()</code> to find functions given their names.</p>
<p>A more useful application is to combine <code>lapply()</code> or <code>sapply()</code> with subsetting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- list(1:3, 4:9, 10:12)</span><br><span class="line">sapply(x, &quot;[&quot;, 2)</span><br><span class="line"></span><br><span class="line"># equivalent to</span><br><span class="line">sapply(x, function(x) x[2])</span><br></pre></td></tr></table></figure>
<p>Remembering that everything that happens in R is a function call will help you in <a href="#metaprogramming">metaprogramming</a>.</p>
<h2 id="Function-arguments"><a href="#Function-arguments" class="headerlink" title="Function arguments"></a><a href="id=&quot;function-arguments&quot;">Function arguments</a></h2><p>It’s useful to distinguish between the formal arguments and the actual arguments of a function. The formal arguments are a property of the function, whereas the actual or calling arguments can vary each time you call the function. This section discusses how calling arguments are mapped to formal arguments, how you can call a function given a list of arguments, how default arguments work, and the impact of lazy evaluation.</p>
<h3 id="Calling-functions"><a href="#Calling-functions" class="headerlink" title="Calling functions"></a>Calling functions</h3><p>When calling a function you can specify arguments by position, by complete name, or by partial name. Arguments are matched first by exact name (perfect matching), then by prefix matching, and finally by position.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(abcdef, bcde1, bcde2) &#123;</span><br><span class="line">  list(a = abcdef, b1 = bcde1, b2 = bcde2)</span><br><span class="line">&#125;</span><br><span class="line">str(f(1, 2, 3))</span><br><span class="line">str(f(2, 3, abcdef = 1))</span><br><span class="line"></span><br><span class="line"># Can abbreviate long argument names:</span><br><span class="line">str(f(2, 3, a = 1))</span><br><span class="line"></span><br><span class="line"># But this doesn&apos;t work because abbreviation is ambiguous</span><br><span class="line">str(f(1, 3, b = 1))</span><br></pre></td></tr></table></figure>
<p>Generally, you only want to use positional matching for the first one or two arguments; they will be the most commonly used, and most readers will know what they are. Avoid using positional matching for less commonly used arguments, and only use readable abbreviations with partial matching. (If you are writing code for a package that you want to publish on CRAN you can not use partial matching, and must use complete names.) Named arguments should always come after unnamed arguments. If a function uses <code>...</code> (discussed in more detail below), you can only specify arguments listed after <code>...</code> with their full name.</p>
<p>These are good calls:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mean(1:10)</span><br><span class="line">mean(1:10, trim = 0.05)</span><br></pre></td></tr></table></figure>
<p>This is probably overkill:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mean(x = 1:10)</span><br></pre></td></tr></table></figure>
<p>And these are just confusing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mean(1:10, n = T)</span><br><span class="line">mean(1:10, , FALSE)</span><br><span class="line">mean(1:10, 0.05)</span><br><span class="line">mean(, TRUE, x = c(1:10, NA))</span><br></pre></td></tr></table></figure>
<h3 id="Calling-a-function-given-a-list-of-arguments"><a href="#Calling-a-function-given-a-list-of-arguments" class="headerlink" title="Calling a function given a list of arguments"></a>Calling a function given a list of arguments</h3><p>Suppose you had a list of function arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">args &lt;- list(1:10, na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<p>How could you then send that list to <code>mean()</code>?  You need <code>do.call()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do.call(mean, list(1:10, na.rm = TRUE))</span><br><span class="line"># Equivalent to</span><br><span class="line">mean(1:10, na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<h3 id="Default-and-missing-arguments"><a href="#Default-and-missing-arguments" class="headerlink" title="Default and missing arguments"></a>Default and missing arguments</h3><p>Function arguments in R can have default values.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(a = 1, b = 2) &#123;</span><br><span class="line">  c(a, b)</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>Since arguments in R are evaluated lazily (more on that below), the default value can be defined in terms of other arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">g &lt;- function(a = 1, b = a * 2) &#123;</span><br><span class="line">  c(a, b)</span><br><span class="line">&#125;</span><br><span class="line">g()</span><br><span class="line">g(10)</span><br></pre></td></tr></table></figure>
<p>Default arguments can even be defined in terms of variables created within the function. This is used frequently in base R functions, but I think it is bad practice, because you can’t understand what the default values will be without reading the complete source code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">h &lt;- function(a = 1, b = d) &#123;</span><br><span class="line">  d &lt;- (a + 1) ^ 2</span><br><span class="line">  c(a, b)</span><br><span class="line">&#125;</span><br><span class="line">h()</span><br><span class="line">h(10)</span><br></pre></td></tr></table></figure>
<p>You can determine if an argument was supplied or not with the <code>missing()</code> function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- function(a, b) &#123;</span><br><span class="line">  c(missing(a), missing(b))</span><br><span class="line">&#125;</span><br><span class="line">i()</span><br><span class="line">i(a = 1)</span><br><span class="line">i(b = 2)</span><br><span class="line">i(1, 2)</span><br></pre></td></tr></table></figure>
<p>Sometimes you want to add a non-trivial default value, which might take several lines of code to compute. Instead of inserting that code in the function definition, you could use <code>missing()</code> to conditionally compute it if needed. However, this makes it hard to know which arguments are required and which are optional without carefully reading the documentation. Instead, I usually set the default value to <code>NULL</code> and use <code>is.null()</code> to check if the argument was supplied.</p>
<h3 id="Lazy-evaluation"><a href="#Lazy-evaluation" class="headerlink" title="Lazy evaluation"></a><a href="id=&quot;lazy-evaluation&quot;">Lazy evaluation</a></h3><p>By default, R function arguments are lazy — they’re only evaluated if they’re actually used:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">f(stop(&quot;This is an error!&quot;))</span><br></pre></td></tr></table></figure>
<p>If you want to ensure that an argument is evaluated you can use <code>force()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  force(x)</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">f(stop(&quot;This is an error!&quot;))</span><br></pre></td></tr></table></figure>
<p>This is important when creating closures with <code>lapply()</code> or a loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x) &#123;</span><br><span class="line">  function(y) x + y</span><br><span class="line">&#125;</span><br><span class="line">adders &lt;- lapply(1:10, add)</span><br><span class="line">adders[[1]](10)</span><br><span class="line">adders[[10]](10)</span><br></pre></td></tr></table></figure>
<p><code>x</code> is lazily evaluated the first time that you call one of the adder functions. At this point, the loop is complete and the final value of <code>x</code> is 10.  Therefore all of the adder functions will add 10 on to their input, probably not what you wanted!  Manually forcing evaluation fixes the problem:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x) &#123;</span><br><span class="line">  force(x)</span><br><span class="line">  function(y) x + y</span><br><span class="line">&#125;</span><br><span class="line">adders2 &lt;- lapply(1:10, add)</span><br><span class="line">adders2[[1]](10)</span><br><span class="line">adders2[[10]](10)</span><br></pre></td></tr></table></figure>
<p>This code is exactly equivalent to</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x) &#123;</span><br><span class="line">  x</span><br><span class="line">  function(y) x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>because the force function is defined as <code>force &lt;- function(x) x</code>. However, using this function clearly indicates that you’re forcing evaluation, not that you’ve accidentally typed <code>x</code>.</p>
<p>Default arguments are evaluated inside the function. This means that if the expression depends on the current environment the results will differ depending on whether you use the default value or explicitly provide one.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x = ls()) &#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># ls() evaluated inside f:</span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"># ls() evaluated in global environment:</span><br><span class="line">f(ls())</span><br></pre></td></tr></table></figure>
<p>More technically, an unevaluated argument is called a <strong>promise</strong>, or (less commonly) a thunk. A promise is made up of two parts:</p>
<ul>
<li>The expression which gives rise to the delayed computation. (It can be  accessed with <code>substitute()</code>. See <a href="#nse">non-standard evaluation</a> for more  details.)</li>
<li>The environment where the expression was created and where it should be  evaluated.</li>
</ul>
<p>The first time a promise is accessed the expression is evaluated in the environment where it was created. This value is cached, so that subsequent access to the evaluated promise does not recompute the value (but the original expression is still associated with the value, so <code>substitute()</code> can continue to access it). You can find more information about a promise using <code>pryr::promise_info()</code>. This uses some C++ code to extract information about the promise without evaluating it, which is impossible to do in pure R code.</p>
<p>Laziness is useful in if statements — the second statement below will be evaluated only if the first is true. If it wasn’t, the statement would return an error because <code>NULL &gt; 0</code> is a logical vector of length 0 and not a valid input to <code>if</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- NULL</span><br><span class="line">if (!is.null(x) &amp;&amp; x &gt; 0) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We could implement “&amp;&amp;” ourselves:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`&amp;&amp;` &lt;- function(x, y) &#123;</span><br><span class="line">  if (!x) return(FALSE)</span><br><span class="line">  if (!y) return(FALSE)</span><br><span class="line"></span><br><span class="line">  TRUE</span><br><span class="line">&#125;</span><br><span class="line">a &lt;- NULL</span><br><span class="line">!is.null(a) &amp;&amp; a &gt; 0</span><br></pre></td></tr></table></figure>
<p>This function would not work without lazy evaluation because both <code>x</code> and <code>y</code> would always be evaluated, testing <code>a &gt; 0</code> even when <code>a</code> was NULL.</p>
<p>Sometimes you can also use laziness to eliminate an if statement altogether. For example, instead of:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (is.null(a)) stop(&quot;a is null&quot;)</span><br></pre></td></tr></table></figure>
<p>You could write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!is.null(a) || stop(&quot;a is null&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="-1"><a href="#-1" class="headerlink" title="..."></a><code>...</code></h3><p>There is a special argument called <code>...</code> .  This argument will match any arguments not otherwise matched, and can be easily passed on to other functions.  This is useful if you want to collect arguments to call another function, but you don’t want to prespecify their possible names. <code>...</code> is often used in conjunction with S3 generic functions to allow individual methods to be more flexible.</p>
<p>One relatively sophisticated user of <code>...</code> is the base <code>plot()</code> function. <code>plot()</code> is a generic method with arguments <code>x</code>, <code>y</code> and <code>...</code> . To understand what <code>...</code> does for a given function we need to read the help: “Arguments to be passed to methods, such as graphical parameters”. Most simple invocations of <code>plot()</code> end up calling <code>plot.default()</code> which has many more arguments, but also has <code>...</code> .  Again, reading the documentation reveals that <code>...</code> accepts “other graphical parameters”, which are listed in the help for <code>par()</code>.  This allows us to write code like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot(1:5, col = &quot;red&quot;)</span><br><span class="line">plot(1:5, cex = 5, pch = 20)</span><br></pre></td></tr></table></figure>
<p>This illustrates both the advantages and disadvantages of <code>...</code>: it makes <code>plot()</code> very flexible, but to understand how to use it, we have to carefully read the documentation. Additionally, if we read the source code for <code>plot.default</code>, we can discover undocumented features. It’s possible to pass along other arguments to <code>Axis()</code> and <code>box()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot(1:5, bty = &quot;u&quot;)</span><br><span class="line">plot(1:5, labels = FALSE)</span><br></pre></td></tr></table></figure>
<p>To capture <code>...</code> in a form that is easier to work with, you can use <code>list(...)</code>. (See <a href="#capturing-dots">capturing unevaluated dots</a> for other ways to capture <code>...</code> without evaluating the arguments.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(...) &#123;</span><br><span class="line">  names(list(...))</span><br><span class="line">&#125;</span><br><span class="line">f(a = 1, b = 2)</span><br></pre></td></tr></table></figure>
<p>Using <code>...</code> comes at a price — any misspelled arguments will not raise an error, and any arguments after <code>...</code> must be fully named.  This makes it easy for typos to go unnoticed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(1, 2, NA, na.mr = TRUE)</span><br></pre></td></tr></table></figure>
<p>It’s often better to be explicit rather than implicit, so you might instead ask users to supply a list of additional arguments. That’s certainly easier if you’re trying to use <code>...</code> with multiple additional functions.</p>
<h3 id="Exercises-9"><a href="#Exercises-9" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Clarify the following list of odd function calls:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- sample(replace = TRUE, 20, x = c(1:10, NA))</span><br><span class="line">y &lt;- runif(min = 0, max = 1, 20)</span><br><span class="line">cor(m = &quot;k&quot;, y = y, u = &quot;p&quot;, x = x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>What does this function return? Why? Which principle does it illustrate?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- function(x = &#123;y &lt;- 1; 2&#125;, y = 0) &#123;</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure>
</li>
<li><p>What does this function return? Why? Which principle does it illustrate?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f2 &lt;- function(x = z) &#123;</span><br><span class="line">  z &lt;- 100</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">f2()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Special-calls"><a href="#Special-calls" class="headerlink" title="Special calls"></a><a href="id=&quot;special-calls&quot;">Special calls</a></h2><p>R supports two additional syntaxes for calling special types of functions: infix and replacement functions.</p>
<h3 id="Infix-functions"><a href="#Infix-functions" class="headerlink" title="Infix functions"></a><a href="id=&quot;infix-functions&quot;">Infix functions</a></h3><p>Most functions in R are “prefix” operators: the name of the function comes before the arguments. You can also create infix functions where the function name comes in between its arguments, like <code>+</code> or <code>-</code>.  All user-created infix functions must start and end with <code>%</code>. R comes with the following infix functions predefined: <code>%%</code>, <code>%*%</code>, <code>%/%</code>, <code>%in%</code>, <code>%o%</code>,  <code>%x%</code>. (The complete list of built-in infix operators that don’t need <code>%</code> is: <code>::, :::, $, @, ^, *, /, +, -, &gt;, &gt;=, &lt;, &lt;=, ==, !=, !, &amp;, &amp;&amp;, |, ||, ~, &lt;-, &lt;&lt;-</code>)</p>
<p>For example, we could create a new operator that pastes together strings:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`%+%` &lt;- function(a, b) paste0(a, b)</span><br><span class="line">&quot;new&quot; %+% &quot; string&quot;</span><br></pre></td></tr></table></figure>
<p>Note that when creating the function, you have to put the name in backticks because it’s a special name. This is just a syntactic sugar for an ordinary function call; as far as R is concerned there is no difference between these two expressions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;new&quot; %+% &quot; string&quot;</span><br><span class="line">`%+%`(&quot;new&quot;, &quot; string&quot;)</span><br></pre></td></tr></table></figure>
<p>Or indeed between</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 + 5</span><br><span class="line">`+`(1, 5)</span><br></pre></td></tr></table></figure>
<p>The names of infix functions are more flexible than regular R functions: they can contain any sequence of characters (except “%”, of course). You will need to escape any special characters in the string used to define the function, but not when you call it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`% %` &lt;- function(a, b) paste(a, b)</span><br><span class="line">`%&apos;%` &lt;- function(a, b) paste(a, b)</span><br><span class="line">`%/\\%` &lt;- function(a, b) paste(a, b)</span><br><span class="line"></span><br><span class="line">&quot;a&quot; % % &quot;b&quot;</span><br><span class="line">&quot;a&quot; %&apos;% &quot;b&quot;</span><br><span class="line">&quot;a&quot; %/\% &quot;b&quot;</span><br></pre></td></tr></table></figure>
<p>R’s default precedence rules mean that infix operators are composed from left to right:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`%-%` &lt;- function(a, b) paste0(&quot;(&quot;, a, &quot; %-% &quot;, b, &quot;)&quot;)</span><br><span class="line">&quot;a&quot; %-% &quot;b&quot; %-% &quot;c&quot;</span><br></pre></td></tr></table></figure>
<p>There’s one infix function that I use very often. It’s inspired by Ruby’s <code>||</code> logical or operator, although it works a little differently in R because Ruby has a more flexible definition of what evaluates to <code>TRUE</code> in an if statement. It’s useful as a way of providing a default value in case the output of another function is <code>NULL</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`%||%` &lt;- function(a, b) if (!is.null(a)) a else b</span><br><span class="line">function_that_might_return_null() %||% default value</span><br></pre></td></tr></table></figure>
<h3 id="Replacement-functions"><a href="#Replacement-functions" class="headerlink" title="Replacement functions"></a><a href="id=&quot;replacement-functions&quot;">Replacement functions</a></h3><p>Replacement functions act like they modify their arguments in place, and have the special name <code>xxx&lt;-</code>. They typically have two arguments (<code>x</code> and <code>value</code>), although they can have more, and they must return the modified object. For example, the following function allows you to modify the second element of a vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`second&lt;-` &lt;- function(x, value) &#123;</span><br><span class="line">  x[2] &lt;- value</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">x &lt;- 1:10</span><br><span class="line">second(x) &lt;- 5L</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>When R evaluates the assignment <code>second(x) &lt;- 5</code>, it notices that the left hand side of the <code>&lt;-</code> is not a simple name, so it looks for a function named <code>second&lt;-</code> to do the replacement.</p>
<p>I say they “act” like they modify their arguments in place, because they actually create a modified copy. We can see that by using <code>pryr::address()</code> to find the memory address of the underlying object.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">x &lt;- 1:10</span><br><span class="line">address(x)</span><br><span class="line">second(x) &lt;- 6L</span><br><span class="line">address(x)</span><br></pre></td></tr></table></figure>
<p>Built-in functions that are implemented using <code>.Primitive()</code> will modify in place:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line">address(x)</span><br><span class="line">#&gt; [1] &quot;0x103945110&quot;</span><br><span class="line"></span><br><span class="line">x[2] &lt;- 7L</span><br><span class="line">address(x)</span><br><span class="line">#&gt; [1] &quot;0x103945110&quot;</span><br></pre></td></tr></table></figure>
<p>It’s important to be aware of this behaviour since it has important performance implications.</p>
<p>If you want to supply additional arguments, they go in between <code>x</code> and <code>value</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">`modify&lt;-` &lt;- function(x, position, value) &#123;</span><br><span class="line">  x[position] &lt;- value</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">modify(x, 1) &lt;- 10</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>When you call <code>modify(x, 1) &lt;- 10</code>, behind the scenes R turns it into:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- `modify&lt;-`(x, 1, 10)</span><br></pre></td></tr></table></figure>
<p>This means you can’t do things like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modify(get(&quot;x&quot;), 1) &lt;- 10</span><br></pre></td></tr></table></figure>
<p>because that gets turned into the invalid code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(&quot;x&quot;) &lt;- `modify&lt;-`(get(&quot;x&quot;), 1, 10)</span><br></pre></td></tr></table></figure>
<p>It’s often useful to combine replacement and subsetting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(a = 1, b = 2, c = 3)</span><br><span class="line">names(x)</span><br><span class="line">names(x)[2] &lt;- &quot;two&quot;</span><br><span class="line">names(x)</span><br></pre></td></tr></table></figure>
<p>This works because the expression <code>names(x)[2] &lt;- &quot;two&quot;</code> is evaluated as if you had written:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`*tmp*` &lt;- names(x)</span><br><span class="line">`*tmp*`[2] &lt;- &quot;two&quot;</span><br><span class="line">names(x) &lt;- `*tmp*`</span><br></pre></td></tr></table></figure>
<p>(Yes, it really does create a local variable named <code>*tmp*</code>, which is removed afterwards.)</p>
<h3 id="Exercises-10"><a href="#Exercises-10" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Create a list of all the replacement functions found in the base package.   Which ones are primitive functions?</li>
<li>What are valid names for user-created infix functions?</li>
<li>Create an infix <code>xor()</code> operator.</li>
<li>Create infix versions of the set functions <code>intersect()</code>, <code>union()</code>, and   <code>setdiff()</code>.</li>
<li>Create a replacement function that modifies a random location in a vector.</li>
</ol>
<h2 id="Return-values"><a href="#Return-values" class="headerlink" title="Return values"></a><a href="id=&quot;return-values&quot;">Return values</a></h2><p>The last expression evaluated in a function becomes the return value, the result of invoking the function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  if (x &lt; 10) &#123;</span><br><span class="line">    0</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    10</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">f(5)</span><br><span class="line">f(15)</span><br></pre></td></tr></table></figure>
<p>Generally, I think it’s good style to reserve the use of an explicit <code>return()</code> for when you are returning early, such as for an error, or a simple case of the function. This style of programming can also reduce the level of indentation, and generally make functions easier to understand because you can reason about them locally.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x, y) &#123;</span><br><span class="line">  if (!x) return(y)</span><br><span class="line"></span><br><span class="line">  # complicated processing here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Functions can return only a single object. But this is not a limitation because you can return a list containing any number of objects.</p>
<p>The functions that are the easiest to understand and reason about are pure functions: functions that always map the same input to the same output and have no other impact on the workspace. In other words, pure functions have no <strong>side effects</strong>: they don’t affect the state of the world in any way apart from the value they return.</p>
<p>R protects you from one type of side effect: most R objects have copy-on-modify semantics. So modifying a function argument does not change the original value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  x$a &lt;- 2</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">x &lt;- list(a = 1)</span><br><span class="line">f(x)</span><br><span class="line">x$a</span><br></pre></td></tr></table></figure>
<p>(There are two important exceptions to the copy-on-modify rule: environments and reference classes. These can be modified in place, so extra care is needed when working with them.)</p>
<p>This is notably different to languages like Java where you can modify the inputs of a function. This copy-on-modify behaviour has important performance consequences which are discussed in depth in <a href="#profiling">profiling</a>. (Note that the performance consequences are a result of R’s implementation of copy-on-modify semantics; they are not true in general. Clojure is a new language that makes extensive use of copy-on-modify semantics with limited performance consequences.)</p>
<p>Most base R functions are pure, with a few notable exceptions:</p>
<ul>
<li><code>library()</code> which loads a package, and hence modifies the search path.</li>
<li><code>setwd()</code>, <code>Sys.setenv()</code>, <code>Sys.setlocale()</code> which change the working  directory, environment variables, and the locale, respectively.</li>
<li><code>plot()</code> and friends which produce graphical output.</li>
<li><code>write()</code>, <code>write.csv()</code>, <code>saveRDS()</code>, etc. which save output to disk.</li>
<li><code>options()</code> and <code>par()</code> which modify global settings.</li>
<li>S4 related functions which modify global tables of classes and methods.</li>
<li>Random number generators which produce different numbers each time you<br>run them.</li>
</ul>
<p>It’s generally a good idea to minimise the use of side effects, and where possible, to minimise the footprint of side effects by separating pure from impure functions. Pure functions are easier to test (because all you need to worry about are the input values and the output), and are less likely to work differently on different versions of R or on different platforms. For example, this is one of the motivating principles of ggplot2: most operations work on an object that represents a plot, and only the final <code>print</code> or <code>plot</code> call has the side effect of actually drawing the plot.</p>
<p>Functions can return <code>invisible</code> values, which are not printed out by default when you call the function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- function() 1</span><br><span class="line">f2 &lt;- function() invisible(1)</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">f2()</span><br><span class="line">f1() == 1</span><br><span class="line">f2() == 1</span><br></pre></td></tr></table></figure>
<p>You can force an invisible value to be displayed by wrapping it in parentheses:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(f2())</span><br></pre></td></tr></table></figure>
<p>The most common function that returns invisibly is <code>&lt;-</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 2</span><br><span class="line">(a &lt;- 2)</span><br></pre></td></tr></table></figure>
<p>This is what makes it possible to assign one value to multiple variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- b &lt;- c &lt;- d &lt;- 2</span><br></pre></td></tr></table></figure>
<p>because this is parsed as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a &lt;- (b &lt;- (c &lt;- (d &lt;- 2))))</span><br></pre></td></tr></table></figure>
<h3 id="On-exit"><a href="#On-exit" class="headerlink" title="On exit"></a><a href="id=&quot;on-exit&quot;">On exit</a></h3><p>As well as returning a value, functions can set up other triggers to occur when the function is finished using <code>on.exit()</code>. This is often used as a way to guarantee that changes to the global state are restored when the function exits. The code in <code>on.exit()</code> is run regardless of how the function exits, whether with an explicit (early) return, an error, or simply reaching the end of the function body.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">in_dir &lt;- function(dir, code) &#123;</span><br><span class="line">  old &lt;- setwd(dir)</span><br><span class="line">  on.exit(setwd(old))</span><br><span class="line"></span><br><span class="line">  force(code)</span><br><span class="line">&#125;</span><br><span class="line">getwd()</span><br><span class="line">in_dir(&quot;~&quot;, getwd())</span><br></pre></td></tr></table></figure>
<p>The basic pattern is simple:</p>
<ul>
<li>We first set the directory to a new location, capturing the current location  from the output of <code>setwd()</code>.</li>
<li>We then use <code>on.exit()</code> to ensure that the working directory is returned to  the previous value regardless of how the function exits.</li>
<li>Finally, we explicitly force evaluation of the code. (We don’t actually need  <code>force()</code> here, but it makes it clear to readers what we’re doing.)</li>
</ul>
<p><strong>Caution</strong>: If you’re using multiple <code>on.exit()</code> calls within a function, make sure to set <code>add = TRUE</code>. Unfortunately, the default in <code>on.exit()</code> is <code>add = FALSE</code>, so that every time you run it, it overwrites existing exit expressions. Because of the way <code>on.exit()</code> is implemented, it’s not possible to create a variant with <code>add = TRUE</code>, so you must be careful when using it.</p>
<h3 id="Exercises-11"><a href="#Exercises-11" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>How does the <code>chdir</code> parameter of <code>source()</code> compare to <code>in_dir()</code>? Why    might you prefer one approach to the other?</li>
<li>What function undoes the action of <code>library()</code>? How do you save and restore    the values of <code>options()</code> and <code>par()</code>?</li>
<li>Write a function that opens a graphics device, runs the supplied code, and    closes the graphics device (always, regardless of whether or not the plotting    code worked).</li>
<li><p>We can use <code>on.exit()</code> to implement a simple version of <code>capture.output()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">capture.output2 &lt;- function(code) &#123;</span><br><span class="line">  temp &lt;- tempfile()</span><br><span class="line">  on.exit(file.remove(temp), add = TRUE)</span><br><span class="line"></span><br><span class="line">  sink(temp)</span><br><span class="line">  on.exit(sink(), add = TRUE)</span><br><span class="line"></span><br><span class="line">  force(code)</span><br><span class="line">  readLines(temp)</span><br><span class="line">&#125;</span><br><span class="line">capture.output2(cat(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, sep = &quot;\n&quot;))</span><br></pre></td></tr></table></figure>
<p>Compare <code>capture.output()</code> to <code>capture.output2()</code>. How do the functions    differ? What features have I removed to make the key ideas easier to see?    How have I rewritten the key ideas to be easier to understand?</p>
</li>
</ol>
<h2 id="Quiz-answers"><a href="#Quiz-answers" class="headerlink" title="Quiz answers"></a><a href="id=&quot;function-answers&quot;">Quiz answers</a></h2><p>\enlargethispage*{\baselineskip}</p>
<ol>
<li>The three components of a function are its body, arguments, and environment.</li>
<li><code>f1(1)()</code> returns 11.</li>
<li>You’d normally write it in infix style: <code>1 + (2 * 3)</code>.</li>
<li>Rewriting the call to <code>mean(c(1:10, NA), na.rm = TRUE)</code> is easier to    understand.</li>
<li>No, it does not throw an error because the second argument is never used    so it’s never evaluated.</li>
<li>See <a href="#infix-functions">infix</a> and    <a href="#replacement-functions">replacement functions</a>.</li>
<li>You use <code>on.exit()</code>; see <a href="#on-exit">on exit</a> for details.</li>
</ol>
<hr>
<h1 id="OO-field-guide"><a href="#OO-field-guide" class="headerlink" title="OO field guide"></a><a href="id=&quot;oo&quot;">OO field guide</a></h1><p>This chapter is a field guide for recognising and working with R’s objects in the wild. R has three object oriented systems (plus the base types), so it can be a bit intimidating. The goal of this guide is not to make you an expert in all four systems, but to help you identify which system you’re working with and to help you use it effectively.</p>
<p>Central to any object-oriented system are the concepts of class and method. A <strong>class</strong> defines the behaviour of <strong>objects</strong> by describing their attributes and their relationship to other classes. The class is also used when selecting <strong>methods</strong>, functions that behave differently depending on the class of their input. Classes are usually organised in a hierarchy: if a method does not exist for a child, then the parent’s method is used instead; the child <strong>inherits</strong> behaviour from the parent.</p>
<p>R’s three OO systems differ in how classes and methods are defined:</p>
<ul>
<li><strong>S3</strong> implements a style of OO programming called generic-function OO.  This is different from most programming languages, like Java, C++, and C#,  which implement message-passing OO. With message-passing, messages (methods)  are sent to objects and the object determines which function to call.  Typically, this object has a special appearance in the method call, usually<br>appearing before the name of the method/message: e.g.,  <code>canvas.drawRect(&quot;blue&quot;)</code>. S3 is different. While computations are still  carried out via methods, a special type of function called a  <strong>generic function</strong> decides which method to call, e.g.,  <code>drawRect(canvas, &quot;blue&quot;)</code>. S3 is a very casual system. It has no  formal definition of classes.</li>
<li><strong>S4</strong> works similarly to S3, but is more formal. There are two major  differences to S3. S4 has formal class definitions, which describe the  representation and inheritance for each class, and has special helper  functions for defining generics and methods. S4 also has multiple dispatch,  which means that generic functions can pick methods based on the class of<br>any number of arguments, not just one.</li>
<li><strong>Reference classes</strong>, called RC for short, are quite different from S3  and S4. RC implements message-passing OO, so methods belong to classes,  not functions. <code>$</code> is used to separate objects and methods, so method calls  look like <code>canvas$drawRect(&quot;blue&quot;)</code>. RC objects are also mutable: they don’t  use R’s usual copy-on-modify semantics, but are modified in place. This  makes them harder to reason about, but allows them to solve problems that  are difficult to solve with S3 or S4.</li>
</ul>
<p>There’s also one other system that’s not quite OO, but it’s important to mention here:</p>
<ul>
<li><strong>base types</strong>, the internal C-level types that underlie the other OO  systems. Base types are mostly manipulated using C code, but they’re  important to know about because they provide the building blocks for the  other OO systems.</li>
</ul>
<p>The following sections describe each system in turn, starting with base types. You’ll learn how to recognise the OO system that an object belongs to, how method dispatch works, and how to create new objects, classes, generics, and methods for that system. The chapter concludes with a few remarks on when to use each system.</p>
<h5 id="Prerequisites-1"><a href="#Prerequisites-1" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>You’ll need the pryr package, <code>install.packages(&quot;pryr&quot;)</code>, to access useful functions for examining OO properties.</p>
<h5 id="Quiz-3"><a href="#Quiz-3" class="headerlink" title="Quiz"></a>Quiz</h5><p>Think you know this material already? If you can answer the following questions correctly, you can safely skip this chapter. Find the answers at the end of the chapter in <a href="#oo-answers">answers</a>.</p>
<ol>
<li>How do you tell what OO system (base, S3, S4, or RC) an object is   associated with?</li>
<li>How do you determine the base type (like integer or list) of an object?</li>
<li>What is a generic function?</li>
<li>What are the main differences between S3 and S4? What are the main   differences between S4 &amp; RC?</li>
</ol>
<h5 id="Outline-3"><a href="#Outline-3" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#base-types">Base types</a> teaches you about R’s base object system. Only  R-core can add new classes to this system, but it’s important to know about  because it underpins the three other systems.</li>
<li><a href="#s3">S3</a> shows you the basics of the S3 object system. It’s the simplest  and most commonly used OO system.</li>
<li><a href="#s4">S4</a> discusses the more formal and rigorous S4 system.</li>
<li><a href="#rc">RC</a> teaches you about R’s newest OO system: reference classes, or  RC for short.</li>
<li><a href="#picking-a-system">Picking a system</a> advises on which OO system to  use if you’re starting a new project.</li>
</ul>
<h2 id="Base-types"><a href="#Base-types" class="headerlink" title="Base types"></a><a href="id=&quot;base-types&quot;">Base types</a></h2><p>Underlying every R object is a C structure (or struct) that describes how that object is stored in memory. The struct includes the contents of the object, the information needed for memory management, and, most importantly for this section, a <strong>type</strong>. This is the <strong>base type</strong> of an R object. Base types are not really an object system because only the R core team can create new types. As a result, new base types are added very rarely: the most recent change, in 2011, added two exotic types that you never see in R, but are useful for diagnosing memory problems (<code>NEWSXP</code> and <code>FREESXP</code>). Prior to that, the last type added was a special base type for S4 objects (<code>S4SXP</code>) in 2005.</p>
<p><a href="#data-structures">Data structures</a> explains the most common base types (atomic vectors and lists), but base types also encompass functions, environments, and other more exotic objects likes names, calls, and promises that you’ll learn about later in the book. You can determine an object’s base type with <code>typeof()</code>. Unfortunately the names of base types are not used consistently throughout R, and type and the corresponding “is” function may use different names:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># The type of a function is &quot;closure&quot;</span><br><span class="line">f &lt;- function() &#123;&#125;</span><br><span class="line">typeof(f)</span><br><span class="line">is.function(f)</span><br><span class="line"></span><br><span class="line"># The type of a primitive function is &quot;builtin&quot;</span><br><span class="line">typeof(sum)</span><br><span class="line">is.primitive(sum)</span><br></pre></td></tr></table></figure>
<p>You may have heard of <code>mode()</code> and <code>storage.mode()</code>. I recommend ignoring these functions because they’re just aliases of the names returned by <code>typeof()</code>, and exist solely for S compatibility. Read their source code if you want to understand exactly what they do.</p>
<p>Functions that behave differently for different base types are almost always written in C, where dispatch occurs using switch statements (e.g., <code>switch(TYPEOF(x))</code>). Even if you never write C code, it’s important to understand base types because everything else is built on top of them: S3 objects can be built on top of any base type, S4 objects use a special base type, and RC objects are a combination of S4 and environments (another base type). To see if an object is a pure base type, i.e., it doesn’t also have S3, S4, or RC behaviour, check that <code>is.object(x)</code> returns <code>FALSE</code>.</p>
<h2 id="S3"><a href="#S3" class="headerlink" title="S3"></a><a href="id=&quot;s3&quot;">S3</a></h2><p>S3 is R’s first and simplest OO system. It is the only OO system used in the base and stats packages, and it’s the most commonly used system in CRAN packages. S3 is informal and ad hoc, but it has a certain elegance in its minimalism: you can’t take away any part of it and still have a useful OO system.</p>
<h3 id="Recognising-objects-generic-functions-and-methods"><a href="#Recognising-objects-generic-functions-and-methods" class="headerlink" title="Recognising objects, generic functions, and methods"></a>Recognising objects, generic functions, and methods</h3><p>Most objects that you encounter are S3 objects. But unfortunately there’s no simple way to test if an object is an S3 object in base R. The closest you can come is <code>is.object(x) &amp; !isS4(x)</code>, i.e., it’s an object, but not S4. An easier way is to use <code>pryr::otype()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line"></span><br><span class="line">df &lt;- data.frame(x = 1:10, y = letters[1:10])</span><br><span class="line">otype(df)    # A data frame is an S3 class</span><br><span class="line">otype(df$x)  # A numeric vector isn&apos;t</span><br><span class="line">otype(df$y)  # A factor is</span><br></pre></td></tr></table></figure>
<p>In S3, methods belong to functions, called <strong>generic functions</strong>, or generics for short. S3 methods do not belong to objects or classes. This is different from most other programming languages, but is a legitimate OO style.</p>
<p>To determine if a function is an S3 generic, you can inspect its source code for a call to <code>UseMethod()</code>: that’s the function that figures out the correct method to call, the process of <strong>method dispatch</strong>. Similar to <code>otype()</code>, pryr also provides <code>ftype()</code> which describes the object system, if any, associated with a function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mean</span><br><span class="line">ftype(mean)</span><br></pre></td></tr></table></figure>
<p>Some S3 generics, like <code>[</code>, <code>sum()</code>, and <code>cbind()</code>, don’t call <code>UseMethod()</code> because they are implemented in C. Instead, they call the C functions <code>DispatchGroup()</code> or <code>DispatchOrEval()</code>. Functions that do method dispatch in C code are called <strong>internal generics</strong> and are documented in <code>?&quot;internal generic&quot;</code>. <code>ftype()</code> knows about these special cases too.</p>
<p>Given a class, the job of an S3 generic is to call the right S3 method. You can recognise S3 methods by their names, which look like <code>generic.class()</code>. For example, the Date method for the <code>mean()</code> generic is called <code>mean.Date()</code>, and the factor method for <code>print()</code> is called <code>print.factor()</code>.</p>
<p>This is the reason that most modern style guides discourage the use of <code>.</code> in function names: it makes them look like S3 methods. For example, is <code>t.test()</code> the <code>t</code> method for <code>test</code> objects? Similarly, the use of <code>.</code> in class names can also be confusing: is <code>print.data.frame()</code> the <code>print()</code> method for <code>data.frames</code>, or the <code>print.data()</code> method for <code>frames</code>?  <code>pryr::ftype()</code> knows about these exceptions, so you can use it to figure out if a function is an S3 method or generic:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftype(t.data.frame) # data frame method for t()</span><br><span class="line">ftype(t.test)       # generic function for t tests</span><br></pre></td></tr></table></figure>
<p>You can see all the methods that belong to a generic with <code>methods()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">methods(&quot;mean&quot;)</span><br><span class="line">methods(&quot;t.test&quot;)</span><br></pre></td></tr></table></figure>
<p>(Apart from methods defined in the base package, most S3 methods will not be visible: use <code>getS3method()</code> to read their source code.)</p>
<p>You can also list all generics that have a method for a given class:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">methods(class = &quot;ts&quot;)</span><br></pre></td></tr></table></figure>
<p>There’s no way to list all S3 classes, as you’ll learn in the following section.</p>
<h3 id="Defining-classes-and-creating-objects"><a href="#Defining-classes-and-creating-objects" class="headerlink" title="Defining classes and creating objects"></a>Defining classes and creating objects</h3><p>S3 is a simple and ad hoc system; it has no formal definition of a class. To make an object an instance of a class, you just take an existing base object and set the class attribute. You can do that during creation with <code>structure()</code>, or after the fact with <code>class&lt;-()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Create and assign class in one step</span><br><span class="line">foo &lt;- structure(list(), class = &quot;foo&quot;)</span><br><span class="line"></span><br><span class="line"># Create, then set class</span><br><span class="line">foo &lt;- list()</span><br><span class="line">class(foo) &lt;- &quot;foo&quot;</span><br></pre></td></tr></table></figure>
<p>S3 objects are usually built on top of lists, or atomic vectors with attributes. (You can refresh your memory of attributes with <a href="#attributes">attributes</a>.) You can also turn functions into S3 objects. Other base types are either rarely seen in R, or have unusual semantics that don’t work well with attributes.</p>
<p>You can determine the class of any object using <code>class(x)</code>, and see if an object inherits from a specific class using <code>inherits(x, &quot;classname&quot;)</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class(foo)</span><br><span class="line">inherits(foo, &quot;foo&quot;)</span><br></pre></td></tr></table></figure>
<p>The class of an S3 object can be a vector, which describes behaviour from most to least specific. For example, the class of the <code>glm()</code> object is <code>c(&quot;glm&quot;, &quot;lm&quot;)</code> indicating that generalised linear models inherit behaviour from linear models. Class names are usually lower case, and you should avoid <code>.</code>. Otherwise, opinion is mixed whether to use underscores (<code>my_class</code>) or CamelCase (<code>MyClass</code>) for multi-word class names.</p>
<p>Most S3 classes provide a constructor function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo &lt;- function(x) &#123;</span><br><span class="line">  if (!is.numeric(x)) stop(&quot;X must be numeric&quot;)</span><br><span class="line">  structure(list(x), class = &quot;foo&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You should use it if it’s available (like for <code>factor()</code> and <code>data.frame()</code>). This ensures that you’re creating the class with the correct components. Constructor functions usually have the same name as the class.</p>
<p>Apart from developer supplied constructor functions, S3 has no checks for correctness. This means you can change the class of existing objects:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Create a linear model</span><br><span class="line">mod &lt;- lm(log(mpg) ~ log(disp), data = mtcars)</span><br><span class="line">class(mod)</span><br><span class="line">print(mod)</span><br><span class="line"></span><br><span class="line"># Turn it into a data frame (?!)</span><br><span class="line">class(mod) &lt;- &quot;data.frame&quot;</span><br><span class="line"># But unsurprisingly this doesn&apos;t work very well</span><br><span class="line">print(mod)</span><br><span class="line"># However, the data is still there</span><br><span class="line">mod$coefficients</span><br></pre></td></tr></table></figure>
<p>If you’ve used other OO languages, this might make you feel queasy. But surprisingly, this flexibility causes few problems: while you <em>can</em> change the type of an object, you never should. R doesn’t protect you from yourself: you can easily shoot yourself in the foot. As long as you don’t aim the gun at your foot and pull the trigger, you won’t have a problem.</p>
<h3 id="Creating-new-methods-and-generics"><a href="#Creating-new-methods-and-generics" class="headerlink" title="Creating new methods and generics"></a>Creating new methods and generics</h3><p>To add a new generic, create a function that calls <code>UseMethod()</code>. <code>UseMethod()</code> takes two arguments: the name of the generic function, and the argument to use for method dispatch. If you omit the second argument it will dispatch on the first argument to the function. There’s no need to pass any of the arguments of the generic to <code>UseMethod()</code> and you shouldn’t do so. <code>UseMethod()</code> uses black magic to find them out for itself.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) UseMethod(&quot;f&quot;)</span><br></pre></td></tr></table></figure>
<p>A generic isn’t useful without some methods. To add a method, you just create a regular function with the correct (<code>generic.class</code>) name:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f.a &lt;- function(x) &quot;Class a&quot;</span><br><span class="line"></span><br><span class="line">a &lt;- structure(list(), class = &quot;a&quot;)</span><br><span class="line">class(a)</span><br><span class="line">f(a)</span><br></pre></td></tr></table></figure>
<p>Adding a method to an existing generic works in the same way:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mean.a &lt;- function(x) &quot;a&quot;</span><br><span class="line">mean(a)</span><br></pre></td></tr></table></figure>
<p>As you can see, there’s no check to make sure that the method returns the class compatible with the generic. It’s up to you to make sure that your method doesn’t violate the expectations of existing code.</p>
<h3 id="Method-dispatch"><a href="#Method-dispatch" class="headerlink" title="Method dispatch"></a>Method dispatch</h3><p>S3 method dispatch is relatively simple. <code>UseMethod()</code> creates a vector of function names, like <code>paste0(&quot;generic&quot;, &quot;.&quot;, c(class(x), &quot;default&quot;))</code> and looks for each in turn. The “default” class makes it possible to set up a fall back method for otherwise unknown classes.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) UseMethod(&quot;f&quot;)</span><br><span class="line">f.a &lt;- function(x) &quot;Class a&quot;</span><br><span class="line">f.default &lt;- function(x) &quot;Unknown class&quot;</span><br><span class="line"></span><br><span class="line">f(structure(list(), class = &quot;a&quot;))</span><br><span class="line"># No method for b class, so uses method for a class</span><br><span class="line">f(structure(list(), class = c(&quot;b&quot;, &quot;a&quot;)))</span><br><span class="line"># No method for c class, so falls back to default</span><br><span class="line">f(structure(list(), class = &quot;c&quot;))</span><br></pre></td></tr></table></figure>
<p>Group generic methods add a little more complexity. Group generics make it possible to implement methods for multiple generics with one function. The four group generics and the functions they include are:</p>
<ul>
<li>Math: <code>abs</code>, <code>sign</code>, <code>sqrt</code>, <code>floor</code>, <code>cos</code>, <code>sin</code>, <code>log</code>, <code>exp</code>, …</li>
<li>Ops: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>^</code>, <code>%%</code>, <code>%/%</code>, <code>&amp;</code>, <code>|</code>, <code>!</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code></li>
<li>Summary: <code>all</code>, <code>any</code>, <code>sum</code>, <code>prod</code>, <code>min</code>, <code>max</code>, <code>range</code></li>
<li>Complex: <code>Arg</code>, <code>Conj</code>, <code>Im</code>, <code>Mod</code>, <code>Re</code></li>
</ul>
<p>Group generics are a relatively advanced technique and are beyond the scope of this chapter but you can find out more about them in <code>?groupGeneric</code>. The most important thing to take away from this is to recognise that <code>Math</code>, <code>Ops</code>, <code>Summary</code>, and <code>Complex</code> aren’t real functions, but instead represent groups of functions. Note that inside a group generic function a special variable <code>.Generic</code> provides the actual generic function called.</p>
<p>If you have complex class hierarchies it’s sometimes useful to call the “parent” method. It’s a little bit tricky to define exactly what that means, but it’s basically the method that would have been called if the current method did not exist. Again, this is an advanced technique: you can read about it in <code>?NextMethod</code>.</p>
<p>Because methods are normal R functions, you can call them directly:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- structure(list(), class = &quot;c&quot;)</span><br><span class="line"># Call the correct method:</span><br><span class="line">f.default(c)</span><br><span class="line"># Force R to call the wrong method:</span><br><span class="line">f.a(c)</span><br></pre></td></tr></table></figure>
<p>However, this is just as dangerous as changing the class of an object, so you shouldn’t do it. Please don’t point the loaded gun at your foot! The only reason to call the method directly is that sometimes you can get considerable performance improvements by skipping method dispatch. See <a href="#be-lazy">performance</a> for details.</p>
<p>You can also call an S3 generic with a non-S3 object. Non-internal S3 generics will dispatch on the <strong>implicit class</strong> of base types. (Internal generics don’t do that for performance reasons.) The rules to determine the implicit class of a base type are somewhat complex, but are shown in the function below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">iclass &lt;- function(x) &#123;</span><br><span class="line">  if (is.object(x)) &#123;</span><br><span class="line">    stop(&quot;x is not a primitive type&quot;, call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  c(</span><br><span class="line">    if (is.matrix(x)) &quot;matrix&quot;,</span><br><span class="line">    if (is.array(x) &amp;&amp; !is.matrix(x)) &quot;array&quot;,</span><br><span class="line">    if (is.double(x)) &quot;double&quot;,</span><br><span class="line">    if (is.integer(x)) &quot;integer&quot;,</span><br><span class="line">    mode(x)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">iclass(matrix(1:5))</span><br><span class="line">iclass(array(1.5))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-12"><a href="#Exercises-12" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Read the source code for <code>t()</code> and <code>t.test()</code> and confirm that    <code>t.test()</code> is an S3 generic and not an S3 method. What happens if    you create an object with class <code>test</code> and call <code>t()</code> with it?</li>
<li>What classes have a method for the <code>Math</code> group generic in base R? Read    the source code. How do the methods work?</li>
<li>R has two classes for representing date time data, <code>POSIXct</code> and    <code>POSIXlt</code>, which both inherit from <code>POSIXt</code>. Which generics have    different behaviours for the two classes? Which generics share the same    behaviour?</li>
<li>Which base generic has the greatest number of defined methods?</li>
<li><p><code>UseMethod()</code> calls methods in a special way. Predict what the following     code will return, then run it and read the help for <code>UseMethod()</code> to    figure out what’s going on. Write down the rules in the simplest form    possible.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- 1</span><br><span class="line">g &lt;- function(x) &#123;</span><br><span class="line">  y &lt;- 2</span><br><span class="line">  UseMethod(&quot;g&quot;)</span><br><span class="line">&#125;</span><br><span class="line">g.numeric &lt;- function(x) y</span><br><span class="line">g(10)</span><br><span class="line"></span><br><span class="line">h &lt;- function(x) &#123;</span><br><span class="line">  x &lt;- 10</span><br><span class="line">  UseMethod(&quot;h&quot;)</span><br><span class="line">&#125;</span><br><span class="line">h.character &lt;- function(x) paste(&quot;char&quot;, x)</span><br><span class="line">h.numeric &lt;- function(x) paste(&quot;num&quot;, x)</span><br><span class="line"></span><br><span class="line">h(&quot;a&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Internal generics don’t dispatch on the implicit class of base types.    Carefully read <code>?&quot;internal generic&quot;</code> to determine why the length of <code>f</code>    and <code>g</code> is different in the example below. What function helps    distinguish between the behaviour of <code>f</code> and <code>g</code>?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() 1</span><br><span class="line">g &lt;- function() 2</span><br><span class="line">class(g) &lt;- &quot;function&quot;</span><br><span class="line"></span><br><span class="line">class(f)</span><br><span class="line">class(g)</span><br><span class="line"></span><br><span class="line">length.function &lt;- function(x) &quot;function&quot;</span><br><span class="line">length(f)</span><br><span class="line">length(g)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="S4"><a href="#S4" class="headerlink" title="S4"></a><a href="id=&quot;s4&quot;">S4</a></h2><p>S4 works in a similar way to S3, but it adds formality and rigour. Methods still belong to functions, not classes, but:</p>
<ul>
<li>Classes have formal definitions which describe their fields and  inheritance structures (parent classes).</li>
<li>Method dispatch can be based on multiple arguments to a generic function,  not just one.</li>
<li>There is a special operator, <code>@</code>, for extracting slots (aka fields)  from an S4 object.</li>
</ul>
<p>All S4 related code is stored in the <code>methods</code> package. This package is always available when you’re running R interactively, but may not be available when running R in batch mode. For this reason, it’s a good idea to include an explicit <code>library(methods)</code> whenever you’re using S4.</p>
<p>S4 is a rich and complex system. There’s no way to explain it fully in a few pages. Here I’ll focus on the key ideas underlying S4 so you can use existing S4 objects effectively. To learn more, some good references are:</p>
<ul>
<li><a href="http://www.bioconductor.org/help/course-materials/2010/AdvancedR/4InBioconductor.pdf" target="_blank" rel="external">S4 system development in Bioconductor</a></li>
<li>John Chambers’ <a href="http://amzn.com/0387759352?tag=devtools-20" target="_blank" rel="external"><em>Software for Data Analysis</em></a></li>
<li><a href="http://stackoverflow.com/search?tab=votes&amp;q=user%3a547331%20%5bs4%5d%20is%3aanswe" target="_blank" rel="external">Martin Morgan’s answers to S4 questions on stackoverflow</a></li>
</ul>
<h3 id="Recognising-objects-generic-functions-and-methods-1"><a href="#Recognising-objects-generic-functions-and-methods-1" class="headerlink" title="Recognising objects, generic functions, and methods"></a>Recognising objects, generic functions, and methods</h3><p>Recognising S4 objects, generics, and methods is easy. You can identify an S4 object because <code>str()</code> describes it as a “formal” class, <code>isS4()</code> returns <code>TRUE</code>, and <code>pryr::otype()</code> returns “S4”. S4 generics and methods are also easy to identify because they are S4 objects with well defined classes.</p>
<p>There aren’t any S4 classes in the commonly used base packages (stats, graphics, utils, datasets, and base), so we’ll start by creating an S4 object from the built-in stats4 package, which provides some S4 classes and methods associated with maximum likelihood estimation:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">library(stats4)</span><br><span class="line"></span><br><span class="line"># From example(mle)</span><br><span class="line">y &lt;- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)</span><br><span class="line">nLL &lt;- function(lambda) - sum(dpois(y, lambda, log = TRUE))</span><br><span class="line">fit &lt;- mle(nLL, start = list(lambda = 5), nobs = length(y))</span><br><span class="line"></span><br><span class="line"># An S4 object</span><br><span class="line">isS4(fit)</span><br><span class="line">otype(fit)</span><br><span class="line"></span><br><span class="line"># An S4 generic</span><br><span class="line">isS4(nobs)</span><br><span class="line">ftype(nobs)</span><br><span class="line"></span><br><span class="line"># Retrieve an S4 method, described later</span><br><span class="line">mle_nobs &lt;- method_from_call(nobs(fit))</span><br><span class="line">isS4(mle_nobs)</span><br><span class="line">ftype(mle_nobs)</span><br></pre></td></tr></table></figure>
<p>Use <code>is()</code> with one argument to list all classes that an object inherits from. Use <code>is()</code> with two arguments to test if an object inherits from a specific class.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is(fit)</span><br><span class="line">is(fit, &quot;mle&quot;)</span><br></pre></td></tr></table></figure>
<p>You can get a list of all S4 generics with <code>getGenerics()</code>, and a list of all S4 classes with <code>getClasses()</code>. This list includes shim classes for S3 classes and base types. You can list all S4 methods with <code>showMethods()</code>, optionally restricting selection either by <code>generic</code> or by <code>class</code> (or both). It’s also a good idea to supply <code>where = search()</code> to restrict the search to methods available in the global environment.</p>
<h3 id="Defining-classes-and-creating-objects-1"><a href="#Defining-classes-and-creating-objects-1" class="headerlink" title="Defining classes and creating objects"></a>Defining classes and creating objects</h3><p>In S3, you can turn any object into an object of a particular class just by setting the class attribute. S4 is much stricter: you must define the representation of a class with <code>setClass()</code>, and create a new object with <code>new()</code>. You can find the documentation for a class with a special syntax: <code>class?className</code>, e.g., <code>class?mle</code>.</p>
<p>An S4 class has three key properties:</p>
<ul>
<li>A <strong>name</strong>: an alpha-numeric class identifier. By convention, S4 class names  use UpperCamelCase.</li>
<li>A named list of <strong>slots</strong> (fields), which defines slot names and  permitted classes. For example, a person class might be represented by a  character name and a numeric age: <code>list(name = &quot;character&quot;, age = &quot;numeric&quot;)</code>.</li>
<li>A string giving the class it inherits from, or, in S4 terminology,  that it <strong>contains</strong>. You can provide multiple classes for multiple  inheritance, but this is an advanced technique which adds much  complexity.<br>In <code>slots</code> and <code>contains</code> you can use S4 classes, S3 classes registered  with <code>setOldClass()</code>, or the implicit class of a base type. In <code>slots</code>  you can also use the special class <code>ANY</code> which does not restrict the input.</li>
</ul>
<p>S4 classes have other optional properties like a <code>validity</code> method that tests if an object is valid, and a <code>prototype</code> object that defines default slot values. See <code>?setClass</code> for more details.</p>
<p>The following example creates a Person class with fields name and age, and an Employee class that inherits from Person. The Employee class inherits the slots and methods from the Person, and adds an additional slot, boss. To create objects we call <code>new()</code> with the name of the class, and name-value pairs of slot values.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setClass(&quot;Person&quot;,</span><br><span class="line">  slots = list(name = &quot;character&quot;, age = &quot;numeric&quot;))</span><br><span class="line">setClass(&quot;Employee&quot;,</span><br><span class="line">  slots = list(boss = &quot;Person&quot;),</span><br><span class="line">  contains = &quot;Person&quot;)</span><br><span class="line"></span><br><span class="line">alice &lt;- new(&quot;Person&quot;, name = &quot;Alice&quot;, age = 40)</span><br><span class="line">john &lt;- new(&quot;Employee&quot;, name = &quot;John&quot;, age = 20, boss = alice)</span><br></pre></td></tr></table></figure>
<p>Most S4 classes also come with a constructor function with the same name as the class: if that exists, use it instead of calling <code>new()</code> directly.</p>
<p>To access slots of an S4 object use <code>@</code> or <code>slot()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alice@age</span><br><span class="line">slot(john, &quot;boss&quot;)</span><br></pre></td></tr></table></figure>
<p>(<code>@</code> is equivalent to <code>$</code>, and <code>slot()</code> to <code>[[</code>.)</p>
<p>If an S4 object contains (inherits from) an S3 class or a base type, it will have a special <code>.Data</code> slot which contains the underlying base type or S3 object:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setClass(&quot;RangedNumeric&quot;,</span><br><span class="line">  contains = &quot;numeric&quot;,</span><br><span class="line">  slots = list(min = &quot;numeric&quot;, max = &quot;numeric&quot;))</span><br><span class="line">rn &lt;- new(&quot;RangedNumeric&quot;, 1:10, min = 1, max = 10)</span><br><span class="line">rn@min</span><br><span class="line">rn@.Data</span><br></pre></td></tr></table></figure>
<p>Since R is an interactive programming language, it’s possible to create new classes or redefine existing classes at any time. This can be a problem when you’re interactively experimenting with S4. If you modify a class, make sure you also recreate any objects of that class, otherwise you’ll end up with invalid objects.</p>
<h3 id="Creating-new-methods-and-generics-1"><a href="#Creating-new-methods-and-generics-1" class="headerlink" title="Creating new methods and generics"></a>Creating new methods and generics</h3><p>S4 provides special functions for creating new generics and methods. <code>setGeneric()</code> creates a new generic or converts an existing function into a generic. <code>setMethod()</code> takes the name of the generic, the classes the method should be associated with, and a function that implements the method. For example, we could take <code>union()</code>, which usually just works on vectors, and make it work with data frames:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setGeneric(&quot;union&quot;)</span><br><span class="line">setMethod(&quot;union&quot;,</span><br><span class="line">  c(x = &quot;data.frame&quot;, y = &quot;data.frame&quot;),</span><br><span class="line">  function(x, y) &#123;</span><br><span class="line">    unique(rbind(x, y))</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>If you create a new generic from scratch, you need to supply a function that calls <code>standardGeneric()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setGeneric(&quot;myGeneric&quot;, function(x) &#123;</span><br><span class="line">  standardGeneric(&quot;myGeneric&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><code>standardGeneric()</code> is the S4 equivalent to <code>UseMethod()</code>.</p>
<h3 id="Method-dispatch-1"><a href="#Method-dispatch-1" class="headerlink" title="Method dispatch"></a>Method dispatch</h3><p>If an S4 generic dispatches on a single class with a single parent, then S4 method dispatch is the same as S3 dispatch. The main difference is how you set up default values: S4 uses the special class <code>ANY</code> to match any class and “missing” to match a missing argument. Like S3, S4 also has group generics, documented in <code>?S4groupGeneric</code>, and a way to call the “parent” method, <code>callNextMethod()</code>.</p>
<p>Method dispatch becomes considerably more complicated if you dispatch on multiple arguments, or if your classes use multiple inheritance. The rules are described in <code>?Methods</code>, but they are complicated and it’s difficult to predict which method will be called. For this reason, I strongly recommend avoiding multiple inheritance and multiple dispatch unless absolutely necessary.</p>
<p>Finally, there are two methods that find which method gets called given the specification of a generic call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># From methods: takes generic name and class names</span><br><span class="line">selectMethod(&quot;nobs&quot;, list(&quot;mle&quot;))</span><br><span class="line"></span><br><span class="line"># From pryr: takes an unevaluated function call</span><br><span class="line">method_from_call(nobs(fit))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-13"><a href="#Exercises-13" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Which S4 generic has the most methods defined for it? Which S4 class    has the most methods associated with it?</li>
<li>What happens if you define a new S4 class that doesn’t “contain” an    existing class?  (Hint: read about virtual classes in <code>?Classes</code>.)</li>
<li>What happens if you pass an S4 object to an S3 generic? What happens    if you pass an S3 object to an S4 generic? (Hint: read <code>?setOldClass</code>    for the second case.)</li>
</ol>
<h2 id="RC"><a href="#RC" class="headerlink" title="RC"></a><a href="id=&quot;rc&quot;">RC</a></h2><p>Reference classes (or RC for short) are the newest OO system in R. They were introduced in version 2.12. They are fundamentally different to S3 and S4 because:</p>
<ul>
<li>RC methods belong to objects, not functions</li>
<li>RC objects are mutable: the usual R copy-on-modify semantics do not apply</li>
</ul>
<p>These properties make RC objects behave more like objects do in most other programming languages, e.g., Python, Ruby, Java, and C#. Reference classes are implemented using R code: they are a special S4 class that wraps around an environment.</p>
<h3 id="Defining-classes-and-creating-objects-2"><a href="#Defining-classes-and-creating-objects-2" class="headerlink" title="Defining classes and creating objects"></a>Defining classes and creating objects</h3><p>Since there aren’t any reference classes provided by the base R packages, we’ll start by creating one. RC classes are best used for describing stateful objects, objects that change over time, so we’ll create a simple class to model a bank account.</p>
<p>Creating a new RC class is similar to creating a new S4 class, but you use <code>setRefClass()</code> instead of <code>setClass()</code>. The first, and only required argument, is an alphanumeric <strong>name</strong>. While you can use <code>new()</code> to create new RC objects, it’s good style to use the object returned by <code>setRefClass()</code> to generate new objects. (You can also do that with S4 classes, but it’s less common.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Account &lt;- setRefClass(&quot;Account&quot;)</span><br><span class="line">Account$new()</span><br></pre></td></tr></table></figure>
<p><code>setRefClass()</code> also accepts a list of name-class pairs that define class <strong>fields</strong> (equivalent to S4 slots). Additional named arguments passed to <code>new()</code> will set initial values of the fields. You can get and set field values with <code>$</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Account &lt;- setRefClass(&quot;Account&quot;,</span><br><span class="line">  fields = list(balance = &quot;numeric&quot;))</span><br><span class="line"></span><br><span class="line">a &lt;- Account$new(balance = 100)</span><br><span class="line">a$balance</span><br><span class="line">a$balance &lt;- 200</span><br><span class="line">a$balance</span><br></pre></td></tr></table></figure>
<p>Instead of supplying a class name for the field, you can provide a single argument function which will act as an accessor method. This allows you to add custom behaviour when getting or setting a field. See <code>?setRefClass</code> for more details.</p>
<p>Note that RC objects are <strong>mutable</strong>, i.e., they have reference semantics, and are not copied-on-modify:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b &lt;- a</span><br><span class="line">b$balance</span><br><span class="line">a$balance &lt;- 0</span><br><span class="line">b$balance</span><br></pre></td></tr></table></figure>
<p>For this reason, RC objects come with a <code>copy()</code> method that allow you to make a copy of the object:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- a$copy()</span><br><span class="line">c$balance</span><br><span class="line">a$balance &lt;- 100</span><br><span class="line">c$balance</span><br></pre></td></tr></table></figure>
<p>An object is not very useful without some behaviour defined by <strong>methods</strong>. RC methods are associated with a class and can modify its fields in place. In the following example, note that you access the value of fields with their name, and modify them with <code>&lt;&lt;-</code>. You’ll learn more about <code>&lt;&lt;-</code> in <a href="#binding">Environments</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Account &lt;- setRefClass(&quot;Account&quot;,</span><br><span class="line">  fields = list(balance = &quot;numeric&quot;),</span><br><span class="line">  methods = list(</span><br><span class="line">    withdraw = function(x) &#123;</span><br><span class="line">      balance &lt;&lt;- balance - x</span><br><span class="line">    &#125;,</span><br><span class="line">    deposit = function(x) &#123;</span><br><span class="line">      balance &lt;&lt;- balance + x</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>You call an RC method in the same way as you access a field:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- Account$new(balance = 100)</span><br><span class="line">a$deposit(100)</span><br><span class="line">a$balance</span><br></pre></td></tr></table></figure>
<p>The final important argument to <code>setRefClass()</code> is <code>contains</code>. This is the name of the parent RC class to inherit behaviour from. The following example creates a new type of bank account that returns an error preventing the balance from going below 0.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NoOverdraft &lt;- setRefClass(&quot;NoOverdraft&quot;,</span><br><span class="line">  contains = &quot;Account&quot;,</span><br><span class="line">  methods = list(</span><br><span class="line">    withdraw = function(x) &#123;</span><br><span class="line">      if (balance &lt; x) stop(&quot;Not enough money&quot;)</span><br><span class="line">      balance &lt;&lt;- balance - x</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line">accountJohn &lt;- NoOverdraft$new(balance = 100)</span><br><span class="line">accountJohn$deposit(50)</span><br><span class="line">accountJohn$balance</span><br><span class="line">accountJohn$withdraw(200)</span><br></pre></td></tr></table></figure>
<p>All reference classes eventually inherit from <code>envRefClass</code>. It provides useful methods like <code>copy()</code> (shown above), <code>callSuper()</code> (to call the parent field), <code>field()</code> (to get the value of a field given its name), <code>export()</code> (equivalent to <code>as()</code>), and <code>show()</code> (overridden to control printing). See the inheritance section in <code>setRefClass()</code> for more details.</p>
<h3 id="Recognising-objects-and-methods"><a href="#Recognising-objects-and-methods" class="headerlink" title="Recognising objects and methods"></a>Recognising objects and methods</h3><p>You can recognise RC objects because they are S4 objects (<code>isS4(x)</code>) that inherit from “refClass” (<code>is(x, &quot;refClass&quot;)</code>). <code>pryr::otype()</code> will return “RC”.  RC methods are also S4 objects, with class <code>refMethodDef</code>.</p>
<h3 id="Method-dispatch-2"><a href="#Method-dispatch-2" class="headerlink" title="Method dispatch"></a>Method dispatch</h3><p>Method dispatch is very simple in RC because methods are associated with classes, not functions. When you call <code>x$f()</code>, R will look for a method f in the class of x, then in its parent, then its parent’s parent, and so on. From within a method, you can call the parent method directly with <code>callSuper(...)</code>.</p>
<h3 id="Exercises-14"><a href="#Exercises-14" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Use a field function to prevent the account balance from being directly    manipulated. (Hint: create a “hidden” <code>.balance</code> field, and read the    help for the fields argument in <code>setRefClass()</code>.)</li>
<li>I claimed that there aren’t any RC classes in base R, but that was a    bit of a simplification. Use <code>getClasses()</code> and find which classes    <code>extend()</code> from <code>envRefClass</code>. What are the classes used for? (Hint:    recall how to look up the documentation for a class.)</li>
</ol>
<h2 id="Picking-a-system"><a href="#Picking-a-system" class="headerlink" title="Picking a system"></a><a href="id=&quot;picking-a-system&quot;">Picking a system</a></h2><p>Three OO systems is a lot for one language, but for most R programming, S3 suffices. In R you usually create fairly simple objects and methods for pre-existing generic functions like <code>print()</code>, <code>summary()</code>, and <code>plot()</code>. S3 is well suited to this task, and the majority of OO code that I have written in R is S3. S3 is a little quirky, but it gets the job done with a minimum of code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">packageVersion(&quot;Matrix&quot;)</span><br><span class="line"></span><br><span class="line">library(Matrix)</span><br><span class="line">gs &lt;- getGenerics(&quot;package:Matrix&quot;)</span><br><span class="line">sum(gs@package == &quot;Matrix&quot;)</span><br><span class="line"></span><br><span class="line">length(getClasses(&quot;package:Matrix&quot;, FALSE))</span><br></pre></td></tr></table></figure>
<p>If you are creating more complicated systems of interrelated objects, S4 may be more appropriate. A good example is the <code>Matrix</code> package by Douglas Bates and Martin Maechler. It is designed to efficiently store and compute with many different types of sparse matrices. As of version 1.1.3, it defines 102 classes and 20 generic functions. The package is well written and well commented, and the accompanying vignette (<code>vignette(&quot;Intro2Matrix&quot;, package = &quot;Matrix&quot;)</code>) gives a good overview of the structure of the package. S4 is also used extensively by Bioconductor packages, which need to model complicated interrelationships between biological objects. Bioconductor provides many <a href="https://www.google.com/search?q=bioconductor+s4" target="_blank" rel="external">good resources</a> for learning S4. If you’ve mastered S3, S4 is relatively easy to pick up; the ideas are all the same, it is just more formal, more strict, and more verbose.</p>
<p>If you’ve programmed in a mainstream OO language, RC will seem very natural. But because they can introduce side effects through mutable state, they are harder to understand. For example, when you usually call <code>f(a, b)</code> in R you can assume that <code>a</code> and <code>b</code> will not be modified. But if <code>a</code> and <code>b</code> are RC objects, they might be modified in the place. Generally, when using RC objects you want to minimise side effects as much as possible, and use them only where mutable states are absolutely required. The majority of functions should still be “functional”, and free of side effects. This makes code easier to reason about and easier for other R programmers to understand.</p>
<h2 id="Quiz-answers-1"><a href="#Quiz-answers-1" class="headerlink" title="Quiz answers"></a><a href="id=&quot;oo-answers&quot;">Quiz answers</a></h2><ol>
<li>To determine the OO system of an object, you use a process of elimination.    If <code>!is.object(x)</code>, it’s a base object. If <code>!isS4(x)</code>, it’s S3. If    <code>!is(x, &quot;refClass&quot;)</code>, it’s S4; otherwise it’s RC.</li>
<li>Use <code>typeof()</code> to determine the base class of an object.</li>
<li>A generic function calls specific methods depending on the class of    it inputs. In S3 and S4 object systems, methods belong to generic    functions, not classes like in other programming languages.</li>
<li>S4 is more formal than S3, and supports multiple inheritance and    multiple dispatch. RC objects have reference semantics, and methods    belong to classes, not functions.</li>
</ol>
<hr>
<h1 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a><a href="id=&quot;environments&quot;">Environments</a></h1><p>The environment is the data structure that powers scoping. This chapter dives deep into environments, describing their structure in depth, and using them to improve your understanding of the four scoping rules described in <a href="#lexical-scoping">lexical scoping</a>.</p>
<p>Environments can also be useful data structures in their own right because they have reference semantics. When you modify a binding in an environment, the environment is not copied; it’s modified in place. Reference semantics are not often needed, but can be extremely useful.</p>
<h5 id="Quiz-4"><a href="#Quiz-4" class="headerlink" title="Quiz"></a>Quiz</h5><p>If you can answer the following questions correctly, you already know the most important topics in this chapter. You can find the answers at the end of the chapter in <a href="#env-answers">answers</a>.</p>
<ol>
<li>List at least three ways that an environment is different to a list.</li>
<li>What is the parent of the global environment? What is the only    environment that doesn’t have a parent?</li>
<li>What is the enclosing environment of a function? Why is it    important?</li>
<li>How do you determine the environment from which a function was called?</li>
<li>How are <code>&lt;-</code> and <code>&lt;&lt;-</code> different?</li>
</ol>
<h5 id="Outline-4"><a href="#Outline-4" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#env-basics">Environment basics</a> introduces you to the basic properties  of an environment and shows you how to create your own.</li>
<li><a href="#env-recursion">Recursing over environments</a> provides a function template  for computing with environments, illustrating the idea with a useful  function.</li>
<li><a href="#function-envs">Function environments</a> revises R’s scoping rules in more  depth, showing how they correspond to four types of environment associated  with each function.</li>
<li><a href="#binding">Binding names to values</a> describes the rules that names must  follow (and how to bend them), and shows some variations on binding a  name to a value.</li>
<li><a href="#explicit-envs">Explicit environments</a> discusses three problems where  environments are useful data structures in their own right, independent  of the role they place in scoping.</li>
</ul>
<h5 id="Prerequisites-2"><a href="#Prerequisites-2" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>This chapter uses many functions from the <code>pryr</code> package to pry open R and look inside at the messy details. You can install <code>pryr</code> by running <code>install.packages(&quot;pryr&quot;)</code></p>
<h2 id="Environment-basics"><a href="#Environment-basics" class="headerlink" title="Environment basics"></a><a href="id=&quot;env-basics&quot;">Environment basics</a></h2><p>The job of an environment is to associate, or <strong>bind</strong>, a set of names to a set of values. You can think of an environment as a bag of names:</p>
<p><img src="diagrams/environments.png/bag-of-names.png" alt=""></p>
<p>Each name points to an object stored elsewhere in memory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e &lt;- new.env()</span><br><span class="line">e$a &lt;- FALSE</span><br><span class="line">e$b &lt;- &quot;a&quot;</span><br><span class="line">e$c &lt;- 2.3</span><br><span class="line">e$d &lt;- 1:3</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/bindings.png" alt=""></p>
<p>The objects don’t live in the environment so multiple names can point to the same object:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e$a &lt;- e$d</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/multiple-names.png" alt=""></p>
<p>Confusingly they can also point to different objects that have the same value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e$a &lt;- 1:3</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/copies.png" alt=""></p>
<p>If an object has no names pointing to it, it gets automatically deleted by the garbage collector. This process is described in more detail in <a href="#gc">gc</a>.</p>
<p>Every environment has a parent, another environment. In diagrams, I’ll represent the pointer to parent with a small black circle. The parent is used to implement lexical scoping: if a name is not found in an environment, then R will look in its parent (and so on). Only one environment doesn’t have a parent: the <strong>empty</strong> environment.</p>
<p><img src="diagrams/environments.png/parents.png" alt=""></p>
<p>We use the metaphor of a family to refer to environments. The grandparent of an environment is the parent’s parent, and the ancestors include all parent environments up to the empty environment. It’s rare to talk about the children of an environment because there are no back links: given an environment we have no way to find its children.</p>
<p>Generally, an environment is similar to a list, with four important exceptions:</p>
<ul>
<li>Every object in an environment has a unique name.</li>
<li>The objects in an environment are not ordered (i.e., it doesn’t make sense    to ask what the first object in an environment is).</li>
<li>An environment has a parent.</li>
<li>Environments have reference semantics.</li>
</ul>
<p>More technically, an environment is made up of two components, the <strong>frame</strong>, which contains the name-object bindings (and behaves much like a named list), and the parent environment. Unfortunately “frame” is used inconsistently in R. For example, <code>parent.frame()</code> doesn’t give you the parent frame of an environment. Instead, it gives you the <em>calling</em> environment. This is discussed in more detail in <a href="#calling-environments">calling environments</a>.</p>
<p>There are four special environments:</p>
<ul>
<li>The <code>globalenv()</code>, or global environment, is the interactive workspace.  This is the environment in which you normally work. The parent of the  global environment is the last package that you attached with <code>library()</code>  or <code>require()</code>.</li>
<li>The <code>baseenv()</code>, or base environment, is the environment of the base package.  Its parent is the empty environment.</li>
<li>The <code>emptyenv()</code>, or empty environment, is the ultimate ancestor of all  environments, and the only  environment without a parent.</li>
<li>The <code>environment()</code> is the current environment.</li>
</ul>
<p><code>search()</code> lists all parents of the global environment. This is called the search path because objects in these environments can be found from the top-level interactive workspace. It contains one environment for each attached package and any other objects that you’ve <code>attach()</code>ed. It also contains a special environment called <code>Autoloads</code> which is used to save memory by only loading package objects (like big datasets) when needed.</p>
<p>You can access any environment on the search list using <code>as.environment()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">search()</span><br><span class="line">#&gt; [1] &quot;.GlobalEnv&quot;        &quot;package:stats&quot;     &quot;package:graphics&quot;</span><br><span class="line">#&gt; [4] &quot;package:grDevices&quot; &quot;package:utils&quot;     &quot;package:datasets&quot;</span><br><span class="line">#&gt; [7] &quot;package:methods&quot;   &quot;Autoloads&quot;         &quot;package:base&quot;</span><br><span class="line"></span><br><span class="line">as.environment(&quot;package:stats&quot;)</span><br><span class="line">#&gt; &lt;environment: package:stats&gt;</span><br></pre></td></tr></table></figure>
<p><code>globalenv()</code>, <code>baseenv()</code>, the environments on the search path, and <code>emptyenv()</code> are connected as shown below. Each time you load a new package with <code>library()</code> it is inserted between the global environment and the package that was previously at the top of the search path.</p>
<p><img src="diagrams/environments.png/search-path.png" alt=""></p>
<p>To create an environment manually, use <code>new.env()</code>. You can list the bindings in the environment’s frame with <code>ls()</code> and see its parent with <code>parent.env()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e &lt;- new.env()</span><br><span class="line"># the default parent provided by new.env() is environment from</span><br><span class="line"># which it is called - in this case that&apos;s the global environment.</span><br><span class="line">parent.env(e)</span><br><span class="line">ls(e)</span><br></pre></td></tr></table></figure>
<p>The easiest way to modify the bindings in an environment is to treat it like a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e$a &lt;- 1</span><br><span class="line">e$b &lt;- 2</span><br><span class="line">ls(e)</span><br><span class="line">e$a</span><br></pre></td></tr></table></figure>
<p>By default, <code>ls()</code> only shows names that don’t begin with <code>.</code>. Use <code>all.names = TRUE</code> to show all bindings in an environment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e$.a &lt;- 2</span><br><span class="line">ls(e)</span><br><span class="line">ls(e, all.names = TRUE)</span><br></pre></td></tr></table></figure>
<p>Another useful way to view an environment is <code>ls.str()</code>. It is more useful than <code>str()</code> because it shows each object in the environment. Like <code>ls()</code>, it also has an <code>all.names</code> argument.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str(e)</span><br><span class="line">ls.str(e)</span><br></pre></td></tr></table></figure>
<p>Given a name, you can extract the value to which it is bound with <code>$</code>, <code>[[</code>, or <code>get()</code>:</p>
<ul>
<li><code>$</code> and <code>[[</code> look only in one environment and return <code>NULL</code> if there is no  binding associated with the name.</li>
<li><code>get()</code> uses the regular scoping rules and throws an error if the binding is  not found.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e$c &lt;- 3</span><br><span class="line">e$c</span><br><span class="line">e[[&quot;c&quot;]]</span><br><span class="line">get(&quot;c&quot;, envir = e)</span><br></pre></td></tr></table></figure>
<p>Deleting objects from environments works a little differently from lists. With a list you can remove an entry by setting it to <code>NULL</code>. In environments, that will create a new binding to <code>NULL</code>. Instead, use <code>rm()</code> to remove the binding.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">e &lt;- new.env()</span><br><span class="line"></span><br><span class="line">e$a &lt;- 1</span><br><span class="line">e$a &lt;- NULL</span><br><span class="line">ls(e)</span><br><span class="line"></span><br><span class="line">rm(&quot;a&quot;, envir = e)</span><br><span class="line">ls(e)</span><br></pre></td></tr></table></figure>
<p>You can determine if a binding exists in an environment with <code>exists()</code>. Like <code>get()</code>, its default behaviour is to follow the regular scoping rules and look in parent environments. If you don’t want this behavior, use <code>inherits = FALSE</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">exists(&quot;x&quot;, envir = e)</span><br><span class="line">exists(&quot;x&quot;, envir = e, inherits = FALSE)</span><br></pre></td></tr></table></figure>
<p>To compare environments, you must use <code>identical()</code> not <code>==</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">identical(globalenv(), environment())</span><br><span class="line">globalenv() == environment()</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-15"><a href="#Exercises-15" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>List three ways in which an environment differs from a list.</li>
<li>If you don’t supply an explicit environment, where do <code>ls()</code> and <code>rm()</code>    look? Where does <code>&lt;-</code> make bindings?</li>
<li>Using <code>parent.env()</code> and a loop (or a recursive function), verify that the    ancestors of <code>globalenv()</code> include <code>baseenv()</code> and <code>emptyenv()</code>. Use the    same basic idea to implement your own version of <code>search()</code>.</li>
</ol>
<h2 id="Recursing-over-environments"><a href="#Recursing-over-environments" class="headerlink" title="Recursing over environments"></a><a href="id=&quot;env-recursion&quot;">Recursing over environments</a></h2><p>Environments form a tree, so it’s often convenient to write a recursive function. This section shows you how by applying your new knowledge of environments to understand the helpful <code>pryr::where()</code>. Given a name, <code>where()</code> finds the environment <em>where</em> that name is defined, using R’s regular scoping rules:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">x &lt;- 5</span><br><span class="line">where(&quot;x&quot;)</span><br><span class="line">where(&quot;mean&quot;)</span><br></pre></td></tr></table></figure>
<p>The definition of <code>where()</code> is straightforward. It has two arguments: the name to look for (as a string), and the environment in which to start the search. (We’ll learn later why <code>parent.frame()</code> is a good default in <a href="#calling-environments">calling environments</a>.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">where &lt;- function(name, env = parent.frame()) &#123;</span><br><span class="line">  if (identical(env, emptyenv())) &#123;</span><br><span class="line">    # Base case</span><br><span class="line">    stop(&quot;Can&apos;t find &quot;, name, call. = FALSE)</span><br><span class="line"></span><br><span class="line">  &#125; else if (exists(name, envir = env, inherits = FALSE)) &#123;</span><br><span class="line">    # Success case</span><br><span class="line">    env</span><br><span class="line"></span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    # Recursive case</span><br><span class="line">    where(name, parent.env(env))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There are three cases:</p>
<ul>
<li>The base case: we’ve reached the empty environment and haven’t found the  binding. We can’t go any further, so we throw an error.</li>
<li>The successful case: the name exists in this environment, so we return the  environment.</li>
<li>The recursive case: the name was not found in this environment, so try the  parent.</li>
</ul>
<p>It’s easier to see what’s going on with an example. Imagine you have two environments as in the following diagram:</p>
<p><img src="diagrams/environments.png/where-ex.png" alt=""></p>
<ul>
<li>If you’re looking for <code>a</code>, <code>where()</code> will find it in the first environment.</li>
<li>If you’re looking for <code>b</code>, it’s not in the first environment,  so <code>where()</code> will look in its parent and find it there.</li>
<li>If you’re looking for <code>c</code>, it’s not in the first environment, or the  second environment, so <code>where()</code> reaches the empty environment  and throws an error.</li>
</ul>
<p>It’s natural to work with environments recursively, so <code>where()</code> provides a useful template. Removing the specifics of <code>where()</code> shows the structure more clearly:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(..., env = parent.frame()) &#123;</span><br><span class="line">  if (identical(env, emptyenv())) &#123;</span><br><span class="line">    # base case</span><br><span class="line">  &#125; else if (success) &#123;</span><br><span class="line">    # success case</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    # recursive case</span><br><span class="line">    f(..., env = parent.env(env))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin_sidebar(&quot;Iteration vs. recursion&quot;)</span><br></pre></td></tr></table></figure>
<p>It’s possible to use a loop instead of recursion. This might run slightly faster (because we eliminate some function calls), but I think it’s harder to understand. I include it because you might find it easier to see what’s happening if you’re less familiar with recursive functions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">is_empty &lt;- function(x) identical(x, emptyenv())</span><br><span class="line"></span><br><span class="line">f2 &lt;- function(..., env = parent.frame()) &#123;</span><br><span class="line">  while(!is_empty(env)) &#123;</span><br><span class="line">    if (success) &#123;</span><br><span class="line">      # success case</span><br><span class="line">      return()</span><br><span class="line">    &#125;</span><br><span class="line">    # inspect parent</span><br><span class="line">    env &lt;- parent.env(env)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # base case</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end_sidebar()</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-16"><a href="#Exercises-16" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Modify <code>where()</code> to find all environments that contain a binding for    <code>name</code>.</li>
<li>Write your own version of <code>get()</code> using a function written in the style    of <code>where()</code>.</li>
<li>Write a function called <code>fget()</code> that finds only function objects. It    should have two arguments, <code>name</code> and <code>env</code>, and should obey the regular    scoping rules for functions: if there’s an object with a matching name    that’s not a function, look in the parent. For an added challenge, also    add an <code>inherits</code> argument which controls whether the function recurses up<br>the parents or only looks in one environment.</li>
<li>Write your own version of <code>exists(inherits = FALSE)</code> (Hint: use <code>ls()</code>.)    Write a recursive version that behaves like <code>exists(inherits = TRUE)</code>.</li>
</ol>
<h2 id="Function-environments"><a href="#Function-environments" class="headerlink" title="Function environments"></a><a href="id=&quot;function-envs&quot;">Function environments</a></h2><p>Most environments are not created by you with <code>new.env()</code> but are created as a consequence of using functions. This section discusses the four types of environments associated with a function: enclosing, binding, execution, and calling.</p>
<p>The <strong>enclosing</strong> environment is the environment where the function was created. Every function has one and only one enclosing environment. For the three other types of environment, there may be 0, 1, or many environments associated with each function:</p>
<ul>
<li>Binding a function to a name with <code>&lt;-</code> defines a <strong>binding</strong> environment.</li>
<li>Calling a function creates an ephemeral <strong>execution</strong> environment  that stores variables created during execution.</li>
<li>Every execution environment is associated with a <strong>calling</strong> environment,  which tells you where the function was called.</li>
</ul>
<p>The following sections will explain why each of these environments is important, how to access them, and how you might use them.</p>
<h3 id="The-enclosing-environment"><a href="#The-enclosing-environment" class="headerlink" title="The enclosing environment"></a>The enclosing environment</h3><p>When a function is created, it gains a reference to the environment where it was made. This is the <strong>enclosing environment</strong> and is used for lexical scoping. You can determine the enclosing environment of a function by calling <code>environment()</code> with a function as its first argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- 1</span><br><span class="line">f &lt;- function(x) x + y</span><br><span class="line">environment(f)</span><br><span class="line">#&gt; &lt;environment: R_GlobalEnv&gt;</span><br></pre></td></tr></table></figure>
<p>In diagrams, I’ll depict functions as rounded rectangles. The enclosing environment of a function is given by a small black circle:</p>
<p><img src="diagrams/environments.png/enclosing.png" alt=""></p>
<h3 id="Binding-environments"><a href="#Binding-environments" class="headerlink" title="Binding environments"></a>Binding environments</h3><p>The previous diagram is too simple because functions don’t have names. Instead, the name of a function is defined by a binding. The binding environments of a function are all the environments which have a binding to it. The following diagram better reflects this relationship because the enclosing environment contains a binding from <code>f</code> to the function:</p>
<p><img src="diagrams/environments.png/binding.png" alt=""></p>
<p>In this case the enclosing and binding environments are the same.  They will be different if you assign a function into a different environment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e &lt;- new.env()</span><br><span class="line">e$g &lt;- function() 1</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/binding-2.png" alt=""></p>
<p>The enclosing environment belongs to the function, and never changes, even if the function is moved to a different environment. The enclosing environment determines how the function finds values; the binding environments determine how we find the function.</p>
<p>The distinction between the binding environment and the enclosing environment is important for package namespaces. Package namespaces keep packages independent. For example, if package A uses the base <code>mean()</code> function, what happens if package B creates its own <code>mean()</code> function? Namespaces ensure that package A continues to use the base <code>mean()</code> function, and that package A is not affected by package B (unless explicitly asked for).</p>
<p>Namespaces are implemented using environments, taking advantage of the fact that functions don’t have to live in their enclosing environments. For example, take the base function <code>sd()</code>. It’s binding and enclosing environments are different:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">environment(sd)</span><br><span class="line">#&gt; &lt;environment: namespace:stats&gt;</span><br><span class="line">where(&quot;sd&quot;)</span><br><span class="line">#&gt; &lt;environment: package:stats&gt;</span><br></pre></td></tr></table></figure>
<p>The definition of <code>sd()</code> uses <code>var()</code>, but if we make our own version of <code>var()</code> it doesn’t affect <code>sd()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line">sd(x)</span><br><span class="line">var &lt;- function(x, na.rm = TRUE) 100</span><br><span class="line">sd(x)</span><br></pre></td></tr></table></figure>
<p>This works because every package has two environments associated with it: the <em>package</em> environment and the <em>namespace</em> environment. The package environment contains every publicly accessible function, and is placed on the search path. The namespace environment contains all functions (including internal functions), and its parent environment is a special imports environment that contains bindings to all the functions that the package needs. Every exported function in a package is bound into the <em>package</em> environment, but enclosed by the <em>namespace</em> environment. This complicated relationship is illustrated by the following diagram:</p>
<p><img src="diagrams/environments.png/namespace.png" alt=""></p>
<p>When we type <code>var</code> into the console, it’s found first in the global environment. When <code>sd()</code> looks for <code>var()</code> it finds it first in its namespace environment so never looks in the <code>globalenv()</code>.</p>
<h3 id="Execution-environments"><a href="#Execution-environments" class="headerlink" title="Execution environments"></a>Execution environments</h3><p>What will the following function return the first time it’s run? What about the second?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">g &lt;- function(x) &#123;</span><br><span class="line">  if (!exists(&quot;a&quot;, inherits = FALSE)) &#123;</span><br><span class="line">    message(&quot;Defining a&quot;)</span><br><span class="line">    a &lt;- 1</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    a &lt;- a + 1</span><br><span class="line">  &#125;</span><br><span class="line">  a</span><br><span class="line">&#125;</span><br><span class="line">g(10)</span><br><span class="line">g(10)</span><br></pre></td></tr></table></figure>
<p>This function returns the same value every time it is called because of the fresh start principle, described in <a href="#fresh-start">a fresh start</a>. Each time a function is called, a new environment is created to host execution. The parent of the execution environment is the enclosing environment of the function. Once the function has completed, this environment is thrown away.</p>
<p>Let’s depict that graphically with a simpler function. I draw execution environments around the function they belong to with a dotted border.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h &lt;- function(x) &#123;</span><br><span class="line">  a &lt;- 2</span><br><span class="line">  x + a</span><br><span class="line">&#125;</span><br><span class="line">y &lt;- h(1)</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/execution.png" alt=""></p>
<p>When you create a function inside another function, the enclosing environment of the child function is the execution environment of the parent, and the execution environment is no longer ephemeral. The following example illustrates that idea with a function factory, <code>plus()</code>. We use that factory to create a function called <code>plus_one()</code>. The enclosing environment of <code>plus_one()</code> is the execution environment of <code>plus()</code> where <code>x</code> is bound to the value 1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plus &lt;- function(x) &#123;</span><br><span class="line">  function(y) x + y</span><br><span class="line">&#125;</span><br><span class="line">plus_one &lt;- plus(1)</span><br><span class="line">identical(parent.env(environment(plus_one)), environment(plus))</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/closure-2.png" alt=""></p>
<p>You’ll learn more about function factories in <a href="#functional-programming">functional programming</a>.</p>
<h3 id="Calling-environments"><a href="#Calling-environments" class="headerlink" title="Calling environments"></a><a href="id=&quot;calling-environments&quot;">Calling environments</a></h3><p>Look at the following code. What do you expect <code>i()</code> to return when the code is run?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">h &lt;- function() &#123;</span><br><span class="line">  x &lt;- 10</span><br><span class="line">  function() &#123;</span><br><span class="line">    x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">i &lt;- h()</span><br><span class="line">x &lt;- 20</span><br><span class="line">i()</span><br></pre></td></tr></table></figure>
<p>The top-level <code>x</code> (bound to 20) is a red herring: using the regular scoping rules, <code>h()</code> looks first where it is defined and finds that the value associated with <code>x</code> is 10. However, it’s still meaningful to ask what value <code>x</code> is associated within the environment where <code>i()</code> is called: <code>x</code> is 10 in the environment where <code>h()</code> is defined, but it is 20 in the environment where <code>h()</code> is called.</p>
<p>We can access this environment using the unfortunately named <code>parent.frame()</code>. This function returns the <strong>environment</strong> where the function was called. We can also use this function to look up the value of names in that environment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f2 &lt;- function() &#123;</span><br><span class="line">  x &lt;- 10</span><br><span class="line">  function() &#123;</span><br><span class="line">    def &lt;- get(&quot;x&quot;, environment())</span><br><span class="line">    cll &lt;- get(&quot;x&quot;, parent.frame())</span><br><span class="line">    list(defined = def, called = cll)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">g2 &lt;- f2()</span><br><span class="line">x &lt;- 20</span><br><span class="line">str(g2())</span><br></pre></td></tr></table></figure>
<p>In more complicated scenarios, there’s not just one parent call, but a sequence of calls which lead all the way back to the initiating function, called from the top-level.  The following code generates a call stack three levels deep. The open-ended arrows represent the calling environment of each execution environment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 0</span><br><span class="line">y &lt;- 10</span><br><span class="line">f &lt;- function() &#123;</span><br><span class="line">  x &lt;- 1</span><br><span class="line">  g()</span><br><span class="line">&#125;</span><br><span class="line">g &lt;- function() &#123;</span><br><span class="line">  x &lt;- 2</span><br><span class="line">  h()</span><br><span class="line">&#125;</span><br><span class="line">h &lt;- function() &#123;</span><br><span class="line">  x &lt;- 3</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/environments.png/calling.png" alt=""></p>
<p>Note that each execution environment has two parents: a calling environment and an enclosing environment. R’s regular scoping rules only use the enclosing parent; <code>parent.frame()</code> allows you to access the calling parent.</p>
<p>Looking up variables in the calling environment rather than in the enclosing environment is called <strong>dynamic scoping</strong>. Few languages implement dynamic scoping (Emacs Lisp is a <a href="http://www.gnu.org/software/emacs/emacs-paper.html#SEC15" target="_blank" rel="external">notable exception</a>.) This is because dynamic scoping makes it much harder to reason about how a function operates: not only do you need to know how it was defined, you also need to know in what context it was called. Dynamic scoping is primarily useful for developing functions that aid interactive data analysis. It is one of the topics discussed in <a href="#nse">non-standard evaluation</a>.</p>
<h3 id="Exercises-17"><a href="#Exercises-17" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>List the four environments associated with a function. What does each one    do? Why is the distinction between enclosing and binding environments    particularly important?</li>
<li><p>Draw a diagram that shows the enclosing environments of this function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- function(x1) &#123;</span><br><span class="line">  f2 &lt;- function(x2) &#123;</span><br><span class="line">    f3 &lt;- function(x3) &#123;</span><br><span class="line">      x1 + x2 + x3</span><br><span class="line">    &#125;</span><br><span class="line">    f3(3)</span><br><span class="line">  &#125;</span><br><span class="line">  f2(2)</span><br><span class="line">&#125;</span><br><span class="line">f1(1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Expand your previous diagram to show function bindings.</p>
</li>
<li>Expand it again to show the execution and calling environments.</li>
<li>Write an enhanced version of <code>str()</code> that provides more information    about functions. Show where the function was found and what environment    it was defined in.</li>
</ol>
<h2 id="Binding-names-to-values"><a href="#Binding-names-to-values" class="headerlink" title="Binding names to values"></a><a href="id=&quot;binding&quot;">Binding names to values</a></h2><p>Assignment is the act of binding (or rebinding) a name to a value in an environment. It is the counterpart to scoping, the set of rules that determines how to find the value associated with a name. Compared to most languages, R has extremely flexible tools for binding names to values. In fact, you can not only bind values to names, but you can also bind expressions (promises) or even functions, so that every time you access the value associated with a name, you get something different!</p>
<p>You’ve probably used regular assignment in R thousands of times. Regular assignment creates a binding between a name and an object in the current environment. Names usually consist of letters, digits, <code>.</code> and <code>_</code>, and can’t begin with <code>_</code>.  If you try to use a name that doesn’t follow these rules, you get an error:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_abc &lt;- 1</span><br><span class="line"># Error: unexpected input in &quot;_&quot;</span><br></pre></td></tr></table></figure>
<p>Reserved words (like <code>TRUE</code>, <code>NULL</code>, <code>if</code>, and <code>function</code>) follow the rules but are reserved by R for other purposes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if &lt;- 10</span><br><span class="line">#&gt; Error: unexpected assignment in &quot;if &lt;-&quot;</span><br></pre></td></tr></table></figure>
<p>A complete list of reserved words can be found in <code>?Reserved</code>.</p>
<p>It’s possible to override the usual rules and use a name with any sequence of characters by surrounding the name with backticks:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`a + b` &lt;- 3</span><br><span class="line">`:)` &lt;- &quot;smile&quot;</span><br><span class="line">`    ` &lt;- &quot;spaces&quot;</span><br><span class="line">ls()</span><br><span class="line">#  [1] &quot;    &quot;   &quot;:)&quot;     &quot;a + b&quot;</span><br><span class="line">`:)`</span><br><span class="line">#  [1] &quot;smile&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin_sidebar(&quot;Quotes&quot;)</span><br></pre></td></tr></table></figure>
<p>You can also create non-syntactic bindings using single and double quotes instead of backticks, but I don’t recommend it. The ability to use strings on the left hand side of the assignment arrow is a historical artefact, used before R supported backticks.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end_sidebar()</span><br></pre></td></tr></table></figure>
<p>The regular assignment arrow, <code>&lt;-</code>, always creates a variable in the current environment. The deep assignment arrow, <code>&lt;&lt;-</code>, never creates a variable in the current environment, but instead modifies an existing variable found by walking up the parent environments. You can also do deep binding with <code>assign()</code>: <code>name &lt;&lt;- value</code> is equivalent to <code>assign(&quot;name&quot;, value, inherits = TRUE)</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 0</span><br><span class="line">f &lt;- function() &#123;</span><br><span class="line">  x &lt;&lt;- 1</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>If <code>&lt;&lt;-</code> doesn’t find an existing variable, it will create one in the global environment. This is usually undesirable, because global variables introduce non-obvious dependencies between functions. <code>&lt;&lt;-</code> is most often used in conjunction with a closure, as described in <a href="#closures">Closures</a>.</p>
<p>There are two other special types of binding, delayed and active:</p>
<ul>
<li><p>Rather than assigning the result of an expression immediately, a    <strong>delayed binding</strong> creates and stores a promise to evaluate the expression    when needed. We can create delayed bindings with the special assignment    operator <code>%&lt;d-%</code>, provided by the pryr package.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">system.time(b %&lt;d-% &#123;Sys.sleep(1); 1&#125;)</span><br><span class="line">system.time(b)</span><br></pre></td></tr></table></figure>
<p><code>%&lt;d-%</code> is a wrapper around the base <code>delayedAssign()</code> function, which you    may need to use directly if you need more control. Delayed bindings are    used to implement <code>autoload()</code>, which makes R behave as if the package data    is in memory, even though it’s only loaded from disk when you ask for it.</p>
</li>
<li><p><strong>Active</strong> are not bound to a constant object. Instead, they’re re-computed    every time they’re accessed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x %&lt;a-% runif(1)</span><br><span class="line">x</span><br><span class="line">x</span><br><span class="line">rm(x)</span><br></pre></td></tr></table></figure>
<p><code>%&lt;a-%</code> is a wrapper for the base function <code>makeActiveBinding()</code>. You may    want to use this function directly if you want more control. Active    bindings are used to implement reference class fields.</p>
</li>
</ul>
<h3 id="Exercises-18"><a href="#Exercises-18" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>What does this function do? How does it differ from <code>&lt;&lt;-</code> and why    might you prefer it?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rebind &lt;- function(name, value, env = parent.frame()) &#123;</span><br><span class="line">  if (identical(env, emptyenv())) &#123;</span><br><span class="line">    stop(&quot;Can&apos;t find &quot;, name, call. = FALSE)</span><br><span class="line">  &#125; else if (exists(name, envir = env, inherits = FALSE)) &#123;</span><br><span class="line">    assign(name, value, envir = env)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    rebind(name, value, parent.env(env))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">rebind(&quot;a&quot;, 10)</span><br><span class="line">a &lt;- 5</span><br><span class="line">rebind(&quot;a&quot;, 10)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a version of <code>assign()</code> that will only bind new names, never    re-bind old names. Some programming languages only do this, and are known    as <a href="http://en.wikipedia.org/wiki/Assignment_(computer_science)#Single_assignment" target="_blank" rel="external">single assignment languages</a>.</p>
</li>
<li><p>Write an assignment function that can do active, delayed, and locked    bindings. What might you call it? What arguments should it take? Can you    guess which sort of assignment it should do based on the input?</p>
</li>
</ol>
<h2 id="Explicit-environments"><a href="#Explicit-environments" class="headerlink" title="Explicit environments"></a><a href="id=&quot;explicit-envs&quot;">Explicit environments</a></h2><p>As well as powering scoping, environments are also useful data structures in their own right because they have <strong>reference semantics</strong>.  Unlike most objects in R, when you modify an environment, it does not make a copy. For example, look at this <code>modify()</code> function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modify &lt;- function(x) &#123;</span><br><span class="line">  x$a &lt;- 2</span><br><span class="line">  invisible()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you apply it to a list, the original list is not changed because modifying a list actually creates and modifies a copy.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_l &lt;- list()</span><br><span class="line">x_l$a &lt;- 1</span><br><span class="line">modify(x_l)</span><br><span class="line">x_l$a</span><br></pre></td></tr></table></figure>
<p>However, if you apply it to an environment, the original environment <em>is</em> modified:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x_e &lt;- new.env()</span><br><span class="line">x_e$a &lt;- 1</span><br><span class="line">modify(x_e)</span><br><span class="line">x_e$a</span><br></pre></td></tr></table></figure>
<p>Just as you can use a list to pass data between functions, you can also use an environment. When creating your own environment, note that you should set its parent environment to be the empty environment. This ensures you don’t accidentally inherit objects from somewhere else:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1</span><br><span class="line">e1 &lt;- new.env()</span><br><span class="line">get(&quot;x&quot;, envir = e1)</span><br><span class="line"></span><br><span class="line">e2 &lt;- new.env(parent = emptyenv())</span><br><span class="line">get(&quot;x&quot;, envir = e2)</span><br></pre></td></tr></table></figure>
<p>Environments are data structures useful for solving three common problems:</p>
<ul>
<li>Avoiding copies of large data.</li>
<li>Managing state within a package.</li>
<li>Efficiently looking up values from names.</li>
</ul>
<p>These are described in turn below.</p>
<h3 id="Avoiding-copies"><a href="#Avoiding-copies" class="headerlink" title="Avoiding copies"></a>Avoiding copies</h3><p>Since environments have reference semantics, you’ll never accidentally create a copy. This makes it a useful vessel for large objects. It’s a common technique for bioconductor packages which often have to manage large genomic objects. Changes to R 3.1.0 have made this use substantially less important because modifying a list no longer makes a deep copy. Previously, modifying a single element of a list would cause every element to be copied, an expensive operation if some elements are large. Now, modifying a list efficiently reuses existing vectors, saving much time.</p>
<h3 id="Package-state"><a href="#Package-state" class="headerlink" title="Package state"></a>Package state</h3><p>Explicit environments are useful in packages because they allow you to maintain state across function calls. Normally, objects in a package are locked, so you can’t modify them directly. Instead, you can do something like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">my_env &lt;- new.env(parent = emptyenv())</span><br><span class="line">my_env$a &lt;- 1</span><br><span class="line"></span><br><span class="line">get_a &lt;- function() &#123;</span><br><span class="line">  my_env$a</span><br><span class="line">&#125;</span><br><span class="line">set_a &lt;- function(value) &#123;</span><br><span class="line">  old &lt;- my_env$a</span><br><span class="line">  my_env$a &lt;- value</span><br><span class="line">  invisible(old)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Returning the old value from setter functions is a good pattern because it makes it easier to reset the previous value in conjunction with <code>on.exit()</code> (see more in <a href="#on-exit">on exit</a>).</p>
<h3 id="As-a-hashmap"><a href="#As-a-hashmap" class="headerlink" title="As a hashmap"></a>As a hashmap</h3><p>A hashmap is a data structure that takes constant, O(1), time to find an object based on its name. Environments provide this behaviour by default, so can be used to simulate a hashmap. See the CRAN package <code>hash</code> for a complete development of this idea.</p>
<h2 id="Quiz-answers-2"><a href="#Quiz-answers-2" class="headerlink" title="Quiz answers"></a><a href="id=&quot;env-answers&quot;">Quiz answers</a></h2><ol>
<li>There are four ways: every object in an environment must have a name;    order doesn’t matter; environments have parents; environments have    reference semantics.</li>
<li>The parent of the global environment is the last package that you    loaded. The only environment that doesn’t have a parent is the empty    environment.</li>
<li>The enclosing environment of a function is the environment where it    was created. It determines where a function looks for variables.</li>
<li>Use <code>parent.frame()</code>.</li>
<li><code>&lt;-</code> always creates a binding in the current environment; <code>&lt;&lt;-</code>    rebinds an existing name in a parent of the current environment.</li>
</ol>
<hr>
<h1 id="Debugging-condition-handling-and-defensive-programming"><a href="#Debugging-condition-handling-and-defensive-programming" class="headerlink" title="Debugging, condition handling, and defensive programming"></a><a href="id=&quot;debugging&quot;">Debugging, condition handling, and defensive programming</a></h1><p>What happens when something goes wrong with your R code? What do you do? What tools do you have to address the problem? This chapter will teach you how to fix unanticipated problems (debugging), show you how functions can communicate problems and how you can take action based on those communications (condition handling), and teach you how to avoid common problems before they occur (defensive programming).</p>
<p>Debugging is the art and science of fixing unexpected problems in your code. In this section you’ll learn the tools and techniques that help you get to the root cause of an error. You’ll learn general strategies for debugging, useful R functions like <code>traceback()</code> and <code>browser()</code>, and interactive tools in RStudio.</p>
<p>Not all problems are unexpected. When writing a function, you can often anticipate potential problems (like a non-existent file or the wrong type of input). Communicating these problems to the user is the job of <strong>conditions</strong>: errors, warnings, and messages.</p>
<ul>
<li>Fatal errors are raised by <code>stop()</code> and force all execution to terminate.  Errors are used when there is no way for a function to continue.</li>
<li>Warnings are generated by <code>warning()</code> and are used to display potential  problems, such as when some elements of a vectorised input are invalid,  like <code>log(-1:2)</code>.</li>
<li>Messages are generated by <code>message()</code> and are used to give informative output  in a way that can easily be suppressed by the user (<code>?suppressMessages()</code>).  I often use messages to let the user know what value the function has chosen  for an important missing argument.</li>
</ul>
<p>Conditions are usually displayed prominently, in a bold font or coloured red depending on your R interface. You can tell them apart because errors always start with “Error” and warnings with “Warning message”. Function authors can also communicate with their users with <code>print()</code> or <code>cat()</code>, but I think that’s a bad idea because it’s hard to capture and selectively ignore this sort of output. Printed output is not a condition, so you can’t use any of the useful condition handling tools you’ll learn about below.</p>
<p>Condition handling tools, like <code>withCallingHandlers()</code>, <code>tryCatch()</code>, and <code>try()</code> allow you to take specific actions when a condition occurs. For example, if you’re fitting many models, you might want to continue fitting the others even if one fails to converge. R offers an exceptionally powerful condition handling system based on ideas from Common Lisp, but it’s currently not very well documented or often used. This chapter will introduce you to the most important basics, but if you want to learn more, I recommend the following two sources:</p>
<ul>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html" target="_blank" rel="external"><em>A prototype of a condition system for R</em></a> by Robert Gentleman and Luke Tierney.  This describes an early version of R’s condition system. While the  implementation has changed somewhat since this document was written, it  provides a good overview of how the pieces fit together, and some  motivation for its design.</li>
<li><a href="http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html" target="_blank" rel="external"><em>Beyond Exception Handling: Conditions and Restarts</em></a>  by Peter Seibel. This describes exception handling in Lisp, which happens  to be very similar to R’s approach. It provides useful motivation and  more sophisticated examples. I have provided an R translation of the  chapter at <a href="http://adv-r.had.co.nz/beyond-exception-handling.html" target="_blank" rel="external">http://adv-r.had.co.nz/beyond-exception-handling.html</a>.</li>
</ul>
<hr>
<h2 id="A-Prototype-of-a-Condition-System-for-R"><a href="#A-Prototype-of-a-Condition-System-for-R" class="headerlink" title="A Prototype of a Condition System for R"></a>A Prototype of a Condition System for R</h2><p>Robert Gentleman and Luke Tierney</p>
<h3 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h3><p>This note implements a prototype for a condition system with calling and exiting handlers. It is available as a <a href="http://www.stat.uiowa.edu/~luke/R/exceptions/simpcond.tar.gz" target="_blank" rel="external">package</a>. The package requires the <a href="http://www.stat.uiowa.edu/~luke/R/exceptions/dynvars.tar.gz" target="_blank" rel="external">dynamic variable package</a>.</p>
<p>Exiting handlers provide a structured exception handling mechanism much like the one in Java. Calling handlers allow the <code>error</code> option and the warning mechanism to be handled as part of the system, and also allow for the creation of programmable recovery mechanisms.</p>
<p>Once loaded, the code in this package will take over handling of errors, both those signaled with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> and internal ones. This is accomplished using some hooks that have been added to <code>errors.c</code> for this purpose. These hooks are temporary and will most likely be removed once a new error handling system has been finalized. So this code requires at least R 1.3, but may stop working (and no longer be needed) with later versions of R.</p>
<p>There are a couple of rough edges. One is that internal errors in this package could disable the new exception handling mechanism and return to the standard one. If this happens, evaluating the expression <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>() should reinstate the new system. To make it easier to identify when this has occurred, the new system pre-pends an underscore to the error message, as in</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">stop</span>(<span class="string">"A"</span>)</span><br><span class="line">_Error: A</span><br></pre></td></tr></table></figure>
<p>The underscore can be turned off by setting the <code>add.error.underscore</code> option to false:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; options(add.error.underscore=<span class="literal">FALSE</span>)</span><br><span class="line">&gt; <span class="keyword">stop</span>(<span class="string">"A"</span>)</span><br><span class="line">Error: A</span><br></pre></td></tr></table></figure>
<p>A proper internal implementation would avoid this issue, but it is too early for that. Adding another hook in the <code>longjmp</code> code would also prevent this, but that seemed excessive.</p>
<p>A second issue is the integration with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> and <code>browser</code>. For the most part these should now behave as onemight expect, (to the extent that it is clear what is expected) since error-related jumps are set to stop at intervening frames that have had <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> called on them. But there may be some wrinkles here.</p>
<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>Conditions are unusual situations that might occur and should be addressed in some way. Errors are one example, situations that require a warning are another.</p>
<p>A condition system allows handlers for different kids of conditions to be registered. When an unusual situation occurs, code can signal an appropriate condition. The condition system is then responsible for finding and invoking an appropriate handler for the condition.</p>
<p>Condition handlers come in two flavors: exiting and calling. Exiting handlers are like <code>catch</code> clauses in a Java <code>try</code>/<code>catch</code> block: dynamic state is unwound and control is transferred back to the context where the handler was established (the <code>try</code>/<code>catch</code> block). Thus a non-local transfer of control (a <code>longjmp</code> in C terms) occurs before the handler code is executed. Calling handlers are like UNIX signal handlers. They are called in the context of the code that signaled the condition, much like an ordinary function call.</p>
<p>Most errors will eventually need to be handled by an exiting handler, since continuing after an error is usually not a good idea. Warnings on the other hand are often benign and should therefore typically use a calling handler. But even for errors calling handlers are useful: If you want to use a handler to enter the browser at the point where an error occurs, then a calling handler is needed.</p>
<h4 id="Exiting-Handlers"><a href="#Exiting-Handlers" class="headerlink" title="Exiting Handlers"></a>Exiting Handlers</h4><p>Exiting handlers are primarily used for handling exceptions. The mechanism implemented here is quite similar in many ways to Java’s mechanism. Exceptions are objects inheriting from the abstract class <code>exception</code>. The class <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a> is the class currently used by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> and all internal error signals. The constructor by the same name takes a string describing the exception as argument and an optional call and returns a <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a> object.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; simple.exception(<span class="string">"bad foo"</span>)</span><br><span class="line">&lt;simple.exception: bad foo&gt;</span><br><span class="line">&gt; simple.exception(<span class="string">"bad foo"</span>, quote(foo()))</span><br><span class="line">&lt;simple.exception <span class="keyword">in</span> foo(): bad foo&gt;</span><br></pre></td></tr></table></figure>
<p>The function <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> has been modified to accept exception objects in addition to strings as its argument:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">stop</span>(simple.exception(<span class="string">"bad foo"</span>))</span><br><span class="line">_Error: bad foo</span><br><span class="line">&gt; <span class="keyword">stop</span>(simple.exception(<span class="string">"bad foo"</span>, quote(foo())))</span><br><span class="line">_Error <span class="keyword">in</span> foo() : bad foo</span><br></pre></td></tr></table></figure>
<p>The function <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> is used to establish exiting handlers. Its usage is</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">try.catch(expr, <span class="keyword">...</span>, finally = <span class="literal">NULL</span>)</span><br></pre></td></tr></table></figure>
<p>It evaluates its expression argument in a context where the handlers provided in the <code>...</code> argument are available. Handlers are specified as</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = fun</span><br></pre></td></tr></table></figure>
<p>where <code>name</code> specifies an exception class and <code>fun</code> is a function of one argument, the condition that is to be handled. When an exception is signaled, the most recently established handler that matches the exception (for which the exception inherits from the specified class) is chosen, control transfers back to the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> expression, the handler function is called, and the value returned by the handler function is returned by the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call.</p>
<p>As an example, here the handler catches the exception signaled with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> and returns it:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; try.catch(<span class="keyword">stop</span>(<span class="string">"A"</span>), exception = <span class="keyword">function</span>(e) e)</span><br><span class="line">&lt;simple.exception <span class="keyword">in</span> try.catch(<span class="keyword">stop</span>(<span class="string">"A"</span>), exception = <span class="keyword">function</span>(e) e): A&gt;</span><br></pre></td></tr></table></figure>
<p>A <code>finally</code> clause, if provided, will be evaluated before the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call returns:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;  try.catch(<span class="keyword">stop</span>(simple.exception(<span class="string">"A"</span>)), exception = <span class="keyword">function</span>(e) e,</span><br><span class="line">+            finally = print(<span class="string">"B"</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="string">"B"</span></span><br><span class="line">&lt;simple.exception: A&gt;</span><br><span class="line">&gt;  try.catch(<span class="string">"A"</span>, exception = <span class="keyword">function</span>(e) e, finally = print(<span class="string">"B"</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="string">"B"</span></span><br><span class="line">[<span class="number">1</span>] <span class="string">"A"</span></span><br></pre></td></tr></table></figure>
<p>The handler calls and the <code>finally</code> expression are evaluated in the context in which <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> was called; that is, the handlers supplied to the current <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call are <em>not</em> active during these evaluations.</p>
<p>Using <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> we can define a function <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">ignore.errors</a> that is essentially the equivalent of <code>try</code>:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><code>&lt;establishing handlers&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">ignore.errors</a> &lt;- function(expr)<br> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(expr, exception = function(e) e)</p>
<p>  Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-ignore.errors" target="_blank" rel="external"><code>ignore.errors</code></a> (links are to index).</p>
<p>For example,</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ignore.errors(<span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">&gt; ignore.errors(ts(<span class="number">1</span>:<span class="number">2</span>) + <span class="number">1</span>:<span class="number">3</span>)</span><br><span class="line">&lt;simple.exception <span class="keyword">in</span> ts(<span class="number">1</span>:<span class="number">2</span>) + <span class="number">1</span>:<span class="number">3</span>: time-series/vector length mismatch&gt;</span><br></pre></td></tr></table></figure>
<p>Lazy evaluation is critical in making this simple definition work.</p>
<h4 id="Calling-Handlers"><a href="#Calling-Handlers" class="headerlink" title="Calling Handlers"></a>Calling Handlers</h4><p>The exception hierarchy is contained in the condition hierarchy, which also includes warnings:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">                   condition</span><br><span class="line">                   /    |    \</span><br><span class="line">                  /     |     \</span><br><span class="line">                 /      |      \</span><br><span class="line">                /       |       \</span><br><span class="line">simple.condition    exception    warning</span><br><span class="line">                        |           |</span><br><span class="line">                  simple.exception  |</span><br><span class="line">                                    |</span><br><span class="line">                             simple.warning</span><br></pre></td></tr></table></figure>
<p>The <code>condition</code> class is analogous to the Java <code>Throwable</code> class.</p>
<p>Exiting handlers can also be used with non-exception throwables, but calling handlers are probably more useful there. The calling handlers system is very close to the Common Lisp approach. The Dylan approach seemed a bit cleaner at first but there are too many problems with it, at least for an interactive language like R.</p>
<p>Conditions are signaled by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>, and calling handlers get established by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>. A simple example:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external"><code>&lt;example&gt;=</code></a> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD5" target="_blank" rel="external">-&gt;</a>]</strong><br>f &lt;- function() {<br>n &lt;- 0<br>h &lt;- function(c) {<br>n &lt;&lt;- n + 1<br>cat(“handler call”, n, “\n”)<br>}<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>(for (i in 1:5)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>(“a condition”),<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a> = h)<br>}</p>
<p>produces</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; f()</span><br><span class="line">handler call <span class="number">1</span></span><br><span class="line">&lt;a name=<span class="string">"NWD3"</span>&gt;handler call <span class="number">2</span>&lt;/a&gt;</span><br><span class="line">handler call <span class="number">3</span></span><br><span class="line">handler call <span class="number">4</span></span><br><span class="line">handler call <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>The internal warning mechanism has been modified to signal a <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> condition, so we can define a function to suppress warnings for a particular computation as</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><code>&lt;establishing handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">muffle.warnings</a> &lt;- function(expr)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>(expr, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> = function(w) {})</p>
<p>  Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-muffle.warnings" target="_blank" rel="external"><code>muffle.warnings</code></a> (links are to index).</p>
<p>For example,</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123; <span class="keyword">warning</span>(<span class="string">"A"</span>); <span class="number">1</span>+<span class="number">2</span> &#125;</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br><span class="line">Warning message:</span><br><span class="line">A</span><br><span class="line">&gt; muffle.warnings(&#123; <span class="keyword">warning</span>(<span class="string">"A"</span>); <span class="number">1</span>+<span class="number">2</span> &#125;)</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>We could also use a calling handler to enter the browser on warnings:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD4" target="_blank" rel="external"><code>&lt;dfn&gt;&lt;browse on warnings&gt;=</code></a><br>browse.on.warnings &lt;- function(expr)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>(expr, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>=function(w) browser())</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Browse[<span class="number">1</span>]&gt; browse.on.warnings(&#123; <span class="keyword">warning</span>(<span class="string">"A"</span>); <span class="number">1</span>+<span class="number">2</span> &#125;)</span><br><span class="line">Called from: h$handler(c)</span><br><span class="line">Browse[<span class="number">2</span>]&gt; cont</span><br><span class="line">[<span class="number">1</span>] <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>Calling handlers are pushed on a stack as they are established. When a calling handler is invoked, the handler stack for the call of the handler is the portion of the handler stack below where the handler was found. A handler can therefore pass control to another handler established below it by re-signaling the condition. If a calling handler returns, then the returned value is returned from the signal call.</p>
<h4 id="Recovery-Mechanisms"><a href="#Recovery-Mechanisms" class="headerlink" title="Recovery Mechanisms"></a>Recovery Mechanisms</h4><p>With calling handlers we can also make available a rich structure for programmable recovery mechanisms. These will be called <em>resets</em>. Dylan and Common Lisp use the term <em>restarts</em>, but for us that would cause some confusion. The mechanism described here is based on the Common Lisp mechanism.</p>
<p>One reset that will always be available is the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset. This reset can be invoked by calling <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>(). The default handler does a jump to top level, but will stop at any intervening restarts. The default error handlers call <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>; establishing a new <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset will therefore intercept their transfer of control.</p>
<p>The functions <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a> can be used to locate available resets. <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> takes a reset name and an optional condition as arguments. The first reset matching the name and condition, if supplied, is returned. For example, we can find the first available <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset with</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; find.reset(<span class="string">"abort"</span>)</span><br><span class="line">&lt;reset: abort &gt;</span><br></pre></td></tr></table></figure>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a> takes an optional condition and returns a list of resets applicable to the condition (or all resets if no condition is specified):</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external"><code>&lt;example&gt;+=</code></a> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD8" target="_blank" rel="external">-&gt;</a>]</strong><br><code>&gt;</code> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a>()<br>[<a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">1</a>]<br><code>&lt;reset:</code> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> <code>&gt;</code></p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a> could be used by browser or, in a GUI framework, by a menu for choosing a reset to invoke.</p>
<p>Resets can be invoked with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a>. This takes a reset name or a reset object, as returned by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> for example, and any other arguments needed by the reset handler, transfers control to the point where the handler was established, and calls the handler with the specified arguments. Thus the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> function is just a convenient shorthand for</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke.reset(<span class="string">"abort"</span>)</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke.reset(find.reset(<span class="string">"abort"</span>))</span><br></pre></td></tr></table></figure>
<p>Resets are established using <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>. This is called as</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with.resets(expr, name1 = spec1, name2 = spec2, <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure>
<p>The <code>spec</code> values can take several forms. The can be a function of any number of arguments, which is used as the handler. They can be a string, which is used as a message along with a handler that ignores its arguments and returns <code>NULL</code>. Or they can be a list with any of the following named fields:</p>
<ul>
<li><code>handler</code> : a function of any number of arguments to be used as the handler.</li>
<li><code>test</code>: a function of one argument, a condition, that should return a logical value indicating whether this reset is applicable to the specified condition.</li>
<li><code>message</code>: a message that is stored in the <code>message</code> field of resets returned by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a>. The default function returns <code>TRUE</code> for all conditions.</li>
<li><code>restarts.honored</code>: a logical indicating whether or not a transfer of control should stop at any intervening call frames that have had <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> called on them. The default is <code>FALSE</code>, but it is <code>TRUE</code> for the default <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset.</li>
<li><code>interactive</code>: a function of no arguments that returns a list of arguments to be used by <code>invoke</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>. This is used by <code>invoke</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>.<code>interactively</code> that could be called from a menu of available restarts in a GUI framework.</li>
</ul>
<p>Here is an an outline of how this framework might be used. Suppose we are writing a function maximizer. To allow for flexible recovery when the function causes an error we might do something like this:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external"><code>&lt;resets example&gt;=</code></a><br>myopt &lt;- function(x, fun) {<br>repeat {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>(return(do.opt(x, fun)),<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>.opt = function(new.x) x &lt;&lt;- new.x)<br>}<br>}<br>do.opt &lt;- function(x, fun) {<br>…<br>fval &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>(fun(x),<br>exception = function(e)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>(optfun.error(e, x))),<br>use.value = function(val) val)<br>…<br>}</p>
<p>With a call like</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with.handlers(myopt(x, fun), optfun.error = <span class="keyword">function</span>(e) browser())</span><br></pre></td></tr></table></figure>
<p>we would enter the browser when calling the function to be optimized creates an error. From the browser we could then interactively decide to return a particular value, say 3, from the call with</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke.reset(<span class="string">"use.value"</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>or we could restart the optimization at a new initial value with</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke.reset(<span class="string">"restart.opt"</span>, new.x = <span class="keyword">...</span>)</span><br></pre></td></tr></table></figure>
<p>Alternatively, this could be handled programatically with something like</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">with.handlers(myopt(x, fun),</span><br><span class="line">              optfun.error = <span class="keyword">function</span>(e) &#123;</span><br><span class="line">                 <span class="keyword">if</span> (e$x &lt; <span class="number">0</span>)</span><br><span class="line">                     invoke.reset(<span class="string">"use.value"</span>, <span class="number">3</span>)</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                     invoke.reset(<span class="string">"restart.opt"</span>, abs(rnorm(<span class="number">1</span>)))</span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Some-Issues"><a href="#Some-Issues" class="headerlink" title="Some Issues"></a>Some Issues</h3><h4 id="Minor-Issues"><a href="#Minor-Issues" class="headerlink" title="Minor Issues"></a>Minor Issues</h4><ul>
<li>The interface for resets may not be quite the right interface since it is a bit too string-based to work well with name spaces, but it should end up something along these lines.</li>
<li>One useful change would be to allow <code>browser</code> to take an optional condition argument that represents the condition, if any, that triggered the browser call.</li>
<li>Things like the <code>y/n/c</code> options given by <code>q()</code>, and the internal exit code, could be handled with resets and conditions as well.</li>
<li>The resets described here are all exiting. Common Lisp also allows for calling restarts (as they are called there). There are a few useful examples, but I’m not sure we need them in R. Might not hurt though. Since they are rare, we could maybe use <code>with.calling.resets</code> as the interface.</li>
<li>Things like signal handling and process exiting could be changed to use this stuff.</li>
<li>Some language is probably needed someplace to make it clear that a handler for exceptions should always end by calling <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>.</li>
<li>We need to improve the implementation so it is not possible to drop out of the system or get into a recursive error loop. Neither is very likely but both may be possible.</li>
<li>We need some test code for the non-local control transfers in R.</li>
</ul>
<h4 id="How-To-Integrate-The-restart-Function"><a href="#How-To-Integrate-The-restart-Function" class="headerlink" title="How To Integrate The restart Function"></a>How To Integrate The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> Function</h4><p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> function is currently the primitive building block for error handling mechanisms. When called, it marks the frame of its function for intercepting certain transfers of control. [Currently the frame that is restarted is the one where the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> expression is evaluated. This is probably not what we want when a <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> ends up in a promise.]</p>
<p>Conceptually there seem to be two ways to fit <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> into this condition system:</p>
<ul>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> inserts an exiting exception handler into the handler stack that swallows the exception. Thus every function can be viewed as having a body that looks like this:</li>
</ul>
<blockquote>
<p>try.catch(body, exception = function(e) if (! restart.called) stop(e))</p>
</blockquote>
<ul>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> inserts an <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset into the reset stack, so the body of a function looks like</li>
</ul>
<blockquote>
<p>with.resets(body, abort = function() if (! restart.called) abort())</p>
</blockquote>
<p>Currently, in both R and Splus the <code>error</code> option is called even if a <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> frame is on the stack—only the jump to top level is affected. This seems consistent with the second approach. This package is kind of in between. Following either would require an internal implementation.</p>
<p>Implementing either approach will complicate fully integrating the condition mechanism. The existence of <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> in its current form also complicates the internal evaluation mechanism and makes byte code compilation harder. Since anything that can be done with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> can be done (better) with exception handling, it seems like a good idea to consider eliminating <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> entirely.</p>
<p>To allow existing code using <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> to be easily converted, we could provide a mechanism something like</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external"><code>&lt;possible</code>restart<code>changes&gt;=</code></a> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">restartable</a> &lt;- function(expr) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>.called &lt;- FALSE<br>assign(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>“, function() { <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>.called &lt;&lt;- TRUE },<br>env = parent.frame())<br>repeat<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>(return(eval(substitute(expr), env = parent.frame())),<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> = function() if (! <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>.called) <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>())<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-restartable" target="_blank" rel="external"><code>restartable</code></a> (links are to index).</p>
<p>An interpretation that makes <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> insert an exception handler would use <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> instead of <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>. The <code>eval(substitute(...</code> construct is needed since the expression is potentially evaluated more than once. Perhaps a test function should be added that only makes the abort reset visible if it is active.</p>
<p>Using this mechanism, a function with a body that uses <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> could then be re-written as</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="keyword">...</span>) restartable(body)</span><br></pre></td></tr></table></figure>
<p>For example,</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external"><code>&lt;example&gt;+=</code></a> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD5" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD9" target="_blank" rel="external">-&gt;</a>]</strong><br>f&lt;-function(x, y = TRUE) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>()<br>if (y) {<br>y &lt;- FALSE<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“A”)<br>}<br>else x<br>}</p>
<p>would be rewritten as</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external"><code>&lt;example&gt;+=</code></a> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD8" target="_blank" rel="external">&lt;-</a>D]</strong><br>new.f&lt;-function(x, y = TRUE)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">restartable</a>({<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>()<br>if (y) {<br>y &lt;- FALSE<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“A”)<br>}<br>else x<br>})</p>
<p>To insure that code using <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> is changed, we could define <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> in the base package as</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external"><code>&lt;possible</code>restart<code>changes&gt;+=</code></a> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> &lt;- function()<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(paste(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> no longer supported.\n”,<br>“convert to using the exception handling system or”,<br>“use `restartable’”)</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-restart" target="_blank" rel="external"><code>restart</code></a> (links are to index).</p>
<h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external"><code>&lt;simpcond.R&gt;=</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external"><code>&lt;global variables&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external"><code>&lt;call with current continuation&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external"><code>&lt;handler stack management&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external"><code>&lt;invoking handlers&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external"><code>&lt;signaling conditions&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><code>&lt;establishing handlers&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><code>&lt;condition objects&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external"><code>&lt;internal error conversion&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;</code></a></p>
<p>.First.lib &lt;- function(lib, pkg) {<br>library.dynam(pkg, pkg, lib)<br>require(dynvars)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external"><code>&lt;global variable initialization&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>()<br>}</p>
<p>*</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external"><code>&lt;simpcond.c&gt;=</code></a><br><code>#include &quot;Rinternals.h&quot;</code><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external"><code>&lt;</code>ReturnOrRestart<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external"><code>&lt;</code>JumpToToplevel<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external"><code>&lt;</code>EnableExceptionHooks<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external"><code>&lt;</code>PrintDeferredWarnings<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external"><code>&lt;</code>GetTraceback<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external"><code>&lt;</code>SetErrmessage<code>definition&gt;</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external"><code>&lt;</code>InternalWarningCall<code>definition&gt;</code></a></p>
<p>*</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external"><code>&lt;NAMESPACE&gt;=</code></a><br>import(dynvars)<br>export(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">,</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">.exception</a>)<br>export(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a>, simple.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">)</a><br>export(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>)<br>export(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">muffle.warnings</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">ignore.errors</a>)<br>export(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a>)</p>
<h4 id="Call-With-Current-Continuation"><a href="#Call-With-Current-Continuation" class="headerlink" title="Call With Current Continuation"></a>Call With Current Continuation</h4><p>For handling the transfer of control to exiting handlers we can use a simplified variant of Scheme’s call with current continuation, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a>. This function is called as <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a>(fun) where <code>fun</code> is a function of one argument. <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> calls this function with one argument, an exit function. If the exit function is not used in the body of <code>fun</code>, then the result returned by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> is the result returned by <code>fun</code>. Calling the exit function has the effect of returning immediately from the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> call with the argument to the exit function as the return value of the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> call. This implementation only allows the exit function to be used within the body of <code>fun</code>, which makes it like a Dylan <code>block</code>; Scheme’s call with current continuation is quite a bit more general.</p>
<p>We can almost implement what we need in pure R code by using a combination of environments and lazy evaluation. A pure R implementation would look like this:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external"><code>&lt;pure R implementation of call with current continuation&gt;=</code></a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> &lt;- function(fun) {<br>make.thrower &lt;- function(expr) function() expr<br>value &lt;- NULL;<br>thrower &lt;- make.thrower(return(value))<br>k &lt;- function(v) {<br>value &lt;&lt;- v<br>thrower()<br>}<br>fun(k)<br>}</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-callcc" target="_blank" rel="external"><code>callcc</code></a> (links are to index).</p>
<p>Some examples:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; callcc(<span class="keyword">function</span>(k) <span class="number">1</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; callcc(<span class="keyword">function</span>(k) k(<span class="number">1</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; callcc(<span class="keyword">function</span>(k) &#123;k(<span class="number">1</span>); <span class="number">2</span>&#125;)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; callcc(<span class="keyword">function</span>(k) &#123;on.exit(cat(<span class="string">"A\n"</span>)); k(<span class="number">1</span>); <span class="number">2</span>&#125;)</span><br><span class="line">A</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line">&gt; callcc(<span class="keyword">function</span>(k) &#123;<span class="keyword">try</span>(k(<span class="number">1</span>)); <span class="number">2</span>&#125;)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>The final example illustrates a problem for using this pure R approach for error handling: <code>try</code> is implemented with <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>, and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> is supposed to catch errors but nor <code>return</code>‘s. Since we use <code>return</code> to implement the jump, we jump straight through the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> frame.</p>
<p>There does not seem to be a pure R solution to this, so there is now a hook available (at lest temporarily) that will handle this. The hook is provided by a C function declared as</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">-&gt;</a>]</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">R_ReturnOrRestart</a>(SEXP val, SEXP env, Rboolean <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>);</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_ReturnOrRestart" target="_blank" rel="external"><code>R_ReturnOrRestart</code></a> (links are to index).</p>
<p>At the moment this declaration is not in any header files, so we need to add it to our sources. This function takes the value to return and the environment indicating the call to return from as arguments. If the third argument is true, then the jump will stop at a restarted call if there is one on the stack ahead of the target. Otherwise restarted calls are ignored, as by <code>return</code>. We can define <code>.Call</code> interfaces to these two settings:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external"><code>&lt;</code>ReturnOrRestart<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturnOrRestart</a>(SEXP val, SEXP env)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">R_ReturnOrRestart</a>(val, env, TRUE);<br>return R_NilValue;<br>}<br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturn</a>(SEXP val, SEXP env)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">R_ReturnOrRestart</a>(val, env, FALSE);<br>return R_NilValue;<br>}</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-DoReturn" target="_blank" rel="external"><code>DoReturn</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-DoReturnOrRestart" target="_blank" rel="external"><code>DoReturnOrRestart</code></a> (links are to index).</p>
<p>Now we can modify <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> to allow exit functions to take an additional argument that specifies whether restarts on the stack are to be honored or ignored:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external"><code>&lt;call with current continuation&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> &lt;- function(fun) {<br>env &lt;- environment()<br>k &lt;- function(v, restarts.honored = FALSE) {<br>if (restarts.honored)<br>.Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturnOrRestart</a>“, v, env)<br>else<br>.Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturn</a>“, v, env)<br>}<br>fun(k)<br>}</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-callcc" target="_blank" rel="external"><code>callcc</code></a> (links are to index).</p>
<p>Some examples:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; callcc(<span class="keyword">function</span>(k) &#123;<span class="keyword">try</span>(k(<span class="number">1</span>)); <span class="number">2</span>&#125;)</span><br><span class="line">&lt;a name=<span class="string">"NWDI"</span>&gt;[<span class="number">1</span>] <span class="number">1</span>&lt;/a&gt;</span><br><span class="line">&gt; callcc(<span class="keyword">function</span>(k) &#123;<span class="keyword">try</span>(k(<span class="number">1</span>, <span class="literal">T</span>)); <span class="number">2</span>&#125;)</span><br><span class="line">[<span class="number">1</span>] <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="Handler-Stack-Management"><a href="#Handler-Stack-Management" class="headerlink" title="Handler Stack Management"></a>Handler Stack Management</h4><p>The handler stack is managed using a dynamic variable, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external"><code>&lt;global variables&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> &lt;- NULL  ## place holder for .First.lib</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-handler.stack" target="_blank" rel="external"><code>handler.stack</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external"><code>&lt;global variable initialization&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> &lt;&lt;- dynamic.variable()</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-handler.stack" target="_blank" rel="external"><code>handler.stack</code></a> (links are to index).</p>
<p>The handler stack is managed as a linked list. An internal implementation could use one cons cell per handler.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external"><code>&lt;handler stack management&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">-&gt;</a>]</strong><br>add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">&lt;- function(handler, class, exit, stack) {</a><br>list(handler = handler, class = class, exit = exit,<br>next.handler = stack)<br>}</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-add.to.handler.stack" target="_blank" rel="external"><code>add.to.handler.stack</code></a> (links are to index).</p>
<p>Default handlers can be added to the handler stack with add.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external"><code>&lt;handler stack management&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">add.</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">&lt;- function(handler, class)</a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>(add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">(handler, class, NULL,</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>()))</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-add.default.handler" target="_blank" rel="external"><code>add.default.handler</code></a> (links are to index).</p>
<h4 id="Handling-Conditions"><a href="#Handling-Conditions" class="headerlink" title="Handling Conditions"></a>Handling Conditions</h4><p>Invoking handlers is done one of two ways. If the exit function in <code>NULL</code> then the handler is a calling handler. It is called with the handler stack bound to the rest of the handler stack below the handler called. If the exit function is not <code>NULL</code> then the handler is exiting. The exit function is used to transfer control to the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call where the handlers was established. Restarts on the stack will be honored if the condition signaled is an exception (this also includes stopping the transfer at a browser). For calling handlers we must re-enable the internal error processing hooks just before calling the handler. For exiting handlers the hooks should ideally be re-enabled after the jump, but we need to do it here in case the jump is intercepted by a restarted call. This minimizes the chance of recursion; with an internal implementation this can be done to eliminate the chance of recursion entirely.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external"><code>&lt;invoking handlers&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">handle.condition</a> &lt;- function(c) {<br>h &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>()<br>if (is.null(h))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">FailsafeErrorHandler</a>(c)<br>while (! is.null(h))<br>if (inherits(c, h$class))<br>break<br>else h &lt;- h$next.handler<br>if (is.null(h)) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>()<br>my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">(no.condition.handler.exception(c)) #<em>**</em></a><br>}<br>if (is.null(h$exit))<br>dynamic.bind({<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>()<br>h$handler(c)<br>}, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> = h$next.handler)<br>else {<br>restarts.honored &lt;- inherits(c, “exception”)<br>result &lt;- list(throw = TRUE, handler = h$handler, condition = c)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>()<br>h$exit(result, restarts.honored)<br>}<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-handle.condition" target="_blank" rel="external"><code>handle.condition</code></a> (links are to index).</p>
<p>The fail-safe error handler should ideally be implemented internally so that transfer of control via an internal call to <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> is guaranteed to happen. It will only be reached if the default exception handler fails.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external"><code>&lt;invoking handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">FailsafeErrorHandler</a> &lt;- function(c) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>(“Error: error in default exception handler\n”)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>()<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>()<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-FailsafeErrorHandler" target="_blank" rel="external"><code>FailsafeErrorHandler</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external"><code>&lt;internal error conversion&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>&lt;- function(s) cat(s, file=stderr())</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-errcat" target="_blank" rel="external"><code>errcat</code></a> (links are to index).</p>
<h4 id="Signaling-Conditions"><a href="#Signaling-Conditions" class="headerlink" title="Signaling Conditions"></a>Signaling Conditions</h4><p>Conditions are signaled by finding and calling a handler. As a convenience, non-condition arguments are converted to simple conditions.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external"><code>&lt;signaling conditions&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a> &lt;- function(c) {<br>if (! inherits(c, “condition”))<br>c &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a>(c)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">handle.condition</a>(c)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-signal.condition" target="_blank" rel="external"><code>signal.condition</code></a> (links are to index).</p>
<p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> function needs to signal a condition but it must not return. If the condition handler returns, we call <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>. For now we’ll define an internal version <code>my</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> as well as redefining <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external"><code>&lt;signaling conditions&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">-&gt;</a>]</strong><br>my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">&lt;- function(e, call. = TRUE) {</a><br>if (! <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">is.condition</a>(e))<br>e &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>(e, if (call.) sys.call(1) else NULL)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>(e)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>(“aborting …\n”)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>()<br>}<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> &lt;- my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a></p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-my.stop" target="_blank" rel="external"><code>my.stop</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-stop" target="_blank" rel="external"><code>stop</code></a> (links are to index).</p>
<p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> function currently does not include a <code>call.</code> argument (should it?) and seems to always include the call in its message. Again, we’ll define an internal version <code>my</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> and use it to redefine <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external"><code>&lt;signaling conditions&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">&lt;-</a>D]</strong><br>my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">&lt;- function(w) {</a><br>if (! inherits(w, “<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>“))<br>w &lt;- simple.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">(w, sys.call(1))</a><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>(w)<br>}<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> &lt;- my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a></p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-my.warning" target="_blank" rel="external"><code>my.warning</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-warning" target="_blank" rel="external"><code>warning</code></a> (links are to index).</p>
<h4 id="Establishing-Handlers"><a href="#Establishing-Handlers" class="headerlink" title="Establishing Handlers"></a>Establishing Handlers</h4><p>Calling handlers are established using <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>. The definition is quite simple.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><code>&lt;establishing handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a> &lt;- function(expr, …) {<br>stack &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>()<br>handlers &lt;- rev(list(…))<br>classes &lt;- names(handlers)<br>for (i in seq(along = handlers))<br>stack &lt;- add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>[(handlers[[i]], classes<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">i], NULL, stack)</a><br>dynamic.bind(expr, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> = stack)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-with.handlers" target="_blank" rel="external"><code>with.handlers</code></a> (links are to index).</p>
<p>Exiting handlers are established by <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>. A <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> call is used to obtain an exit function that will transfer control back to the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call. Setting up the handlers is analogous to <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>. The result of the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a> call will always be wrapped in a list with a <code>throw</code> element to distinguish a normal return and a throw return. For an internal implementation this flag could be passed as a (thread-local) global, a field in the context structure, or the<code>setjmp</code> return value. The rest of the result list’s fields depends on whether the result represents a normal return or a throw to a handler. For a throw the result contains the handler to call and the condition to call it with. The handler is called in the handler context that exists outside the <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> call. The <code>finally</code> clause is handled by an <code>on.exit</code> call (which will work properly with recent changes to the R internals.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><code>&lt;establishing handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a> &lt;- function(expr, …, finally = NULL) {<br>on.exit(finally)<br>result &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a>(function(k) {<br>stack &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>()<br>handlers &lt;- rev(list(…))<br>classes &lt;- names(handlers)<br>for (i in seq(along = handlers))<br>stack &lt;- add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>[(handlers[[i]], classes<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">i], k, stack)</a><br>dynamic.bind(list(throw = FALSE, value = expr), <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a> = stack)<br>})<br>if (result$throw)<br>result$handler(result$condition)<br>else<br>result$value<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-try.catch" target="_blank" rel="external"><code>try.catch</code></a> (links are to index).</p>
<p>Perhaps the <code>finally</code> expression should be evaluated in a <code>try</code>.</p>
<h4 id="Condition-Objects"><a href="#Condition-Objects" class="headerlink" title="Condition Objects"></a>Condition Objects</h4><p>Conditions are objects that inherit from <code>&quot;condition&quot;</code>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><code>&lt;condition objects&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">is.condition</a> &lt;- function(c) inherits(c, “condition”)</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-is.condition" target="_blank" rel="external"><code>is.condition</code></a> (links are to index).</p>
<p>Two generic functions are defined on condition objects. <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a> should return the message string associated with a condition. <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a> should return the call associated with the condition, or <code>NULL</code> if there is none. The print method for conditions is defined in terms of these generic functions:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><code>&lt;condition objects&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">print.condition</a> &lt;- function(c, …) {<br>msg &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a>(c)<br>call &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a>(c)<br>class &lt;- class(c)<a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">1</a><br>if (! is.null(call))<br>cat(“&lt;”, class, “ in “, deparse(call), “: “, msg, “&gt;\n”, sep=””)<br>else<br>cat(“&lt;”, class, “: “, msg, “&gt;\n”, sep=””)<br>}</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a> &lt;- function(c) UseMethod(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a>“, c)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a> &lt;- function(c) UseMethod(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a>“, c)</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">.condition</a> &lt;- function(c) c$message<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">.condition</a> &lt;- function(c) c$call</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-condition.call" target="_blank" rel="external"><code>condition.call</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-condition.call.condition" target="_blank" rel="external"><code>condition.call.condition</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-condition.message" target="_blank" rel="external"><code>condition.message</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-condition.message.condition" target="_blank" rel="external"><code>condition.message.condition</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-print.condition" target="_blank" rel="external"><code>print.condition</code></a> (links are to index).</p>
<p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a> function will convert non-condition arguments to simple conditions by calling <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a>. Similarly, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> converts non-condition arguments to simple exceptions and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> makes simple warnings.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><code>&lt;condition objects&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDV" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a> &lt;- function(message, call = NULL) {<br>class &lt;- c(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a>“, “condition”)<br>structure(list(message=as.character(message), call = call), class=class)<br>}</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a> &lt;- function(message, call = NULL) {<br>class &lt;- c(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>“, “exception”, “condition”)<br>structure(list(message=as.character(message), call = call), class=class)<br>}</p>
<p>simple.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">&lt;- function(message, call = NULL) {</a><br>class &lt;- c(“simple.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">“, “</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>“, “condition”)<br>structure(list(message=as.character(message), call = call), class=class)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-simple.condition" target="_blank" rel="external"><code>simple.condition</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-simple.exception" target="_blank" rel="external"><code>simple.exception</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-simple.warning" target="_blank" rel="external"><code>simple.warning</code></a> (links are to index).</p>
<p>The condition system uses one condition of its own, an exception for signaling unhandled conditions. This contains a field for recording the condition that did not have a matching handler.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><code>&lt;condition objects&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">&lt;-</a>D]</strong><br>no.condition.handler.exception &lt;- function(c)<br>structure(list(message = paste(“no condition handler for”, class(c)<a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">1</a>),<br>condition = c),<br>class = c(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDV" target="_blank" rel="external">“no.condition.handler.exception”</a>,<br>“exception”, “condition”))</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-&quot;no.condition.handler.exception&quot;" target="_blank" rel="external"><code>&quot;no.condition.handler.exception&quot;</code></a> (links are to index).</p>
<h4 id="Default-Handlers"><a href="#Default-Handlers" class="headerlink" title="Default Handlers"></a>Default Handlers</h4><p>Default calling handlers are provided for exceptions and warnings. Both are provided as methods on the generic function <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>. Defining methods for subtypes of exceptions and warnings allows the default handling to be tuned somewhat.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a> &lt;- function(e) {<br>UseMethod(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>“, e)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-default.handler" target="_blank" rel="external"><code>default.handler</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external"><code>&lt;global variable initialization&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-3" target="_blank" rel="external">-&gt;</a>]</strong><br>add.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">(</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>, “exception”)<br>add.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">(</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>, “<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>“)</p>
<h5 id="Default-Handler-For-Exceptions"><a href="#Default-Handler-For-Exceptions" class="headerlink" title="Default Handler For Exceptions"></a>Default Handler For Exceptions</h5><p>The default handler for exceptions reproduces at the R level much of the functionality in the <code>errorcall</code> and <code>jump_to_toplevel</code> functions in <code>errors.c</code>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">.exception</a> &lt;- function(e) {<br>call &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a>(e)<br>message &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a>(e)<br>op &lt;- getOption(“add.error.underscore”)<br>if (is.null(op) || op)<br>us &lt;- “_”<br>else<br>us &lt;- “”<br>if (is.null(call))<br>emsg &lt;- paste(us, “Error: “, message, “\n”, sep = “”)<br>else {<br>dcall &lt;- deparse(call)<br>if (nchar(dcall) &gt; 30)<br>emsg &lt;- paste(us, “Error in “, dcall<a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">1</a>, “ :\n\t”, message, “\n”,<br>sep = “”)<br>else<br>emsg &lt;- paste(us, “Error in “, dcall<a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" target="_blank" rel="external">1</a>, “ : “, message, “\n”,<br>sep = “”)<br>}</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">seterrmessage</a>(emsg)<br>if (getOption(“error.messages”)) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>(emsg)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">PrintDeferredWarnings</a>()<br>}</p>
<p>handler &lt;- getOption(“error”)<br>if (! is.null(handler))<br>eval(handler, R_GlobalEnv)<br>else if (! interactive()) {<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>(“Execution halted\n”)<br>q(“no”, 1, FALSE)  # quit, no save, no .Last, status=1<br>}</p>
<p>tb &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">getTraceback</a>()<br>tb &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">trim.traceback</a>(tb)<br>assign(“.Traceback”, tb, env = .GlobalEnv)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>()<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-default.handler.exception" target="_blank" rel="external"><code>default.handler.exception</code></a> (links are to index).</p>
<p>To make the traceback result a little cleaner we trim off some of the leading stuff that represents the error handling code that is on the stack. We trim down at least to the leading <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a> call. For calls generated by the internal error handling code we also trim off the next two frames.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">trim.traceback</a> &lt;- function(t) {<br>n &lt;- length(t)<br>pos &lt;- NULL<br>for (i in seq(along=t))<br>if (pmatch(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>(“, t[[i]], 0)) {<br>pos &lt;- i<br>break<br>}<br>if (is.null(pos))<br>t<br>else {<br>if (pos &lt; n - 1 &amp;&amp;<br>pmatch(“my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">(“, t[[pos + 1]], 0) &amp;&amp;</a><br>pmatch(“error.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">(“, t[[pos + 2]], 0))</a><br>pos &lt;- pos + 2<br>if (pos == n)<br>NULL<br>else<br>t[(pos+1):n]<br> }<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-trim.traceback" target="_blank" rel="external"><code>trim.traceback</code></a> (links are to index).</p>
<p>Deferred warnings are printed by a hook into the internals provided in <code>errors.c</code>. This hook is temporary and hence not declared in the header files, so we need to declare it here.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">PrintDeferredWarnings</a> &lt;- function() .Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">PrintDeferredWarnings</a>“)</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-PrintDeferredWarnings" target="_blank" rel="external"><code>PrintDeferredWarnings</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">-&gt;</a>]</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">R_PrintDeferredWarnings</a>(void);</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_PrintDeferredWarnings" target="_blank" rel="external"><code>R_PrintDeferredWarnings</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external"><code>&lt;</code>PrintDeferredWarnings<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">PrintDeferredWarnings</a>(void)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">R_PrintDeferredWarnings</a>();<br>return R_NilValue;<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-PrintDeferredWarnings" target="_blank" rel="external"><code>PrintDeferredWarnings</code></a> (links are to index).</p>
<p>The traceback is also generated by a hook function in <code>errors.c</code>. This hook allows us to exclude a specified number of frames on the top of the stack, but it isn’t clear if this is useful.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">getTraceback</a> &lt;- function(skip = 1)<br>.Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">GetTraceback</a>“, as.integer(skip))</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-getTraceback" target="_blank" rel="external"><code>getTraceback</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">-&gt;</a>]</strong><br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">R_GetTraceback</a>(int);</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_GetTraceback" target="_blank" rel="external"><code>R_GetTraceback</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external"><code>&lt;</code>GetTraceback<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">GetTraceback</a>(SEXP skip)<br>{<br>if (TYPEOF(skip) != INTSXP || LENGTH(skip) != 1)<br> error(“bad skip argument”);<br>return <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">R_GetTraceback</a>(INTEGER(skip)[0]);<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-GetTraceback" target="_blank" rel="external"><code>GetTraceback</code></a> (links are to index).</p>
<p>Finally, the default handler needs to be able to place the error message in the internal error buffer (just for consistency with existing code—this can probably be dropped eventually, or at least it would need to be made thread-safe).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">seterrmessage</a> &lt;- function(s)<br>.C(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">SetErrmessage</a>“, as.character(s))</p>
<p> Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-seterrmessage" target="_blank" rel="external"><code>seterrmessage</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">-&gt;</a>]</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">R_SetErrmessage</a>(char *s);</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_SetErrmessage" target="_blank" rel="external"><code>R_SetErrmessage</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external"><code>&lt;</code>SetErrmessage<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">SetErrmessage</a>(char <em>*s)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">R_SetErrmessage</a>(</em>s);<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-SetErrmessage" target="_blank" rel="external"><code>SetErrmessage</code></a> (links are to index).</p>
<h5 id="Default-Handler-For-Warnigs"><a href="#Default-Handler-For-Warnigs" class="headerlink" title="Default Handler For Warnigs"></a>Default Handler For Warnigs</h5><p>As a temporary hack, we can use the internal code for <code>warningcall</code> to implement the default warning handler. We need to turn the hook off around the call. If there is an error in the call, then the hooks will be reset along with the error hook by the calls to <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>. There may be a flaw in this, but for now it should do.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><code>&lt;default handlers&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">&lt;- function(w) {</a><br>.Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">InternalWarningCall</a>“, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a>(w), <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a>(w))<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-default.handler.warning" target="_blank" rel="external"><code>default.handler.warning</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external"><code>&lt;</code>InternalWarningCall<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">InternalWarningCall</a>(SEXP call, SEXP msg)<br>{<br>if (TYPEOF(msg) != STRSXP || LENGTH(msg) != 1)<br> error(“invalid <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a> message”);<br> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetWarningHook</a>(NULL);<br> Rf_warningcall(call, “%s”, CHAR(STRING_ELT(msg, 0)));<br> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetWarningHook</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">warnhook</a>);<br> return R_NilValue;<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-InternalWarningCall" target="_blank" rel="external"><code>InternalWarningCall</code></a> (links are to index).</p>
<h4 id="Internal-Error-Conversion"><a href="#Internal-Error-Conversion" class="headerlink" title="Internal Error Conversion"></a>Internal Error Conversion</h4><p>The error handling mechanism of this package is activated by installing some hook functions. The R interface for this is <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external"><code>&lt;internal error conversion&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a> &lt;- function() {<br>.Call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">EnableExceptionHooks</a>“)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-EnableErrorHooks" target="_blank" rel="external"><code>EnableErrorHooks</code></a> (links are to index).</p>
<p>The hooks provided in <code>errors.c</code> are declares as</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">-&gt;</a>]</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetErrorHook</a>(void (<em><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>)(SEXP, char </em>));<br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetWarningHook</a>(void (<em><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>)(SEXP, char </em>));</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_SetErrorHook" target="_blank" rel="external"><code>R_SetErrorHook</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_SetWarningHook" target="_blank" rel="external"><code>R_SetWarningHook</code></a> (links are to index).</p>
<p>Both hooks are installed by a common mechanism. They call back into R using R functions called <code>error</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a> and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>, respectively.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external"><code>&lt;</code>EnableExceptionHooks<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">static void</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>(SEXP fun, SEXP call, char *s)<br>{<br>SEXP expr, msg, qsym = install(“quote”);<br>PROTECT(msg = allocVector(STRSXP, 1));<br>SET_STRING_ELT(msg, 0, mkChar(s));<br>PROTECT(call = LCONS(qsym, LCONS(call, R_NilValue)));<br>expr = LCONS(msg, R_NilValue);<br>expr = LCONS(call, expr);<br>PROTECT(expr = LCONS(fun, expr));<br>eval(expr, R_GlobalEnv);<br>UNPROTECT(3);<br>}</p>
<p>static void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">errhook</a>(SEXP call, char *s)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>(install(“error.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">“), call, s);</a><br>}</p>
<p>static void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">warnhook</a>(SEXP call, char *s)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>(install(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">“), call, s);</a><br>}</p>
<p>SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">EnableExceptionHooks</a>(void)<br>{<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetErrorHook</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">errhook</a>);<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetWarningHook</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">warnhook</a>);<br>return R_NilValue;<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-EnableExceptionHooks" target="_blank" rel="external"><code>EnableExceptionHooks</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-errhook" target="_blank" rel="external"><code>errhook</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-hook" target="_blank" rel="external"><code>hook</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-warnhook" target="_blank" rel="external"><code>warnhook</code></a> (links are to index).</p>
<p>The R hook functions in turn just call <code>my</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a> and <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">my.warn</a>. This is all quite a lot of overhead that could be avoided in an internal implementation, but the only real issue is that it might create problems if the error being signaled is about resource exhaustion of some kind.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external"><code>&lt;internal error conversion&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">&lt;-</a>D]</strong><br>error.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">&lt;- function(call, msg)</a><br> my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">(</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>(msg, call))</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">&lt;- function(call, msg)</a><br> my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">(simple.</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">(msg, call))</a></p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-error.hook" target="_blank" rel="external"><code>error.hook</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-warning.hook" target="_blank" rel="external"><code>warning.hook</code></a> (links are to index).</p>
<p>The reset mechanism needs to be able to jump to top level. The <code>.Call</code> interface for this is provided by <code>JumpToToplevel</code>.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><code>&lt;declarations for hooks in errors.c&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">&lt;-</a>D]</strong><br>void <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">R_JumpToToplevel</a>(Rboolean <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>);</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_JumpToToplevel" target="_blank" rel="external"><code>R_JumpToToplevel</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external"><code>&lt;</code>JumpToToplevel<code>definition&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U-&gt;</a>)</strong><br>SEXP JumpToToplevel(SEXP <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>)<br>{<br>if (TYPEOF(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>) != LGLSXP || LENGTH(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>) != 1)<br> error(“bad restarts.honored argument”);<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">R_JumpToToplevel</a>(LOGICAL(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>)[0]);<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-R_JumpToToplevel" target="_blank" rel="external"><code>R_JumpToToplevel</code></a> (links are to index).</p>
<h4 id="Resets"><a href="#Resets" class="headerlink" title="Resets"></a>Resets</h4><p>Resets are stored as objects of class <code>reset</code> with fields containing all the settings for the reset.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">make.reset</a> &lt;- function(name = “”,<br>handler = function(…) NULL,<br>message = NULL,<br>test = function(c) TRUE,<br>interactive = function() NULL,<br>restarts.honored = FALSE) {<br>structure(list(name = name, handler = handler, message = message,<br>test = test, interactive = interactive,<br>restarts.honored = restarts.honored),<br>class = “reset”)<br>}</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">print.reset</a> &lt;- function(r)<br><code>cat(paste(&quot;&lt;reset:&quot;, r$name, &quot;&gt;\n&quot;))</code></p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">is.reset</a> &lt;- function(x) inherits(x, “reset”)</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-is.reset" target="_blank" rel="external"><code>is.reset</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-make.reset" target="_blank" rel="external"><code>make.reset</code></a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-print.reset" target="_blank" rel="external"><code>print.reset</code></a> (links are to index).</p>
<p>Resets are maintained in a stack. The function <code>add.to</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a> creates the reset object, adds a name field to it, and also adds an exit function. The reset is then linked on the front of the specified stack.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">add.to.</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a> <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">&lt;- function(spec, name, exit, stack) {</a><br>if (is.function(spec))<br>reset &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">make.reset</a>(handler = spec)<br>else if (is.character(spec))<br>reset &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">make.reset</a>(message = spec)<br>else if (is.list(spec))<br>reset &lt;- do.call(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">make.reset</a>“, spec)<br>else<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“not a valid reset specification”)<br>reset$name &lt;- name<br>list(reset = reset, exit = exit, next.reset = stack)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-add.to.reset.stack" target="_blank" rel="external"><code>add.to.reset.stack</code></a> (links are to index).</p>
<p>The reset stack is maintained as a dynamic variable. The initial stack contains a handler for <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> resets that jumps to top level, but honors any restarts that might be on the stack.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external"><code>&lt;global variables&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a> &lt;- NULL  ## place holder for .First.lib</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-reset.stack" target="_blank" rel="external"><code>reset.stack</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external"><code>&lt;global variable initialization&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a> &lt;&lt;- dynamic.variable(<br>add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">(list(handler = function() {},</a><br>restarts.honored = TRUE),<br>“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>“,<br>function(result, restarts.honored)<br>.Call(“JumpToToplevel”, restarts.honored),<br>NULL))</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-reset.stack" target="_blank" rel="external"><code>reset.stack</code></a> (links are to index).</p>
<p>The function <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a> for establishing (exiting) resets is analogous to <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>. Since the number of arguments to the handler is not known, we need to call it with <code>do.call</code>. We have to first store the handler in a variable, since <code>do.call</code> does not allow a computed function as its first argument—it has to be a string.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a> &lt;- function(expr, …) {<br>result &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a>(function(k) {<br>stack &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a>()<br>specs &lt;- rev(list(…))<br>names &lt;- names(specs)<br>for (i in seq(along = specs))<br>stack &lt;- add.to.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a>[(specs[[i]], names<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">i], k, stack)</a><br>dynamic.bind(list(throw = FALSE, value = expr), <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a> = stack)<br>})<br>if (result$throw) {<br>h &lt;- result$handler<br>do.call(“h”, result$args)<br>}<br>else<br>result$value<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-with.resets" target="_blank" rel="external"><code>with.resets</code></a> (links are to index).</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> walks down the reset stack looking for the first one that matches the name and accepts the condition, if one is specified.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a> &lt;- function(name, cond = NULL) {<br>r &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a>()<br>while (! is.null(r))<br>if (name == r$reset$name &amp;&amp; (is.null(cond) || r$reset$test(cond))) {<br>res &lt;- r$reset<br>res$exit &lt;- r$exit<br>return(res)<br>}<br>else<br>r &lt;- r$next.reset<br>NULL<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-find.reset" target="_blank" rel="external"><code>find.reset</code></a> (links are to index).</p>
<p>Similarly, <code>compute.restarts</code> walks down the sestart stack and accumulates all elligible restarts into a list.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a> &lt;- function(cond = NULL) {<br>r &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a>()<br>val &lt;- NULL<br>while (! is.null(r)) {<br>if (is.null(cond) || r$reset$test(cond)) {<br>res &lt;- r$reset<br>res$exit &lt;- r$exit<br>val &lt;- c(val, list(res))<br>}<br>r &lt;- r$next.reset<br>}<br>val<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-compute.resets" target="_blank" rel="external"><code>compute.resets</code></a> (links are to index).</p>
<p><code>invoke</code>.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a> accpets either a string, which is passed to find.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>, or a reset as its first argument. The remaining arguments, if any, are packed up as a list, along with the reset’s handler and a <code>throw</code> flag, into a result list which is then passed to the exit function stored in the reset object. The reset object’s <code>restarts.honored</code> field determines whether the transfer of control stops at intervening restarted call frames or not.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a> &lt;- function(r, …) {<br>if (! <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">is.reset</a>(r))<br>r &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a>(r)<br>if (is.null(r$exit))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“calling resets not supported (yet)”)<br>result &lt;- list(throw = TRUE, handler = r$handler, args = list(…))<br>r$exit(result, r$restarts.honored)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-invoke.reset" target="_blank" rel="external"><code>invoke.reset</code></a> (links are to index).</p>
<p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> function is just a simple shorthand for invoking an <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> reset.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">&lt;-</a>D<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">-&gt;</a>]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a> &lt;- function()<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a>(“<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>“)</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-abort" target="_blank" rel="external"><code>abort</code></a> (links are to index).</p>
<p>The <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">.interactively</a> function differs from <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a> only in the fact that it computes the arguments for the reset handler by calling the reset’s<code>interactive</code> function.</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><code>&lt;resets&gt;+=</code></a> <strong>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">&lt;-U</a>)</strong> <strong>[<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">&lt;-</a>D]</strong><br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">.interactively</a> &lt;- function(r) {<br>if (! <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">is.reset</a>(r))<br>r &lt;- <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a>(r)<br>if (is.null(r$exit))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“calling resets not supported (yet)”)<br>args &lt;- r$interactive()<br>result &lt;- list(throw = TRUE, handler = r$handler, args = args)<br>r$exit(result, r$restarts.honored)<br>}</p>
<p>Defines <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWI-invoke.reset.interactively" target="_blank" rel="external"><code>invoke.reset.interactively</code></a> (links are to index).</p>
<h4 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h4><p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external"><code>&lt;tests&gt;=</code></a><br>.lib.loc &lt;- c(“lib”,.lib.loc)<br>library(simpcond)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(1, finally=print(“Hello”))<br>e&lt;-<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>(“test exception”)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(e)<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(e), finally=print(“Hello”))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“fred”), finally=print(“Hello”))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(e), exception = function(e) e, finally=print(“Hello”))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>(<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>(“fred”),  exception = function(e) e, finally=print(“Hello”))<br><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">muffle.warnings</a>({my.<a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">(“Hello”); 1})</a></p>
<h3 id="Dylan-Condition-Handling"><a href="#Dylan-Condition-Handling" class="headerlink" title="Dylan Condition Handling"></a>Dylan Condition Handling</h3><p>Dylan was designed after Common Lisp and had the opportunity to make improvements. At first glance it seemed that their condition system was as powerfull but rather simpler than the CL one because it merged restarts and conditions into a single hierarchy. Unfortunately there seems to be a problem with this approach: For this to work the handler stack must not be unwound before a handler is called, otherwise restarts established after the handler won’t be available. But if the handler stack is not unwound, then it would seem that an error in the handler will cause the handler to be called again and again and …</p>
<p>Just to make sure I installed <code>mindy</code> and ran this Dylan program:</p>
<p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDs" target="_blank" rel="external"><code>&lt;hello.dyl&gt;=</code></a><br>module: dylan-user</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define method main(name :: &lt;string&gt;, <span class="comment">#rest arguments)</span></span><br><span class="line">  let handler &lt;error&gt; = method (c, <span class="keyword">next</span>)</span><br><span class="line">    puts(<span class="string">"handled the error\n"</span>);</span><br><span class="line">    error(c);</span><br><span class="line">  end;</span><br><span class="line">  error(<span class="string">"an error"</span>);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
<p>Compile and run gives:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">luke@nokomis2 ~% mindycomp hello.dyl</span><br><span class="line">luke@nokomis2 ~% mindy -f hello.dbc</span><br><span class="line">handled the error</span><br><span class="line">handled the error</span><br><span class="line"><span class="keyword">...</span></span><br><span class="line">&lt;a name=<span class="string">"NWDt"</span>&gt;handled the error&lt;/a&gt;</span><br><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure>
<p>So their design really is hosed: if there is an error in a calling handler for <error> you blow out the top.</error></p>
<p>It looks like CL got this right (or at least more so than Dylan did).</p>
<ul>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD4" target="_blank" rel="external"><em><browse on="" warnings=""></browse></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD4" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external"><em><call with="" current="" continuation=""></call></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external"><em><condition objects=""></condition></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDV" target="_blank" rel="external">D5</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external"><em><declarations for="" hooks="" in="" errors.c=""></declarations></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">D5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">D6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">D7</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external"><em><default handlers=""></default></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">D5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">D6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">D7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">D8</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external"><em>&lt;<code>EnableExceptionHooks</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external"><em><establishing handlers=""></establishing></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">D5</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external"><em><example></example></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD5" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD8" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD9" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external"><em>&lt;<code>GetTraceback</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external"><em><global variable="" initialization=""></global></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-3" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external"><em><global variables=""></global></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external"><em><handler stack="" management=""></handler></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDs" target="_blank" rel="external"><em><hello.dyl></hello.dyl></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDs" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external"><em><internal error="" conversion=""></internal></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external"><em>&lt;<code>InternalWarningCall</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external"><em><invoking handlers=""></invoking></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external"><em>&lt;<code>JumpToToplevel</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external"><em><namespace></namespace></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external"><em><possible `restart`="" changes=""></possible></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external"><em>&lt;<code>PrintDeferredWarnings</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external"><em><pure r="" implementation="" of="" call="" with="" current="" continuation=""></pure></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external"><em><resets></resets></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">D5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">D6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">D7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">D8</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">D9</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external"><em><resets example=""></resets></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external"><em>&lt;<code>ReturnOrRestart</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external"><em>&lt;<code>SetErrmessage</code> definition&gt;</em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external"><em><signaling conditions=""></signaling></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external"><em><simpcond.c></simpcond.c></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDC" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external"><em><simpcond.r></simpcond.r></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">D1</a></li>
<li><p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external"><em><tests></tests></em></a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">D1</a></p>
</li>
<li><p><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">abort</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD5" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-3" target="_blank" rel="external">U7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">D8</a></p>
</li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">add.default.handler</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">add.to.handler.stack</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">add.to.reset.stack</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-3" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">callcc</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDE" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">compute.resets</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD5" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.call.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">condition.message.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">default.handler</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDW" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">U6</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">default.handler.exception</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">default.handler.warning</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturn</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">DoReturnOrRestart</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDH" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">EnableErrorHooks</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDB" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">EnableExceptionHooks</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDd" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">errcat</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-intP-1" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">errhook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">error.hook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">FailsafeErrorHandler</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDM" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">find.reset</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">getTraceback</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">GetTraceback</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDa" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">handle.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">handler.stack</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDI" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-1" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDJ" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDK" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">U6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">U7</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">hook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">ignore.errors</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">InternalWarningCall</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">invoke.reset</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDp" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">invoke.reset.interactively</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">is.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDS" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">is.reset</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">make.reset</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">muffle.warnings</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">my.stop</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">my.warning</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDV" target="_blank" rel="external">“no.condition.handler.exception”</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDV" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">print.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDT" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">PrintDeferredWarnings</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDZ" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external">D3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">print.reset</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDi" target="_blank" rel="external">D1</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">reset.stack</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDk" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-3" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDm" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDn" target="_blank" rel="external">U6</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">restart</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD8" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD9" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">D5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">U6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">U7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external">U8</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">restartable</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD9" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">R_GetTraceback</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-3" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**GR-1" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">R_JumpToToplevel</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDh" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**JT-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">R_PrintDeferredWarnings</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-2" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**Pa-1" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">R_ReturnOrRestart</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDF" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDG" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">R_SetErrmessage</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-decY-4" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetErrorHook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">D1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">U2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">R_SetWarningHook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDe" target="_blank" rel="external">D2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">U3</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">seterrmessage</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">SetErrmessage</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDb" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**SS-1" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">signal.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">U6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">U7</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.condition</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDN" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">D4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.exception</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U5</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">simple.warning</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">stop</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD8" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD9" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDA" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDL" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDO" target="_blank" rel="external">D6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">U7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U8</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDj" target="_blank" rel="external">U9</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDo" target="_blank" rel="external">U10</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDq" target="_blank" rel="external">U11</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U12</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">trim.traceback</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDX" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDY" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">try.catch</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD1" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDR" target="_blank" rel="external">D3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U4</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">warnhook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">warning</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD4" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDP" target="_blank" rel="external">D4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDU" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-gloU-2" target="_blank" rel="external">U6</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDc" target="_blank" rel="external">U7</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWsimB-**IY-1" target="_blank" rel="external">U8</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">U9</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">U10</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDr" target="_blank" rel="external">U11</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">warning.hook</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDf" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDg" target="_blank" rel="external">D2</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">with.handlers</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD2" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD3" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD4" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external">U4</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U5</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDQ" target="_blank" rel="external">D6</a></li>
<li><a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">with.resets</a>: <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD6" target="_blank" rel="external">U1</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWD7" target="_blank" rel="external">U2</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDD" target="_blank" rel="external">U3</a>, <a href="http://homepage.stat.uiowa.edu/~luke/R/exceptions/simpcond.html#NWDl" target="_blank" rel="external">D4</a></li>
</ul>
<hr>
<p>This is a translation of <a href="http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html" target="_blank" rel="external">Beyond exception handling: conditions and restarts</a> by Peter Seibel, from Lisp to R. The original document is copyright (c) 2003-2005, Peter Seibel; translated with permission.</p>
<p>The majority of the translation involves changing Lisp syntax to R syntax. There are few differences in the overall system.</p>
<h1 id="Beyond-Exception-Handling-Conditions-and-Restarts"><a href="#Beyond-Exception-Handling-Conditions-and-Restarts" class="headerlink" title="Beyond Exception Handling: Conditions and Restarts"></a>Beyond Exception Handling: Conditions and Restarts</h1><p>One of R’s great features is its <em>condition</em> system. It serves a similar purpose to the exception handling systems in Java, Python, and C++ but is more flexible. In fact, its flexibility extends beyond error handling–conditions are more general than exceptions in that a condition can represent any occurrence during a program’s execution that may be of interest to code at different levels on the call stack. For example, in the section “Other Uses for Conditions,” you’ll see that conditions can be used to emit warnings without disrupting execution of the code that emits the warning while allowing code higher on the call stack to control whether the warning message is printed. For the time being, however, I’ll focus on error handling.</p>
<p>The condition system is more flexible than exception systems because instead of providing a two-part division between the code that signals an error^1^ and the code that handles it,^2^ the condition system splits the responsibilities into three parts–<em>signaling</em> a condition, <em>handling</em> it, and <em>restarting</em>. In this chapter, I’ll describe how you could use conditions in part of a hypothetical application for analyzing log files. You’ll see how you could use the condition system to allow a low-level function to detect a problem while parsing a log file and signal an error, to allow mid-level code to provide several possible ways of recovering from such an error, and to allow code at the highest level of the application to define a policy for choosing which recovery strategy to use.</p>
<p>To start, I’ll introduce some terminology: <em>errors</em>, as I’ll use the term, are the consequences of Murphy’s law. If something can go wrong, it will: a file that your program needs to read will be missing, a disk that you need to write to will be full, the server you’re talking to will crash, or the network will go down. If any of these things happen, it may stop a piece of code from doing what you want. But there’s no bug; there’s no place in the code that you can fix to make the nonexistent file exist or the disk not be full. However, if the rest of the program is depending on the actions that were going to be taken, then you’d better deal with the error somehow or you <em>will</em> have introduced a bug. So, errors aren’t caused by bugs, but neglecting to handle an error is almost certainly a bug.</p>
<p>So, what does it mean to handle an error? In a well-written program, each function is a black box hiding its inner workings. Programs are then built out of layers of functions: high-level functions are built on top of the lower-level functions, and so on. This hierarchy of functionality manifests itself at runtime in the form of the call stack: if <code>high</code> calls <code>medium</code>, which calls <code>low</code>, when the flow of control is in <code>low</code>, it’s also still in <code>medium</code> and <code>high</code>, that is, they’re still on the call stack.</p>
<p>Because each function is a black box, function boundaries are an excellent place to deal with errors. Each function–<code>low</code>, for example–has a job to do. Its direct caller–<code>medium</code> in this case–is counting on it to do its job. However, an error that prevents it from doing its job puts all its callers at risk: <code>medium</code> called <code>low</code> because it needs the work done that <code>low</code> does; if that work doesn’t get done, <code>medium</code> is in trouble. But this means that <code>medium</code>‘s caller, <code>high</code>, is also in trouble–and so on up the call stack to the very top of the program. On the other hand, because each function is a black box, if any of the functions in the call stack can somehow do their job despite underlying errors, then none of the unctions above it needs to know there was a problem–all those functions care about is that the function they called somehow did the work expected of it.</p>
<p>In most languages, errors are handled by returning from a failing function and giving the caller the choice of either recovering or failing itself. Some languages use the normal function return mechanism, while languages with exceptions return control by <em>throwing</em> or <em>raising</em> an exception. Exceptions are a vast improvement over using normal function returns, but both schemes suffer from a common flaw: while searching for a function that can recover, the stack unwinds, which means code that might recover has to do so without the context of what the lower-level code was trying to do when the error actually occurred.</p>
<p>Consider the hypothetical call chain of <code>high</code>, <code>medium</code>, <code>low</code>. If <code>low</code> fails and <code>medium</code> can’t recover, the ball is in <code>high</code>‘s court. For <code>high</code> to handle the error, it must either do its job without any help from <code>medium</code> or somehow change things so calling <code>medium</code> will work and call it again. The first option is theoretically clean but implies a lot of extra code–a whole extra implementation of whatever it was <code>medium</code> was supposed to do. And the further the stack unwinds, the more work that needs to be redone. The second option–patching things up and retrying–is tricky; for <code>high</code> to be able to change the state of the world so a second call into <code>medium</code> won’t end up causing an error in <code>low</code>, it’d need an unseemly knowledge of the inner workings of both <code>medium</code> and <code>low</code>, contrary to the notion that each function is a black box.</p>
<h2 id="The-R-Way"><a href="#The-R-Way" class="headerlink" title="The R Way"></a>The R Way</h2><p>R’s error handling system gives you a way out of this conundrum by letting you separate the code that actually recovers from an error from the code that decides how to recover. Thus, you can put recovery code in low-level functions without committing to actually using any particular recovery strategy, leaving that decision to code in high-level functions.</p>
<p>To get a sense of how this works, let’s suppose you’re writing an application that reads some sort of textual log file, such as a Web server’s log. Somewhere in your application you’ll have a function to parse the individual log entries. Let’s assume you’ll write a function, <code>parse_log_entry()</code>, that will be passed a string containing the text of a single log entry and that is supposed to return a <code>log_entry()</code> object representing the entry. This function will be called from a function, <code>parse_log_file()</code>, that reads a complete log file and returns a list of objects representing all the entries in the file.</p>
<p>To keep things simple, the <code>parse_log_entry()</code> function will not be required to parse incorrectly formatted entries. It will, however, be able to detect when its input is malformed. But what should it do when it detects bad input? In C you’d return a special value to indicate there was a problem. In Java or Python you’d throw or raise an exception. In R, you signal a condition.</p>
<h2 id="Conditions"><a href="#Conditions" class="headerlink" title="Conditions"></a>Conditions</h2><p>A <em>condition</em> is an S3 object whose class indicates the general nature of the condition and whose instance data carries information about the details of the particular circumstances that lead to the condition being signaled.^3^ In this hypothetical log analysis program, you might define a condition class, <code>malformed_log_entry_error</code>, that <code>parse_log_entry()</code> will signal if it’s given data it can’t parse.</p>
<p>Conditional classes are regular S3 classes, built up from a list with components <code>message</code> and <code>call</code>. There is no built in function to generate a new object of class condition, but we can add one:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">condition &lt;- function(subclass, message, call = sys.call(-1), ...) &#123;</span><br><span class="line">  structure(</span><br><span class="line">    class = c(subclass, &quot;condition&quot;),</span><br><span class="line">    list(message = message, call = call, ...)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When using the condition system for error handling, you should define your conditions as subclasses of <code>error</code>, a subclass of <code>condition</code>. Thus, you might define <code>malformed_log_entry_error</code>, with a slot to hold the argument that was passed to <code>parse_log_entry()</code>, like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">malformed_log_entry_error &lt;- function(text) &#123;</span><br><span class="line">  msg &lt;- paste0(&quot;Malformed log entry: &quot;, text)</span><br><span class="line">  condition(c(&quot;malformed_log_entry_entry&quot;, &quot;error&quot;),</span><br><span class="line">    message = msg,</span><br><span class="line">    text = text</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Condition-Handlers"><a href="#Condition-Handlers" class="headerlink" title="Condition Handlers"></a>Condition Handlers</h2><p>In <code>parse_log_entry()</code> you’ll signal a <code>malformed_log_entry_error</code> if you can’t parse the log entry. You signal errors with the function <code>stop()</code>. <code>stop()</code> is normally just called with a string, the error message, but you can also call it with a condition object. Thus, you could write <code>parse_log_entry()</code> like this, eliding the details of actually parsing a log entry:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parse_log_entry &lt;- function(text) &#123;</span><br><span class="line">  if (!well_formed_log_entry(text)) &#123;</span><br><span class="line">    stop(malformed_log_entry_error(text))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  new_log_entry(text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What happens when the error is signaled depends on the code above <code>parse_log_entry()</code> on the call stack. To avoid a top level error message, you must establish a <em>condition handler</em> in one of the functions leading to the call to <code>parse_log_entry</code>. When a condition is signaled, the signaling machinery looks through a list of active condition handlers, looking for a handler that can handle the condition being signaled based on the condition’s class. Each condition handler consists of a type specifier indicating what types of conditions it can handle and a function that takes a single argument, the condition. At any given moment there can be many active condition handlers established at various levels of the call stack. When a condition is signaled, the signaling machinery finds the most recently established handler whose type specifier is compatible with the condition being signaled and calls its function, passing it the condition object.</p>
<p>The handler function can then choose whether to handle the condition. The function can decline to handle the condition by simply returning normally, in which case control returns to next most recently established handler with a compatible type specifier. To handle the condition, the function must transfer control out of the signaller via a <em>nonlocal exit</em>. In the next section, you’ll see how a handler can choose where to transfer control. However, many condition handlers simply want to unwind the stack to the place where they were established and then run some code. The function <code>tryCatch()</code> establishes this kind of condition handler. The basic form of a <code>tryCatch</code> is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tryCatch(expression,</span><br><span class="line">  condition_class_1 = function(var) ...,</span><br><span class="line">  condition_class_2 = function(var) ...,</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>If the <em>expression</em> returns normally, then its value is returned by the <code>tryCatch()</code>. The body of a <code>tryCatch()</code> must be a single expression; but you can always use <code>{</code> to combine several expressions into a single form. If, however, the expression signals a condition that’s an instance of any of the <em>condition class</em>s then the code in the appropriate error clause is executed and its value returned by the <code>tryCatch()</code>. The <em>var</em> is the name of the variable that will hold the condition object when the handler code is executed. If the code doesn’t need to access the condition object, you can omit the variable name.</p>
<p>For instance, one way to handle the <code>malformed_log_entry_error</code> signaled by <code>parse_log_entry()</code> in its caller, <code>parse_log_file()</code>, would be to skip the malformed entry. In the following function, the <code>tryCatch()</code> expression will either return the value returned by <code>parse_log_entry()</code> or return <code>NULL</code> if a <code>malformed_log_entry_error</code> is signaled.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parse_log_file &lt;- function(file) &#123;</span><br><span class="line">  lines &lt;- readLines(file)</span><br><span class="line"></span><br><span class="line">  lapply(lines, function(text) &#123;</span><br><span class="line">    tryCatch(</span><br><span class="line">      malformed_log_entry = function(e) NULL,</span><br><span class="line">      parse_log_entry(text)</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When <code>parse_log_entry()</code> returns normally, its value will be collected by the <code>lapply()</code>. But if <code>parse_log_entry</code> signals a <code>malformed_log_entry_error</code>, then the error clause will return <code>NULL</code>.</p>
<p>This version of <code>parse_log_file()</code> has one serious deficiency: it’s doing too much. As its name suggests, the job of <code>parse_log_file()</code> is to parse the file and produce a list of <code>log_entry</code> objects; if it can’t, it’s not its place to decide what to do instead. What if you want to use <code>parse_log_file()</code> in an application that wants to tell the user that the log file is corrupted or one that wants to recover from malformed entries by fixing them up and re-parsing them? Or maybe an  application is fine with skipping them but only until a certain number of corrupted entries have been seen.</p>
<p>You could try to fix this problem by moving the <code>tryCatch()</code> to a higher-level function. However, then you’d have no way to implement the current policy of skipping individual entries–when the error was signaled, the stack would be unwound all the way to the higher-level function, abandoning the parsing of the log file altogether. What you want is a way to provide the current recovery strategy without requiring that it always be used.</p>
<h3 id="Java-style-exception-handling"><a href="#Java-style-exception-handling" class="headerlink" title="Java style exception handling"></a>Java style exception handling</h3><p><code>tryCatch</code> is the nearest analog in R to Java- or Python-style exception handling. Where you might write this in Java:</p>
<pre><code>try {
  doStuff();
  doMoreStuff();
} catch (SomeException se) {
  recover(se);
}
</code></pre><p>or this in Python:</p>
<pre><code>try:
  doStuff()
  doMoreStuff()
except SomeException, se:
  recover(se)
</code></pre><p>in R you’d write this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tryCatch(&#123;</span><br><span class="line">  doStuff()</span><br><span class="line">  doMoreStuff()</span><br><span class="line">&#125;, some_exception = function(se) &#123;</span><br><span class="line">  recover(se)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Restarts"><a href="#Restarts" class="headerlink" title="Restarts"></a>Restarts</h2><p>The condition system lets you do this by splitting the error handling code into two parts. You place code that actually recovers from errors into <em>restarts</em>, and condition handlers can then handle a condition by invoking an appropriate restart. You can place restart code in mid- or low-level functions, such as <code>parse_log_file()</code> or <code>parse_log_entry()</code>, while moving the condition handlers into the upper levels of the application.</p>
<p>To change <code>parse_log_file()</code> so it establishes a restart instead of a condition handler, you can change the <code>tryCatch()</code> to a <code>withRestarts()</code>. The form of <code>withRestarts</code> is very similar to a <code>tryCatch()</code>. In general, a restart name should describe the action the restart takes. In <code>parse_log_file()</code>, you can call the restart <code>skip_log_entry</code> since that’s what it does. The new version will look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parse_log_file &lt;- function(file) &#123;</span><br><span class="line">  lines &lt;- readLines(file)</span><br><span class="line"></span><br><span class="line">  lapply(lines, function(text) &#123;</span><br><span class="line">    withRestarts(</span><br><span class="line">      parse_log_entry(text),</span><br><span class="line">      skip_log_entry = function(e) NULL</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you invoke this version of <code>parse_log_file()</code> on a log file containing corrupted entries, it won’t handle the error directly; you’ll end up in the debugger. However, there among the various restarts listed by <code>findRestarts()</code> will be one called <code>skip_log_entry</code>, which, if you choose it, will cause <code>parse_log_file()</code> to continue on its way as before. To avoid ending up in the debugger, you can establish a condition handler that invokes the <code>skip_log_entry</code> restart automatically.</p>
<p>The advantage of establishing a restart rather than having <code>parse_log_file()</code> handle the error directly is it makes <code>parse_log_file()</code> usable in more situations. The higher-level code that invokes <code>parse_log_file()</code> doesn’t have to invoke the <code>skip_log_entry</code> restart. It can choose to handle the error at a higher level. Or, as I’ll show in the next section, you can add restarts to <code>parse_log_entry()</code> to provide other recovery strategies, and then condition handlers can choose which strategy they want to use.</p>
<p>But before I can talk about that, you need to see how to set up a condition handler that will invoke the <code>skip_log_entry</code> restart. You can set up the handler anywhere in the chain of calls leading to <code>parse_log_file()</code>. This may be quite high up in your application, not necessarily in <code>parse_log_file()</code>‘s direct caller. For instance, suppose the main entry point to your application is a function, <code>log_analyzer()</code>, that finds a bunch of logs and analyzes them with the function <code>analyze_log()</code>, which eventually leads to a call to <code>parse_log_file()</code>. Without any error handling, it might look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_analyzer &lt;- function() &#123;</span><br><span class="line">  logs &lt;- find_all_logs()</span><br><span class="line">  lapply(logs, analyze_log)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The job of <code>analyze_log()</code> is to call, directly or indirectly, <code>parse_log_file()</code> and then do something with the list of log entries returned. An extremely simple version might look like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">analyze_log &lt;- function(log) &#123;</span><br><span class="line">  entries &lt;- parse_log_file(log)</span><br><span class="line">  lapply(entries, anaylze_entry)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>where the function <code>analyze_entry()</code> is presumably responsible for extracting whatever information you care about from each log entry and stashing it away somewhere.</p>
<p>Assuming you always want to skip malformed log entries, you could change this function to establish a condition handler that invokes the <code>skip_log_entry</code> restart for you. However, you can’t use <code>tryCatch()</code> to establish the condition handler because then the stack would be unwound to the function where the <code>tryCatch()</code> appears. Instead, you need to use the lower-level macro <code>withCallingHandlers()</code>. The basic form of <code>withCallingHandlers()</code> is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">withCallingHandlers(</span><br><span class="line">  expr,</span><br><span class="line">  condition_1 = function() ...,</span><br><span class="line">  condition_2 = function() ....</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>An important difference between <code>tryCatch()</code> and <code>withCallingHandlers()</code> is that the handler function bound by <code>withCallingHandlers()</code> will be run without unwinding the stack–the flow of control will still be in the call to <code>parse_log_entry()</code> when this function is called. A call to <code>invokeRestart()</code> will find and invoke the most recently bound restart with the given name. So you can add a handler to <code>log_analyzer()</code> that will invoke the <code>skip_log_entry</code> restart established in <code>parse_log_file()</code> like this:^5^</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log_analyzer &lt;- function() &#123;</span><br><span class="line">  logs &lt;- find_all_logs()</span><br><span class="line"></span><br><span class="line">  withCallingHandlers(</span><br><span class="line">    malformed_log_entry_error = function(e) invokeRestart(&quot;skip_log_entry&quot;),</span><br><span class="line">    lapply(logs, analyze_log)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In this <code>withCallingHandlers()</code>, the handler function is an anonymous function that invokes the restart <code>skip_log_entry</code>. You could also define a named function that does the same thing and bind it instead. In fact, a common practice when defining a restart is to define a function, with the same name and taking a single argument, the condition, that invokes the eponymous restart. Such functions are called <em>restart functions</em>. You could define a restart function for <code>skip_log_entry</code> like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip_log_entry &lt;- function() invokeRestart(&quot;skip_log_entry&quot;)</span><br></pre></td></tr></table></figure>
<p>Then you could change the definition of <code>log_analyzer()</code> to this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log_analyzer &lt;- function() &#123;</span><br><span class="line">  logs &lt;- find_all_logs()</span><br><span class="line"></span><br><span class="line">  withCallingHandlers(</span><br><span class="line">    malformed_log_entry_error = skip_log_entry,</span><br><span class="line">    lapply(logs, analyze_log)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As written, the <code>skip_log_entry</code> restart function assumes that a <code>skip_log_entry</code> restart has been established. If a <code>malformed_log_entry_error</code> is ever signaled by code called from <code>log_analyzer()</code> without a <code>skip_log_entry</code> having been established, the call to <code>invokeRestart()</code> will signal an error when it fails to find the <code>skip_log_entry</code> restart. If you want to allow for the possibility that a <code>malformed_log_entry_error</code> might be signaled from code that doesn’t have a <code>skip_log_entry</code> restart established, you could change the <code>skip_log_entry</code> function to this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">skip_log_entry &lt;- function() &#123;</span><br><span class="line">  r &lt;- findRestart(&quot;skip_log_entry&quot;)</span><br><span class="line">  if (is.null(r)) return()</span><br><span class="line"></span><br><span class="line">  invokeRestart(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>findRestart</code> looks for a restart with a given name and returns an object representing the restart if the restart is found and <code>NULL</code> if not. You can invoke the restart by passing the restart object to <code>invokeRestart()</code>. Thus, when <code>skip_log_entry</code> is bound with <code>withCallingHandlers()</code>, it will handle the condition by invoking the <code>skip_log_entry</code> restart if one is available and otherwise will return normally, giving other condition handlers, bound higher on the stack, a chance to handle the condition.</p>
<h2 id="Providing-Multiple-Restarts"><a href="#Providing-Multiple-Restarts" class="headerlink" title="Providing Multiple Restarts"></a>Providing Multiple Restarts</h2><p>Since restarts must be explicitly invoked to have any effect, you can define multiple restarts, each providing a different recovery strategy. As I mentioned earlier, not all log-parsing applications will necessarily want to skip malformed entries. Some applications might want <code>parse_log_file()</code> to include a special kind of object representing malformed entries in the list of <code>log-entry</code> objects; other applications may have some way to repair a malformed entry and may want a way to pass the fixed entry back to <code>parse_log_entry()</code>.</p>
<p>To allow more complex recovery protocols, restarts can take arbitrary arguments, which are passed in the call to <code>invokeRestart()</code>. You can provide support for both the recovery strategies I just mentioned by adding two restarts to <code>parse_log_entry()</code>, each of which takes a single argument. One simply returns the value it’s passed as the return value of <code>parse_log_entry()</code>, while the other tries to parse its argument in the place of the original log entry.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parse_log_entry &lt;- function(text) &#123;</span><br><span class="line">  if (well_formed_log_entry(text)) &#123;</span><br><span class="line">    return(new_log_entry(text))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  withRestarts(</span><br><span class="line">    stop(malformed_log_entry_error(text)),</span><br><span class="line">    use_value = function(x) x,</span><br><span class="line">    reparse_entry = function(fixed_text) parse_log_entry(fixed_text)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The name <code>use_value()</code> is a standard name for this kind of restart. You can define a restart function for <code>use_value</code> similar to the <code>skip_log_entry</code> function you just defined.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_value &lt;- function(x) invokeRestart(&quot;use_value&quot;, x)</span><br></pre></td></tr></table></figure>
<p>So, if you wanted to change the policy on malformed entries to one that created an instance of <code>malformed_log_entry</code>, you could change <code>log_analyzer()</code> to this (assuming the existence of a <code>malformed_log_entry</code> constructor with a <code>text</code> parameter):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log_analyzer &lt;- function() &#123;</span><br><span class="line">  logs &lt;- find_all_logs()</span><br><span class="line"></span><br><span class="line">  withCallingHandlers(</span><br><span class="line">    malformed_log_entry_error = function(text) &#123;</span><br><span class="line">      use_value(malformed_log_entry(text))</span><br><span class="line">    &#125;,</span><br><span class="line">    lapply(logs, analyze_log)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You could also have put these new restarts into <code>parse_log_file()</code> instead of <code>parse_log_entry()</code>. However, you generally want to put restarts in the lowest-level code possible. It wouldn’t, though, be appropriate to move the <code>skip_log_entry</code> restart into <code>parse_log_entry()</code> since that would cause <code>parse_log_entry()</code> to sometimes return normally with <code>NULL</code>, the very thing you started out trying to avoid. And it’d be an equally bad idea to remove the <code>skip_log_entry</code> restart on the theory that the condition handler could get the same effect by invoking the <code>use-value</code> restart with <code>NULL</code> as the argument; that would require the condition handler to have intimate knowledge of how the <code>parse_log_file()</code> works. As it stands, the <code>skip_log_entry</code> is a properly abstracted part of the log-parsing API.</p>
<h2 id="Other-Uses-for-Conditions"><a href="#Other-Uses-for-Conditions" class="headerlink" title="Other Uses for Conditions"></a>Other Uses for Conditions</h2><p>While conditions are mainly used for error handling, they can be used for other purposes–you can use conditions, condition handlers, and restarts to build a variety of protocols between low- and high-level code. The key to understanding the potential of conditions is to understand that merely signaling a condition has no effect on the flow of control.</p>
<p>The primitive signaling function <code>signalCondition()</code> implements the mechanism of searching for an applicable condition handler and invoking its handler function. The reason a handler can decline to handle a condition by returning normally is because the call to the handler function is just a regular function call–when the handler returns, control passes back to <code>signalCondition()</code>, which then looks for another, less recently bound handler that can handle the condition. If <code>signalCondition()</code> runs out of condition handlers before the condition is handled, it also returns normally.</p>
<p>The <code>stop()</code> function you’ve been using calls <code>signalCondition()</code>. If the error is handled by a condition handler that transfers control via <code>tryCatch()</code> or by invoking a restart, then the call to <code>signalCondition()</code> never returns.</p>
<p>Another condition signaling function, <code>warning()</code>, provides an example of a different kind of protocol built on the condition system. Like <code>stop()</code>, <code>warnings()</code> calls <code>signalCondition()</code> to signal a condition. But if <code>signalCondition()</code> returns, <code>warning()</code> doesn’t throw a top-level error–it prints the condition to <code>stderr</code> and returns <code>NULL</code>, allowing its caller to proceed. <code>warning()</code> also establishes a restart, <code>muffle_warning()</code>, around the call to <code>signalCondition()</code> that can be used by a condition handler to make <code>warning()</code> return without printing anything. Of course, a condition signaled with <code>warning()</code> could also be handled in some other way–a condition handler could “promote” a warning to an error by handling it as if it were an error.</p>
<p>For instance, in the log-parsing application, if there were ways a log entry could be slightly malformed but still parsable, you could write <code>parse_log_entry()</code> to go ahead and parse the slightly defective entries but to signal a condition with <code>warning()</code> when it did. Then the larger application could choose to let the warning print, to muffle the warning, or to treat the warning like an error, recovering the same way it would from a <code>malformed_log_entry_error</code>.</p>
<p>You can also build your own protocols on <code>signalCondition()</code>–whenever low-level code needs to communicate information back up the call stack to higher-level code, the condition mechanism is a reasonable mechanism to use. But for most purposes, one of the standard error or warning protocols should suffice.</p>
<p>Unfortunately, it’s the fate of error handling to always get short shrift in programming texts–proper error handling, or lack thereof, is often the biggest difference between illustrative code and hardened, production-quality code. The trick to writing the latter has more to do with adopting a particularly rigorous way of thinking about software than with the details of any particular programming language constructs. That said, if your goal is to write that kind of software, you’ll find the R condition system is an excellent tool for writing robust code and one that fits quite nicely into R’s incremental development style.</p>
<h3 id="Writing-Robust-Software"><a href="#Writing-Robust-Software" class="headerlink" title="Writing Robust Software"></a>Writing Robust Software</h3><p>For information on writing robust software, you could do worse than to start by finding a copy of <em>Software Reliability</em> (John Wiley &amp; Sons, 1976) by Glenford J. Meyers. Bertrand Meyer’s writings on Design By Contract also provide a useful way of thinking about software correctness. For instance, see Chapters 11 and 12 of his <em>Object-Oriented Software Construction</em> (Prentice Hall, 1997). Keep in mind, however, that Bertrand Meyer is the inventor of Eiffel, a statically typed bondage and discipline language in the Algol/Ada school. While he has a lot of smart things to say about object orientation and software reliability, there’s a fairly wide gap between his view of programming and The R Way. Finally, for an excellent overview of the larger issues surrounding building fault-tolerant systems, see Chapter 3 of the classic <em>Transaction Processing: Concepts and Techniques</em> (Morgan Kaufmann, 1993) by Jim Gray and Andreas Reuter.</p>
<p>^1^<em>Throws</em> or <em>raises</em> an exception in Java/Python terms</p>
<p>^2^<em>Catches</em> the exception in Java/Python terms</p>
<p>^3^In this respect, a condition is a lot like an exception in Java or Python except not all conditions represent an error or <em>exceptional</em> situation.</p>
<p>^5^The compiler may complain if the parameter is never used. You can silence that warning by adding a declaration <code>(declare (ignore c))</code> as the first expression in the <code>LAMBDA</code> body.</p>
<hr>
<p>The chapter concludes with a discussion of “defensive” programming: ways to avoid common errors before they occur. In the short run you’ll spend more time writing code, but in the long run you’ll save time because error messages will be more informative and will let you narrow in on the root cause more quickly. The basic principle of defensive programming is to “fail fast”, to raise an error as soon as something goes wrong. In R, this takes three particular forms: checking that inputs are correct, avoiding non-standard evaluation, and avoiding functions that can return different types of output.</p>
<h5 id="Quiz-5"><a href="#Quiz-5" class="headerlink" title="Quiz"></a>Quiz</h5><p>Want to skip this chapter? Go for it, if you can answer the questions below. Find the answers at the end of the chapter in <a href="#debugging-answers">answers</a>.</p>
<ol>
<li>How can you find out where an error occurred?</li>
<li>What does <code>browser()</code> do? List the five useful single-key commands   that you can use inside of a <code>browser()</code> environment.</li>
<li>What function do you use to ignore errors in block of code?</li>
<li>Why might you want to create an error with a custom S3 class?</li>
</ol>
<h5 id="Outline-5"><a href="#Outline-5" class="headerlink" title="Outline"></a>Outline</h5><ol>
<li><a href="#debugging-techniques">Debugging techniques</a> outlines a general   approach for finding and resolving bugs.</li>
<li><a href="#debugging-tools">Debugging tools</a> introduces you to the R functions   and RStudio features that help you locate exactly where an error   occurred.</li>
<li><a href="#condition-handling">Condition handling</a> shows you how you can catch   conditions (errors, warnings, and messages) in your own code. This allows   you to create code that’s both more robust and more informative in the   presence of errors.</li>
<li><a href="#defensive-programming">Defensive programming</a> introduces you to   some important techniques for defensive programming, techniques that help   prevent bugs from occurring in the first place.</li>
</ol>
<h2 id="Debugging-techniques"><a href="#Debugging-techniques" class="headerlink" title="Debugging techniques"></a><a href="id=&quot;debugging-techniques&quot;">Debugging techniques</a></h2><blockquote>
<p>“Finding your bug is a process of confirming the many things<br>that you believe are true — until you find one which is not<br>true.”</p>
<p>—Norm Matloff</p>
</blockquote>
<p>Debugging code is challenging. Many bugs are subtle and hard to find. Indeed, if a bug was obvious, you probably would’ve been able to avoid it in the first place. While it’s true that with a good technique, you can productively debug a problem with just <code>print()</code>, there are times when additional help would be welcome. In this section, we’ll discuss some useful tools, which R and RStudio provide, and outline a general procedure for debugging.</p>
<p>While the procedure below is by no means foolproof, it will hopefully help you to organise your thoughts when debugging. There are four steps:</p>
<ol>
<li><p><strong>Realise that you have a bug</strong></p>
<p> If you’re reading this chapter, you’ve probably already completed this step.    It is a surprisingly important one: you can’t fix a bug until you know it    exists. This is one reason why automated test suites are important when<br> producing high-quality code. Unfortunately, automated testing is outside the    scope of this book, but you can read more about it at    <a href="http://r-pkgs.had.co.nz/tests.html" target="_blank" rel="external">http://r-pkgs.had.co.nz/tests.html</a>.</p>
</li>
<li><p><strong>Make it repeatable</strong></p>
<p> Once you’ve determined you have a bug, you need to be able to reproduce it    on command. Without this, it becomes extremely difficult to isolate its    cause and to confirm that you’ve successfully fixed it.</p>
<p> Generally, you will start with a big block of code that you know causes the    error and then slowly whittle it down to get to the smallest possible    snippet that still causes the error. Binary search is particularly useful    for this. To do a binary search, you repeatedly remove half of the code    until you find the bug. This is fast because, with each step, you reduce the    amount of code to look through by half.</p>
<p> If it takes a long time to generate the bug, it’s also worthwhile to figure    out how to generate it faster. The quicker you can do this, the quicker you    can figure out the cause.</p>
<p> As you work on creating a minimal example, you’ll also discover similar    inputs that don’t trigger the bug. Make note of them: they will be helpful    when diagnosing the cause of the bug.</p>
<p> If you’re using automated testing, this is also a good time to create an    automated test case. If your existing test coverage is low, take the    opportunity to add some nearby tests to ensure that existing good behaviour    is preserved. This reduces the chances of creating a new bug.</p>
</li>
<li><p><strong>Figure out where it is</strong></p>
<p> If you’re lucky, one of the tools in the following section will help you to    quickly identify the line of code that’s causing the bug. Usually, however,    you’ll have to think a bit more about the problem. It’s a great idea to    adopt the scientific method. Generate hypotheses, design experiments to test    them, and record your results. This may seem like a lot of work, but a    systematic approach will end up saving you time. I often waste a lot of time    relying on my intuition to solve a bug (“oh, it must be an off-by-one error,    so I’ll just subtract 1 here”), when I would have been better off taking a    systematic approach.</p>
</li>
<li><p><strong>Fix it and test it</strong></p>
<p> Once you’ve found the bug, you need to figure out how to fix it and to check    that the fix actually worked. Again, it’s very useful to have automated    tests in place. Not only does this help to ensure that you’ve actually fixed    the bug, it also helps to ensure you haven’t introduced any new bugs in the    process. In the absence of automated tests, make sure to carefully record    the correct output, and check against the inputs that previously failed.</p>
</li>
</ol>
<h2 id="Debugging-tools"><a href="#Debugging-tools" class="headerlink" title="Debugging tools"></a><a href="id=&quot;debugging-tools&quot;">Debugging tools</a></h2><p>To implement a strategy of debugging, you’ll need tools. In this section, you’ll learn about the tools provided by R and the RStudio IDE. RStudio’s integrated debugging support makes life easier by exposing existing R tools in a user friendly way. I’ll show you both the R and RStudio ways so that you can work with whatever environment you use. You may also want to refer to the official <a href="http://www.rstudio.com/ide/docs/debugging/overview" target="_blank" rel="external">RStudio debugging documentation</a> which always reflects the tools in the latest version of RStudio.</p>
<p>There are three key debugging tools:</p>
<ul>
<li>RStudio’s error inspector and <code>traceback()</code> which list the sequence of calls  that lead to the error.</li>
<li>RStudio’s “Rerun with Debug” tool and <code>options(error = browser)</code> which open  an interactive session where the error occurred.</li>
<li>RStudio’s breakpoints and <code>browser()</code> which open an interactive session at  an arbitrary location in the code.</li>
</ul>
<p>I’ll explain each tool in more detail below.</p>
<p>You shouldn’t need to use these tools when writing new functions. If you find yourself using them frequently with new code, you may want to reconsider your approach. Instead of trying to write one big function all at once, work interactively on small pieces. If you start small, you can quickly identify why something doesn’t work. But if you start large, you may end up struggling to identify the source of the problem.</p>
<h3 id="Determining-the-sequence-of-calls"><a href="#Determining-the-sequence-of-calls" class="headerlink" title="Determining the sequence of calls"></a>Determining the sequence of calls</h3><p>The first tool is the <strong>call stack</strong>, the sequence of calls that lead up to an error. Here’s a simple example: you can see that <code>f()</code> calls <code>g()</code> calls <code>h()</code> calls <code>i()</code> which adds together a number and a string creating a error:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(a) g(a)</span><br><span class="line">g &lt;- function(b) h(b)</span><br><span class="line">h &lt;- function(c) i(c)</span><br><span class="line">i &lt;- function(d) &quot;a&quot; + d</span><br><span class="line">f(10)</span><br></pre></td></tr></table></figure>
<p>When we run this code in RStudio we see:</p>
<p><img src="screenshots/traceback-hidden.png" alt=""></p>
<p>Two options appear to the right of the error message: “Show Traceback” and “Rerun with Debug”.  If you click “Show traceback” you see:</p>
<p><img src="screenshots/traceback-shown.png" alt=""></p>
<p>If you’re not using RStudio, you can use <code>traceback()</code> to get the same information:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">traceback()</span><br><span class="line"># 4: i(c) at exceptions-example.R#3</span><br><span class="line"># 3: h(b) at exceptions-example.R#2</span><br><span class="line"># 2: g(a) at exceptions-example.R#1</span><br><span class="line"># 1: f(10)</span><br></pre></td></tr></table></figure>
<p>Read the call stack from bottom to top: the initial call is <code>f()</code>, which calls <code>g()</code>, then <code>h()</code>, then <code>i()</code>, which triggers the error. If you’re calling code that you <code>source()</code>d into R, the traceback will also display the location of the function, in the form <code>filename.r#linenumber</code>. These are clickable in RStudio, and will take you to the corresponding line of code in the editor.</p>
<p>Sometimes this is enough information to let you track down the error and fix it. However, it’s usually not. <code>traceback()</code> shows you where the error occurred, but not why. The next useful tool is the interactive debugger, which allows you to pause execution of a function and interactively explore its state.</p>
<h3 id="Browsing-on-error"><a href="#Browsing-on-error" class="headerlink" title="Browsing on error"></a>Browsing on error</h3><p>The easiest way to enter the interactive debugger is through RStudio’s “Rerun with Debug” tool. This reruns the command that created the error, pausing execution where the error occurred. You’re now in an interactive state inside the function, and you can interact with any object defined there. You’ll see the corresponding code in the editor (with the statement that will be run next highlighted), objects in the current environment in the “Environment” pane, the call stack in a “Traceback” pane, and you can run arbitrary R code in the console.</p>
<p>As well as any regular R function, there are a few special commands you can use in debug mode. You can access them either with the RStudio toolbar</p>
<p><img src="screenshots/debug-toolbar.png" alt=""></p>
<p>or with the keyboard:</p>
<ul>
<li>Next, <code>n</code>: executes the next step in the function. Be careful if you have a  variable named <code>n</code>; to print it you’ll need to do <code>print(n)</code>.</li>
<li><p>Step into,</p>
<p>  <img src="screenshots/step-into.png" alt=""></p>
<p>  or <code>s</code>:  works like next, but if the next step is a function, it will step into that  function so you can work through each line.</p>
</li>
<li><p>Finish,</p>
<p>  <img src="screenshots/finish-loop.png" alt=""></p>
<p>  or <code>f</code>:  finishes execution of the current loop or function.</p>
</li>
<li><p>Continue, <code>c</code>: leaves interactive debugging and continues regular execution  of the function. This is useful if you’ve fixed the bad state and want to  check that the function proceeds correctly.</p>
</li>
<li>Stop, <code>Q</code>: stops debugging, terminates the function, and returns to the global  workspace. Use this once you’ve figured out where the problem is, and you’re  ready to fix it and reload the code.</li>
</ul>
<p>There are two other slightly less useful commands that aren’t available in the toolbar:</p>
<ul>
<li>Enter: repeats the previous command. I find this too easy to activate  accidentally, so I turn it off using <code>options(browserNLdisabled = TRUE)</code>.</li>
<li><code>where</code>: prints stack trace of active calls (the interactive equivalent of  <code>traceback</code>).</li>
</ul>
<p>To enter this style of debugging outside of RStudio, you can use the <code>error</code> option which specifies a function to run when an error occurs. The function most similar to Rstudio’s debug is <code>browser()</code>: this will start an interactive console in the environment where the error occurred. Use <code>options(error = browser)</code> to turn it on, re-run the previous command, then use <code>options(error = NULL)</code> to return to the default error behaviour. You could automate this with the <code>browseOnce()</code> function as defined below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">browseOnce &lt;- function() &#123;</span><br><span class="line">  old &lt;- getOption(&quot;error&quot;)</span><br><span class="line">  function() &#123;</span><br><span class="line">    options(error = old)</span><br><span class="line">    browser()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">options(error = browseOnce())</span><br><span class="line"></span><br><span class="line">f &lt;- function() stop(&quot;!&quot;)</span><br><span class="line"># Enters browser</span><br><span class="line">f()</span><br><span class="line"># Runs normally</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>(You’ll learn more about functions that return functions in <a href="#functional-programming">Functional programming</a>.)</p>
<p>There are two other useful functions that you can use with the <code>error</code> option:</p>
<ul>
<li><code>recover</code> is a step up from <code>browser</code>, as it allows you to enter the  environment of any of the calls in the call stack. This is useful because  often the root cause of the error is a number of calls back.</li>
<li><p><code>dump.frames</code> is an equivalent to <code>recover</code> for non-interactive code. It  creates a <code>last.dump.rda</code> file in the current working directory. Then,  in a later interactive R session, you load that file, and use <code>debugger()</code>  to enter an interactive debugger with the same interface as <code>recover()</code>.  This allows interactive debugging of batch code.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># In batch R process ----</span><br><span class="line">dump_and_quit &lt;- function() &#123;</span><br><span class="line">  # Save debugging info to file last.dump.rda</span><br><span class="line">  dump.frames(to.file = TRUE)</span><br><span class="line">  # Quit R with error status</span><br><span class="line">  q(status = 1)</span><br><span class="line">&#125;</span><br><span class="line">options(error = dump_and_quit)</span><br><span class="line"></span><br><span class="line"># In a later interactive session ----</span><br><span class="line">load(&quot;last.dump.rda&quot;)</span><br><span class="line">debugger()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>To reset error behaviour to the default, use <code>options(error = NULL)</code>. Then errors will print a message and abort function execution.</p>
<h3 id="Browsing-arbitrary-code"><a href="#Browsing-arbitrary-code" class="headerlink" title="Browsing arbitrary code"></a>Browsing arbitrary code</h3><p>As well as entering an interactive console on error, you can enter it at an arbitrary code location by using either an Rstudio breakpoint or <code>browser()</code>. You can set a breakpoint in Rstudio by clicking to the left of the line number, or pressing <code>Shift + F9</code>. Equivalently, add <code>browser()</code> where you want execution to pause. Breakpoints behave similarly to <code>browser()</code> but they are easier to set (one click instead of nine key presses), and you don’t run the risk of accidentally including a <code>browser()</code> statement in your source code. There are two small downsides to breakpoints:</p>
<ul>
<li>There are a few unusual situations in which breakpoints will not work:  read <a href="http://www.rstudio.com/ide/docs/debugging/breakpoint-troubleshooting" target="_blank" rel="external">breakpoint troubleshooting</a> for more details.</li>
<li>RStudio currently does not support conditional breakpoints, whereas you  can always put <code>browser()</code> inside an <code>if</code> statement.</li>
</ul>
<p>As well as adding <code>browser()</code> yourself, there are two other functions that will add it to code:</p>
<ul>
<li><code>debug()</code> inserts a browser statement in the first line of the specified  function. <code>undebug()</code> removes it. Alternatively, you can use <code>debugonce()</code>  to browse only on the next run.</li>
<li><code>utils::setBreakpoint()</code> works similarly, but instead of taking a function  name, it takes a file name and line number and finds the appropriate function  for you.</li>
</ul>
<p>These two functions are both special cases of <code>trace()</code>, which inserts arbitrary code at any position in an existing function. <code>trace()</code> is occasionally useful when you’re debugging code that you don’t have the source for. To remove tracing from a function, use <code>untrace()</code>. You can only perform one trace per function, but that one trace can call multiple functions.</p>
<h3 id="The-call-stack-traceback-where-and-recover"><a href="#The-call-stack-traceback-where-and-recover" class="headerlink" title="The call stack: traceback(), where, and recover()"></a>The call stack: <code>traceback()</code>, <code>where</code>, and <code>recover()</code></h3><p>Unfortunately the call stacks printed by <code>traceback()</code>, <code>browser()</code> + <code>where</code>, and <code>recover()</code> are not consistent. The following table shows how the call stacks from a simple nested set of calls are displayed by the three tools.</p>
<p><code>traceback()</code>       <code>where</code>                    <code>recover()</code></p>
<hr>
<p><code>4: stop(&quot;Error&quot;)</code>  <code>where 1: stop(&quot;Error&quot;)</code>   <code>1: f()</code><br><code>3: h(x)</code>           <code>where 2: h(x)</code>            <code>2: g(x)</code><br><code>2: g(x)</code>           <code>where 3: g(x)</code>            <code>3: h(x)</code><br><code>1: f()</code>            <code>where 4: f()</code></p>
<p>Note that numbering is different between <code>traceback()</code> and <code>where</code>, and that <code>recover()</code> displays calls in the opposite order, and omits the call to <code>stop()</code>. RStudio displays calls in the same order as <code>traceback()</code> but omits the numbers.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) g(x)</span><br><span class="line">g &lt;- function(x) h(x)</span><br><span class="line">h &lt;- function(x) stop(&quot;Error&quot;)</span><br><span class="line">f(); traceback()</span><br><span class="line">options(error = browser); f()</span><br><span class="line">options(error = recover); f()</span><br><span class="line">options(error = NULL)</span><br></pre></td></tr></table></figure>
<h3 id="Other-types-of-failure"><a href="#Other-types-of-failure" class="headerlink" title="Other types of failure"></a>Other types of failure</h3><p>There are other ways for a function to fail apart from throwing an error or returning an incorrect result.</p>
<ul>
<li>A function may generate an unexpected warning. The easiest way to track down  warnings is to convert them into errors with <code>options(warn = 2)</code> and use the  regular debugging tools. When you do this you’ll see some extra calls  in the call stack, like <code>doWithOneRestart()</code>, <code>withOneRestart()</code>,  <code>withRestarts()</code>, and <code>.signalSimpleWarning()</code>. Ignore these: they are<br>internal functions used to turn warnings into errors.</li>
<li><p>A function may generate an unexpected message. There’s no built-in tool to  help solve this problem, but it’s possible to create one:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">message2error &lt;- function(code) &#123;</span><br><span class="line">  withCallingHandlers(code, message = function(e) stop(e))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f &lt;- function() g()</span><br><span class="line">g &lt;- function() message(&quot;Hi!&quot;)</span><br><span class="line">g()</span><br><span class="line"># Error in message(&quot;Hi!&quot;): Hi!</span><br><span class="line">message2error(g())</span><br><span class="line">traceback()</span><br><span class="line"># 10: stop(e) at #2</span><br><span class="line"># 9: (function (e) stop(e))(list(message = &quot;Hi!\n&quot;,</span><br><span class="line">#      call = message(&quot;Hi!&quot;)))</span><br><span class="line"># 8: signalCondition(cond)</span><br><span class="line"># 7: doWithOneRestart(return(expr), restart)</span><br><span class="line"># 6: withOneRestart(expr, restarts[[1L]])</span><br><span class="line"># 5: withRestarts()</span><br><span class="line"># 4: message(&quot;Hi!&quot;) at #1</span><br><span class="line"># 3: g()</span><br><span class="line"># 2: withCallingHandlers(code, message = function(e) stop(e))</span><br><span class="line">#      at #2</span><br><span class="line"># 1: message2error(g())</span><br></pre></td></tr></table></figure>
<p>  As with warnings, you’ll need to ignore some of the calls on the traceback    (i.e., the first two and the last seven).</p>
</li>
<li>A function might never return. This is particularly hard to debug  automatically, but sometimes terminating the function and looking at the  call stack is informative. Otherwise, use the basic debugging strategies  described above.</li>
<li><p>The worst scenario is that your code might crash R completely, leaving you  with no way to interactively debug your code. This indicates a bug in the  underlying C code. This is hard to debug. Sometimes an interactive debugger,  like <code>gdb</code>, can be useful, but describing how to use it is beyond the  scope of this book.</p>
<p>  If the crash is caused by base R code, post a reproducible example to R-help.<br>  If it’s in a package, contact the package maintainer. If it’s your own C or    C++ code, you’ll need to use numerous <code>print()</code> statements to narrow down    the location of the bug, and then you’ll need to use many more print    statements to figure out which data structure doesn’t have the properties    that you expect.</p>
</li>
</ul>
<h2 id="Condition-handling"><a href="#Condition-handling" class="headerlink" title="Condition handling"></a><a href="id=&quot;condition-handling&quot;">Condition handling</a></h2><p>Unexpected errors require interactive debugging to figure out what went wrong. Some errors, however, are expected, and you want to handle them automatically. In R, expected errors crop up most frequently when you’re fitting many models to different datasets, such as bootstrap replicates. Sometimes the model might fail to fit and throw an error, but you don’t want to stop everything. Instead, you want to fit as many models as possible and then perform diagnostics after the fact.</p>
<p>In R, there are three tools for handling conditions (including errors) programmatically:</p>
<ul>
<li><code>try()</code> gives you the ability to continue execution even when an error occurs.</li>
<li><code>tryCatch()</code> lets you specify <strong>handler</strong> functions that control what  happens when a condition is signalled.</li>
<li><code>withCallingHandlers()</code> is a variant of <code>tryCatch()</code> that runs its handlers  in a different context. It’s rarely needed, but is useful to be aware of.</li>
</ul>
<p>The following sections describe these tools in more detail.</p>
<h3 id="Ignore-errors-with-try"><a href="#Ignore-errors-with-try" class="headerlink" title="Ignore errors with try"></a><a href="id=&quot;try&quot;">Ignore errors with try</a></h3><p><code>try()</code> allows execution to continue even after an error has occurred. For example, normally if you run a function that throws an error, it terminates immediately and doesn’t return a value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- function(x) &#123;</span><br><span class="line">  log(x)</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">f1(&quot;x&quot;)</span><br></pre></td></tr></table></figure>
<p>However, if you wrap the statement that creates the error in <code>try()</code>, the error message will be printed but execution will continue:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f2 &lt;- function(x) &#123;</span><br><span class="line">  try(log(x))</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">f2(&quot;a&quot;)</span><br><span class="line">#&gt; Error in log(x) : non-numeric argument to mathematical function</span><br><span class="line">#&gt; [1] 10</span><br></pre></td></tr></table></figure>
<p>You can suppress the message with <code>try(..., silent = TRUE)</code>.</p>
<p>To pass larger blocks of code to <code>try()</code>, wrap them in <code>{}</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try(&#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  b &lt;- &quot;x&quot;</span><br><span class="line">  a + b</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>You can also capture the output of the <code>try()</code> function. If successful, it will be the last result evaluated in the block (just like a function). If unsuccessful it will be an (invisible) object of class “try-error”:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">success &lt;- try(1 + 2)</span><br><span class="line">failure &lt;- try(&quot;a&quot; + &quot;b&quot;)</span><br><span class="line">class(success)</span><br><span class="line">class(failure)</span><br></pre></td></tr></table></figure>
<p><code>try()</code> is particularly useful when you’re applying a function to multiple elements in a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elements &lt;- list(1:10, c(-1, 10), c(TRUE, FALSE), letters)</span><br><span class="line">results &lt;- lapply(elements, log)</span><br><span class="line">results &lt;- lapply(elements, function(x) try(log(x)))</span><br></pre></td></tr></table></figure>
<p>There isn’t a built-in function to test for the try-error class, so we’ll define one. Then you can easily find the locations of errors with <code>sapply()</code> (as discussed in <a href="#functionals">Functionals</a>), and extract the successes or look at the inputs that lead to failures.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">is.error &lt;- function(x) inherits(x, &quot;try-error&quot;)</span><br><span class="line">succeeded &lt;- !vapply(results, is.error, logical(1))</span><br><span class="line"></span><br><span class="line"># look at successful results</span><br><span class="line">str(results[succeeded])</span><br><span class="line"></span><br><span class="line"># look at inputs that failed</span><br><span class="line">str(elements[!succeeded])</span><br></pre></td></tr></table></figure>
<p>Another useful <code>try()</code> idiom is using a default value if an expression fails. Simply assign the default value outside the try block, and then run the risky code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default &lt;- NULL</span><br><span class="line">try(default &lt;- read.csv(&quot;possibly-bad-input.csv&quot;), silent = TRUE)</span><br></pre></td></tr></table></figure>
<p>There is also <code>plyr::failwith()</code>, which makes this strategy even easier to implement. See <a href="#output-fos">Function Operators</a> for more details.</p>
<h3 id="Handle-conditions-with-tryCatch"><a href="#Handle-conditions-with-tryCatch" class="headerlink" title="Handle conditions with tryCatch()"></a>Handle conditions with <code>tryCatch()</code></h3><p><code>tryCatch()</code> is a general tool for handling conditions: in addition to errors, you can take different actions for warnings, messages, and interrupts.  You’ve seen errors (made by <code>stop()</code>), warnings (<code>warning()</code>) and messages (<code>message()</code>) before, but interrupts are new. They can’t be generated directly by the programmer, but are raised when the user attempts to terminate execution by pressing Ctrl + Break, Escape, or Ctrl + C (depending on the platform).</p>
<p>With <code>tryCatch()</code> you map conditions to <strong>handlers</strong>, named functions that are called with the condition as an input. If a condition is signalled, <code>tryCatch()</code> will call the first handler whose name matches one of the classes of the condition. The only useful built-in names are <code>error</code>, <code>warning</code>, <code>message</code>, <code>interrupt</code>, and the catch-all <code>condition</code>. A handler function can do anything, but typically it will either return a value or create a more informative error message. For example, the <code>show_condition()</code> function below sets up handlers that return the type of condition signalled:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">show_condition &lt;- function(code) &#123;</span><br><span class="line">  tryCatch(code,</span><br><span class="line">    error = function(c) &quot;error&quot;,</span><br><span class="line">    warning = function(c) &quot;warning&quot;,</span><br><span class="line">    message = function(c) &quot;message&quot;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">show_condition(stop(&quot;!&quot;))</span><br><span class="line">show_condition(warning(&quot;?!&quot;))</span><br><span class="line">show_condition(message(&quot;?&quot;))</span><br><span class="line"></span><br><span class="line"># If no condition is captured, tryCatch returns the</span><br><span class="line"># value of the input</span><br><span class="line">show_condition(10)</span><br></pre></td></tr></table></figure>
<p>You can use <code>tryCatch()</code> to implement <code>try()</code>. A simple implementation is shown below. <code>base::try()</code> is more complicated in order to make the error message look more like what you’d see if <code>tryCatch()</code> wasn’t used. Note the use of <code>conditionMessage()</code> to extract the message associated with the original error.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try2 &lt;- function(code, silent = FALSE) &#123;</span><br><span class="line">  tryCatch(code, error = function(c) &#123;</span><br><span class="line">    msg &lt;- conditionMessage(c)</span><br><span class="line">    if (!silent) message(c)</span><br><span class="line">    invisible(structure(msg, class = &quot;try-error&quot;))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try2(1)</span><br><span class="line">try2(stop(&quot;Hi&quot;))</span><br><span class="line">try2(stop(&quot;Hi&quot;), silent = TRUE)</span><br></pre></td></tr></table></figure>
<p>As well as returning default values when a condition is signalled, handlers can be used to make more informative error messages. For example, by modifying the message stored in the error condition object, the following function wraps <code>read.csv()</code> to add the file name to any errors:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">read.csv2 &lt;- function(file, ...) &#123;</span><br><span class="line">  tryCatch(read.csv(file, ...), error = function(c) &#123;</span><br><span class="line">    c$message &lt;- paste0(c$message, &quot; (in &quot;, file, &quot;)&quot;)</span><br><span class="line">    stop(c)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">read.csv(&quot;code/dummy.csv&quot;)</span><br><span class="line">read.csv2(&quot;code/dummy.csv&quot;)</span><br></pre></td></tr></table></figure>
<p>Catching interrupts can be useful if you want to take special action when the user tries to abort running code. But be careful, it’s easy to create a loop that you can never escape (unless you kill R)!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Don&apos;t let the user interrupt the code</span><br><span class="line">i &lt;- 1</span><br><span class="line">while(i &lt; 3) &#123;</span><br><span class="line">  tryCatch(&#123;</span><br><span class="line">    Sys.sleep(0.5)</span><br><span class="line">    message(&quot;Try to escape&quot;)</span><br><span class="line">  &#125;, interrupt = function(x) &#123;</span><br><span class="line">    message(&quot;Try again!&quot;)</span><br><span class="line">    i &lt;&lt;- i + 1</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>tryCatch()</code> has one other argument: <code>finally</code>. It specifies a block of code (not a function) to run regardless of whether the initial expression succeeds or fails. This can be useful for clean up (e.g., deleting files, closing connections). This is functionally equivalent to using <code>on.exit()</code> but it can wrap smaller chunks of code than an entire function.</p>
<h3 id="withCallingHandlers"><a href="#withCallingHandlers" class="headerlink" title="withCallingHandlers()"></a><code>withCallingHandlers()</code></h3><p>An alternative to <code>tryCatch()</code> is <code>withCallingHandlers()</code>. There are two main differences between these functions:</p>
<ul>
<li><p>The return value of <code>tryCatch()</code> handlers is returned by <code>tryCatch()</code>,  whereas the return value of <code>withCallingHandlers()</code> handlers is ignored:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() stop(&quot;!&quot;)</span><br><span class="line">tryCatch(f(), error = function(e) 1)</span><br><span class="line">withCallingHandlers(f(), error = function(e) 1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The handlers in <code>withCallingHandlers()</code> are called in the context of the  call that generated the condition whereas the handlers in <code>tryCatch()</code> are  called in the context of <code>tryCatch()</code>. This is shown here with <code>sys.calls()</code>,  which is the run-time equivalent of <code>traceback()</code> — it lists all calls  leading to the current function.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() g()</span><br><span class="line">g &lt;- function() h()</span><br><span class="line">h &lt;- function() stop(&quot;!&quot;)</span><br><span class="line"></span><br><span class="line">tryCatch(f(), error = function(e) print(sys.calls()))</span><br><span class="line"># [[1]] tryCatch(f(), error = function(e) print(sys.calls()))</span><br><span class="line"># [[2]] tryCatchList(expr, classes, parentenv, handlers)</span><br><span class="line"># [[3]] tryCatchOne(expr, names, parentenv, handlers[[1L]])</span><br><span class="line"># [[4]] value[[3L]](cond)</span><br><span class="line"></span><br><span class="line">withCallingHandlers(f(), error = function(e) print(sys.calls()))</span><br><span class="line"># [[1]] withCallingHandlers(f(),</span><br><span class="line">#    error = function(e) print(sys.calls()))</span><br><span class="line"># [[2]] f()</span><br><span class="line"># [[3]] g()</span><br><span class="line"># [[4]] h()</span><br><span class="line"># [[5]] stop(&quot;!&quot;)</span><br><span class="line"># [[6]] .handleSimpleError(</span><br><span class="line">#    function (e) print(sys.calls()), &quot;!&quot;, quote(h()))</span><br><span class="line"># [[7]] h(simpleError(msg, call))</span><br></pre></td></tr></table></figure>
<p>  This also affects the order in which <code>on.exit()</code> is called.</p>
</li>
</ul>
<p>These subtle differences are rarely useful, except when you’re trying to capture exactly what went wrong and pass it on to another function. For most purposes, you should never need to use <code>withCallingHandlers()</code>.</p>
<h3 id="Custom-signal-classes"><a href="#Custom-signal-classes" class="headerlink" title="Custom signal classes"></a>Custom signal classes</h3><p>One of the challenges of error handling in R is that most functions just call <code>stop()</code> with a string. That means if you want to figure out if a particular error occurred, you have to look at the text of the error message. This is error prone, not only because the text of the error might change over time, but also because many error messages are translated, so the message might be completely different to what you expect.</p>
<p>R has a little known and little used feature to solve this problem. Conditions are S3 classes, so you can define your own classes if you want to distinguish different types of error. Each condition signalling function, <code>stop()</code>, <code>warning()</code>, and <code>message()</code>, can be given either a list of strings, or a custom S3 condition object. Custom condition objects are not used very often, but are very useful because they make it possible for the user to respond to different errors in different ways. For example, “expected” errors (like a model failing to converge for some input datasets) can be silently ignored, while unexpected errors (like no disk space available) can be propagated to the user.</p>
<p>R doesn’t come with a built-in constructor function for conditions, but we can easily add one. Conditions must contain <code>message</code> and <code>call</code> components, and may contain other useful components. When creating a new condition, it should always inherit from <code>condition</code> and one of <code>error</code>, <code>warning</code>, or <code>message</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">condition &lt;- function(subclass, message, call = sys.call(-1), ...) &#123;</span><br><span class="line">  structure(</span><br><span class="line">    class = c(subclass, &quot;condition&quot;),</span><br><span class="line">    list(message = message, call = call),</span><br><span class="line">    ...</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">is.condition &lt;- function(x) inherits(x, &quot;condition&quot;)</span><br></pre></td></tr></table></figure>
<p>You can signal an arbitrary condition with <code>signalCondition()</code>, but nothing will happen unless you’ve instantiated a custom signal handler (with <code>tryCatch()</code> or <code>withCallingHandlers()</code>). Instead, use <code>stop()</code>, <code>warning()</code>, or <code>message()</code> as appropriate to trigger the usual handling. R won’t complain if the class of your condition doesn’t match the function, but you should avoid this in real code.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c &lt;- condition(c(&quot;my_error&quot;, &quot;error&quot;), &quot;This is an error&quot;)</span><br><span class="line">signalCondition(c)</span><br><span class="line"># NULL</span><br><span class="line">stop(c)</span><br><span class="line"># Error: This is an error</span><br><span class="line">warning(c)</span><br><span class="line"># Warning message: This is an error</span><br><span class="line">message(c)</span><br><span class="line"># This is an error</span><br></pre></td></tr></table></figure>
<p>You can then use <code>tryCatch()</code> to take different actions for different types of errors. In this example we make a convenient <code>custom_stop()</code> function that allows us to signal error conditions with arbitrary classes. In a real application, it would be better to have individual S3 constructor functions that you could document, describing the error classes in more detail.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">custom_stop &lt;- function(subclass, message, call = sys.call(-1),</span><br><span class="line">                        ...) &#123;</span><br><span class="line">  c &lt;- condition(c(subclass, &quot;error&quot;), message, call = call, ...)</span><br><span class="line">  stop(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_log &lt;- function(x) &#123;</span><br><span class="line">  if (!is.numeric(x))</span><br><span class="line">    custom_stop(&quot;invalid_class&quot;, &quot;my_log() needs numeric input&quot;)</span><br><span class="line">  if (any(x &lt; 0))</span><br><span class="line">    custom_stop(&quot;invalid_value&quot;, &quot;my_log() needs positive inputs&quot;)</span><br><span class="line"></span><br><span class="line">  log(x)</span><br><span class="line">&#125;</span><br><span class="line">tryCatch(</span><br><span class="line">  my_log(&quot;a&quot;),</span><br><span class="line">  invalid_class = function(c) &quot;class&quot;,</span><br><span class="line">  invalid_value = function(c) &quot;value&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Note that when using <code>tryCatch()</code> with multiple handlers and custom classes, the first handler to match any class in the signal’s class hierarchy is called, not the best match. For this reason, you need to make sure to put the most specific handlers first:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tryCatch(customStop(&quot;my_error&quot;, &quot;!&quot;),</span><br><span class="line">  error = function(c) &quot;error&quot;,</span><br><span class="line">  my_error = function(c) &quot;my_error&quot;</span><br><span class="line">)</span><br><span class="line">tryCatch(custom_stop(&quot;my_error&quot;, &quot;!&quot;),</span><br><span class="line">  my_error = function(c) &quot;my_error&quot;,</span><br><span class="line">  error = function(c) &quot;error&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-19"><a href="#Exercises-19" class="headerlink" title="Exercises"></a>Exercises</h3><ul>
<li><p>Compare the following two implementations of <code>message2error()</code>. What is the  main advantage of <code>withCallingHandlers()</code> in this scenario? (Hint: look  carefully at the traceback.)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message2error &lt;- function(code) &#123;</span><br><span class="line">  withCallingHandlers(code, message = function(e) stop(e))</span><br><span class="line">&#125;</span><br><span class="line">message2error &lt;- function(code) &#123;</span><br><span class="line">  tryCatch(code, message = function(e) stop(e))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Defensive-programming"><a href="#Defensive-programming" class="headerlink" title="Defensive programming"></a><a href="id=&quot;defensive-programming&quot;">Defensive programming</a></h2><p>Defensive programming is the art of making code fail in a well-defined manner even when something unexpected occurs. A key principle of defensive programming is to “fail fast”: as soon as something wrong is discovered, signal an error. This is more work for the author of the function (you!), but it makes debugging easier for users because they get errors earlier rather than later, after unexpected input has passed through several functions.</p>
<p>In R, the “fail fast” principle is implemented in three ways:</p>
<ul>
<li>Be strict about what you accept. For example, if your function is not  vectorised in its inputs, but uses functions that are, make sure to check  that the inputs are scalars. You can use <code>stopifnot()</code>, the  <a href="https://github.com/hadley/assertthat" target="_blank" rel="external">assertthat</a> package, or simple <code>if</code>  statements and <code>stop()</code>.</li>
<li>Avoid functions that use non-standard evaluation, like <code>subset</code>, <code>transform</code>,  and <code>with</code>. These functions save time when used interactively, but because  they make assumptions to reduce typing, when they fail, they often fail with  uninformative error messages. You can learn more about non-standard evaluation  in <a href="#nse">non-standard evaluation</a>.</li>
<li>Avoid functions that return different types of output depending on their  input. The two biggest offenders are <code>[</code> and <code>sapply()</code>. Whenever  subsetting a data frame in a function, you should always use <code>drop = FALSE</code>,  otherwise you will accidentally convert 1-column data frames into vectors.  Similarly, never use <code>sapply()</code> inside a function: always use the stricter  <code>vapply()</code> which will throw an error if the inputs are incorrect types and  return the correct type of output even for zero-length inputs.</li>
</ul>
<p>There is a tension between interactive analysis and programming. When you’re working interactively, you want R to do what you mean. If it guesses wrong, you want to discover that right away so you can fix it. When you’re programming, you want functions that signal errors if anything is even slightly wrong or underspecified. Keep this tension in mind when writing functions. If you’re writing functions to facilitate interactive data analysis, feel free to guess what the analyst wants and recover from minor misspecifications automatically. If you’re writing functions for programming, be strict. Never try to guess what the caller wants.</p>
<h3 id="Exercises-20"><a href="#Exercises-20" class="headerlink" title="Exercises"></a>Exercises</h3><ul>
<li><p>The goal of the <code>col_means()</code> function defined below is to compute the means  of all numeric columns in a data frame.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">col_means &lt;- function(df) &#123;</span><br><span class="line">  numeric &lt;- sapply(df, is.numeric)</span><br><span class="line">  numeric_cols &lt;- df[, numeric]</span><br><span class="line"></span><br><span class="line">  data.frame(lapply(numeric_cols, mean))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  However, the function is not robust to unusual inputs. Look at    the following results, decide which ones are incorrect, and modify    <code>col_means()</code> to be more robust. (Hint: there are two function calls    in <code>col_means()</code> that are particularly prone to problems.)</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">col_means(mtcars)</span><br><span class="line">col_means(mtcars[, 0])</span><br><span class="line">col_means(mtcars[0, ])</span><br><span class="line">col_means(mtcars[, &quot;mpg&quot;, drop = F])</span><br><span class="line">col_means(1:10)</span><br><span class="line">col_means(as.matrix(mtcars))</span><br><span class="line">col_means(as.list(mtcars))</span><br><span class="line"></span><br><span class="line">mtcars2 &lt;- mtcars</span><br><span class="line">mtcars2[-1] &lt;- lapply(mtcars2[-1], as.character)</span><br><span class="line">col_means(mtcars2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The following function “lags” a vector, returning a version of <code>x</code> that is <code>n</code>  values behind the original. Improve the function so that it (1) returns a  useful error message if <code>n</code> is not a vector, and (2) has reasonable behaviour  when <code>n</code> is 0 or longer than <code>x</code>.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lag &lt;- function(x, n = 1L) &#123;</span><br><span class="line">  xlen &lt;- length(x)</span><br><span class="line">  c(rep(NA, n), x[seq_len(xlen - n)])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Quiz-answers-3"><a href="#Quiz-answers-3" class="headerlink" title="Quiz answers"></a><a href="id=&quot;debugging-answers&quot;">Quiz answers</a></h2><ol>
<li>The most useful tool to determine where a error occurred is <code>traceback()</code>.   Or use RStudio, which displays it automatically where an error occurs.</li>
<li><code>browser()</code> pauses execution at the specified line and allows you to   enter an interactive environment. In that environment, there are five   useful commands: <code>n</code>, execute the next command; <code>s</code>, step into the   next function; <code>f</code>, finish the current loop or function; <code>c</code>, continue   execution normally; <code>Q</code>, stop the function and return to the console.</li>
<li>You could use <code>try()</code> or <code>tryCatch()</code>.</li>
<li>Because you can then capture specific types of error with <code>tryCatch()</code>,   rather than relying on the comparison of error strings, which is risky,   especially when messages are translated.</li>
</ol>
<hr>
<h1 id="Functional-programming"><a href="#Functional-programming" class="headerlink" title="Functional programming"></a>Functional programming</h1><p>R, at its heart, is a functional programming (FP) language. This means that it provides many tools for the creation and manipulation of functions. In particular, R has what’s known as first class functions. You can do anything with functions that you can do with vectors: you can assign them to variables, store them in lists, pass them as arguments to other functions, create them inside functions, and even return them as the result of a function.</p>
<p>The chapter starts by showing a motivating example, removing redundancy and duplication in code used to clean and summarise data. Then you’ll learn about the three building blocks of functional programming: anonymous functions, closures (functions written by functions), and lists of functions. These pieces are twined together in the conclusion which shows how to build a suite of tools for numerical integration, starting from very simple primitives. This is a recurring theme in FP: start with small, easy-to-understand building blocks, combine them into more complex structures, and apply them with confidence.</p>
<p>The discussion of functional programming continues in the following two chapters: <a href="#functionals">functionals</a> explores functions that take functions as arguments and return vectors as output, and <a href="#function-operators">function operators</a> explores functions that take functions as input and return them as output.</p>
<h5 id="Outline-6"><a href="#Outline-6" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#fp-motivation">Motivation</a> motivates functional programming using a  common problem: cleaning and summarising data before serious analysis.</li>
<li><a href="#anonymous-functions">Anonymous functions</a> shows you a side of functions  that you might not have known about: you can use functions without  giving them a name.</li>
<li><a href="#closures">Closures</a> introduces the closure, a function written by another  function. A closure can access its own arguments, and variables defined in  its parent.</li>
<li><a href="#lists-of-functions">Lists of functions</a> shows how to put functions in a  list, and explains why you might care.</li>
<li><a href="#numerical-integration">Numerical integration</a> concludes the chapter  with a case study that uses anonymous functions, closures and lists of  functions to build a flexible toolkit for numerical integration.</li>
</ul>
<h5 id="Prequisites"><a href="#Prequisites" class="headerlink" title="Prequisites"></a>Prequisites</h5><p>You should be familiar with the basic rules of lexical scoping, as described in <a href="#lexical-scoping">lexical scoping</a>. Make sure you’ve installed the pryr package with <code>install.packages(&quot;pryr&quot;)</code></p>
<!--
#### Other languages

While FP techniques form the core of languages like Haskell, OCaml and F#, those techniques can also be found in other languages. They are well supported in multi-paradigm systems like Lisp, Scheme, Clojure and Scala. Also, while they tend not to be the dominant technique used by programmers, they can be used in modern scripting languages like Python, Ruby and JavaScript. In contrast, C, Java and C# provide few functional tools, and while it's possible to do FP in those languages, it tends to be an awkward fit. In sum, if you Google for it you're likely to find a tutorial on functional programming in any language. But doing so can often be syntactically awkward or used so rarely that other programmers won't understand your code.

Recently FP has experienced a surge in interest because it provides a complementary set of techniques to object oriented programming, the dominant style for the last several decades. Since FP functions tend to not modify their inputs, they make for programs that are easier to reason about using only local information, and are often easier to parallelise. The traditional weaknesses of FP languages, poorer performance and sometimes unpredictable memory usage, have been largely eliminated in recent years.
-->
<h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Imagine you’ve loaded a data file, like the one below, that uses $-99$ to represent missing values. You want to replace all the $-99$s with <code>NA</code>s.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Generate a sample dataset</span><br><span class="line">set.seed(1014)</span><br><span class="line">df &lt;- data.frame(replicate(6, sample(c(1:10, -99), 6, rep = TRUE)))</span><br><span class="line">names(df) &lt;- letters[1:6]</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<p>When you first started writing R code, you might have solved the problem with copy-and-paste:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df$a[df$a == -99] &lt;- NA</span><br><span class="line">df$b[df$b == -99] &lt;- NA</span><br><span class="line">df$c[df$c == -98] &lt;- NA</span><br><span class="line">df$d[df$d == -99] &lt;- NA</span><br><span class="line">df$e[df$e == -99] &lt;- NA</span><br><span class="line">df$f[df$g == -99] &lt;- NA</span><br></pre></td></tr></table></figure>
<p>One problem with copy-and-paste is that it’s easy to make mistakes. Can you spot the two in the block above? These mistakes are inconsistencies that arose because we didn’t have an authorative description of the desired action (replace $-99$ with <code>NA</code>). Duplicating an action makes bugs more likely and makes it harder to change code. For example, if the code for a missing value changes from $-99$ to 9999, you’d need to make the change in multiple places.</p>
<p>To prevent bugs and to make more flexible code, adopt the “do not repeat yourself”, or DRY, principle. Popularised by the <a href="http://pragprog.com/about" target="_blank" rel="external">“pragmatic programmers”</a>, Dave Thomas and Andy Hunt, this principle states: “every piece of knowledge must have a single, unambiguous, authoritative representation within a system”. FP tools are valuable because they provide tools to reduce duplication.</p>
<p>We can start applying FP ideas by writing a function that fixes the missing values in a single vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fix_missing &lt;- function(x) &#123;</span><br><span class="line">  x[x == -99] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">df$a &lt;- fix_missing(df$a)</span><br><span class="line">df$b &lt;- fix_missing(df$b)</span><br><span class="line">df$c &lt;- fix_missing(df$c)</span><br><span class="line">df$d &lt;- fix_missing(df$d)</span><br><span class="line">df$e &lt;- fix_missing(df$e)</span><br><span class="line">df$f &lt;- fix_missing(df$e)</span><br></pre></td></tr></table></figure>
<p>This reduces the scope of possible mistakes, but it doesn’t eliminate them: you can no longer accidentally type -98 instead of -99, but you can still mess up the name of variable. The next step is to remove this possible source of error by combining two functions. One function, <code>fix_missing()</code>, knows how to fix a single vector; the other, <code>lapply()</code>, knows how to do something to each column in a data frame.</p>
<p><code>lapply()</code> takes three inputs: <code>x</code>, a list; <code>f</code>, a function; and <code>...</code>, other arguments to pass to <code>f()</code>. It applies the function to each element of the list and returns a new list. <code>lapply(x, f, ...)</code> is equivalent to the following for loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">out &lt;- vector(&quot;list&quot;, length(x))</span><br><span class="line">for (i in seq_along(x)) &#123;</span><br><span class="line">  out[[i]] &lt;- f(x[[i]], ...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The real <code>lapply()</code> is rather more complicated since it’s implemented in C for efficiency, but the essence of the algorithm is the same. <code>lapply()</code> is called a <strong>functional</strong>, because it takes a function as an argument. Functionals are an important part of functional programming. You’ll learn more about them in <a href="#functionals">functionals</a>.</p>
<p>We can apply <code>lapply()</code> to this problem because data frames are lists. We just need a neat little trick to make sure we get back a data frame, not a list. Instead of assigning the results of <code>lapply()</code> to <code>df</code>, we’ll assign them to <code>df[]</code>. R’s usual rules ensure that we get a data frame, not a list. (If this comes as a surprise, you might want to read <a href="#subassignment">subsetting and assignment</a>.) Putting these pieces together gives us:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fix_missing &lt;- function(x) &#123;</span><br><span class="line">  x[x == -99] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">df[] &lt;- lapply(df, fix_missing)</span><br></pre></td></tr></table></figure>
<p>This code has five advantages over copy and paste:</p>
<ul>
<li>It’s more compact.</li>
<li>If the code for a missing value changes, it only needs to be updated in  one place.</li>
<li>It works for any number of columns. There is no way to accidentally miss a  column.</li>
<li>There is no way to accidentally treat one column differently than another.</li>
<li><p>It is easy to generalise this technique to a subset of columns:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[1:5] &lt;- lapply(df[1:5], fix_missing)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>The key idea is function composition. Take two simple functions, one which does something to every column and one which fixes missing values, and combine them to fix missing values in every column. Writing simple functions that can be understood in isolation and then composed is a powerful technique.</p>
<p>What if different columns used different codes for missing values? You might be tempted to copy-and-paste:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fix_missing_99 &lt;- function(x) &#123;</span><br><span class="line">  x[x == -99] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">fix_missing_999 &lt;- function(x) &#123;</span><br><span class="line">  x[x == -999] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">fix_missing_9999 &lt;- function(x) &#123;</span><br><span class="line">  x[x == -999] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As before, it’s easy to create bugs. Instead we could use closures, functions that make and return functions. Closures allow us to make functions based on a template:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">missing_fixer &lt;- function(na_value) &#123;</span><br><span class="line">  function(x) &#123;</span><br><span class="line">    x[x == na_value] &lt;- NA</span><br><span class="line">    x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fix_missing_99 &lt;- missing_fixer(-99)</span><br><span class="line">fix_missing_999 &lt;- missing_fixer(-999)</span><br><span class="line"></span><br><span class="line">fix_missing_99(c(-99, -999))</span><br><span class="line">fix_missing_999(c(-99, -999))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin_sidebar(&quot;Extra argument&quot;)</span><br></pre></td></tr></table></figure>
<p>In this case, you could argue that we should just add another argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fix_missing &lt;- function(x, na.value) &#123;</span><br><span class="line">  x[x == na.value] &lt;- NA</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>That’s a reasonable solution here, but it doesn’t always work well in every situation. We’ll see more compelling uses for closures in <a href="#functionals-math">MLE</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end_sidebar()</span><br></pre></td></tr></table></figure>
<p>Now consider a related problem. Once you’ve cleaned up your data, you might want to compute the same set of numerical summaries for each variable. You could write code like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mean(df$a)</span><br><span class="line">median(df$a)</span><br><span class="line">sd(df$a)</span><br><span class="line">mad(df$a)</span><br><span class="line">IQR(df$a)</span><br><span class="line"></span><br><span class="line">mean(df$b)</span><br><span class="line">median(df$b)</span><br><span class="line">sd(df$b)</span><br><span class="line">mad(df$b)</span><br><span class="line">IQR(df$b)</span><br></pre></td></tr></table></figure>
<p>But again, you’d be better off identifying and removing duplicate items. Take a minute or two to think about how you might tackle this problem before reading on.</p>
<p>One approach would be to write a summary function and then apply it to each column:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">summary &lt;- function(x) &#123;</span><br><span class="line">  c(mean(x), median(x), sd(x), mad(x), IQR(x))</span><br><span class="line">&#125;</span><br><span class="line">lapply(df, summary)</span><br></pre></td></tr></table></figure>
<p>That’s a great start, but there’s still some duplication. It’s easier to see if we make the summary function more realistic:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">summary &lt;- function(x) &#123;</span><br><span class="line"> c(mean(x, na.rm = TRUE),</span><br><span class="line">   median(x, na.rm = TRUE),</span><br><span class="line">   sd(x, na.rm = TRUE),</span><br><span class="line">   mad(x, na.rm = TRUE),</span><br><span class="line">   IQR(x, na.rm = TRUE))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>All five functions are called with the same arguments (<code>x</code> and <code>na.rm</code>) repeated five times. As always, duplication makes our code fragile: it’s easier to introduce bugs and harder to adapt to changing requirements.</p>
<p>To remove this source of duplication, you can take advantage of another functional programming technique: storing functions in lists.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">summary &lt;- function(x) &#123;</span><br><span class="line">  funs &lt;- c(mean, median, sd, mad, IQR)</span><br><span class="line">  lapply(funs, function(f) f(x, na.rm = TRUE))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This chapter discusses these techniques in more detail. But before you can start learning them, you need to learn the simplest FP tool, the anonymous function.</p>
<h2 id="Anonymous-functions"><a href="#Anonymous-functions" class="headerlink" title="Anonymous functions"></a>Anonymous functions</h2><p>In R, functions are objects in their own right. They aren’t automatically bound to a name. Unlike many languages (e.g., C, C++, Python, and Ruby), R doesn’t have a special syntax for creating a named function: when you create a function, you use the regular assignment operator to give it a name. If you choose not to give the function a name, you get an <strong>anonymous function</strong>.</p>
<p>You use an anonymous function when it’s not worth the effort to give it a name:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lapply(mtcars, function(x) length(unique(x)))</span><br><span class="line">Filter(function(x) !is.numeric(x), mtcars)</span><br><span class="line">integrate(function(x) sin(x) ^ 2, 0, pi)</span><br></pre></td></tr></table></figure>
<p>Like all functions in R, anonymous functions have <code>formals()</code>, a <code>body()</code>, and a parent <code>environment()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">formals(function(x = 4) g(x) + h(x))</span><br><span class="line">body(function(x = 4) g(x) + h(x))</span><br><span class="line">environment(function(x = 4) g(x) + h(x))</span><br></pre></td></tr></table></figure>
<p>You can call an anonymous function without giving it a name, but the code is a little tricky to read because you must use parentheses in two different ways: first, to call a function, and second to make it clear that you want to call the anonymous function itself, as opposed to calling a (possibly invalid) function <em>inside</em> the anonymous function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># This does not call the anonymous function.</span><br><span class="line"># (Note that &quot;3&quot; is not a valid function.)</span><br><span class="line">function(x) 3()</span><br><span class="line"></span><br><span class="line"># With appropriate parenthesis, the function is called:</span><br><span class="line">(function(x) 3)()</span><br><span class="line"></span><br><span class="line"># So this anonymous function syntax</span><br><span class="line">(function(x) x + 3)(10)</span><br><span class="line"></span><br><span class="line"># behaves exactly the same as</span><br><span class="line">f &lt;- function(x) x + 3</span><br><span class="line">f(10)</span><br></pre></td></tr></table></figure>
<p>You can call anonymous functions with named arguments, but doing so is a good sign that your function needs a name.</p>
<p>One of the most common uses for anonymous functions is to create closures, functions made by other functions. Closures are described in the next section.</p>
<h3 id="Exercises-21"><a href="#Exercises-21" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Given a function, like <code>&quot;mean&quot;</code>, <code>match.fun()</code> lets you find a function.   Given a function, can you find its name? Why doesn’t that make sense in R?</li>
<li>Use <code>lapply()</code> and an anonymous function to find the coefficient of   variation (the standard deviation divided by the mean) for all columns in   the <code>mtcars</code> dataset.</li>
<li><p>Use <code>integrate()</code> and an anonymous function to find the area under the   curve for the following functions.   Use <a href="http://www.wolframalpha.com/" target="_blank" rel="external">Wolfram Alpha</a> to check your answers.</p>
<ol>
<li><code>y = x ^ 2 - x</code>, x in [0, 10]</li>
<li><code>y = sin(x) + cos(x)</code>, x in [-$\pi$, $\pi$]</li>
<li><code>y = exp(x) / x</code>, x in [10, 20]</li>
</ol>
</li>
<li><p>A good rule of thumb is that an anonymous function should fit on one line   and shouldn’t need to use <code>{}</code>. Review your code. Where could you have   used an anonymous function instead of a named function? Where should you   have used a named function instead of an anonymous function?</p>
</li>
</ol>
<h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><blockquote>
<p>“An object is data with functions. A closure is a function with data.”<br>— John D. Cook</p>
</blockquote>
<p>One use of anonymous functions is to create small functions that are not worth naming. Another important use is to create closures, functions written by functions. Closures get their name because they <strong>enclose</strong> the environment of the parent function and can access all its variables. This is useful because it allows us to have two levels of parameters: a parent level that controls operation and a child level that does the work.</p>
<p>The following example uses this idea to generate a family of power functions in which a parent function (<code>power()</code>) creates two child functions (<code>square()</code> and <code>cube()</code>).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">power &lt;- function(exponent) &#123;</span><br><span class="line">  function(x) &#123;</span><br><span class="line">    x ^ exponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">square &lt;- power(2)</span><br><span class="line">square(2)</span><br><span class="line">square(4)</span><br><span class="line"></span><br><span class="line">cube &lt;- power(3)</span><br><span class="line">cube(2)</span><br><span class="line">cube(4)</span><br></pre></td></tr></table></figure>
<p>When you print a closure, you don’t see anything terribly useful:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square</span><br><span class="line">cube</span><br></pre></td></tr></table></figure>
<p>That’s because the function itself doesn’t change. The difference is the enclosing environment, <code>environment(square)</code>. One way to see the contents of the environment is to convert it to a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as.list(environment(square))</span><br><span class="line">as.list(environment(cube))</span><br></pre></td></tr></table></figure>
<p>Another way to see what’s going on is to use <code>pryr::unenclose()</code>. This function replaces variables defined in the enclosing environment with their values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">unenclose(square)</span><br><span class="line">unenclose(cube)</span><br></pre></td></tr></table></figure>
<p>The parent environment of a closure is the execution environment of the function that created it, as shown by this code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">power &lt;- function(exponent) &#123;</span><br><span class="line">  print(environment())</span><br><span class="line">  function(x) x ^ exponent</span><br><span class="line">&#125;</span><br><span class="line">zero &lt;- power(0)</span><br><span class="line">environment(zero)</span><br></pre></td></tr></table></figure>
<p>The execution environment normally disappears after the function returns a value. However, functions capture their enclosing environments. This means when function a returns function b, function b captures and stores the execution environment of function a, and it doesn’t disappear. (This has important consequences for memory use, see <a href="#gc">memory usage</a> for details.)</p>
<p>In R, almost every function is a closure. All functions remember the environment in which they were created, typically either the global environment, if it’s a function that you’ve written, or a package environment, if it’s a function that someone else has written. The only exception is primitive functions, which call C code directly and don’t have an associated environment.</p>
<p>Closures are useful for making function factories, and are one way to manage mutable state in R.</p>
<h3 id="Function-factories"><a href="#Function-factories" class="headerlink" title="Function factories"></a>Function factories</h3><p>A function factory is a factory for making new functions. We’ve already seen two examples of function factories, <code>missing_fixer()</code> and <code>power()</code>. You call it with arguments that describe the desired actions, and it returns a function that will do the work for you. For <code>missing_fixer()</code> and <code>power()</code>, there’s not much benefit in using a function factory instead of a single function with multiple arguments. Function factories are most useful when:</p>
<ul>
<li><p>The different levels are more complex, with multiple arguments and<br>complicated bodies.</p>
</li>
<li><p>Some work only needs to be done once, when the function is generated.</p>
</li>
</ul>
<p>Function factories are particularly well suited to maximum likelihood problems, and you’ll see a more compelling use of them in <a href="#functionals-math">mathematical functionals</a>.</p>
<h3 id="Mutable-state"><a href="#Mutable-state" class="headerlink" title="Mutable state"></a><a href="id=&quot;mutable-state&quot;">Mutable state</a></h3><p>Having variables at two levels allows you to maintain state across function invocations. This is possible because while the execution environment is refreshed every time, the enclosing environment is constant. The key to managing variables at different levels is the double arrow assignment operator (<code>&lt;&lt;-</code>). Unlike the usual single arrow assignment (<code>&lt;-</code>) that always assigns in the current environment, the double arrow operator will keep looking up the chain of parent environments until it finds a matching name. (<a href="#binding">Binding names to values</a> has more details on how it works.)</p>
<p>Together, a static parent environment and <code>&lt;&lt;-</code> make it possible to maintain state across function calls. The following example shows a counter that records how many times a function has been called. Each time <code>new_counter</code> is run, it creates an environment, initialises the counter <code>i</code> in this environment, and then creates a new function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new_counter &lt;- function() &#123;</span><br><span class="line">  i &lt;- 0</span><br><span class="line">  function() &#123;</span><br><span class="line">    i &lt;&lt;- i + 1</span><br><span class="line">    i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The new function is a closure, and its enclosing environment is the environment created when <code>new_counter()</code> is run. Ordinarily, function execution environments are temporary, but a closure maintains access to the environment in which it was created. In the example below, closures <code>counter_one()</code> and <code>counter_two()</code> each get their own enclosing environments when run, so they can maintain different counts.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">counter_one &lt;- new_counter()</span><br><span class="line">counter_two &lt;- new_counter()</span><br><span class="line"></span><br><span class="line">counter_one()</span><br><span class="line">counter_one()</span><br><span class="line">counter_two()</span><br></pre></td></tr></table></figure>
<p>The counters get around the “fresh start” limitation by not modifying variables in their local environment. Since the changes are made in the unchanging parent (or enclosing) environment, they are preserved across function calls.</p>
<p>What happens if you don’t use a closure? What happens if you use <code>&lt;-</code> instead of <code>&lt;&lt;-</code>? Make predictions about what will happen if you replace <code>new_counter()</code> with the variants below, then run the code and check your predictions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- 0</span><br><span class="line">new_counter2 &lt;- function() &#123;</span><br><span class="line">  i &lt;&lt;- i + 1</span><br><span class="line">  i</span><br><span class="line">&#125;</span><br><span class="line">new_counter3 &lt;- function() &#123;</span><br><span class="line">  i &lt;- 0</span><br><span class="line">  function() &#123;</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Modifying values in a parent environment is an important technique because it is one way to generate “mutable state” in R. Mutable state is normally hard because every time it looks like you’re modifying an object, you’re actually creating and then modifying a copy. However, if you do need mutable objects and your code is not very simple, it’s usually better to use reference classes, as described in <a href="#rc">RC</a>.</p>
<p>The power of closures is tightly coupled with the more advanced ideas in <a href="#functionals">functionals</a> and <a href="#function-operators">function operators</a>. You’ll see many more closures in those two chapters. The following section discusses the third technique of functional programming in R: the ability to store functions in a list.</p>
<h3 id="Exercises-22"><a href="#Exercises-22" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Why are functions created by other functions called closures?</li>
<li><p>What does the following statistical function do? What would be a better    name for it? (The existing name is a bit of a hint.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bc &lt;- function(lambda) &#123;</span><br><span class="line">  if (lambda == 0) &#123;</span><br><span class="line">    function(x) log(x)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    function(x) (x ^ lambda - 1) / lambda</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>What does <code>approxfun()</code> do? What does it return?</p>
</li>
<li>What does <code>ecdf()</code> do? What does it return?</li>
<li><p>Create a function that creates functions that compute the ith    <a href="http://en.wikipedia.org/wiki/Central_moment" target="_blank" rel="external">central moment</a> of a numeric    vector. You can test it by running the following code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m1 &lt;- moment(1)</span><br><span class="line">m2 &lt;- moment(2)</span><br><span class="line"></span><br><span class="line">x &lt;- runif(100)</span><br><span class="line">stopifnot(all.equal(m1(x), 0))</span><br><span class="line">stopifnot(all.equal(m2(x), var(x) * 99 / 100))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create a function <code>pick()</code> that takes an index, <code>i</code>, as an argument and    returns a function with an argument <code>x</code> that subsets <code>x</code> with <code>i</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lapply(mtcars, pick(5))</span><br><span class="line"># should do the same as this</span><br><span class="line">lapply(mtcars, function(x) x[[5]])</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Lists-of-functions"><a href="#Lists-of-functions" class="headerlink" title="Lists of functions"></a><a href="id=&quot;lists-of-functions&quot;">Lists of functions</a></h2><p>In R, functions can be stored in lists. This makes it easier to work with groups of related functions, in the same way a data frame makes it easier to work with groups of related vectors.</p>
<p>We’ll start with a simple benchmarking example. Imagine you are comparing the performance of multiple ways of computing the arithmetic mean. You could do this by storing each approach (function) in a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">compute_mean &lt;- list(</span><br><span class="line">  base = function(x) mean(x),</span><br><span class="line">  sum = function(x) sum(x) / length(x),</span><br><span class="line">  manual = function(x) &#123;</span><br><span class="line">    total &lt;- 0</span><br><span class="line">    n &lt;- length(x)</span><br><span class="line">    for (i in seq_along(x)) &#123;</span><br><span class="line">      total &lt;- total + x[i] / n</span><br><span class="line">    &#125;</span><br><span class="line">    total</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Calling a function from a list is straightforward. You extract it then call it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(1e5)</span><br><span class="line">system.time(compute_mean$base(x))</span><br><span class="line">system.time(compute_mean[[2]](x))</span><br><span class="line">system.time(compute_mean[[&quot;manual&quot;]](x))</span><br></pre></td></tr></table></figure>
<p>To call each function (e.g., to check that they all return the same results), use <code>lapply()</code>. We’ll need either an anonymous function or a new named function, since there isn’t a built-in function to handle this situation.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lapply(compute_mean, function(f) f(x))</span><br><span class="line"></span><br><span class="line">call_fun &lt;- function(f, ...) f(...)</span><br><span class="line">lapply(compute_mean, call_fun, x)</span><br></pre></td></tr></table></figure>
<p>To time each function, we can combine <code>lapply()</code> and <code>system.time()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lapply(compute_mean, function(f) system.time(f(x)))</span><br></pre></td></tr></table></figure>
<p>Another use for a list of functions is to summarise an object in multiple ways. To do that, we could store each summary function in a list, and then run them all with <code>lapply()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line">funs &lt;- list(</span><br><span class="line">  sum = sum,</span><br><span class="line">  mean = mean,</span><br><span class="line">  median = median</span><br><span class="line">)</span><br><span class="line">lapply(funs, function(f) f(x))</span><br></pre></td></tr></table></figure>
<p>What if we wanted our summary functions to automatically remove missing values? One approach would be make a list of anonymous functions that call our summary functions with the appropriate arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">funs2 &lt;- list(</span><br><span class="line">  sum = function(x, ...) sum(x, ..., na.rm = TRUE),</span><br><span class="line">  mean = function(x, ...) mean(x, ..., na.rm = TRUE),</span><br><span class="line">  median = function(x, ...) median(x, ..., na.rm = TRUE)</span><br><span class="line">)</span><br><span class="line">lapply(funs2, function(f) f(x))</span><br></pre></td></tr></table></figure>
<p>This, however, leads to a lot of duplication. Apart from a different function name, each function is almost identical. A better approach would be to modify our <code>lapply()</code> call to include the extra argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lapply(funs, function(f) f(x, na.rm = TRUE))</span><br></pre></td></tr></table></figure>
<h3 id="Moving-lists-of-functions-to-the-global-environment"><a href="#Moving-lists-of-functions-to-the-global-environment" class="headerlink" title="Moving lists of functions to the global environment"></a>Moving lists of functions to the global environment</h3><p>From time to time you may create a list of functions that you want to be available without having to use a special syntax. For example, imagine you want to create HTML code by mapping each tag to an R function. The following example uses a function factory to create functions for the tags <code>&lt;p&gt;</code> (paragraph), <code>&lt;b&gt;</code> (bold), and <code>&lt;i&gt;</code> (italics).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">simple_tag &lt;- function(tag) &#123;</span><br><span class="line">  force(tag)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    paste0(&quot;&lt;&quot;, tag, &quot;&gt;&quot;, paste0(...), &quot;&lt;/&quot;, tag, &quot;&gt;&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">tags &lt;- c(&quot;p&quot;, &quot;b&quot;, &quot;i&quot;)</span><br><span class="line">html &lt;- lapply(setNames(tags, tags), simple_tag)</span><br></pre></td></tr></table></figure>
<p>I’ve put the functions in a list because I don’t want them to be available all the time. The risk of a conflict between an existing R function and an HTML tag is high. But keeping them in a list makes code more verbose:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html$p(&quot;This is &quot;, html$b(&quot;bold&quot;), &quot; text.&quot;)</span><br></pre></td></tr></table></figure>
<p>Depending on how long we want the effect to last, you have three options to eliminate the use of <code>html$</code>:</p>
<ul>
<li><p>For a very temporary effect, you can use <code>with()</code>:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">with(html, p(&quot;This is &quot;, b(&quot;bold&quot;), &quot; text.&quot;))</span><br></pre></td></tr></table></figure>
</li>
<li><p>For a longer effect, you can <code>attach()</code> the functions to the search path,  then <code>detach()</code> when you’re done:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">attach(html)</span><br><span class="line">p(&quot;This is &quot;, b(&quot;bold&quot;), &quot; text.&quot;)</span><br><span class="line">detach(html)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Finally, you could copy the functions to the global environment with  <code>list2env()</code>. You can undo this by deleting the functions after you’re done.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list2env(html, environment())</span><br><span class="line">p(&quot;This is &quot;, b(&quot;bold&quot;), &quot; text.&quot;)</span><br><span class="line">rm(list = names(html), envir = environment())</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>I recommend the first option, using <code>with()</code>, because it makes it very clear when code is being executed in a special context and what that context is.</p>
<h3 id="Exercises-23"><a href="#Exercises-23" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Implement a summary function that works like <code>base::summary()</code>, but uses a    list of functions. Modify the function so it returns a closure, making it    possible to use it as a function factory.</li>
<li><p>Which of the following commands is equivalent to <code>with(x, f(z))</code>?</p>
<p> (a) <code>x$f(x$z)</code>.<br> (b) <code>f(x$z)</code>.<br> (c) <code>x$f(z)</code>.<br> (d) <code>f(z)</code>.<br> (e) It depends.</p>
</li>
</ol>
<h2 id="Case-study-numerical-integration"><a href="#Case-study-numerical-integration" class="headerlink" title="Case study: numerical integration"></a><a href="id=&quot;numerical-integration&quot;">Case study: numerical integration</a></h2><p>To conclude this chapter, I’ll develop a simple numerical integration tool using first-class functions. Each step in the development of the tool is driven by a desire to reduce duplication and to make the approach more general.</p>
<p>The idea behind numerical integration is simple: find the area under a curve by approximating the curve with simpler components. The two simplest approaches are the <strong>midpoint</strong> and <strong>trapezoid</strong> rules. The midpoint rule approximates a curve with a rectangle. The trapezoid rule uses a trapezoid. Each takes the function we want to integrate, <code>f</code>, and a range of values, from <code>a</code> to <code>b</code>, to integrate over. For this example, I’ll try to integrate <code>sin x</code> from 0 to $\pi$. This is a good choice for testing because it has a simple answer: 2.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">midpoint &lt;- function(f, a, b) &#123;</span><br><span class="line">  (b - a) * f((a + b) / 2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trapezoid &lt;- function(f, a, b) &#123;</span><br><span class="line">  (b - a) / 2 * (f(a) + f(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">midpoint(sin, 0, pi)</span><br><span class="line">trapezoid(sin, 0, pi)</span><br></pre></td></tr></table></figure>
<p>Neither of these functions gives a very good approximation. To make them more accurate using the idea that underlies calculus: we’ll break up the range into smaller pieces and integrate each piece using one of the simple rules. This is called <strong>composite integration</strong>. I’ll implement it using two new functions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">midpoint_composite &lt;- function(f, a, b, n = 10) &#123;</span><br><span class="line">  points &lt;- seq(a, b, length = n + 1)</span><br><span class="line">  h &lt;- (b - a) / n</span><br><span class="line"></span><br><span class="line">  area &lt;- 0</span><br><span class="line">  for (i in seq_len(n)) &#123;</span><br><span class="line">    area &lt;- area + h * f((points[i] + points[i + 1]) / 2)</span><br><span class="line">  &#125;</span><br><span class="line">  area</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trapezoid_composite &lt;- function(f, a, b, n = 10) &#123;</span><br><span class="line">  points &lt;- seq(a, b, length = n + 1)</span><br><span class="line">  h &lt;- (b - a) / n</span><br><span class="line"></span><br><span class="line">  area &lt;- 0</span><br><span class="line">  for (i in seq_len(n)) &#123;</span><br><span class="line">    area &lt;- area + h / 2 * (f(points[i]) + f(points[i + 1]))</span><br><span class="line">  &#125;</span><br><span class="line">  area</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">midpoint_composite(sin, 0, pi, n = 10)</span><br><span class="line">midpoint_composite(sin, 0, pi, n = 100)</span><br><span class="line">trapezoid_composite(sin, 0, pi, n = 10)</span><br><span class="line">trapezoid_composite(sin, 0, pi, n = 100)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mid &lt;- sapply(1:20, function(n) midpoint_composite(sin, 0, pi, n))</span><br><span class="line">trap &lt;- sapply(1:20, function(n) trapezoid_composite(sin, 0, pi, n))</span><br><span class="line">matplot(cbind(mid, trap),</span><br><span class="line">  xlab = &quot;Number of pieces&quot;, ylab = &quot;Estimate of area&quot;)</span><br></pre></td></tr></table></figure>
<p>You’ll notice that there’s a lot of duplication between <code>midpoint_composite()</code> and <code>trapezoid_composite()</code>. Apart from the internal rule used to integrate over a range, they are basically the same. From these specific functions you can extract a more general composite integration function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">composite &lt;- function(f, a, b, n = 10, rule) &#123;</span><br><span class="line">  points &lt;- seq(a, b, length = n + 1)</span><br><span class="line"></span><br><span class="line">  area &lt;- 0</span><br><span class="line">  for (i in seq_len(n)) &#123;</span><br><span class="line">    area &lt;- area + rule(f, points[i], points[i + 1])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  area</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">composite(sin, 0, pi, n = 10, rule = midpoint)</span><br><span class="line">composite(sin, 0, pi, n = 10, rule = trapezoid)</span><br></pre></td></tr></table></figure>
<p>This function takes two functions as arguments: the function to integrate and the integration rule. We can now add even better rules for integrating over smaller ranges:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">simpson &lt;- function(f, a, b) &#123;</span><br><span class="line">  (b - a) / 6 * (f(a) + 4 * f((a + b) / 2) + f(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boole &lt;- function(f, a, b) &#123;</span><br><span class="line">  pos &lt;- function(i) a + i * (b - a) / 4</span><br><span class="line">  fi &lt;- function(i) f(pos(i))</span><br><span class="line"></span><br><span class="line">  (b - a) / 90 *</span><br><span class="line">    (7 * fi(0) + 32 * fi(1) + 12 * fi(2) + 32 * fi(3) + 7 * fi(4))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">composite(sin, 0, pi, n = 10, rule = simpson)</span><br><span class="line">composite(sin, 0, pi, n = 10, rule = boole)</span><br></pre></td></tr></table></figure>
<p>It turns out that the midpoint, trapezoid, Simpson, and Boole rules are all examples of a more general family called <a href="http://en.wikipedia.org/wiki/Newton%E2%80%93Cotes_formulas" target="_blank" rel="external">Newton-Cotes rules</a>. (They are polynomials of increasing complexity.) We  can use this common structure to write a function that can generate any general Newton-Cotes rule:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">newton_cotes &lt;- function(coef, open = FALSE) &#123;</span><br><span class="line">  n &lt;- length(coef) + open</span><br><span class="line"></span><br><span class="line">  function(f, a, b) &#123;</span><br><span class="line">    pos &lt;- function(i) a + i * (b - a) / n</span><br><span class="line">    points &lt;- pos(seq.int(0, length(coef) - 1))</span><br><span class="line"></span><br><span class="line">    (b - a) / sum(coef) * sum(f(points) * coef)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">boole &lt;- newton_cotes(c(7, 32, 12, 32, 7))</span><br><span class="line">milne &lt;- newton_cotes(c(2, -1, 2), open = TRUE)</span><br><span class="line">composite(sin, 0, pi, n = 10, rule = milne)</span><br></pre></td></tr></table></figure>
<p>Mathematically, the next step in improving numerical integration is to move from a grid of evenly spaced points to a grid where the points are closer together near the end of the range, such as Gaussian quadrature. That’s beyond the scope of this case study, but you could implement it with similar techniques.</p>
<h3 id="Exercises-24"><a href="#Exercises-24" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Instead of creating individual functions (e.g., <code>midpoint()</code>,      <code>trapezoid()</code>, <code>simpson()</code>, etc.), we could store them in a list. If we    did that, how would that change the code? Can you create the list of    functions from a list of coefficients for the Newton-Cotes formulae?</li>
<li>The trade-off between integration rules is that more complex rules are    slower to compute, but need fewer pieces. For <code>sin()</code> in the range    [0, $\pi$], determine the number of pieces needed so that each rule will    be equally accurate. Illustrate your results with a graph. How do they    change for different functions? <code>sin(1 / x^2)</code> is particularly challenging.</li>
</ol>
<hr>
<h1 id="Functionals"><a href="#Functionals" class="headerlink" title="Functionals"></a><a href="id=&quot;functionals&quot;">Functionals</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">library(stringr)</span><br><span class="line">find_funs(&quot;package:base&quot;, fun_calls, fixed(&quot;match.fun&quot;))</span><br><span class="line">find_funs(&quot;package:base&quot;, fun_args, ignore.case(&quot;^(fun|f)$&quot;))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“To become significantly more reliable, code must become more transparent.<br>In particular, nested conditions and loops must be viewed with great<br>suspicion. Complicated control flows confuse programmers. Messy code often<br>hides bugs.”</p>
<p>— Bjarne Stroustrup</p>
</blockquote>
<p>A higher-order function is a function that takes a function as an input or returns a function as output. We’ve already seen one type of higher order function: closures, functions returned by another function. The complement to a closure is a <strong>functional</strong>, a function that takes a function as an input and returns a vector as output. Here’s a simple functional: it calls the function provided as input with 1000 random uniform numbers.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">randomise &lt;- function(f) f(runif(1e3))</span><br><span class="line">randomise(mean)</span><br><span class="line">randomise(mean)</span><br><span class="line">randomise(sum)</span><br></pre></td></tr></table></figure>
<p>The chances are that you’ve already used a functional: the three most frequently used are <code>lapply()</code>, <code>apply()</code>, and <code>tapply()</code>. All three take a function as input (among other things) and return a vector as output.</p>
<p>A common use of functionals is as an alternative to for loops. For loops have a bad rap in R. They have a reputation for being slow (although that reputation is only partly true, see <a href="#modification">modification in place</a> for more details). But the real downside of for loops is that they’re not very expressive. A for loop conveys that it’s iterating over something, but doesn’t clearly convey a high level goal. Instead of using a for loop, it’s better to use a functional. Each functional is tailored for a specific task, so when you recognise the functional you know immediately why it’s being used. Functionals play other roles as well as replacements for for-loops. They are useful for encapsulating common data manipulation tasks like split-apply-combine, for thinking “functionally”, and for working with mathematical functions.</p>
<p>Functionals reduce bugs in your code by better communicating intent. Functionals implemented in base R are well tested (i.e., bug-free) and efficient, because they’re used by so many people. Many are written in C, and use special tricks to enhance performance. That said, using functionals will not always produce the fastest code. Instead, it helps you clearly communicate and build tools that solve a wide range of problems. It’s a mistake to focus on speed until you know it’ll be a problem. Once you have clear, correct code you can make it fast using the techniques you’ll learn in <a href="#profiling">improving the speed of your code</a>.</p>
<h5 id="Outline-7"><a href="#Outline-7" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#lapply">My first functional: lapply()</a> introduces your first functional:  <code>lapply()</code>.</li>
<li><a href="#functionals-loop">For loop functionals</a> shows you variants of <code>lapply()</code>  that produce different outputs, take different inputs, and distribute  computation in different ways.</li>
<li><a href="#functionals-ds">Data structure functionals</a> discusses functionals that  work with more complex data structures like matrices and arrays.</li>
<li><a href="#functionals-fp">Functional programming</a> teaches you about the powerful  <code>Reduce()</code> and <code>Filter()</code> functions which are useful for working with  lists.</li>
<li><a href="#functionals-math">Mathematical functionals</a> discusses functionals that you  might be familiar with from mathematics, like root finding, integration, and  optimisation.</li>
<li><a href="#functionals-not">Loops that shouldn’t be converted to functions</a> provides  some important caveats about when you shouldn’t attempt to convert a loop into  a functional.</li>
<li><a href="#function-family">A family of functions</a> finishes off the chapter by  showing you how functionals can take a simple building block and use it to  create a set of powerful and consistent tools.</li>
</ul>
<h5 id="Prerequisites-3"><a href="#Prerequisites-3" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>You’ll use closures frequently used in conjunction with functionals. If you need a refresher, review <a href="#closures">closures</a>.</p>
<h2 id="My-first-functional-lapply"><a href="#My-first-functional-lapply" class="headerlink" title="My first functional: lapply()"></a><a href="id=&quot;lapply&quot;">My first functional: lapply()</a></h2><p>The simplest functional is <code>lapply()</code>, which you may already be familiar with. <code>lapply()</code> takes a function, applies it to each element in a list, and returns the results in the form of a list. <code>lapply()</code> is the building block for many other functionals, so it’s important to understand how it works. Here’s a pictorial representation:</p>
<p><img src="diagrams/lapply.png" alt=""></p>
<p><code>lapply()</code> is written in C for performance, but we can create a simple R implementation that does the same thing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lapply2 &lt;- function(x, f, ...) &#123;</span><br><span class="line">  out &lt;- vector(&quot;list&quot;, length(x))</span><br><span class="line">  for (i in seq_along(x)) &#123;</span><br><span class="line">    out[[i]] &lt;- f(x[[i]], ...)</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>From this code, you can see that <code>lapply()</code> is a wrapper for a common for loop pattern: create a container for output, apply <code>f()</code> to each component of a list, and fill the container with the results. All other for loop functionals are variations on this theme: they simply use different types of input or output.</p>
<p><code>lapply()</code> makes it easier to work with lists by eliminating much of the boilerplate associated with looping. This allows you to focus on the function that you’re applying:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Create some random data</span><br><span class="line">l &lt;- replicate(20, runif(sample(1:10, 1)), simplify = FALSE)</span><br><span class="line"></span><br><span class="line"># With a for loop</span><br><span class="line">out &lt;- vector(&quot;list&quot;, length(l))</span><br><span class="line">for (i in seq_along(l)) &#123;</span><br><span class="line">  out[[i]] &lt;- length(l[[i]])</span><br><span class="line">&#125;</span><br><span class="line">unlist(out)</span><br><span class="line"></span><br><span class="line"># With lapply</span><br><span class="line">unlist(lapply(l, length))</span><br></pre></td></tr></table></figure>
<p>(I’m using <code>unlist()</code> to convert the output from a list to a vector to make it more compact. We’ll see other ways of making the output a vector shortly.)</p>
<p>Since data frames are also lists, <code>lapply()</code> is also useful when you want to do something to each column of a data frame:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># What class is each column?</span><br><span class="line">unlist(lapply(mtcars, class))</span><br><span class="line"></span><br><span class="line"># Divide each column by the mean</span><br><span class="line">mtcars[] &lt;- lapply(mtcars, function(x) x / mean(x))</span><br></pre></td></tr></table></figure>
<p>The pieces of <code>x</code> are always supplied as the first argument to <code>f</code>. If you want to vary a different argument, you can use an anonymous function. The following example varies the amount of trimming applied when computing the mean of a fixed <code>x</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">trims &lt;- c(0, 0.1, 0.2, 0.5)</span><br><span class="line">x &lt;- rcauchy(1000)</span><br><span class="line">unlist(lapply(trims, function(trim) mean(x, trim = trim)))</span><br></pre></td></tr></table></figure>
<h3 id="Looping-patterns"><a href="#Looping-patterns" class="headerlink" title="Looping patterns"></a>Looping patterns</h3><p>It’s useful to remember that there are three basic ways to loop over a vector:</p>
<ol>
<li>loop over the elements: <code>for (x in xs)</code></li>
<li>loop over the numeric indices: <code>for (i in seq_along(xs))</code></li>
<li>loop over the names: <code>for (nm in names(xs))</code></li>
</ol>
<p>The first form is usually not a good choice for a for loop because it leads to inefficient ways of saving output. With this form it’s very natural to save the output by extending a datastructure, like in this example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xs &lt;- runif(1e3)</span><br><span class="line">res &lt;- c()</span><br><span class="line">for (x in xs) &#123;</span><br><span class="line">  # This is slow!</span><br><span class="line">  res &lt;- c(res, sqrt(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is slow because each time you extend the vector, R has to copy all of the existing elements. <a href="#avoid-copies">Avoid copies</a> discusses this problem in more depth. Instead, it’s much better to create the space you’ll need for the output and then fill it in. This is easiest with the second form:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res &lt;- numeric(length(xs))</span><br><span class="line">for (i in seq_along(xs)) &#123;</span><br><span class="line">  res[i] &lt;- sqrt(xs[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Just as there are three basic ways to use a for loop, there are three basic ways to use <code>lapply()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lapply(xs, function(x) &#123;&#125;)</span><br><span class="line">lapply(seq_along(xs), function(i) &#123;&#125;)</span><br><span class="line">lapply(names(xs), function(nm) &#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>Typically you’d use the first form because <code>lapply()</code> takes care of saving the output for you. However, if you need to know the position or name of the element you’re working with, you should use the second or third form. Both give you an element’s position (<code>i</code>, <code>nm</code>) and value (<code>xs[[i]]</code>, <code>xs[[nm]]</code>). If you’re struggling to solve a problem using one form, you might find it easier with another.</p>
<h3 id="Exercises-25"><a href="#Exercises-25" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Why are the following two invocations of <code>lapply()</code> equivalent?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trims &lt;- c(0, 0.1, 0.2, 0.5)</span><br><span class="line">x &lt;- rcauchy(100)</span><br><span class="line"></span><br><span class="line">lapply(trims, function(trim) mean(x, trim = trim))</span><br><span class="line">lapply(trims, mean, x = x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The function below scales a vector so it falls in the range [0, 1]. How    would you apply it to every column of a data frame? How would you apply it    to every numeric column in a data frame?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scale01 &lt;- function(x) &#123;</span><br><span class="line">  rng &lt;- range(x, na.rm = TRUE)</span><br><span class="line">  (x - rng[1]) / (rng[2] - rng[1])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use both for loops and <code>lapply()</code> to fit linear models to the    <code>mtcars</code> using the formulas stored in this list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">formulas &lt;- list(</span><br><span class="line">  mpg ~ disp,</span><br><span class="line">  mpg ~ I(1 / disp),</span><br><span class="line">  mpg ~ disp + wt,</span><br><span class="line">  mpg ~ I(1 / disp) + wt</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Fit the model <code>mpg ~ disp</code> to each of the bootstrap replicates of <code>mtcars</code>    in the list below by using a for loop and <code>lapply()</code>. Can you do it    without an anonymous function?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bootstraps &lt;- lapply(1:10, function(i) &#123;</span><br><span class="line">  rows &lt;- sample(1:nrow(mtcars), rep = TRUE)</span><br><span class="line">  mtcars[rows, ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>For each model in the previous two exercises, extract $R^2$ using the    function below.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsq &lt;- function(mod) summary(mod)$r.squared</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="For-loop-functionals-friends-of-lapply"><a href="#For-loop-functionals-friends-of-lapply" class="headerlink" title="For loop functionals: friends of lapply()"></a><a href="id=&quot;functionals-loop&quot;">For loop functionals: friends of lapply()</a></h2><p>The key to using functionals in place of for loops is recognising that common looping patterns are already implemented in existing base functionals. Once you’ve mastered these existing functionals, the next step is to start writing your own: if you discover you’re duplicating the same looping pattern in many places, you should extract it out into its own function.</p>
<p>The following sections build on <code>lapply()</code> and discuss:</p>
<ul>
<li><code>sapply()</code> and <code>vapply()</code>, variants of <code>lapply()</code> that produce vectors,  matrices, and arrays as <strong>output</strong>, instead of lists.</li>
<li><code>Map()</code> and <code>mapply()</code> which iterate over multiple <strong>input</strong> data structures  in parallel.</li>
<li><code>mclapply()</code> and <code>mcMap()</code>, parallel versions of <code>lapply()</code> and <code>Map()</code>.</li>
<li>Writing a new function, <code>rollapply()</code>, to solve a new problem.</li>
</ul>
<h3 id="Vector-output-sapply-and-vapply"><a href="#Vector-output-sapply-and-vapply" class="headerlink" title="Vector output: sapply and vapply"></a>Vector output: <code>sapply</code> and <code>vapply</code></h3><p><code>sapply()</code> and <code>vapply()</code> are very similar to <code>lapply()</code> except they simplify their output to produce an atomic vector. While <code>sapply()</code> guesses, <code>vapply()</code> takes an additional argument specifying the output type. <code>sapply()</code> is great for interactive use because it saves typing, but if you use it inside your functions you’ll get weird errors if you supply the wrong type of input. <code>vapply()</code> is more verbose, but gives more informative error messages and never fails silently. It is better suited for use inside other functions.</p>
<p>The following example illustrates these differences. When given a data frame, <code>sapply()</code> and <code>vapply()</code> return the same results. When given an empty list, <code>sapply()</code> returns another empty list instead of the more correct zero-length logical vector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sapply(mtcars, is.numeric)</span><br><span class="line">vapply(mtcars, is.numeric, logical(1))</span><br><span class="line">sapply(list(), is.numeric)</span><br><span class="line">vapply(list(), is.numeric, logical(1))</span><br></pre></td></tr></table></figure>
<p>If the function returns results of different types or lengths, <code>sapply()</code> will silently return a list, while <code>vapply()</code> will throw an error. <code>sapply()</code> is fine for interactive use because you’ll normally notice if something goes wrong, but it’s dangerous when writing functions.</p>
<p>The following example illustrates a possible problem when extracting the class of columns in a data frame: if you falsely assume that class only has one value and use <code>sapply()</code>, you won’t find out about the problem until some future function is given a list instead of a character vector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:10, y = letters[1:10])</span><br><span class="line">sapply(df, class)</span><br><span class="line">vapply(df, class, character(1))</span><br><span class="line"></span><br><span class="line">df2 &lt;- data.frame(x = 1:10, y = Sys.time() + 1:10)</span><br><span class="line">sapply(df2, class)</span><br><span class="line">vapply(df2, class, character(1))</span><br></pre></td></tr></table></figure>
<p><code>sapply()</code> is a thin wrapper around <code>lapply()</code> that transforms a list into a vector in the final step. <code>vapply()</code> is an implementation of <code>lapply()</code> that assigns results to a vector (or matrix) of appropriate type instead of as a list. The following code shows a pure R implementation of the essence of <code>sapply()</code> and <code>vapply()</code> (the real functions have better error handling and preserve names, among other things).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sapply2 &lt;- function(x, f, ...) &#123;</span><br><span class="line">  res &lt;- lapply2(x, f, ...)</span><br><span class="line">  simplify2array(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vapply2 &lt;- function(x, f, f.value, ...) &#123;</span><br><span class="line">  out &lt;- matrix(rep(f.value, length(x)), nrow = length(x))</span><br><span class="line">  for (i in seq_along(x)) &#123;</span><br><span class="line">    res &lt;- f(x[i], ...)</span><br><span class="line">    stopifnot(</span><br><span class="line">      length(res) == length(f.value),</span><br><span class="line">      typeof(res) == typeof(f.value)</span><br><span class="line">    )</span><br><span class="line">    out[i, ] &lt;- res</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="diagrams/sapply-vapply.png" alt=""></p>
<p><code>vapply()</code> and <code>sapply()</code> have different outputs from <code>lapply()</code>. The following section discusses <code>Map()</code>, which has different inputs.</p>
<h3 id="Multiple-inputs-Map-and-mapply"><a href="#Multiple-inputs-Map-and-mapply" class="headerlink" title="Multiple inputs: Map (and mapply)"></a><a href="id=&quot;map&quot;">Multiple inputs: <code>Map</code> (and <code>mapply</code>)</a></h3><p>With <code>lapply()</code>, only one argument to the function varies; the others are fixed. This makes it poorly suited for some problems. For example, how would you find a weighted mean when you have two lists, one of observations and the other of weights?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Generate some sample data</span><br><span class="line">xs &lt;- replicate(5, runif(10), simplify = FALSE)</span><br><span class="line">ws &lt;- replicate(5, rpois(10, 5) + 1, simplify = FALSE)</span><br></pre></td></tr></table></figure>
<p>It’s easy to use <code>lapply()</code> to compute the unweighted means:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlist(lapply(xs, mean))</span><br></pre></td></tr></table></figure>
<p>But how could we supply the weights to <code>weighted.mean()</code>? <code>lapply(x, means, w)</code> won’t work because the additional arguments to <code>lapply()</code> are passed to every call. We could change looping forms:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unlist(lapply(seq_along(xs), function(i) &#123;</span><br><span class="line">  weighted.mean(xs[[i]], ws[[i]])</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>This works, but it’s a little clumsy. A cleaner alternative is to use <code>Map</code>, a variant of <code>lapply()</code>, where all arguments can vary. This lets us write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unlist(Map(weighted.mean, xs, ws))</span><br></pre></td></tr></table></figure>
<p>Note that the order of arguments is a little different: function is the first argument for <code>Map()</code> and the second for <code>lapply()</code>.</p>
<p>This is equivalent to:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stopifnot(length(xs) == length(ws))</span><br><span class="line">out &lt;- vector(&quot;list&quot;, length(xs))</span><br><span class="line">for (i in seq_along(xs)) &#123;</span><br><span class="line">  out[[i]] &lt;- weighted.mean(xs[[i]], ws[[i]])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There’s a natural equivalence between <code>Map()</code> and <code>lapply()</code> because you can always convert a <code>Map()</code> to an <code>lapply()</code> that iterates over indices. But using <code>Map()</code> is more concise, and more clearly indicates what you’re trying to do.</p>
<p><code>Map</code> is useful whenever you have two (or more) lists (or data frames) that you need to process in parallel. For example, another way of standardising columns is to first compute the means and then divide by them. We could do this with <code>lapply()</code>, but if we do it in two steps, we can more easily check the results at each step, which is particularly important if the first step is more complicated.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mtmeans &lt;- lapply(mtcars, mean)</span><br><span class="line">mtmeans[] &lt;- Map(`/`, mtcars, mtmeans)</span><br><span class="line"></span><br><span class="line"># In this case, equivalent to</span><br><span class="line">mtcars[] &lt;- lapply(mtcars, function(x) x / mean(x))</span><br></pre></td></tr></table></figure>
<p>If some of the arguments should be fixed and constant, use an anonymous function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)</span><br></pre></td></tr></table></figure>
<p>We’ll see a more compact way to express the same idea in the next chapter.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">begin_sidebar(&quot;mapply&quot;)</span><br></pre></td></tr></table></figure>
<p>You may be more familiar with <code>mapply()</code> than <code>Map()</code>. I prefer <code>Map()</code> because:</p>
<ul>
<li><p>It’s equivalent to <code>mapply</code> with <code>simplify = FALSE</code>, which is almost always<br>what you want.</p>
</li>
<li><p>Instead of using an anonymous function to provide constant inputs, <code>mapply</code><br>has the <code>MoreArgs</code> argument that takes a list of extra arguments that will<br>be supplied, as is, to each call. This breaks R’s usual lazy evaluation<br>semantics, and is inconsistent with other functions.</p>
</li>
</ul>
<p>In brief, <code>mapply()</code> adds more complication for little gain.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">end_sidebar()</span><br></pre></td></tr></table></figure>
<h3 id="Rolling-computations"><a href="#Rolling-computations" class="headerlink" title="Rolling computations"></a>Rolling computations</h3><p>What if you need a for loop replacement that doesn’t exist in base R? You can often create your own by recognising common looping structures and implementing your own wrapper. For example, you might be interested in smoothing your data using a rolling (or running) mean function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rollmean &lt;- function(x, n) &#123;</span><br><span class="line">  out &lt;- rep(NA, length(x))</span><br><span class="line"></span><br><span class="line">  offset &lt;- trunc(n / 2)</span><br><span class="line">  for (i in (offset + 1):(length(x) - n + offset + 1)) &#123;</span><br><span class="line">    out[i] &lt;- mean(x[(i - offset):(i + offset - 1)])</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line">x &lt;- seq(1, 3, length = 1e2) + runif(1e2)</span><br><span class="line">plot(x)</span><br><span class="line">lines(rollmean(x, 5), col = &quot;blue&quot;, lwd = 2)</span><br><span class="line">lines(rollmean(x, 10), col = &quot;red&quot;, lwd = 2)</span><br></pre></td></tr></table></figure>
<p>But if the noise was more variable (i.e., it has a longer tail), you might worry that your rolling mean was too sensitive to outliers. Instead, you might want to compute a rolling median.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- seq(1, 3, length = 1e2) + rt(1e2, df = 2) / 3</span><br><span class="line">plot(x)</span><br><span class="line">lines(rollmean(x, 5), col = &quot;red&quot;, lwd = 2)</span><br></pre></td></tr></table></figure>
<p>To change <code>rollmean()</code> to <code>rollmedian()</code>, all you need to do is replace <code>mean</code> with <code>median</code> inside the loop. But instead of copying and pasting to create a new function, we could extract the idea of computing a rolling summary into its own function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rollapply &lt;- function(x, n, f, ...) &#123;</span><br><span class="line">  out &lt;- rep(NA, length(x))</span><br><span class="line"></span><br><span class="line">  offset &lt;- trunc(n / 2)</span><br><span class="line">  for (i in (offset + 1):(length(x) - n + offset + 1)) &#123;</span><br><span class="line">    out[i] &lt;- f(x[(i - offset):(i + offset)], ...)</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line">plot(x)</span><br><span class="line">lines(rollapply(x, 5, median), col = &quot;red&quot;, lwd = 2)</span><br></pre></td></tr></table></figure>
<p>You might notice that the internal loop looks pretty similar to a <code>vapply()</code> loop, so we could rewrite the function as:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rollapply &lt;- function(x, n, f, ...) &#123;</span><br><span class="line">  offset &lt;- trunc(n / 2)</span><br><span class="line">  locs &lt;- (offset + 1):(length(x) - n + offset + 1)</span><br><span class="line">  num &lt;- vapply(</span><br><span class="line">    locs,</span><br><span class="line">    function(i) f(x[(i - offset):(i + offset)], ...),</span><br><span class="line">    numeric(1)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  c(rep(NA, offset), num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is effectively the same as the implementation in <code>zoo::rollapply()</code>, which provides many more features and much more error checking.</p>
<h3 id="Parallelisation"><a href="#Parallelisation" class="headerlink" title="Parallelisation"></a>Parallelisation</h3><p>One interesting thing about the implementation of <code>lapply()</code> is that because each iteration is isolated from all others, the order in which they are computed doesn’t matter. For example, <code>lapply3()</code> scrambles the order of computation, but the results are always the same:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lapply3 &lt;- function(x, f, ...) &#123;</span><br><span class="line">  out &lt;- vector(&quot;list&quot;, length(x))</span><br><span class="line">  for (i in sample(seq_along(x))) &#123;</span><br><span class="line">    out[[i]] &lt;- f(x[[i]], ...)</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line">unlist(lapply(1:10, sqrt))</span><br><span class="line">unlist(lapply3(1:10, sqrt))</span><br></pre></td></tr></table></figure>
<p>This has a very important consequence: since we can compute each element in any order, it’s easy to dispatch the tasks to different cores, and compute them in parallel. This is what <code>parallel::mclapply()</code> (and <code>parallel::mcMap()</code>) does. (These functions are not available in Windows, but you can use the similar <code>parLapply()</code> with a bit more work. See <a href="#parallelise">parallelise</a> for more details.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library(parallel)</span><br><span class="line">unlist(mclapply(1:10, sqrt, mc.cores = 4))</span><br></pre></td></tr></table></figure>
<p>In this case, <code>mclapply()</code> is actually slower than <code>lapply()</code>. This is because the cost of the individual computations is low, and additional work is needed to send the computation to the different cores and to collect the results.</p>
<p>If we take a more realistic example, generating bootstrap replicates of a linear model for example, the advantages are clearer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">boot_df &lt;- function(x) x[sample(nrow(x), rep = T), ]</span><br><span class="line">rsquared &lt;- function(mod) summary(mod)$r.square</span><br><span class="line">boot_lm &lt;- function(i) &#123;</span><br><span class="line">  rsquared(lm(mpg ~ wt + disp, data = boot_df(mtcars)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system.time(lapply(1:500, boot_lm))</span><br><span class="line">system.time(mclapply(1:500, boot_lm, mc.cores = 2))</span><br></pre></td></tr></table></figure>
<p>While increasing the number of cores will not always lead to linear improvement, switching from <code>lapply()</code> or <code>Map()</code> to its parallelised forms can dramatically improve computational performance.</p>
<h3 id="Exercises-26"><a href="#Exercises-26" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Use <code>vapply()</code> to:</p>
<p>a) Compute the standard deviation of every column in a numeric data frame.<br>a) Compute the standard deviation of every numeric column in a mixed data       frame. (Hint: you’ll need to use <code>vapply()</code> twice.)</p>
</li>
<li><p>Why is using <code>sapply()</code> to get the <code>class()</code> of each element in    a data frame dangerous?</p>
</li>
<li><p>The following code simulates the performance of a t-test for non-normal    data. Use <code>sapply()</code> and an anonymous function to extract the p-value from    every trial.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trials &lt;- replicate(</span><br><span class="line">  100,</span><br><span class="line">  t.test(rpois(10, 10), rpois(7, 10)),</span><br><span class="line">  simplify = FALSE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Extra challenge: get rid of the anonymous function by using <code>[[</code> directly.</p>
</li>
<li><p>What does <code>replicate()</code> do? What sort of for loop does it eliminate? Why    do its arguments differ from <code>lapply()</code> and friends?</p>
</li>
<li>Implement a version of <code>lapply()</code> that supplies <code>FUN</code> with both the name    and the value of each component.</li>
<li>Implement a combination of <code>Map()</code> and <code>vapply()</code> to create an <code>lapply()</code>    variant that iterates in parallel over all of its inputs and stores its    outputs in a vector (or a matrix). What arguments should the function    take?</li>
<li>Implement <code>mcsapply()</code>, a multicore version of <code>sapply()</code>. Can you    implement <code>mcvapply()</code>, a parallel version of <code>vapply()</code>? Why or why not?</li>
</ol>
<h2 id="Manipulating-matrices-and-data-frames"><a href="#Manipulating-matrices-and-data-frames" class="headerlink" title="Manipulating matrices and data frames"></a><a href="id=&quot;functionals-ds&quot;">Manipulating matrices and data frames</a></h2><p>Functionals can also be used to eliminate loops in common data manipulation tasks. In this section, we’ll give a brief overview of the available options, hint at how they can help you, and point you in the right direction to learn more. We’ll cover three categories of data structure functionals:</p>
<ul>
<li><code>apply()</code>, <code>sweep()</code>, and <code>outer()</code> work with matrices.</li>
<li><code>tapply()</code> summarises a vector by groups defined by another vector.</li>
<li>the <code>plyr</code> package, which generalises <code>tapply()</code> to make it easy to  work with data frames, lists, or arrays as inputs, and data frames, lists,  or arrays as outputs.</li>
</ul>
<h3 id="Matrix-and-array-operations"><a href="#Matrix-and-array-operations" class="headerlink" title="Matrix and array operations"></a>Matrix and array operations</h3><p>So far, all the functionals we’ve seen work with 1d input structures. The three functionals in this section provide useful tools for working with higher-dimensional data structures. <code>apply()</code> is a variant of <code>sapply()</code> that works with matrices and arrays. You can think of it as an operation that summarises a matrix or array by collapsing each row or column to a single number. It has four arguments:</p>
<ul>
<li><code>X</code>, the matrix or array to summarise</li>
<li><code>MARGIN</code>, an integer vector giving the dimensions to summarise over,  1 = rows, 2 = columns, etc.</li>
<li><code>FUN</code>, a summary function</li>
<li><code>...</code> other arguments passed on to <code>FUN</code></li>
</ul>
<p>A typical example of <code>apply()</code> looks like this</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- matrix(1:20, nrow = 5)</span><br><span class="line">apply(a, 1, mean)</span><br><span class="line">apply(a, 2, mean)</span><br></pre></td></tr></table></figure>
<p>There are a few caveats to using <code>apply()</code>. It doesn’t have a simplify argument, so you can never be completely sure what type of output you’ll get. This  means that <code>apply()</code> is not safe to use inside a function unless you carefully check the inputs. <code>apply()</code> is also not idempotent in the sense that if the summary function is the identity operator, the output is not always the same as the input:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a1 &lt;- apply(a, 1, identity)</span><br><span class="line">identical(a, a1)</span><br><span class="line">identical(a, t(a1))</span><br><span class="line">a2 &lt;- apply(a, 2, identity)</span><br><span class="line">identical(a, a2)</span><br></pre></td></tr></table></figure>
<p>(You can put high-dimensional arrays back in the right order using <code>aperm()</code>, or use <code>plyr::aaply()</code>, which is idempotent.)</p>
<p><code>sweep()</code> allows you to “sweep” out the values of a summary statistic. It is often used with <code>apply()</code> to standardise arrays. The following example scales the rows of a matrix so that all values lie between 0 and 1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- matrix(rnorm(20, 0, 10), nrow = 4)</span><br><span class="line">x1 &lt;- sweep(x, 1, apply(x, 1, min), `-`)</span><br><span class="line">x2 &lt;- sweep(x1, 1, apply(x1, 1, max), `/`)</span><br></pre></td></tr></table></figure>
<p>The final matrix functional is <code>outer()</code>. It’s a little different in that it takes multiple vector inputs and creates a matrix or array output where the input function is run over every combination of the inputs:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Create a times table</span><br><span class="line">outer(1:3, 1:10, &quot;*&quot;)</span><br></pre></td></tr></table></figure>
<p>Good places to learn more about <code>apply()</code> and friends are:</p>
<ul>
<li><a href="http://petewerner.blogspot.com/2012/12/using-apply-sapply-lapply-in-r.html" target="_blank" rel="external">“Using apply, sapply, lapply in R”</a> by Peter Werner.</li>
<li><a href="http://rforpublichealth.blogspot.no/2012/09/the-infamous-apply-function.html" target="_blank" rel="external">“The infamous apply function”</a> by Slawa Rokicki.</li>
<li><a href="http://forgetfulfunctor.blogspot.com/2011/07/r-apply-function-tutorial-with-examples.html" target="_blank" rel="external">“The R apply function - a tutorial with examples”</a> by axiomOfChoice.</li>
<li>The stackoverflow question <a href="http://stackoverflow.com/questions/3505701" target="_blank" rel="external">“R Grouping functions: <code>sapply</code> vs. <code>lapply</code> vs. <code>apply</code> vs. <code>tapply</code> vs. <code>by</code> vs. <code>aggregate</code>“</a>.</li>
</ul>
<h3 id="Group-apply"><a href="#Group-apply" class="headerlink" title="Group apply"></a>Group apply</h3><p>You can think about <code>tapply()</code> as a generalisation to <code>apply()</code> that allows for “ragged” arrays, arrays where each row can have a different number of columns. This is often needed when you’re trying to summarise a data set. For example, imagine you’ve collected pulse rate data from a medical trial, and you want to compare the two groups:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pulse &lt;- round(rnorm(22, 70, 10 / 3)) + rep(c(0, 5), c(10, 12))</span><br><span class="line">group &lt;- rep(c(&quot;A&quot;, &quot;B&quot;), c(10, 12))</span><br><span class="line"></span><br><span class="line">tapply(pulse, group, length)</span><br><span class="line">tapply(pulse, group, mean)</span><br></pre></td></tr></table></figure>
<p><code>tapply()</code> works by creating a “ragged” data structure from a set of inputs, and then applying a function to the individual elements of that structure. The first task is actually what the <code>split()</code> function does. It takes two inputs and returns a list which groups elements together from the first vector according to elements, or categories, from the second vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(pulse, group)</span><br></pre></td></tr></table></figure>
<p>Then <code>tapply()</code> is just the combination of <code>split()</code> and <code>sapply()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tapply2 &lt;- function(x, group, f, ..., simplify = TRUE) &#123;</span><br><span class="line">  pieces &lt;- split(x, group)</span><br><span class="line">  sapply(pieces, f, simplify = simplify)</span><br><span class="line">&#125;</span><br><span class="line">tapply2(pulse, group, length)</span><br><span class="line">tapply2(pulse, group, mean)</span><br></pre></td></tr></table></figure>
<p>Being able to rewrite <code>tapply()</code> as a combination of <code>split()</code> and <code>sapply()</code> is a good indication that we’ve identified some useful building blocks.</p>
<h3 id="The-plyr-package"><a href="#The-plyr-package" class="headerlink" title="The plyr package"></a>The plyr package</h3><p>One challenge with using the base functionals is that they have grown organically over time, and have been written by multiple authors. This means that they are not very consistent:</p>
<ul>
<li>With <code>tapply()</code> and <code>sapply()</code>, the simplify argument is called <code>simplify</code>.  With <code>mapply()</code>, it’s called <code>SIMPLIFY</code>. With <code>apply()</code>, the argument is  absent.</li>
<li><code>vapply()</code> is a variant of <code>sapply()</code> that allows you to describe what the  output should be, but there are no corresponding variants for <code>tapply()</code>,  <code>apply()</code>, or <code>Map()</code>.</li>
<li>The first argument of most base functionals is a vector, but the first  argument in <code>Map()</code> is a function.</li>
</ul>
<p>This makes learning these operators challenging, as you have to memorise all of the variations. Additionally, if you think about the possible combinations of input and output types, base R only covers a partial set of cases:</p>
<table>
<thead>
<tr>
<th></th>
<th>list</th>
<th>data frame</th>
<th>array</th>
</tr>
</thead>
<tbody>
<tr>
<td>list</td>
<td><code>lapply()</code></td>
<td></td>
<td><code>sapply()</code></td>
</tr>
<tr>
<td>data frame</td>
<td><code>by()</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>array</td>
<td></td>
<td></td>
<td><code>apply()</code></td>
</tr>
</tbody>
</table>
<p>This was one of the driving motivations behind the creation of the plyr package. It provides consistently named functions with consistently named arguments and covers all combinations of input and output data structures:</p>
<table>
<thead>
<tr>
<th></th>
<th>list</th>
<th>data frame</th>
<th>array</th>
</tr>
</thead>
<tbody>
<tr>
<td>list</td>
<td><code>llply()</code></td>
<td><code>ldply()</code></td>
<td><code>laply()</code></td>
</tr>
<tr>
<td>data frame</td>
<td><code>dlply()</code></td>
<td><code>ddply()</code></td>
<td><code>daply()</code></td>
</tr>
<tr>
<td>array</td>
<td><code>alply()</code></td>
<td><code>adply()</code></td>
<td><code>aaply()</code></td>
</tr>
</tbody>
</table>
<p>Each of these functions splits up the input, applies a function to each piece, and then combines the results. Overall, this process is called “split-apply-combine”. You can read more about it and plyr in <a href="http://www.jstatsoft.org/v40/i01/" target="_blank" rel="external">“The Split-Apply-Combine Strategy for Data Analysis”</a>, an open-access article published in the <em>Journal of Statistical Software</em>.</p>
<h3 id="Exercises-27"><a href="#Exercises-27" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>How does <code>apply()</code> arrange the output? Read the documentation and perform    some experiments.</li>
<li>There’s no equivalent to <code>split()</code> + <code>vapply()</code>. Should there be? When    would it be useful? Implement one yourself.</li>
<li>Implement a pure R version of <code>split()</code>. (Hint: use <code>unique()</code> and    subsetting.) Can you do it without a for loop?</li>
<li>What other types of input and output are missing? Brainstorm before you  look up some answers in the <a href="http://www.jstatsoft.org/v40/i01/" target="_blank" rel="external">plyr paper</a>.</li>
</ol>
<h2 id="Manipulating-lists"><a href="#Manipulating-lists" class="headerlink" title="Manipulating lists"></a><a href="id=&quot;functionals-fp&quot;">Manipulating lists</a></h2><p>Another way of thinking about functionals is as a set of general tools for altering, subsetting, and collapsing lists. Every functional programming language has three tools for this: <code>Map()</code>, <code>Reduce()</code>, and <code>Filter()</code>. We’ve seen <code>Map()</code> already, and the following sections describe <code>Reduce()</code>, a powerful tool for extending two-argument functions, and <code>Filter()</code>, a member of an important class of functionals that work with predicates, functions that return a single <code>TRUE</code> or <code>FALSE</code>.</p>
<h3 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce()"></a><code>Reduce()</code></h3><p><code>Reduce()</code> reduces a vector, <code>x</code>, to a single value by recursively calling a function, <code>f</code>, two arguments at a time. It combines the first two elements with <code>f</code>, then combines the result of that call with the third element, and so on. Calling <code>Reduce(f, 1:3)</code> is equivalent to <code>f(f(1, 2), 3)</code>. Reduce is also known as fold, because it folds together adjacent elements in the list.</p>
<p>The following two examples show what <code>Reduce</code> does with an infix and prefix function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Reduce(`+`, 1:3) # -&gt; ((1 + 2) + 3)</span><br><span class="line">Reduce(sum, 1:3) # -&gt; sum(sum(1, 2), 3)</span><br></pre></td></tr></table></figure>
<p>The essence of <code>Reduce()</code> can be described by a simple for loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Reduce2 &lt;- function(f, x) &#123;</span><br><span class="line">  out &lt;- x[[1]]</span><br><span class="line">  for(i in seq(2, length(x))) &#123;</span><br><span class="line">    out &lt;- f(out, x[[i]])</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The real <code>Reduce()</code> is more complicated because it includes arguments to control whether the values are reduced from the left or from the right (<code>right</code>), an optional initial value (<code>init</code>), and an option to output intermediate results (<code>accumulate</code>).</p>
<p><code>Reduce()</code> is an elegant way of extending a function that works with two inputs into a function that can deal with any number of inputs. It’s useful for implementing many types of recursive operations, like merges and intersections. (We’ll see another use in the final case study.) Imagine you have a list of numeric vectors, and you want to find the values that occur in every element:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l &lt;- replicate(5, sample(1:10, 15, replace = T), simplify = FALSE)</span><br><span class="line">str(l)</span><br></pre></td></tr></table></figure>
<p>You could do that by intersecting each element in turn:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intersect(intersect(intersect(intersect(l[[1]], l[[2]]),</span><br><span class="line">  l[[3]]), l[[4]]), l[[5]])</span><br></pre></td></tr></table></figure>
<p>That’s hard to read. With <code>Reduce()</code>, the equivalent is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reduce(intersect, l)</span><br></pre></td></tr></table></figure>
<h3 id="Predicate-functionals"><a href="#Predicate-functionals" class="headerlink" title="Predicate functionals"></a>Predicate functionals</h3><p>A <strong>predicate</strong> is a function that returns a single <code>TRUE</code> or <code>FALSE</code>, like <code>is.character</code>, <code>all</code>, or <code>is.NULL</code>. A predicate functional applies a predicate to each element of a list or data frame. There are three useful predicate functionals in base R: <code>Filter()</code>, <code>Find()</code>, and <code>Position()</code>.</p>
<ul>
<li><code>Filter()</code> selects only those elements which match the predicate.</li>
<li><code>Find()</code> returns the first element which matches the predicate (or the last  element if <code>right = TRUE</code>).</li>
<li><code>Position()</code> returns the position of the first element that matches the  predicate (or the last element if <code>right = TRUE</code>).</li>
</ul>
<p>Another useful predicate functional is <code>where()</code>, a custom functional that generates a logical vector from a list (or a data frame) and a predicate:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">where &lt;- function(f, x) &#123;</span><br><span class="line">  vapply(x, f, logical(1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The following example shows how you might use these functionals with a data frame:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:3, y = c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</span><br><span class="line">where(is.factor, df)</span><br><span class="line">str(Filter(is.factor, df))</span><br><span class="line">str(Find(is.factor, df))</span><br><span class="line">Position(is.factor, df)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-28"><a href="#Exercises-28" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Why isn’t <code>is.na()</code> a predicate function? What base R function is closest    to being a predicate version of <code>is.na()</code>?</li>
<li>Use <code>Filter()</code> and <code>vapply()</code> to create a function that applies a summary    statistic to every numeric column in a data frame.</li>
<li>What’s the relationship between <code>which()</code> and <code>Position()</code>? What’s    the relationship between <code>where()</code> and <code>Filter()</code>?</li>
<li>Implement <code>Any()</code>, a function that takes a list and a predicate function,    and returns <code>TRUE</code> if the predicate function returns <code>TRUE</code> for any of    the inputs. Implement <code>All()</code> similarly.</li>
<li>Implement the <code>span()</code> function from Haskell: given a list <code>x</code> and a    predicate function <code>f</code>, <code>span</code> returns the location of the longest    sequential run of elements where the predicate is true. (Hint: you    might find <code>rle()</code> helpful.)</li>
</ol>
<h2 id="Mathematical-functionals"><a href="#Mathematical-functionals" class="headerlink" title="Mathematical functionals"></a><a href="id=&quot;functionals-math&quot;">Mathematical functionals</a></h2><p>Functionals are very common in mathematics. The limit, the maximum, the roots (the set of points where <code>f(x) = 0</code>), and the definite integral are all functionals: given a function, they return a single number (or vector of numbers). At first glance, these functions don’t seem to fit in with the theme of eliminating loops, but if you dig deeper you’ll find out that they are all implemented using an algorithm that involves iteration.</p>
<p>In this section we’ll use some of R’s built-in mathematical functionals. There are three functionals that work with functions to return single numeric values:</p>
<ul>
<li><code>integrate()</code> finds the area under the curve defined by <code>f()</code></li>
<li><code>uniroot()</code> finds where <code>f()</code> hits zero</li>
<li><code>optimise()</code> finds the location of lowest (or highest) value of <code>f()</code></li>
</ul>
<p>Let’s explore how these are used with a simple function, <code>sin()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">integrate(sin, 0, pi)</span><br><span class="line">str(uniroot(sin, pi * c(1 / 2, 3 / 2)))</span><br><span class="line">str(optimise(sin, c(0, 2 * pi)))</span><br><span class="line">str(optimise(sin, c(0, pi), maximum = TRUE))</span><br></pre></td></tr></table></figure>
<p>In statistics, optimisation is often used for maximum likelihood estimation (MLE). In MLE, we have two sets of parameters: the data, which is fixed for a given problem, and the parameters, which vary as we try to find the maximum. These two sets of parameters make the problem well suited for closures. Combining closures with optimisation gives rise to the following approach to solving MLE problems.</p>
<p>The following example shows how we might find the maximum likelihood estimate for $\lambda$, if our data come from a Poisson distribution. First, we create a function factory that, given a dataset, returns a function that computes the negative log likelihood (NLL) for parameter <code>lambda</code>. In R, it’s common to work with the negative since <code>optimise()</code> defaults to finding the minimum.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">poisson_nll &lt;- function(x) &#123;</span><br><span class="line">  n &lt;- length(x)</span><br><span class="line">  sum_x &lt;- sum(x)</span><br><span class="line">  function(lambda) &#123;</span><br><span class="line">    n * lambda - sum_x * log(lambda) # + terms not involving lambda</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note how the closure allows us to precompute values that are constant with respect to the data.</p>
<p>We can use this function factory to generate specific NLL functions for input data. Then <code>optimise()</code> allows us to find the best values (the maximum likelihood estimates), given a generous starting range.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x1 &lt;- c(41, 30, 31, 38, 29, 24, 30, 29, 31, 38)</span><br><span class="line">x2 &lt;- c(6, 4, 7, 3, 3, 7, 5, 2, 2, 7, 5, 4, 12, 6, 9)</span><br><span class="line">nll1 &lt;- poisson_nll(x1)</span><br><span class="line">nll2 &lt;- poisson_nll(x2)</span><br><span class="line"></span><br><span class="line">optimise(nll1, c(0, 100))$minimum</span><br><span class="line">optimise(nll2, c(0, 100))$minimum</span><br></pre></td></tr></table></figure>
<p>We can check that these values are correct by comparing them to the analytic solution: in this case, it’s just the mean of the data, <code>r mean(x1)</code> and <code>r mean(x2)</code>.</p>
<p>Another important mathematical functional is <code>optim()</code>. It is a generalisation of <code>optimise()</code> that works with more than one dimension. If you’re interested in how it works, you might want to explore the <code>Rvmmin</code> package, which provides a pure-R implementation of <code>optim()</code>. Interestingly <code>Rvmmin</code> is no slower than <code>optim()</code>, even though it is written in R, not C. For this problem, the bottleneck lies not in controlling the optimisation but with having to evaluate the function multiple times.</p>
<h3 id="Exercises-29"><a href="#Exercises-29" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Implement <code>arg_max()</code>. It should take a function and a vector of inputs,    and return the elements of the input where the function returns the highest    value. For example, <code>arg_max(-10:5, function(x) x ^ 2)</code> should return -10.    <code>arg_max(-5:5, function(x) x ^ 2)</code> should return <code>c(-5, 5)</code>.    Also implement the matching <code>arg_min()</code> function.</li>
<li>Challenge: read about the    <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3" target="_blank" rel="external">fixed point algorithm</a>.    Complete the exercises using R.</li>
</ol>
<h2 id="Loops-that-should-be-left-as-is"><a href="#Loops-that-should-be-left-as-is" class="headerlink" title="Loops that should be left as is"></a><a href="id=&quot;functionals-not&quot;">Loops that should be left as is</a></h2><p>Some loops have no natural functional equivalent. In this section you’ll learn about three common cases:</p>
<ul>
<li>modifying in place</li>
<li>recursive functions</li>
<li>while loops</li>
</ul>
<p>It’s possible to torture these problems to use a functional, but it’s not a good idea. You’ll create code that is harder to understand, eliminating the main reason for using functionals in the first case.</p>
<h3 id="Modifying-in-place"><a href="#Modifying-in-place" class="headerlink" title="Modifying in place"></a>Modifying in place</h3><p>If you need to modify part of an existing data frame, it’s often better to use a for loop. For example, the following code performs a variable-by-variable transformation by matching the names of a list of functions to the names of variables in a data frame.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">trans &lt;- list(</span><br><span class="line">  disp = function(x) x * 0.0163871,</span><br><span class="line">  am = function(x) factor(x, levels = c(&quot;auto&quot;, &quot;manual&quot;))</span><br><span class="line">)</span><br><span class="line">for(var in names(trans)) &#123;</span><br><span class="line">  mtcars[[var]] &lt;- trans[[var]](mtcars[[var]])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We wouldn’t normally use <code>lapply()</code> to replace this loop directly, but it is <em>possible</em>. Just replace the loop with <code>lapply()</code> by using <code>&lt;&lt;-</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lapply(names(trans), function(var) &#123;</span><br><span class="line">  mtcars[[var]] &lt;&lt;- trans[[var]](mtcars[[var]])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>The for loop is gone, but the code is longer and much harder to understand. The reader needs to understand <code>&lt;&lt;-</code> and how <code>x[[y]] &lt;&lt;- z</code> works (it’s not simple!). In short, we’ve taken a simple, easily understood for loop, and turned it into something few people will understand: not a good idea!</p>
<h3 id="Recursive-relationships"><a href="#Recursive-relationships" class="headerlink" title="Recursive relationships"></a>Recursive relationships</h3><p>It’s hard to convert a for loop into a functional when the relationship between elements is not independent, or is defined recursively. For example, exponential smoothing works by taking a weighted average of the current and previous data points. The <code>exps()</code> function below implements exponential smoothing with a for loop.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">exps &lt;- function(x, alpha) &#123;</span><br><span class="line">  s &lt;- numeric(length(x) + 1)</span><br><span class="line">  for (i in seq_along(s)) &#123;</span><br><span class="line">    if (i == 1) &#123;</span><br><span class="line">      s[i] &lt;- x[i]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      s[i] &lt;- alpha * x[i - 1] + (1 - alpha) * s[i - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  s</span><br><span class="line">&#125;</span><br><span class="line">x &lt;- runif(6)</span><br><span class="line">exps(x, 0.5)</span><br></pre></td></tr></table></figure>
<p>We can’t eliminate the for loop because none of the functionals we’ve seen allow the output at position <code>i</code> to depend on both the input and output at position <code>i - 1</code>.</p>
<p>One way to eliminate the for loop in this case is to <a href="http://en.wikipedia.org/wiki/Recurrence_relation#Solving" target="_blank" rel="external">solve the recurrence relation</a> by removing the recursion and replacing it with explicit references. This requires a new set of mathematical tools, and is challenging, but it can pay off by producing a simpler function.</p>
<h3 id="While-loops"><a href="#While-loops" class="headerlink" title="While loops"></a>While loops</h3><p>Another type of looping construct in R is the <code>while</code> loop. It keeps running until some condition is met. <code>while</code> loops are more general than <code>for</code> loops: you can rewrite every for loop as a while loop, but you can’t do the reverse.  For example, we could turn this for loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (i in 1:10) print(i)</span><br></pre></td></tr></table></figure>
<p>into this while loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- 1</span><br><span class="line">while(i &lt;= 10) &#123;</span><br><span class="line">  print(i)</span><br><span class="line">  i &lt;- i + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Not every while loop can be turned into a for loop because many while loops don’t know in advance how many times they will be run:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- 0</span><br><span class="line">while(TRUE) &#123;</span><br><span class="line">  if (runif(1) &gt; 0.9) break</span><br><span class="line">  i &lt;- i + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is a common problem when you’re writing simulations.</p>
<p>In this case we can remove the loop by recognising a special feature of the problem. Here we’re counting the number of successes before Bernoulli trial with p = 0.1 fails. This is a geometric random variable, so you could replace the code with <code>i &lt;- rgeom(1, 0.1)</code>. Reformulating the problem in this way is hard to do in general, but you’ll benefit greatly if you can do it for your problem.</p>
<h2 id="A-family-of-functions"><a href="#A-family-of-functions" class="headerlink" title="A family of functions"></a><a href="id=&quot;function-family&quot;">A family of functions</a></h2><p>To finish off the chapter, this case study shows how you can use functionals to take a simple building block and make it powerful and general. I’ll start with a simple idea, adding two numbers together, and use functionals to extend it to summing multiple numbers, computing parallel and cumulative sums, and summing across array dimensions.</p>
<p>We’ll start by defining a very simple addition function, one which takes two scalar arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x, y) &#123;</span><br><span class="line">  stopifnot(length(x) == 1, length(y) == 1,</span><br><span class="line">    is.numeric(x), is.numeric(y))</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(We’re using R’s existing addition operator here, which does much more, but the focus here is on how we can take very simple building blocks and extend them to do more.)</p>
<p>I’ll also add an <code>na.rm</code> argument. A helper function will make this a bit easier: if <code>x</code> is missing it should return <code>y</code>, if <code>y</code> is missing it should return <code>x</code>, and if both <code>x</code> and <code>y</code> are missing then it should return another argument to the function: <code>identity</code>. This function is probably a bit more general than what we need now, but it’s useful if we implement other binary operators.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rm_na &lt;- function(x, y, identity) &#123;</span><br><span class="line">  if (is.na(x) &amp;&amp; is.na(y)) &#123;</span><br><span class="line">    identity</span><br><span class="line">  &#125; else if (is.na(x)) &#123;</span><br><span class="line">    y</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">rm_na(NA, 10, 0)</span><br><span class="line">rm_na(10, NA, 0)</span><br><span class="line">rm_na(NA, NA, 0)</span><br></pre></td></tr></table></figure>
<p>This allows us to write a version of <code>add()</code> that can deal with missing values if needed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(x, y, na.rm = FALSE) &#123;</span><br><span class="line">  if (na.rm &amp;&amp; (is.na(x) || is.na(y))) rm_na(x, y, 0) else x + y</span><br><span class="line">&#125;</span><br><span class="line">add(10, NA)</span><br><span class="line">add(10, NA, na.rm = TRUE)</span><br><span class="line">add(NA, NA)</span><br><span class="line">add(NA, NA, na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<p>Why did we pick an identity of <code>0</code>? Why should <code>add(NA, NA, na.rm = TRUE)</code> return 0? Well, for every other input it returns a number, so even if both arguments are <code>NA</code>, it should still do that. What number should it return? We can figure it out because additional is associative, which means that the order of additional doesn’t matter. That means that the following two function calls should return the same value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(add(3, NA, na.rm = TRUE), NA, na.rm = TRUE)</span><br><span class="line">add(3, add(NA, NA, na.rm = TRUE), na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<p>This implies that <code>add(NA, NA, na.rm = TRUE)</code> must be 0, and hence <code>identity = 0</code> is the correct default.</p>
<p>Now that we have the basics working, we can extend the function to deal with more complicated inputs. One obvious generalisation is to add more than two numbers. We can do this by iteratively adding two numbers: if the input is <code>c(1, 2, 3)</code> we compute <code>add(add(1, 2), 3)</code>. This is a simple application of <code>Reduce()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r_add &lt;- function(xs, na.rm = TRUE) &#123;</span><br><span class="line">  Reduce(function(x, y) add(x, y, na.rm = na.rm), xs)</span><br><span class="line">&#125;</span><br><span class="line">r_add(c(1, 4, 10))</span><br></pre></td></tr></table></figure>
<p>This looks good, but we need to test a few special cases:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r_add(NA, na.rm = TRUE)</span><br><span class="line">r_add(numeric())</span><br></pre></td></tr></table></figure>
<p>These are incorrect. In the first case, we get a missing value even though we’ve explicitly asked to ignore them. In the second case, we get <code>NULL</code> instead of a length one numeric vector (as we do for every other set of inputs).</p>
<p>The two problems are related. If we give <code>Reduce()</code> a length one vector, it doesn’t have anything to reduce, so it just returns the input. If we give it an input of length zero, it always returns <code>NULL</code>. The easiest way to fix this problem is to use the <code>init</code> argument of <code>Reduce()</code>. This is added to the start of every input vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r_add &lt;- function(xs, na.rm = TRUE) &#123;</span><br><span class="line">  Reduce(function(x, y) add(x, y, na.rm = na.rm), xs, init = 0)</span><br><span class="line">&#125;</span><br><span class="line">r_add(c(1, 4, 10))</span><br><span class="line">r_add(NA, na.rm = TRUE)</span><br><span class="line">r_add(numeric())</span><br></pre></td></tr></table></figure>
<p><code>r_add()</code> is equivalent to <code>sum()</code>.</p>
<p>It would be nice to have a vectorised version of <code>add()</code> so that we can perform the addition of two vectors of numbers in element-wise fashion. We could use <code>Map()</code> or <code>vapply()</code> to implement this, but neither is perfect. <code>Map()</code> returns a list, instead of a numeric vector, so we need to use <code>simplify2array()</code>. <code>vapply()</code> returns a vector but it requires us to loop over a set of indices.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v_add1 &lt;- function(x, y, na.rm = FALSE) &#123;</span><br><span class="line">  stopifnot(length(x) == length(y), is.numeric(x), is.numeric(y))</span><br><span class="line">  if (length(x) == 0) return(numeric())</span><br><span class="line">  simplify2array(</span><br><span class="line">    Map(function(x, y) add(x, y, na.rm = na.rm), x, y)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v_add2 &lt;- function(x, y, na.rm = FALSE) &#123;</span><br><span class="line">  stopifnot(length(x) == length(y), is.numeric(x), is.numeric(y))</span><br><span class="line">  vapply(seq_along(x), function(i) add(x[i], y[i], na.rm = na.rm),</span><br><span class="line">    numeric(1))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A few test cases help to ensure that it behaves as we expect. We’re a bit stricter than base R here because we don’t do recycling. (You could add that if you wanted, but I find that recycling is a frequent source of silent bugs.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Both versions give the same results</span><br><span class="line">v_add1(1:10, 1:10)</span><br><span class="line">v_add1(numeric(), numeric())</span><br><span class="line">v_add1(c(1, NA), c(1, NA))</span><br><span class="line">v_add1(c(1, NA), c(1, NA), na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<p>Another variant of <code>add()</code> is the cumulative sum. We can implement it with <code>Reduce()</code> by setting the <code>accumulate</code> argument to <code>TRUE</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c_add &lt;- function(xs, na.rm = FALSE) &#123;</span><br><span class="line">  Reduce(function(x, y) add(x, y, na.rm = na.rm), xs,</span><br><span class="line">    accumulate = TRUE)</span><br><span class="line">&#125;</span><br><span class="line">c_add(1:10)</span><br><span class="line">c_add(10:1)</span><br></pre></td></tr></table></figure>
<p>This is equivalent to <code>cumsum()</code>.</p>
<p>Finally, we might want to define addition for more complicated data structures like matrices. We could create <code>row</code> and <code>col</code> variants that sum across rows and columns, respectively, or we could go the whole hog and define an array version that could sum across any arbitrary set of dimensions. These are easily implemented as combinations of <code>add()</code> and <code>apply()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">row_sum &lt;- function(x, na.rm = FALSE) &#123;</span><br><span class="line">  apply(x, 1, add, na.rm = na.rm)</span><br><span class="line">&#125;</span><br><span class="line">col_sum &lt;- function(x, na.rm = FALSE) &#123;</span><br><span class="line">  apply(x, 2, add, na.rm = na.rm)</span><br><span class="line">&#125;</span><br><span class="line">arr_sum &lt;- function(x, dim, na.rm = FALSE) &#123;</span><br><span class="line">  apply(x, dim, add, na.rm = na.rm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The first two are equivalent to <code>rowSums()</code> and <code>colSums()</code>.</p>
<p>If every function we have created has an existing equivalent in base R, why did we bother? There are two main reasons:</p>
<ul>
<li>Since all variants were implemented by combining a simple binary operator  (<code>add()</code>) and a well-tested functional (<code>Reduce()</code>, <code>Map()</code>, <code>apply()</code>),  we know that our variants will behave consistently.</li>
<li>We can apply the same infrastructure to other operators, especially those  that might not have the full suite of variants in base R.</li>
</ul>
<p>The downside of this approach is that these implementations are not that efficient. (For example, <code>colSums(x)</code> is much faster than <code>apply(x, 2, sum)</code>.) However, even if they aren’t that fast, simple implementations are still a good starting point because they’re less likely to have bugs. When you create faster versions, you can compare the results to make sure your fast versions are still correct.</p>
<p>If you enjoyed this section, you might also enjoy <a href="http://stevelosh.com/blog/2013/03/list-out-of-lambda/" target="_blank" rel="external">“List out of lambda”</a>, a blog article by Steve Losh that shows how you can produce high level language structures (like lists) out of more primitive language features (like closures, aka lambdas).</p>
<h3 id="Exercises-30"><a href="#Exercises-30" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Implement <code>smaller</code> and <code>larger</code> functions that, given two inputs, return    either the smaller or the larger value. Implement <code>na.rm = TRUE</code>: what    should the identity be? (Hint:    <code>smaller(x, smaller(NA, NA, na.rm = TRUE), na.rm = TRUE)</code> must be <code>x</code>, so    <code>smaller(NA, NA, na.rm = TRUE)</code> must be bigger than any other value of x.)    Use <code>smaller</code> and <code>larger</code> to implement equivalents of <code>min()</code>, <code>max()</code>,    <code>pmin()</code>, <code>pmax()</code>, and new functions <code>row_min()</code> and <code>row_max()</code>.</li>
<li><p>Create a table that has <em>and</em>, <em>or</em>, <em>add</em>, <em>multiply</em>, <em>smaller</em>, and    <em>larger</em> in the columns and <em>binary operator</em>, <em>reducing variant</em>,    <em>vectorised variant</em>, and <em>array variants</em> in the rows.</p>
<p>a) Fill in the cells with the names of base R functions that perform each of<br>   the roles.</p>
<p>a) Compare the names and arguments of the existing R functions. How<br>   consistent are they? How could you improve them?</p>
<p>a) Complete the matrix by implementing any missing functions.</p>
</li>
<li><p>How does <code>paste()</code> fit into this structure? What is the scalar binary    function that underlies <code>paste()</code>? What are the <code>sep</code> and <code>collapse</code>    arguments to <code>paste()</code> equivalent to? Are there any <code>paste</code> variants    that don’t have existing R implementations?</p>
</li>
</ol>
<hr>
<h1 id="Function-operators"><a href="#Function-operators" class="headerlink" title="Function operators"></a><a href="id=&quot;function-operators&quot;">Function operators</a></h1><p>In this chapter, you’ll learn about function operators (FOs). A function operator is a function that takes one (or more) functions as input and returns a function as output. In some ways, function operators are similar to functionals: there’s nothing you can’t do without them, but they can make your code more readable and expressive, and they can help you write code faster. The main difference is that functionals extract common patterns of loop use, where function operators extract common patterns of anonymous function use.</p>
<p>The following code shows a simple function operator, <code>chatty()</code>. It wraps a function, making a new function that prints out its first argument. It’s useful because it gives you a window to see how functionals, like <code>vapply()</code>, work.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">chatty &lt;- function(f) &#123;</span><br><span class="line">  function(x, ...) &#123;</span><br><span class="line">    res &lt;- f(x, ...)</span><br><span class="line">    cat(&quot;Processing &quot;, x, &quot;\n&quot;, sep = &quot;&quot;)</span><br><span class="line">    res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">f &lt;- function(x) x ^ 2</span><br><span class="line">s &lt;- c(3, 2, 1)</span><br><span class="line">chatty(f)(1)</span><br><span class="line"></span><br><span class="line">vapply(s, chatty(f), numeric(1))</span><br></pre></td></tr></table></figure>
<p>In the last chapter, we saw that many built-in functionals, like <code>Reduce()</code>, <code>Filter()</code>, and <code>Map()</code>, have very few arguments, so we had to use anonymous functions to modify how they worked. In this chapter, we’ll build specialised substitutes for common anonymous functions that allow us to communicate our intent more clearly. For example, in <a href="#map">multiple inputs</a> we used an anonymous function with <code>Map()</code> to supply fixed arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map(function(x, y) f(x, y, zs), xs, ys)</span><br></pre></td></tr></table></figure>
<p>Later in this chapter, we’ll learn about partial application using the <code>partial()</code> function. Partial application encapsulates the use of an anonymous function to supply default arguments, and allows us to write succinct code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map(partial(f, zs = zs), xs, yz)</span><br></pre></td></tr></table></figure>
<p>This is an important use of FOs: by transforming the input function, you eliminate parameters from a functional. In fact, as long as the inputs and outputs of the function remain the same, this approach allows your functionals to be more extensible, often in ways you haven’t thought of.</p>
<p>The chapter covers four important types of FO: behaviour, input, output, and combining. For each type, I’ll show you some useful FOs, and how you can use as another to decompose problems: as combinations of multiple functions instead of combinations of arguments. The goal is not to exhaustively list every possible FO, but to show a selection that demonstrate how they work together with other FP techniques. For your own work, you’ll need to think about and experiment with how function operators can help you solve recurring problems.</p>
<h5 id="Outline-8"><a href="#Outline-8" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#behavioural-fos">Behavioural FOs</a> introduces you to FOs that change the  behaviour of a function like automatically logging usage to disk or ensuring  that a function is run only once.</li>
<li><a href="#output-fos">Output FOs</a> shows you how to write FOs that manipulate the  output of a function. These can do simple things like capturing errors, or  fundamentally change what the function does.</li>
<li><a href="#input-fos">Input FOs</a> describes how to modify the inputs to a function using  a FO like <code>Vectorize()</code> or <code>partial()</code>.</li>
<li><a href="#combining-fos">Combining FOs</a> shows the power of FOs that combine multiple  functions with function composition and logical operations.</li>
</ul>
<h5 id="Prerequisites-4"><a href="#Prerequisites-4" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>As well as writing FOs from scratch, this chapter uses function operators from the memoise, plyr, and pryr packages. Install them by running <code>install.packages(c(&quot;memoise&quot;, &quot;plyr&quot;, &quot;pryr&quot;))</code>.</p>
<!--
### In other languages

Function operators are used extensively in FP languages like Haskell, and commonly in Lisp, Scheme and Clojure. They are also an important part of modern JavaScript programming, like in the [underscore.js](http://underscorejs.org/) library. They are particularly common in CoffeeScript because its syntax for anonymous functions is so concise. In stack-based languages like Forth and Factor, function operators are used almost exclusively because it's rare to refer to variables by name. Python's decorators are just function operators by a [different name](http://stackoverflow.com/questions/739654/). In Java, they are very rare because it's difficult to manipulate functions (although possible if you wrap them up in strategy-type objects). They are also rare in C++ because, while it's possible to create objects that work like functions ("functors") by overloading the `()` operator, modifying these objects with other functions is not a common programming technique. That said, C++ 11 includes partial application (`std::bind`) as part of the standard library.
-->
<h2 id="Behavioural-FOs"><a href="#Behavioural-FOs" class="headerlink" title="Behavioural FOs"></a><a href="id=&quot;behavioural-fos&quot;">Behavioural FOs</a></h2><p>Behavioural FOs leave the inputs and outputs of a function unchanged, but add some extra behaviour. In this section, we’ll look at functions which implement three useful behaviours:</p>
<ul>
<li>Add a delay to avoid swamping a server with requests.</li>
<li>Print to console every n invocations to check on a long running process.</li>
<li>Cache previous computations to improve performance.</li>
</ul>
<p>To motivate these behaviours, imagine we want to download a long vector of URLs. That’s pretty simple with <code>lapply()</code> and <code>download_file()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">download_file &lt;- function(url, ...) &#123;</span><br><span class="line">  download.file(url, basename(url), ...)</span><br><span class="line">&#125;</span><br><span class="line">lapply(urls, download_file)</span><br></pre></td></tr></table></figure>
<p>(<code>download_file()</code> is a simple wrapper around <code>utils::download.file()</code> which provides a reasonable default for the file name.)</p>
<p>There are a number of useful behaviours we might want to add to this function. If the list was long, we might want to print a <code>.</code> every ten URLs so we know that the function’s still working. If we’re downloading files over the internet, we might want to add a small delay between each request to avoid hammering the server. Implementing these behaviours in a for loop is rather complicated. We can no longer use <code>lapply()</code> because we need an external counter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- 1</span><br><span class="line">for(url in urls) &#123;</span><br><span class="line">  i &lt;- i + 1</span><br><span class="line">  if (i %% 10 == 0) cat(&quot;.&quot;)</span><br><span class="line">  Sys.delay(1)</span><br><span class="line">  download_file(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Understanding this code is hard because different concerns (iteration, printing, and downloading) are interleaved. In the remainder of this section we’ll create FOs that encapsulate each behaviour and allow us to write code like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lapply(urls, dot\_every(10, delay\_by(1, download_file)))</span><br></pre></td></tr></table></figure>
<p>Implementing <code>delay_by()</code> is straightforward, and follows the same basic template that we’ll see for the majority of FOs in this chapter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delay_by &lt;- function(delay, f) &#123;</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    Sys.sleep(delay)</span><br><span class="line">    f(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">system.time(runif(100))</span><br><span class="line">system.time(delay_by(0.1, runif)(100))</span><br></pre></td></tr></table></figure>
<p><code>dot_every()</code> is a little bit more complicated because it needs to manage a counter. Fortunately, we saw how to do that in <a href="#mutable-state">mutable state</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dot_every &lt;- function(n, f) &#123;</span><br><span class="line">  i &lt;- 1</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    if (i %% n == 0) cat(&quot;.&quot;)</span><br><span class="line">    i &lt;&lt;- i + 1</span><br><span class="line">    f(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">x &lt;- lapply(1:100, runif)</span><br><span class="line">x &lt;- lapply(1:100, dot_every(10, runif))</span><br></pre></td></tr></table></figure>
<p>Notice that I’ve made the function the last argument in each FO. This makes it easier to read when we compose multiple function operators. If the function were the first argument, then instead of:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download &lt;- dot\_every(10, delay\_by(1, download_file))</span><br></pre></td></tr></table></figure>
<p>we’d have</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download &lt;- dot\_every(delay\_by(download_file, 1), 10)</span><br></pre></td></tr></table></figure>
<p>That’s harder to follow because (e.g.) the argument of <code>dot_every()</code> is far away from its call. This is sometimes called the <a href="http://en.wikipedia.org/wiki/Dagwood_sandwich" target="_blank" rel="external">Dagwood sandwich</a> problem: you have too much filling (too many long arguments) between your slices of bread (parentheses).</p>
<p>I’ve also tried to give the FOs descriptive names: delay by 1 (second), (print a) dot every 10 (invocations). The more clearly the function names used in your code express your intent, the easier it will be for others (including future you) to read and understand the code.</p>
<h3 id="Memoisation"><a href="#Memoisation" class="headerlink" title="Memoisation"></a>Memoisation</h3><p>Another thing you might worry about when downloading multiple files is accidentally downloading the same file multiple times. You could avoid this by calling <code>unique()</code> on the list of input URLs, or manually managing a data structure that mapped the URL to the result. An alternative approach is to use memoisation: modify a function to automatically cache its results.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(memoise)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">slow_function &lt;- function(x) &#123;</span><br><span class="line">  Sys.sleep(1)</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">system.time(slow_function())</span><br><span class="line">system.time(slow_function())</span><br><span class="line">fast_function &lt;- memoise(slow_function)</span><br><span class="line">system.time(fast_function())</span><br><span class="line">system.time(fast_function())</span><br></pre></td></tr></table></figure>
<p>Memoisation is an example of the classic computer science tradeoff of memory versus speed. A memoised function can run much faster because it stores all of the previous inputs and outputs, using more memory.</p>
<p>A realistic use of memoisation is computing the Fibonacci series. The Fibonacci series is defined recursively: the first two values are 1 and 1, then f(n) = f(n - 1) + f(n - 2). A naive version implemented in R would be very slow because, for example, <code>fib(10)</code> computes <code>fib(9)</code> and <code>fib(8)</code>, and <code>fib(9)</code> computes <code>fib(8)</code> and <code>fib(7)</code>, and so on. As a result, the value for each value in the series gets computed many, many times. Memoising <code>fib()</code> makes the implementation much faster because each value is computed only once.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fib &lt;- function(n) &#123;</span><br><span class="line">  if (n &lt; 2) return(1)</span><br><span class="line">  fib(n - 2) + fib(n - 1)</span><br><span class="line">&#125;</span><br><span class="line">system.time(fib(23))</span><br><span class="line">system.time(fib(24))</span><br><span class="line"></span><br><span class="line">fib2 &lt;- memoise(function(n) &#123;</span><br><span class="line">  if (n &lt; 2) return(1)</span><br><span class="line">  fib2(n - 2) + fib2(n - 1)</span><br><span class="line">&#125;)</span><br><span class="line">system.time(fib2(23))</span><br><span class="line">system.time(fib2(24))</span><br></pre></td></tr></table></figure>
<p>It doesn’t make sense to memoise all functions. For example, a memoised random number generator is no longer random:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runifm &lt;- memoise(runif)</span><br><span class="line">runifm(5)</span><br><span class="line">runifm(5)</span><br></pre></td></tr></table></figure>
<p>Once we understand <code>memoise()</code>, it’s straightforward to apply to our problem:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download &lt;- dot\_every(10, memoise(delay\_by(1, download\_file)))</span><br></pre></td></tr></table></figure>
<p>This gives a function that we can easily use with <code>lapply()</code>. However, if something goes wrong with the loop inside <code>lapply()</code>, it can be difficult to tell what’s going on. The next section will show how we can use FOs to pull back the curtain and look inside.</p>
<h3 id="Capturing-function-invocations"><a href="#Capturing-function-invocations" class="headerlink" title="Capturing function invocations"></a><a href="id=&quot;tee&quot;">Capturing function invocations</a></h3><p>One challenge with functionals is that it can be hard to see what’s going on inside of them. It’s not easy to pry open their internals like it is with a for loop. Fortunately we can use FOs to peer behind the curtain with <code>tee()</code>.</p>
<p><code>tee()</code>, defined below, has three arguments, all functions: <code>f</code>, the function to modify; <code>on_input</code>, a function that’s called with the inputs to <code>f</code>; and <code>on_output</code>, a function that’s called with the output from <code>f</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ignore &lt;- function(...) NULL</span><br><span class="line">tee &lt;- function(f, on_input = ignore, on_output = ignore) &#123;</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    on_input(...)</span><br><span class="line">    output &lt;- f(...)</span><br><span class="line">    on_output(output)</span><br><span class="line">    output</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(The function is inspired by the unix shell command <code>tee</code>, which is used to split up streams of file operations so that you can both display what’s happening and save intermediate results to a file.)</p>
<p>We can use <code>tee()</code> to look inside the <code>uniroot()</code> functional, and see how it iterates its way to a solution. The following example finds where <code>x</code> and <code>cos(x)</code> intersect:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">g &lt;- function(x) cos(x) - x</span><br><span class="line">zero &lt;- uniroot(g, c(-5, 5))</span><br><span class="line">show_x &lt;- function(x, ...) cat(sprintf(&quot;%+.08f&quot;, x), &quot;\n&quot;)</span><br><span class="line"></span><br><span class="line"># The location where the function is evaluated:</span><br><span class="line">zero &lt;- uniroot(tee(g, on_input = show_x), c(-5, 5))</span><br><span class="line"># The value of the function:</span><br><span class="line">zero &lt;- uniroot(tee(g, on_output = show_x), c(-5, 5))</span><br></pre></td></tr></table></figure>
<p><code>cat()</code> allows us to see what’s happening as the function runs, but it doesn’t give us a way to work with the values after the function as completed. To do that, we could capture the sequence of calls by creating a function, <code>remember()</code>, that records every argument called and retrieves them when coerced into a list. The small amount of S3 code needed is explained in <a href="#s3">S3</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">remember &lt;- function() &#123;</span><br><span class="line">  memory &lt;- list()</span><br><span class="line">  f &lt;- function(...) &#123;</span><br><span class="line">    # This is inefficient!</span><br><span class="line">    memory &lt;&lt;- append(memory, list(...))</span><br><span class="line">    invisible()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  structure(f, class = &quot;remember&quot;)</span><br><span class="line">&#125;</span><br><span class="line">as.list.remember &lt;- function(x, ...) &#123;</span><br><span class="line">  environment(x)$memory</span><br><span class="line">&#125;</span><br><span class="line">print.remember &lt;- function(x, ...) &#123;</span><br><span class="line">  cat(&quot;Remembering...\n&quot;)</span><br><span class="line">  str(as.list(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we can draw a picture showing how uniroot zeroes in on the final answer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">locs &lt;- remember()</span><br><span class="line">vals &lt;- remember()</span><br><span class="line">zero &lt;- uniroot(tee(g, locs, vals), c(-5, 5))</span><br><span class="line">x &lt;- unlist(as.list(locs))</span><br><span class="line">error &lt;- unlist(as.list(vals))</span><br><span class="line">plot(x, type = &quot;b&quot;); abline(h = 0.739, col = &quot;grey50&quot;)</span><br><span class="line">plot(error, type = &quot;b&quot;); abline(h = 0, col = &quot;grey50&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="Laziness"><a href="#Laziness" class="headerlink" title="Laziness"></a>Laziness</h3><p>The function operators we’ve seen so far follow a common pattern:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">funop &lt;- function(f, otherargs) &#123;</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    # maybe do something</span><br><span class="line">    res &lt;- f(...)</span><br><span class="line">    # maybe do something else</span><br><span class="line">    res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Unfortunately there’s a problem with this implementation because function arguments are lazily evaluated: <code>f()</code> may have changed between applying the FO and evaluating the function. This is a particular problem if you’re using a for loop or <code>lapply()</code> to apply multiple function operators. In the following example, we take a list of functions and delay each one. But when we try to evaluate the mean, we get the sum instead.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">funs &lt;- list(mean = mean, sum = sum)</span><br><span class="line">funs_m &lt;- lapply(funs, delay_by, delay = 0.1)</span><br><span class="line"></span><br><span class="line">funs_m$mean(1:10)</span><br></pre></td></tr></table></figure>
<p>We can avoid that problem by explicitly forcing the evaluation of <code>f()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delay_by &lt;- function(delay, f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    Sys.sleep(delay)</span><br><span class="line">    f(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funs_m &lt;- lapply(funs, delay_by, delay = 0.1)</span><br><span class="line">funs_m$mean(1:10)</span><br></pre></td></tr></table></figure>
<p>It’s good practice to do that whenever you create a new FO.</p>
<h3 id="Exercises-31"><a href="#Exercises-31" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Write a FO that logs a time stamp and message to a file every time a    function is run.</li>
<li><p>What does the following function do? What would be a good name for it?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(g) &#123;</span><br><span class="line">  force(g)</span><br><span class="line">  result &lt;- NULL</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    if (is.null(result)) &#123;</span><br><span class="line">      result &lt;&lt;- g(...)</span><br><span class="line">    &#125;</span><br><span class="line">    result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">runif2 &lt;- f(runif)</span><br><span class="line">runif2(5)</span><br><span class="line">runif2(10)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Modify <code>delay_by()</code> so that instead of delaying by a fixed amount of time,    it ensures that a certain amount of time has elapsed since the function    was last called. That is, if you called    <code>g &lt;- delay_by(1, f); g(); Sys.sleep(2); g()</code> there shouldn’t be an    extra delay.</p>
</li>
<li>Write <code>wait_until()</code> which delays execution until a specific time.</li>
<li><p>There are three places we could have added a memoise call: why did we    choose the one we did?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">download &lt;- memoise(dot_every(10, delay_by(1, download_file)))</span><br><span class="line">download &lt;- dot_every(10, memoise(delay_by(1, download_file)))</span><br><span class="line">download &lt;- dot_every(10, delay_by(1, memoise(download_file)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Why is the <code>remember()</code> function inefficient? How could you implement it    in more efficient way?</p>
</li>
<li><p>Why does the following code, from    <a href="http://stackoverflow.com/questions/8440675" target="_blank" rel="external">stackoverflow</a>, not do what you expect?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># return a linear function with slope a and intercept b.</span><br><span class="line">f &lt;- function(a, b) function(x) a * x + b</span><br><span class="line"></span><br><span class="line"># create a list of functions with different parameters.</span><br><span class="line">fs &lt;- Map(f, a = c(0, 1), b = c(0, 1))</span><br><span class="line"></span><br><span class="line">fs[[1]](3)</span><br><span class="line"># should return 0 * 3 + 0 = 0</span><br></pre></td></tr></table></figure>
<p>How can you modify <code>f</code> so that it works correctly?</p>
</li>
</ol>
<h2 id="Output-FOs"><a href="#Output-FOs" class="headerlink" title="Output FOs"></a><a href="id=&quot;output-fos&quot;">Output FOs</a></h2><p>The next step up in complexity is to modify the output of a function. This could be quite simple, or it could fundamentally change the operation of the function by returning something completely different to its usual output. In this section you’ll learn about two simple modifications, <code>Negate()</code> and <code>failwith()</code>, and two fundamental modifications, <code>capture_it()</code> and <code>time_it()</code>.</p>
<h3 id="Minor-modifications"><a href="#Minor-modifications" class="headerlink" title="Minor modifications"></a>Minor modifications</h3><p><code>base::Negate()</code> and <code>plyr::failwith()</code> offer two minor, but useful, modifications of a function that are particularly handy in conjunction with functionals.</p>
<p><code>Negate()</code> takes a function that returns a logical vector (a predicate function), and returns the negation of that function. This can be a useful shortcut when a function returns the opposite of what you need. The essence of <code>Negate()</code> is very simple:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Negate &lt;- function(f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) !f(...)</span><br><span class="line">&#125;</span><br><span class="line">(Negate(is.null))(NULL)</span><br></pre></td></tr></table></figure>
<p>I often use this idea to make a function, <code>compact()</code>, that removes all null elements from a list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compact &lt;- function(x) Filter(Negate(is.null), x)</span><br></pre></td></tr></table></figure>
<p><code>plyr::failwith()</code> turns a function that throws an error into a function that returns a default value when there’s an error. Again, the essence of <code>failwith()</code> is simple; it’s just a wrapper around <code>try()</code>, the function that captures errors and allows execution to continue.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">failwith &lt;- function(default = NULL, f, quiet = FALSE) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    out &lt;- default</span><br><span class="line">    try(out &lt;- f(...), silent = quiet)</span><br><span class="line">    out</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">log(&quot;a&quot;)</span><br><span class="line">failwith(NA, log)(&quot;a&quot;)</span><br><span class="line">failwith(NA, log, quiet = TRUE)(&quot;a&quot;)</span><br></pre></td></tr></table></figure>
<p>(If you haven’t seen <code>try()</code> before, it’s discussed in more detail in <a href="#try">exceptions and debugging</a>.)</p>
<p><code>failwith()</code> is very useful in conjunction with functionals: instead of the failure propagating and terminating the higher-level loop, you can complete the iteration and then find out what went wrong. For example, imagine you’re fitting a set of generalised linear models (GLMs) to a list of data frames. While GLMs can sometimes fail because of optimisation problems, you’d still want to be able to try to fit all the models, and later look back at those that failed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># If any model fails, all models fail to fit:</span><br><span class="line">models &lt;- lapply(datasets, glm, formula = y ~ x1 + x2 * x3)</span><br><span class="line"># If a model fails, it will get a NULL value</span><br><span class="line">models &lt;- lapply(datasets, failwith(NULL, glm),</span><br><span class="line">  formula = y ~ x1 + x2 * x3)</span><br><span class="line"></span><br><span class="line"># remove failed models (NULLs) with compact</span><br><span class="line">ok_models &lt;- compact(models)</span><br><span class="line"># extract the datasets corresponding to failed models</span><br><span class="line">failed_data &lt;- datasets[vapply(models, is.null, logical(1))]</span><br></pre></td></tr></table></figure>
<p>I think this is a great example of the power of combining functionals and function operators: it lets you succinctly express what you need to solve a common data analysis problem.</p>
<h3 id="Changing-what-a-function-does"><a href="#Changing-what-a-function-does" class="headerlink" title="Changing what a function does"></a>Changing what a function does</h3><p>Other output function operators can have a more profound effect on the operation of the function. Instead of returning the original return value, we can return some other effect of the function evaluation. Here are two examples:</p>
<ul>
<li><p>Return text that the function <code>print()</code>ed:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">capture_it &lt;- function(f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    capture.output(f(...))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">str_out &lt;- capture_it(str)</span><br><span class="line">str(1:10)</span><br><span class="line">str_out(1:10)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Return how long a function took to run:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time_it &lt;- function(f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    system.time(f(...))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><code>time_it()</code> allows us to rewrite some of the code from the functionals chapter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">compute_mean &lt;- list(</span><br><span class="line">  base = function(x) mean(x),</span><br><span class="line">  sum = function(x) sum(x) / length(x)</span><br><span class="line">)</span><br><span class="line">x &lt;- runif(1e6)</span><br><span class="line"></span><br><span class="line"># Previously we used an anonymous function to time execution:</span><br><span class="line"># lapply(compute_mean, function(f) system.time(f(x)))</span><br><span class="line"></span><br><span class="line"># Now we can compose function operators:</span><br><span class="line">call_fun &lt;- function(f, ...) f(...)</span><br><span class="line">lapply(compute_mean, time_it(call_fun), x)</span><br></pre></td></tr></table></figure>
<p>In this example, there’s not a huge benefit to using function operators, because the composition is simple and we’re applying the same operator to each function. Generally, using function operators is most effective when you are using multiple operators or if the gap between creating them and using them is large.</p>
<h3 id="Exercises-32"><a href="#Exercises-32" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Create a <code>negative()</code> FO that flips the sign of the output of the    function to which it is applied.</li>
<li>The <code>evaluate</code> package makes it easy to capture all the outputs (results,    text, messages, warnings, errors, and plots) from an expression. Create a    function like <code>capture_it()</code> that also captures the warnings and errors    generated by a function.</li>
<li>Create a FO that tracks files created or deleted in the working directory    (Hint: use <code>dir()</code> and <code>setdiff()</code>.) What other global effects of    functions might you want to track?</li>
</ol>
<h2 id="Input-FOs"><a href="#Input-FOs" class="headerlink" title="Input FOs"></a><a href="id=&quot;input-fos&quot;">Input FOs</a></h2><p>The next step up in complexity is to modify the inputs of a function. Again, you can modify how a function works in a minor way (e.g., setting default argument values), or in a major way (e.g., converting inputs from scalars to vectors, or vectors to matrices).</p>
<h3 id="Prefilling-function-arguments-partial-function-application"><a href="#Prefilling-function-arguments-partial-function-application" class="headerlink" title="Prefilling function arguments: partial function application"></a>Prefilling function arguments: partial function application</h3><p>A common use of anonymous functions is to make a variant of a function that has certain arguments “filled in” already. This is called “partial function application”, and is implemented by <code>pryr::partial()</code>. Once you have read <a href="#metaprogramming">metaprogramming</a>, I encourage you to read the source code for <code>partial()</code> and figure out how it works — it’s only 5 lines of code!</p>
<p><code>partial()</code> allows us to replace code like</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(a) g(a, b = 1)</span><br><span class="line">compact &lt;- function(x) Filter(Negate(is.null), x)</span><br><span class="line">Map(function(x, y) f(x, y, zs), xs, ys)</span><br></pre></td></tr></table></figure>
<p>with</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- partial(g, b = 1)</span><br><span class="line">compact &lt;- partial(Filter, Negate(is.null))</span><br><span class="line">Map(partial(f, zs = zs), xs, ys)</span><br></pre></td></tr></table></figure>
<p>We can use this idea to simplify the code used when working with lists of functions. Instead of:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">funs2 &lt;- list(</span><br><span class="line">  sum = function(...) sum(..., na.rm = TRUE),</span><br><span class="line">  mean = function(...) mean(..., na.rm = TRUE),</span><br><span class="line">  median = function(...) median(..., na.rm = TRUE)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>we can write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">funs2 &lt;- list(</span><br><span class="line">  sum = partial(sum, na.rm = TRUE),</span><br><span class="line">  mean = partial(mean, na.rm = TRUE),</span><br><span class="line">  median = partial(median, na.rm = TRUE)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Using partial function application is a straightforward task in many functional programming languages, but it’s not entirely clear how it should interact with R’s lazy evaluation rules. The approach <code>plyr::partial()</code> takes is to create a function that is as similar as possible to the anonymous function that you’d create by hand. Peter Meilstrup takes a different approach in his <a href="https://github.com/crowding/ptools/" target="_blank" rel="external">ptools package</a>. If you’re interested in the topic, you might want to read about the binary operators he created: <code>%()%</code>, <code>%&gt;&gt;%</code>, and <code>%&lt;&lt;%</code>.</p>
<h3 id="Changing-input-types"><a href="#Changing-input-types" class="headerlink" title="Changing input types"></a>Changing input types</h3><p>It’s also possible to make a major change to a function’s input, making a function work with fundamentally different types of data. There are a few existing functions that work along these lines:</p>
<ul>
<li><p><code>base::Vectorize()</code> converts a scalar function to a vector function. It takes    a non-vectorised function and vectorises it with respect to the arguments    specified in the <code>vectorize.args</code> argument. This doesn’t give you any    magical performance improvements, but it’s useful if you want a quick and    dirty way of making a vectorised function.     A mildly useful extension to <code>sample()</code> would be to vectorize it with    respect to size. Doing so would allow you to generate multiple samples in    one call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sample2 &lt;- Vectorize(sample, &quot;size&quot;, SIMPLIFY = FALSE)</span><br><span class="line">str(sample2(1:5, c(1, 1, 3)))</span><br><span class="line">str(sample2(1:5, 5:3))</span><br></pre></td></tr></table></figure>
<p>In this example we have used <code>SIMPLIFY = FALSE</code> to ensure that our newly    vectorised function always returns a list. This is usually what you want.</p>
</li>
<li><p><code>splat()</code> converts a function that takes multiple arguments to a function    that takes a single list of arguments.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">splat &lt;- function (f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(args) &#123;</span><br><span class="line">    do.call(f, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> This is useful if you want to invoke a function with varying arguments:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- c(NA, runif(100), 1000)</span><br><span class="line">args &lt;- list(</span><br><span class="line">  list(x),</span><br><span class="line">  list(x, na.rm = TRUE),</span><br><span class="line">  list(x, na.rm = TRUE, trim = 0.1)</span><br><span class="line">)</span><br><span class="line">lapply(args, splat(mean))</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>plyr::colwise()</code> converts a vector function to one that works with data   frames:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">median(mtcars)</span><br><span class="line">median(mtcars$mpg)</span><br><span class="line">plyr::colwise(median)(mtcars)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Exercises-33"><a href="#Exercises-33" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Our previous <code>download()</code> function only downloads a single file. How can    you use <code>partial()</code> and <code>lapply()</code> to create a function that downloads    multiple files at once? What are the pros and cons of using <code>partial()</code> vs.    writing a function by hand?</li>
<li>Read the source code for <code>plyr::colwise()</code>. How does the code work? What    are <code>colwise()</code>‘s three main tasks? How could you make <code>colwise()</code> simpler    by implementing each task as a function operator? (Hint: think about    <code>partial()</code>.)</li>
<li>Write FOs that convert a function to return a matrix instead of a data    frame, or a data frame instead of a matrix. If you understand S3,    call them <code>as.data.frame.function()</code> and <code>as.matrix.function()</code>.</li>
<li>You’ve seen five functions that modify a function to change its output    from one form to another. What are they? Draw a table of the various    combinations of types of outputs: what should go in the rows and what    should go in the columns? What function operators might you want to write    to fill in the missing cells? Come up with example use cases.</li>
<li>Look at all the examples of using an anonymous function to partially    apply a function in this and the previous chapter. Replace the anonymous    function with <code>partial()</code>. What do you think of the result? Is it easier or    harder to read?</li>
</ol>
<h2 id="Combining-FOs"><a href="#Combining-FOs" class="headerlink" title="Combining FOs"></a><a href="id=&quot;combining-fos&quot;">Combining FOs</a></h2><p>Besides just operating on single functions, function operators can take multiple functions as input. One simple example of this is <code>plyr::each()</code>. It takes a list of vectorised functions and combines them into a single function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">summaries &lt;- plyr::each(mean, sd, median)</span><br><span class="line">summaries(1:10)</span><br></pre></td></tr></table></figure>
<p>Two more complicated examples are combining functions through composition, or through boolean algebra. These capabilities are the glue that allow us to join multiple functions together.</p>
<h3 id="Function-composition"><a href="#Function-composition" class="headerlink" title="Function composition"></a>Function composition</h3><p>An important way of combining functions is through composition: <code>f(g(x))</code>. Composition takes a list of functions and applies them sequentially to the input. It’s a replacement for the common pattern of anonymous function that chains multiple functions together to get the result you want:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sapply(mtcars, function(x) length(unique(x)))</span><br></pre></td></tr></table></figure>
<p>A simple version of compose looks like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compose &lt;- function(f, g) &#123;</span><br><span class="line">  function(...) f(g(...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(<code>pryr::compose()</code> provides a more full-featured alternative that can accept multiple functions and is used for the rest of the examples.)</p>
<p>This allows us to write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sapply(mtcars, compose(length, unique))</span><br></pre></td></tr></table></figure>
<p>Mathematically, function composition is often denoted with the infix operator, o, <code>(f o g)(x)</code>. Haskell, a popular functional programming language, uses <code>.</code> to the same end. In R, we can create our own infix composition function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;%o%&quot; &lt;- compose</span><br><span class="line">sapply(mtcars, length %o% unique)</span><br><span class="line"></span><br><span class="line">sqrt(1 + 8)</span><br><span class="line">compose(sqrt, `+`)(1, 8)</span><br><span class="line">(sqrt %o% `+`)(1, 8)</span><br></pre></td></tr></table></figure>
<p>Compose also allows for a very succinct implementation of <code>Negate</code>, which is just a partially evaluated version of <code>compose()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Negate &lt;- partial(compose, `!`)</span><br></pre></td></tr></table></figure>
<p>We could implement the population standard deviation with function composition:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">square &lt;- function(x) x^2</span><br><span class="line">deviation &lt;- function(x) x - mean(x)</span><br><span class="line"></span><br><span class="line">sd2 &lt;- sqrt %o% mean %o% square %o% deviation</span><br><span class="line">sd2(1:10)</span><br></pre></td></tr></table></figure>
<p>This type of programming is called tacit or point-free programming. (The term point-free comes from the use of “point” to refer to values in topology; this style is also derogatorily known as pointless). In this style of programming, you don’t explicitly refer to variables. Instead, you focus on the high-level composition of functions rather than the low-level flow of data. The focus is on what’s being done, not on objects it’s being done to. Since we’re using only functions and not parameters, we use verbs and not nouns. This style is common in Haskell, and is the typical style in stack based programming languages like Forth and Factor. It’s not a terribly natural or elegant style in R, but it is fun to play with.</p>
<p><code>compose()</code> is particularly useful in conjunction with <code>partial()</code>, because <code>partial()</code> allows you to supply additional arguments to the functions being composed. One nice side effect of this style of programming is that it keeps a function’s arguments near its name. This is important because as the size of the chunk of code you have to hold in your head grows code becomes harder to understand.</p>
<p>Below I take the example from the first section of the chapter and modify it to use the two styles of function composition described above. Both results are longer than the original code, but they may be easier to understand because the function and its arguments are closer together. Note that we still have to read them from right to left (bottom to top): the first function called is the last one written. We could define <code>compose()</code> to work in the opposite direction, but in the long run, this is likely to lead to confusion since we’d create a small part of the langugage that reads differently from every other part.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">download &lt;- dot_every(10, memoise(delay_by(1, download_file)))</span><br><span class="line"></span><br><span class="line">download &lt;- pryr::compose(</span><br><span class="line">  partial(dot_every, 10),</span><br><span class="line">  memoise,</span><br><span class="line">  partial(delay_by, 1),</span><br><span class="line">  download_file</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">download &lt;- partial(dot_every, 10) %o%</span><br><span class="line">  memoise %o%</span><br><span class="line">  partial(delay_by, 1) %o%</span><br><span class="line">  download_file</span><br></pre></td></tr></table></figure>
<h3 id="Logical-predicates-and-boolean-algebra"><a href="#Logical-predicates-and-boolean-algebra" class="headerlink" title="Logical predicates and boolean algebra"></a>Logical predicates and boolean algebra</h3><p>When I use <code>Filter()</code> and other functionals that work with logical predicates, I often find myself using anonymous functions to combine multiple conditions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Filter(function(x) is.character(x) || is.factor(x), iris)</span><br></pre></td></tr></table></figure>
<p>As an alternative, we could define function operators that combine logical predicates:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">and &lt;- function(f1, f2) &#123;</span><br><span class="line">  force(f1); force(f2)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    f1(...) &amp;&amp; f2(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">or &lt;- function(f1, f2) &#123;</span><br><span class="line">  force(f1); force(f2)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    f1(...) || f2(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">not &lt;- function(f) &#123;</span><br><span class="line">  force(f)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    !f(...)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This would allow us to write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Filter(or(is.character, is.factor), iris)</span><br><span class="line">Filter(not(is.numeric), iris)</span><br></pre></td></tr></table></figure>
<p>And we now have a boolean algebra on functions, not on the results of functions.</p>
<h3 id="Exercises-34"><a href="#Exercises-34" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Implement your own version of <code>compose()</code> using <code>Reduce</code> and <code>%o%</code>. For    bonus points, do it without calling <code>function</code>.</li>
<li>Extend <code>and()</code> and <code>or()</code> to deal with any number of input functions. Can    you do it with <code>Reduce()</code>? Can you keep them lazy (e.g., for <code>and()</code>, the    function returns once it sees the first <code>FALSE</code>)?</li>
<li>Implement the <code>xor()</code> binary operator. Implement it using the existing    <code>xor()</code> function. Implement it as a combination of <code>and()</code> and <code>or()</code>. What    are the advantages and disadvantages of each approach? Also think about    what you’ll call the resulting function to avoid a clash with the existing    <code>xor()</code> function, and how you might change the names of <code>and()</code>, <code>not()</code>,    and <code>or()</code> to keep them consistent.</li>
<li>Above, we implemented boolean algebra for functions that return a logical    function. Implement elementary algebra (<code>plus()</code>, <code>minus()</code>, <code>multiply()</code>,    <code>divide()</code>, <code>exponentiate()</code>, <code>log()</code>) for functions that return numeric    vectors.</li>
</ol>
<hr>
<h1 id="Non-standard-evaluation"><a href="#Non-standard-evaluation" class="headerlink" title="Non-standard evaluation"></a><a href="id=&quot;nse&quot;">Non-standard evaluation</a></h1><blockquote>
<p>“Flexibility in syntax, if it does not lead to ambiguity, would seem a<br>reasonable thing to ask of an interactive programming language.”</p>
<p>— Kent Pitman</p>
</blockquote>
<p>R has powerful tools for computing not only on values, but also on the actions that lead to those values. If you’re coming from another programming language, they are one of the most surprising features of R. Consider the following simple snippet of code that plots a sine curve:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- seq(0, 2 * pi, length = 100)</span><br><span class="line">sinx &lt;- sin(x)</span><br><span class="line">plot(x, sinx, type = &quot;l&quot;)</span><br></pre></td></tr></table></figure>
<p>Look at the labels on the axes. How did R know that the variable on the x axis is called <code>x</code> and the variable on the y axis is called <code>sinx</code>? In most programming languages, you can only access the values of a function’s arguments. In R, you can also access the code used to compute them. This makes it possible to evaluate code in non-standard ways: to use what is known as <strong>non-standard evaluation</strong>, or NSE for short. NSE is particularly useful for functions when doing interactive data analysis because it can dramatically reduce the amount of typing.</p>
<h5 id="Outline-9"><a href="#Outline-9" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#capturing-expressions">Capturing expressions</a> teaches you how to  capture unevaluated expressions using <code>substitute()</code>.</li>
<li><a href="#subset">Non-standard evaluation</a> shows you <code>subset()</code> works with  combining <code>substitute()</code> with <code>eval()</code> to allow you to succinctly select  rows from a data frame.</li>
<li><a href="#scoping-issues">Scoping issues</a> discusses scoping issues specific to  NSE, and will show you how to resolve them.</li>
<li><a href="#calling-from-another-function">Calling from another function</a> shows why  every function that uses NSE should have an escape hatch, a version that  uses regular evaluation.</li>
<li><a href="#substitute">Substitute</a> teaches you how to use <code>substitute()</code> to work  with functions that don’t have an escape hatch.</li>
<li><a href="#nse-downsides">The downsides</a> finishes off the chapter with a discussion  of the downsides of NSE.</li>
</ul>
<h5 id="Prerequisites-5"><a href="#Prerequisites-5" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>Before reading this chapter, make sure you’re familiar with environments (<a href="#environments">Environments</a>) and lexical scoping (<a href="#lexical-scoping">Lexical scoping</a>). You’ll also need to install the pryr package with <code>install.packages(&quot;pryr&quot;)</code>. Some exercises require the plyr package, which you can install from CRAN with <code>install.packages(&quot;plyr&quot;)</code>.</p>
<h2 id="Capturing-expressions"><a href="#Capturing-expressions" class="headerlink" title="Capturing expressions"></a><a href="id=&quot;capturing-expressions&quot;">Capturing expressions</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_uses(&quot;package:base&quot;, c(&quot;substitute&quot;, &quot;deparse&quot;))</span><br></pre></td></tr></table></figure>
<p><code>substitute()</code> makes non-standard evaluation possible. It looks at a function argument and instead of seeing the value, it sees the code used to compute the value:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) &#123;</span><br><span class="line">  substitute(x)</span><br><span class="line">&#125;</span><br><span class="line">f(1:10)</span><br><span class="line"></span><br><span class="line">x &lt;- 10</span><br><span class="line">f(x)</span><br><span class="line"></span><br><span class="line">y &lt;- 13</span><br><span class="line">f(x + y^2)</span><br></pre></td></tr></table></figure>
<p>For now, we won’t worry about exactly what <code>substitute()</code> returns (that’s the topic of <a href="#metaprogramming">the following chapter</a>), but we’ll call it an expression.</p>
<p><code>substitute()</code> works because function arguments are represented by a special type of object called a <strong>promise</strong>. A promise captures the expression needed to compute the value and the environment in which to compute it. You’re not normally aware of promises because the first time you access a promise its code is evaluated in its environment, yielding a value.</p>
<p><code>substitute()</code> is often paired with <code>deparse()</code>. That function takes the result of <code>substitute()</code>, an expression, and turns it into a character vector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g &lt;- function(x) deparse(substitute(x))</span><br><span class="line">g(1:10)</span><br><span class="line">g(x)</span><br><span class="line">g(x + y^2)</span><br></pre></td></tr></table></figure>
<p>There are a lot of functions in Base R that use these ideas. Some use them to avoid quotes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line"># the same as</span><br><span class="line">library(&quot;ggplot2&quot;)</span><br></pre></td></tr></table></figure>
<p>Other functions, like <code>plot.default()</code>, use them to provide default labels. <code>data.frame()</code> labels variables with the expression used to compute them:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:4</span><br><span class="line">y &lt;- letters[1:4]</span><br><span class="line">names(data.frame(x, y))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm(x, y)</span><br></pre></td></tr></table></figure>
<p>We’ll learn about the ideas that underlie all these examples by looking at one particularly useful application of NSE: <code>subset()</code>.</p>
<h3 id="Exercises-35"><a href="#Exercises-35" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>One important feature of <code>deparse()</code> to be aware of when programming is that    it can return multiple strings if the input is too long. For example, the    following call produces a vector of length two:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g(a + b + c + d + e + f + g + h + i + j + k + l + m +</span><br><span class="line">  n + o + p + q + r + s + t + u + v + w + x + y + z)</span><br></pre></td></tr></table></figure>
<p>Why does this happen? Carefully read the documentation for <code>?deparse</code>. Can you write a    wrapper around <code>deparse()</code> so that it always returns a single string?</p>
</li>
<li><p>Why does <code>as.Date.default()</code> use <code>substitute()</code> and <code>deparse()</code>?    Why does <code>pairwise.t.test()</code> use them? Read the source code.</p>
</li>
<li><p><code>pairwise.t.test()</code> assumes that <code>deparse()</code> always returns a length one    character vector. Can you construct an input that violates this expectation?    What happens?</p>
</li>
<li><p><code>f()</code>, defined above, just calls <code>substitute()</code>. Why can’t we use it    to define <code>g()</code>? In other words, what will the following code return?    First make a prediction. Then run the code and think about the results.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) substitute(x)</span><br><span class="line">g &lt;- function(x) deparse(f(x))</span><br><span class="line">g(1:10)</span><br><span class="line">g(x)</span><br><span class="line">g(x + y ^ 2 / z + exp(a * sin(b)))</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Non-standard-evaluation-in-subset"><a href="#Non-standard-evaluation-in-subset" class="headerlink" title="Non-standard evaluation in subset"></a><a href="id=&quot;subset&quot;">Non-standard evaluation in subset</a></h2><p>While printing out the code supplied to an argument value can be useful, we can actually do more with the unevaluated code. Take <code>subset()</code>, for example. It’s a useful interactive shortcut for subsetting data frames: instead of repeating the name of data frame many times, you can save some typing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sample_df &lt;- data.frame(a = 1:5, b = 5:1, c = c(5, 3, 1, 4, 1))</span><br><span class="line"></span><br><span class="line">subset(sample_df, a &gt;= 4)</span><br><span class="line"># equivalent to:</span><br><span class="line"># sample_df[sample_df$a &gt;= 4, ]</span><br><span class="line"></span><br><span class="line">subset(sample_df, b == c)</span><br><span class="line"># equivalent to:</span><br><span class="line"># sample_df[sample_df$b == sample_df$c, ]</span><br></pre></td></tr></table></figure>
<p><code>subset()</code> is special because it implements different scoping rules: the expressions <code>a &gt;= 4</code> or <code>b == c</code> are evaluated in the specified data frame rather than in the current or global environments. This is the essence of non-standard evaluation.</p>
<p>How does <code>subset()</code> work? We’ve already seen how to capture an argument’s expression rather than its result, so we just need to figure out how to evaluate that expression in the right context. Specifically, we want <code>x</code> to be interpreted as <code>sample_df$x</code>, not <code>globalenv()$x</code>. To do this, we need <code>eval()</code>. This function takes an expression and evaluates it in the specified environment.</p>
<p>Before we can explore <code>eval()</code>, we need one more useful function: <code>quote()</code>. It captures an unevaluated expression like <code>substitute()</code>, but doesn’t do any of the advanced transformations that can make <code>substitute()</code> confusing. <code>quote()</code> always returns its input as is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quote(1:10)</span><br><span class="line">quote(x)</span><br><span class="line">quote(x + y^2)</span><br></pre></td></tr></table></figure>
<p>We need <code>quote()</code> to experiment with <code>eval()</code> because <code>eval()</code>‘s first argument is an expression. So if you only provide one argument, it will evaluate the expression in the current environment. This makes <code>eval(quote(x))</code> exactly equivalent to <code>x</code>, regardless of what <code>x</code> is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eval(quote(x &lt;- 1))</span><br><span class="line">eval(quote(x))</span><br><span class="line"></span><br><span class="line">eval(quote(y))</span><br></pre></td></tr></table></figure>
<p><code>quote()</code> and <code>eval()</code> are opposites. In the example below, each <code>eval()</code> peels off one layer of <code>quote()</code>‘s.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">quote(2 + 2)</span><br><span class="line">eval(quote(2 + 2))</span><br><span class="line"></span><br><span class="line">quote(quote(2 + 2))</span><br><span class="line">eval(quote(quote(2 + 2)))</span><br><span class="line">eval(eval(quote(quote(2 + 2))))</span><br></pre></td></tr></table></figure>
<p><code>eval()</code>‘s second argument specifies the environment in which the code is executed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">eval(quote(x))</span><br><span class="line"></span><br><span class="line">e &lt;- new.env()</span><br><span class="line">e$x &lt;- 20</span><br><span class="line">eval(quote(x), e)</span><br></pre></td></tr></table></figure>
<p>Because lists and data frames bind names to values in a similar way to environments, <code>eval()</code>‘s second argument need not be limited to an environment: it can also be a list or a data frame.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(quote(x), list(x = 30))</span><br><span class="line">eval(quote(x), data.frame(x = 40))</span><br></pre></td></tr></table></figure>
<p>This gives us one part of <code>subset()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(quote(a &gt;= 4), sample_df)</span><br><span class="line">eval(quote(b == c), sample_df)</span><br></pre></td></tr></table></figure>
<p>A common mistake when using <code>eval()</code> is to forget to quote the first argument. Compare the results below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 10</span><br><span class="line">eval(quote(a), sample_df)</span><br><span class="line">eval(a, sample_df)</span><br><span class="line"></span><br><span class="line">eval(quote(b), sample_df)</span><br><span class="line">eval(b, sample_df)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm(a)</span><br></pre></td></tr></table></figure>
<p>We can use <code>eval()</code> and <code>substitute()</code> to write <code>subset()</code>. We first capture the call representing the condition, then we evaluate it in the context of the data frame and, finally, we use the result for subsetting:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subset2 &lt;- function(x, condition) &#123;</span><br><span class="line">  condition_call &lt;- substitute(condition)</span><br><span class="line">  r &lt;- eval(condition_call, x)</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br><span class="line">subset2(sample_df, a &gt;= 4)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-36"><a href="#Exercises-36" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Predict the results of the following lines of code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eval(quote(eval(quote(eval(quote(2 + 2))))))</span><br><span class="line">eval(eval(quote(eval(quote(eval(quote(2 + 2)))))))</span><br><span class="line">quote(eval(quote(eval(quote(eval(quote(2 + 2)))))))</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>subset2()</code> has a bug if you use it with a single column data frame.    What should the following code return? How can you modify <code>subset2()</code>    so it returns the correct type of object?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample_df2 &lt;- data.frame(x = 1:10)</span><br><span class="line">subset2(sample_df2, x &gt; 8)</span><br></pre></td></tr></table></figure>
</li>
<li><p>The real subset function (<code>subset.data.frame()</code>) removes missing    values in the condition. Modify <code>subset2()</code> to do the same: drop the    offending rows.</p>
</li>
<li>What happens if you use <code>quote()</code> instead of <code>substitute()</code> inside of    <code>subset2()</code>?</li>
<li><p>The second argument in <code>subset()</code> allows you to select variables. It    treats variable names as if they were positions. This allows you to do    things like <code>subset(mtcars, , -cyl)</code> to drop the cylinder variable, or    <code>subset(mtcars, , disp:drat)</code> to select all the variables between <code>disp</code>    and <code>drat</code>. How does this work? I’ve made this easier to understand by    extracting it out into its own function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select &lt;- function(df, vars) &#123;</span><br><span class="line">  vars &lt;- substitute(vars)</span><br><span class="line">  var_pos &lt;- setNames(as.list(seq_along(df)), names(df))</span><br><span class="line">  pos &lt;- eval(vars, var_pos)</span><br><span class="line">  df[, pos, drop = FALSE]</span><br><span class="line">&#125;</span><br><span class="line">select(mtcars, -cyl)</span><br></pre></td></tr></table></figure>
</li>
<li><p>What does <code>evalq()</code> do? Use it to reduce the amount of typing for the    examples above that use both <code>eval()</code> and <code>quote()</code>.</p>
</li>
</ol>
<h2 id="Scoping-issues"><a href="#Scoping-issues" class="headerlink" title="Scoping issues"></a><a href="id=&quot;scoping-issues&quot;">Scoping issues</a></h2><p>It certainly looks like our <code>subset2()</code> function works. But since we’re working with expressions instead of values, we need to test things more extensively. For example, the following applications of <code>subset2()</code> should all return the same value because the only difference between them is the name of a variable:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- 4</span><br><span class="line">x &lt;- 4</span><br><span class="line">condition &lt;- 4</span><br><span class="line">condition_call &lt;- 4</span><br><span class="line"></span><br><span class="line">subset2(sample_df, a == 4)</span><br><span class="line">subset2(sample_df, a == y)</span><br><span class="line">subset2(sample_df, a == x)</span><br><span class="line">subset2(sample_df, a == condition)</span><br><span class="line">subset2(sample_df, a == condition_call)</span><br></pre></td></tr></table></figure>
<p>What went wrong? You can get a hint from the variable names I’ve chosen: they are all names of variables defined inside <code>subset2()</code>. If <code>eval()</code> can’t find the variable inside the data frame (its second argument), it looks in the environment of <code>subset2()</code>. That’s obviously not what we want, so we need some way to tell <code>eval()</code> where to look if it can’t find the variables in the data frame.</p>
<p>The key is the third argument to <code>eval()</code>: <code>enclos</code>. This allows us to specify a parent (or enclosing) environment for objects that don’t have one (like lists and data frames). If the binding is not found in <code>env</code>, <code>eval()</code> will next look in <code>enclos</code>, and then in the parents of <code>enclos</code>. <code>enclos</code> is ignored if <code>env</code> is a real environment. We want to look for <code>x</code> in the environment from which <code>subset2()</code> was called. In R terminology this is called the <strong>parent frame</strong> and is accessed with <code>parent.frame()</code>. This is an example of <a href="http://en.wikipedia.org/wiki/Scope_%28programming%29#Dynamic_scoping" target="_blank" rel="external">dynamic scope</a>: the values come from the location where the function was called, not where it was defined.</p>
<p>With this modification our function now works:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subset2 &lt;- function(x, condition) &#123;</span><br><span class="line">  condition_call &lt;- substitute(condition)</span><br><span class="line">  r &lt;- eval(condition_call, x, parent.frame())</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- 4</span><br><span class="line">subset2(sample_df, a == x)</span><br></pre></td></tr></table></figure>
<p>Using <code>enclos</code> is just a shortcut for converting a list or data frame to an environment. We can get the same behaviour by using <code>list2env()</code>. It turns a list into an environment with an explicit parent:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">subset2a &lt;- function(x, condition) &#123;</span><br><span class="line">  condition_call &lt;- substitute(condition)</span><br><span class="line">  env &lt;- list2env(x, parent = parent.frame())</span><br><span class="line">  r &lt;- eval(condition_call, env)</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- 5</span><br><span class="line">subset2a(sample_df, a == x)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-37"><a href="#Exercises-37" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><code>plyr::arrange()</code> works similarly to <code>subset()</code>, but instead of selecting    rows, it reorders them. How does it work? What does    <code>substitute(order(...))</code> do? Create a function that does only that    and experiment with it.</li>
<li>What does <code>transform()</code> do? Read the documentation. How does it work?    Read the source code for <code>transform.data.frame()</code>. What does    <code>substitute(list(...))</code> do?</li>
<li><p><code>plyr::mutate()</code> is similar to <code>transform()</code> but it applies the    transformations sequentially so that transformation can refer to columns    that were just created:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df &lt;- data.frame(x = 1:5)</span><br><span class="line">transform(df, x2 = x * x, x3 = x2 * x)</span><br><span class="line">plyr::mutate(df, x2 = x * x, x3 = x2 * x)</span><br></pre></td></tr></table></figure>
<p>How does mutate work? What’s the key difference between <code>mutate()</code> and    <code>transform()</code>?</p>
</li>
<li><p>What does <code>with()</code> do? How does it work? Read the source code for    <code>with.default()</code>. What does <code>within()</code> do? How does it work? Read the    source code for <code>within.data.frame()</code>. Why is the code so much more    complex than <code>with()</code>?</p>
</li>
</ol>
<h2 id="Calling-from-another-function"><a href="#Calling-from-another-function" class="headerlink" title="Calling from another function"></a><a href="id=&quot;calling-from-another-function&quot;">Calling from another function</a></h2><p>Typically, computing on the language is most useful when functions are called directly by users and less useful when they are called by other functions. While <code>subset()</code> saves typing, it’s actually difficult to use non-interactively. For example, imagine we want to create a function that randomly reorders a subset of rows of data. A nice way to do that would be to compose a function that reorders with another that selects. Let’s try that:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">subset2 &lt;- function(x, condition) &#123;</span><br><span class="line">  condition_call &lt;- substitute(condition)</span><br><span class="line">  r &lt;- eval(condition_call, x, parent.frame())</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scramble &lt;- function(x) x[sample(nrow(x)), ]</span><br><span class="line"></span><br><span class="line">subscramble &lt;- function(x, condition) &#123;</span><br><span class="line">  scramble(subset2(x, condition))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>But it doesn’t work:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subscramble(sample_df, a &gt;= 4)</span><br><span class="line"># Error in eval(expr, envir, enclos) : object &apos;a&apos; not found</span><br><span class="line">traceback()</span><br><span class="line">#&gt; 5: eval(expr, envir, enclos)</span><br><span class="line">#&gt; 4: eval(condition_call, x, parent.frame()) at #3</span><br><span class="line">#&gt; 3: subset2(x, condition) at #1</span><br><span class="line">#&gt; 2: scramble(subset2(x, condition)) at #2</span><br><span class="line">#&gt; 1: subscramble(sample_df, a &gt;= 4)</span><br></pre></td></tr></table></figure>
<p>What’s gone wrong? To figure it out, let us <code>debug()</code> <code>subset2()</code> and work through the code line-by-line:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">debugonce(subset2)</span><br><span class="line">subscramble(sample_df, a &gt;= 4)</span><br><span class="line">#&gt; debugging in: subset2(x, condition)</span><br><span class="line">#&gt; debug at #1: &#123;</span><br><span class="line">#&gt;     condition_call &lt;- substitute(condition)</span><br><span class="line">#&gt;     r &lt;- eval(condition_call, x, parent.frame())</span><br><span class="line">#&gt;     x[r, ]</span><br><span class="line">#&gt; &#125;</span><br><span class="line">n</span><br><span class="line">#&gt; debug at #2: condition_call &lt;- substitute(condition)</span><br><span class="line">n</span><br><span class="line">#&gt; debug at #3: r &lt;- eval(condition_call, x, parent.frame())</span><br><span class="line">r &lt;- eval(condition_call, x, parent.frame())</span><br><span class="line">#&gt; Error in eval(expr, envir, enclos) : object &apos;a&apos; not found</span><br><span class="line">condition_call</span><br><span class="line">#&gt; condition</span><br><span class="line">eval(condition_call, x)</span><br><span class="line">#&gt; Error in eval(expr, envir, enclos) : object &apos;a&apos; not found</span><br><span class="line">Q</span><br></pre></td></tr></table></figure>
<p>Can you see what the problem is? <code>condition_call</code> contains the expression <code>condition</code>. So when we evaluate <code>condition_call</code> it also evaluates <code>condition</code>, which has the value <code>a &gt;= 4</code>. However, this can’t be computed because there’s no object called <code>a</code> in the parent environment. But, if <code>a</code> were set in the global environment, even more confusing things can happen:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 4</span><br><span class="line">subscramble(sample_df, a == 4)</span><br><span class="line"></span><br><span class="line">a &lt;- c(1, 1, 4, 4, 4, 4)</span><br><span class="line">subscramble(sample_df, a &gt;= 4)</span><br></pre></td></tr></table></figure>
<p>This is an example of the general tension between functions that are designed for interactive use and functions that are safe to program with. A function that uses <code>substitute()</code> might reduce typing, but it can be difficult to call from another function.</p>
<p>As a developer, you should always provide an escape hatch: an alternative version of the function that uses standard evaluation. In this case, we could write a version of <code>subset2()</code> that takes an already quoted expression:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subset2_q &lt;- function(x, condition) &#123;</span><br><span class="line">  r &lt;- eval(condition, x, parent.frame())</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here I use the suffix <code>_q</code> to indicate that it takes a quoted expression. Most users won’t need this function so the name can be a little longer.</p>
<p>We can then rewrite both <code>subset2()</code> and <code>subscramble()</code> to use <code>subset2_q()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">subset2 &lt;- function(x, condition) &#123;</span><br><span class="line">  subset2_q(x, substitute(condition))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subscramble &lt;- function(x, condition) &#123;</span><br><span class="line">  condition &lt;- substitute(condition)</span><br><span class="line">  scramble(subset2_q(x, condition))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subscramble(sample_df, a &gt;= 3)</span><br><span class="line">subscramble(sample_df, a &gt;= 3)</span><br></pre></td></tr></table></figure>
<p>Base R functions tend to use a different sort of escape hatch. They often have an argument that turns off NSE. For example, <code>require()</code> has <code>character.only = TRUE</code>. I don’t think it’s a good idea to use an argument to change the behaviour of another argument because it makes function calls harder to understand.</p>
<h3 id="Exercises-38"><a href="#Exercises-38" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>The following R functions all use NSE. For each, describe how it uses NSE,    and read the documentation to determine its escape hatch.</p>
<ul>
<li><code>rm()</code></li>
<li><code>library()</code> and <code>require()</code></li>
<li><code>substitute()</code></li>
<li><code>data()</code></li>
<li><code>data.frame()</code></li>
</ul>
</li>
<li><p>Base functions <code>match.fun()</code>, <code>page()</code>, and <code>ls()</code> all try to    automatically determine whether you want standard or non-standard    evaluation. Each uses a different approach. Figure out the essence    of each approach then compare and contrast.</p>
</li>
<li>Add an escape hatch to <code>plyr::mutate()</code> by splitting it into two functions.    One function should capture the unevaluated inputs. The other should take a    data frame and list of expressions and perform the computation.</li>
<li>What’s the escape hatch for <code>ggplot2::aes()</code>? What about <code>plyr::.()</code>?    What do they have in common? What are the advantages and disadvantages    of their differences?</li>
<li><p>The version of <code>subset2_q()</code> I presented is a simplification of real    code. Why is the following version better?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subset2_q &lt;- function(x, cond, env = parent.frame()) &#123;</span><br><span class="line">  r &lt;- eval(cond, x, env)</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rewrite <code>subset2()</code> and <code>subscramble()</code> to use this improved version.</p>
</li>
</ol>
<h2 id="Substitute"><a href="#Substitute" class="headerlink" title="Substitute"></a><a href="id=&quot;substitute&quot;">Substitute</a></h2><p>Most functions that use non-standard evaluation provide an escape hatch. But what happens if you want to call a function that doesn’t have one? For example, imagine you want to create a lattice graphic given the names of two variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">library(lattice)</span><br><span class="line">xyplot(mpg ~ disp, data = mtcars)</span><br><span class="line"></span><br><span class="line">x &lt;- quote(mpg)</span><br><span class="line">y &lt;- quote(disp)</span><br><span class="line">xyplot(x ~ y, data = mtcars)</span><br></pre></td></tr></table></figure>
<p>We might turn to <code>substitute()</code> and use it for another purpose: to modify an expression. Unfortunately <code>substitute()</code> has a feature that makes modifying calls interactively a bit of a pain. When run from the global environment, it never does substitutions: in fact, in this situation it behaves just like <code>quote()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 1</span><br><span class="line">b &lt;- 2</span><br><span class="line">substitute(a + b + z)</span><br><span class="line">#&gt; a + b + z</span><br></pre></td></tr></table></figure>
<p>However, if you run it inside a function, <code>substitute()</code> does substitute and leaves everything else as is:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() &#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  b &lt;- 2</span><br><span class="line">  substitute(a + b + z)</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>To make it easier to experiment with <code>substitute()</code>, <code>pryr</code> provides the <code>subs()</code> function. It works exactly the same way as <code>substitute()</code> except it has a shorter name and it works in the global environment. These two features make experimentation easier:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 1</span><br><span class="line">b &lt;- 2</span><br><span class="line">subs(a + b + z)</span><br></pre></td></tr></table></figure>
<p>The second argument (of both <code>subs()</code> and <code>substitute()</code>) can override the use of the current environment, and provide an alternative via a list of name-value pairs. The following example uses this technique to show some variations on substituting a string, variable name, or function call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subs(a + b, list(a = &quot;y&quot;))</span><br><span class="line">subs(a + b, list(a = quote(y)))</span><br><span class="line">subs(a + b, list(a = quote(y())))</span><br></pre></td></tr></table></figure>
<p>Remember that every action in R is a function call, so we can also replace <code>+</code> with another function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subs(a + b, list(&quot;+&quot; = quote(f)))</span><br><span class="line">subs(a + b, list(&quot;+&quot; = quote(`*`)))</span><br></pre></td></tr></table></figure>
<p>You can also make nonsense code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subs(y &lt;- y + 1, list(y = 1))</span><br></pre></td></tr></table></figure>
<p>Formally, substitution takes place by examining all the names in the expression. If the name refers to:</p>
<ol>
<li>an ordinary variable, it’s replaced by the value of the variable.</li>
<li>a promise (a function argument), it’s replaced by the expression associated  with the promise.</li>
<li><code>...</code>, it’s replaced by the contents of <code>...</code>.</li>
</ol>
<p>Otherwise it’s left as is.</p>
<p>We can use this to create the right call to <code>xyplot()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- quote(mpg)</span><br><span class="line">y &lt;- quote(disp)</span><br><span class="line">subs(xyplot(x ~ y, data = mtcars))</span><br></pre></td></tr></table></figure>
<p>It’s even simpler inside a function, because we don’t need to explicitly quote the x and y variables (rule 2 above):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xyplot2 &lt;- function(x, y, data = data) &#123;</span><br><span class="line">  substitute(xyplot(x ~ y, data = data))</span><br><span class="line">&#125;</span><br><span class="line">xyplot2(mpg, disp, data = mtcars)</span><br></pre></td></tr></table></figure>
<p>If we include <code>...</code> in the call to substitute, we can add additional arguments to the call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xyplot3 &lt;- function(x, y, ...) &#123;</span><br><span class="line">  substitute(xyplot(x ~ y, ...))</span><br><span class="line">&#125;</span><br><span class="line">xyplot3(mpg, disp, data = mtcars, col = &quot;red&quot;, aspect = &quot;xy&quot;)</span><br></pre></td></tr></table></figure>
<p>To create the plot, we’d then <code>eval()</code> this call.</p>
<h3 id="Adding-an-escape-hatch-to-substitute"><a href="#Adding-an-escape-hatch-to-substitute" class="headerlink" title="Adding an escape hatch to substitute"></a>Adding an escape hatch to substitute</h3><p><code>substitute()</code> is itself a function that uses non-standard evaluation and doesn’t have an escape hatch. This means we can’t use <code>substitute()</code> if we already have an expression saved in a variable:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- quote(a + b)</span><br><span class="line">substitute(x, list(a = 1, b = 2))</span><br></pre></td></tr></table></figure>
<p>Although <code>substitute()</code> doesn’t have a built-in escape hatch, we can use the function itself to create one:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">substitute_q &lt;- function(x, env) &#123;</span><br><span class="line">  call &lt;- substitute(substitute(y, env), list(y = x))</span><br><span class="line">  eval(call)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- quote(a + b)</span><br><span class="line">substitute_q(x, list(a = 1, b = 2))</span><br></pre></td></tr></table></figure>
<p>The implementation of <code>substitute_q()</code> is short, but deep. Let’s work through the example above: <code>substitute_q(x, list(a = 1, b = 2))</code>. It’s a little tricky because <code>substitute()</code> uses NSE so we can’t use the usual technique of working through the parentheses inside-out.</p>
<ol>
<li>First <code>substitute(substitute(y, env), list(y = x))</code> is evaluated.    The expression <code>substitute(y, env)</code> is captured and <code>y</code> is replaced by the    value of <code>x</code>. Because we’ve put <code>x</code> inside a list, it will be evaluated and    the rules of substitute will replace <code>y</code> with its value. This yields the    expression <code>substitute(a + b, env)</code></li>
<li>Next we evaluate that expression inside the current function.    <code>substitute()</code> evaluates its first argument, and looks for name    value pairs in <code>env</code>. Here, it evaluates as <code>list(a = 1, b = 2)</code>. Since    these are both values (not promises), the result will be <code>1 + 2</code></li>
</ol>
<p>A slightly more rigorous version of <code>substitute_q()</code> is provided by the pryr package.</p>
<h3 id="Capturing-unevaluated-…"><a href="#Capturing-unevaluated-…" class="headerlink" title="Capturing unevaluated …"></a><a href="id=&quot;capturing-dots&quot;">Capturing unevaluated …</a></h3><p>Another useful technique is to capture all of the unevaluated expressions in <code>...</code>. Base R functions do this in many ways, but there’s one technique that works well across a wide variety of situations:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dots &lt;- function(...) &#123;</span><br><span class="line">  eval(substitute(alist(...)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This uses the <code>alist()</code> function which simply captures all its arguments. This function is the same as <code>pryr::dots()</code>. Pryr also provides <code>pryr::named_dots()</code>, which, by using deparsed expressions as default names, ensures that all arguments are named (just like <code>data.frame()</code>).</p>
<h3 id="Exercises-39"><a href="#Exercises-39" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Use <code>subs()</code> to convert the LHS to the RHS for each of the following pairs:</p>
<ul>
<li><code>a + b + c</code> -&gt; <code>a * b * c</code></li>
<li><code>f(g(a, b), c)</code> -&gt; <code>(a + b) * c</code></li>
<li><code>f(a &lt; b, c, d)</code> -&gt; <code>if (a &lt; b) c else d</code></li>
</ul>
</li>
<li><p>For each of the following pairs of expressions, describe why you can’t    use <code>subs()</code> to convert one to the other.</p>
<ul>
<li><code>a + b + c</code> -&gt; <code>a + b * c</code></li>
<li><code>f(a, b)</code> -&gt; <code>f(a, b, c)</code></li>
<li><code>f(a, b, c)</code> -&gt; <code>f(a, b)</code></li>
</ul>
</li>
<li><p>How does <code>pryr::named_dots()</code> work? Read the source.</p>
</li>
</ol>
<h2 id="The-downsides-of-non-standard-evaluation"><a href="#The-downsides-of-non-standard-evaluation" class="headerlink" title="The downsides of non-standard evaluation"></a><a href="id=&quot;nse-downsides&quot;">The downsides of non-standard evaluation</a></h2><p>The biggest downside of NSE is that functions that use it are no longer <a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science" target="_blank" rel="external">referentially transparent</a>). A function is <strong>referentially transparent</strong> if you can replace its arguments with their values and its behaviour doesn’t change. For example, if a function, <code>f()</code>, is referentially transparent and both <code>x</code> and <code>y</code> are 10, then <code>f(x)</code>, <code>f(y)</code>, and <code>f(10)</code> will all return the same result. Referentially transparent code is easier to reason about because the names of objects don’t matter, and because you can always work from the innermost parentheses outwards.</p>
<p>There are many important functions that by their very nature are not referentially transparent. Take the assignment operator. You can’t take <code>a &lt;- 1</code> and replace <code>a</code> by its value and get the same behaviour. This is one reason that people usually write assignments at the top-level of functions. It’s hard to reason about code like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 1</span><br><span class="line">b &lt;- 2</span><br><span class="line">if ((b &lt;- a + 1) &gt; (a &lt;- b - 1)) &#123;</span><br><span class="line">  b &lt;- b + 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using NSE prevents a function from being referentially transparent. This makes the mental model needed to correctly predict the output much more complicated. So, it’s only worthwhile to use NSE if there is significant gain. For example, <code>library()</code> and <code>require()</code> can be called either with or without quotes, because internally they use <code>deparse(substitute(x))</code> plus some other tricks. This means that these two lines do exactly the same thing:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library(ggplot2)</span><br><span class="line">library(&quot;ggplot2&quot;)</span><br></pre></td></tr></table></figure>
<p>Things start to get complicated if the variable is associated with a value. What package will this load?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ggplot2 &lt;- &quot;plyr&quot;</span><br><span class="line">library(ggplot2)</span><br></pre></td></tr></table></figure>
<p>There are a number of other R functions that work in this way, like <code>ls()</code>, <code>rm()</code>, <code>data()</code>, <code>demo()</code>, <code>example()</code>, and <code>vignette()</code>. To me, eliminating two keystrokes is not worth the loss of referential transparency, and I don’t recommend you use NSE for this purpose.</p>
<p>One situation where non-standard evaluation is worthwhile is <code>data.frame()</code>. If not explicitly supplied, it uses the input to automatically name the output variables:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">y &lt;- &quot;a&quot;</span><br><span class="line">df &lt;- data.frame(x, y)</span><br><span class="line">names(df)</span><br></pre></td></tr></table></figure>
<p>I think it’s worthwhile because it eliminates a lot of redundancy in the common scenario when you’re creating a data frame from existing variables. More importantly, if needed, it’s easy to override this behaviour by supplying names for each variable.</p>
<p>Non-standard evaluation allows you to write functions that are extremely powerful. However, they are harder to understand and to program with. As well as always providing an escape hatch, carefully consider both the costs and benefits of NSE before using it in a new domain.</p>
<hr>
<p>Add!</p>
<h2 id="Formulas"><a href="#Formulas" class="headerlink" title="Formulas"></a>Formulas</h2><p>There is one other important tool of non-standard evaluation: the formula. The formula operator, <code>~</code>, is used extensively by modelling functions, but also by some graphics functions (e.g. lattice and <code>plot</code>) and a few data manipulation functions (e.g. <code>xtabs()</code> and <code>aggregate()</code>).</p>
<h2 id="Formula-as-a-quoting-function"><a href="#Formula-as-a-quoting-function" class="headerlink" title="Formula as a quoting function"></a>Formula as a quoting function</h2><p>There are two advantages for using <code>~</code> over <code>quote()</code>:</p>
<ul>
<li>It is shorter</li>
<li>It captures both the expression and the environment in which it was evaluated</li>
</ul>
<p>The disadvantage of using <code>~</code> is that most people are used to its role in models, and may be surprised if the semantics you imply from it are substantially different from standard modelling formulas.</p>
<p>The formula object is a call that knows in which environment it was evaluated. You can use <code>length()</code> to determine if it is one-sided or two-sided, and <code>[[</code> to extract the various pieces.</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- ~ a + b</span><br><span class="line">length(f1)</span><br><span class="line">f1[[<span class="number">1</span>]]</span><br><span class="line">f1[[<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">f2 &lt;- y ~ a + b</span><br><span class="line">length(f2)</span><br><span class="line">f2[[<span class="number">1</span>]]</span><br><span class="line">f2[[<span class="number">2</span>]]</span><br><span class="line">f2[[<span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<p>You can extract the environment of a formula with <code>environment()</code>, as demonstrated with this implementation of <code>subset()</code>:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subset_f &lt;- <span class="keyword">function</span>(x, f) &#123;</span><br><span class="line">  stopifnot(inherits(f, <span class="string">"formula"</span>), length(f) == <span class="number">2</span>)</span><br><span class="line">  r &lt;- eval(f[[<span class="number">2</span>]], x, environment(f))</span><br><span class="line">  x[r, ]</span><br><span class="line">&#125;</span><br><span class="line">subset_f(mtcars, ~ cyl == <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>Note that because the code is evaluated in the environment associated with the formula, the semantics are a little different if you’re creating the formula in a function:</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- <span class="keyword">function</span>(x) ~ cyl == x</span><br><span class="line">subset_f(mtcars, f(<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h3 id="xtabs"><a href="#xtabs" class="headerlink" title="xtabs()"></a><code>xtabs()</code></h3><p>Is a pretty horrible example because of it’s combination of call mangling and tangles with sparse matrices.</p>
<h2 id="Formulas-for-modelling"><a href="#Formulas-for-modelling" class="headerlink" title="Formulas for modelling"></a>Formulas for modelling</h2><p>Keep it brief: focus on main concepts (possibly showing complete lm implmentation using Rcpp), and pointing to documentation where necessary.  Need to discuss specials (e.g. offset/Error) and how splines work?</p>
<p>White book.</p>
<p>Patsy: <a href="http://patsy.readthedocs.org/en/latest/R-comparison.html" target="_blank" rel="external">http://patsy.readthedocs.org/en/latest/R-comparison.html</a></p>
<p>Formula package (<a href="http://cran.r-project.org/web/packages/Formula/vignettes/Formula.pdf" target="_blank" rel="external">http://cran.r-project.org/web/packages/Formula/vignettes/Formula.pdf</a>)</p>
<p>Models use two steps: first converting the formula into matrices, and then manipulating using matrix algebra.</p>
<ul>
<li>RcppEigen:::fastLm.formula</li>
<li><a href="http://developer.r-project.org/model-fitting-functions.txt" target="_blank" rel="external">http://developer.r-project.org/model-fitting-functions.txt</a></li>
<li>terms, terms.object, terms.formula</li>
<li>model.response, model.weights</li>
<li>model.matrix, model.frame</li>
<li>lm.fit</li>
</ul>
<hr>
<h3 id="Exercises-40"><a href="#Exercises-40" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>What does the following function do? What’s the escape hatch?    Do you think that this is an appropriate use of NSE?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nl &lt;- function(...) &#123;</span><br><span class="line">  dots &lt;- named_dots(...)</span><br><span class="line">  lapply(dots, eval, parent.frame())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Instead of relying on promises, you can use formulas created with <code>~</code>    to explicitly capture an expression and its environment. What are the    advantages and disadvantages of making quoting explicit? How does it    impact referential transparency?</p>
</li>
<li>Read the standard non-standard evaluation rules found at    <a href="http://developer.r-project.org/nonstandard-eval.pdf" target="_blank" rel="external">http://developer.r-project.org/nonstandard-eval.pdf</a>.</li>
</ol>
<hr>
<h1 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a><a href="id=&quot;metaprogramming&quot;">Expressions</a></h1><p>In <a href="#nse">non-standard evaluation</a>, you learned the basics of accessing and evaluating the expressions underlying computation in R. In this chapter, you’ll learn how to manipulate these expressions with code. You’re going to learn how to metaprogram: how to create programs with other programs!</p>
<h5 id="Outline-10"><a href="#Outline-10" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#structure-of-expressions">Structure of expressions</a> begins with a deep  dive into the structure of expressions. You’ll learn about the four  components of an expression: constants, names, calls, and pairlists.</li>
<li><a href="#names">Names</a> goes into further details about names.</li>
<li><a href="#calls">Calls</a> gives more details about calls.</li>
<li><a href="#capturing-call">Capturing the current call</a> takes a minor detour to  discuss some common uses of calls in base R.</li>
<li><a href="#pairlists">Pairlists</a> completes the discussion of the four major  components of an expression, and shows how you can create functions from  their component pieces.</li>
<li><a href="#parsing-and-deparsing">Parsing and deparsing</a> discusses how to convert  back and forth between expressions and text.</li>
<li><a href="#ast-funs">Walking the call tree with recursive functions</a> concludes  the chapter, combining everything you’ve learned about writing functions  that can compute on and modify arbitrary R code.</li>
</ul>
<h5 id="Prerequisites-6"><a href="#Prerequisites-6" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>Throughout this chapter we’re going to use tools from the <code>pryr</code> package to help see what’s going on. If you don’t already have it, install it by running <code>install.packages(&quot;pryr&quot;)</code>.</p>
<h2 id="Structure-of-expressions"><a href="#Structure-of-expressions" class="headerlink" title="Structure of expressions"></a><a href="id=&quot;structure-of-expressions&quot;">Structure of expressions</a></h2><p>To compute on the language, we first need to understand the structure of the language. That will require some new vocabulary, some new tools, and some new ways of thinking about R code. The first thing you’ll need to understand is the distinction between an operation and a result:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 4</span><br><span class="line">y &lt;- x * 10</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<p>We want to distinguish the action of multiplying <code>x</code> by 10 and assigning that result to <code>y</code> from the actual result (40). As we’ve seen in the previous chapter, we can capture the action with <code>quote()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z &lt;- quote(y &lt;- x * 10)</span><br><span class="line">z</span><br></pre></td></tr></table></figure>
<p><code>quote()</code> returns an <strong>expression</strong>: an object that represents an action that can be performed by R. (Unfortunately <code>expression()</code> does not return an expression in this sense. Instead, it returns something more like a list of expressions. See <a href="#parsing-and-deparsing">parsing and deparsing</a> for more details.)</p>
<p>An expression is also called an abstract syntax tree (AST) because it represents the hierarchical tree structure of the code. We’ll use <code>pryr::ast()</code> to see this more clearly:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ast(y &lt;- x * 10)</span><br></pre></td></tr></table></figure>
<p>There are four possible components of an expression: constants, names, calls, and pairlists.</p>
<ul>
<li><p><strong>constants</strong> are length one atomic vectors, like <code>&quot;a&quot;</code> or <code>10</code>.  <code>ast()</code> displays them as is.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ast(&quot;a&quot;)</span><br><span class="line">ast(1)</span><br><span class="line">ast(1L)</span><br><span class="line">ast(TRUE)</span><br></pre></td></tr></table></figure>
<p>  Quoting a constant returns it unchanged:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">identical(1, quote(1))</span><br><span class="line">identical(&quot;test&quot;, quote(&quot;test&quot;))</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>names</strong>, or symbols, represent the name of an object rather than its value.   <code>ast()</code> prefixes names with a backtick.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ast(x)</span><br><span class="line">ast(mean)</span><br><span class="line">ast(`an unusual name`)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>calls</strong> represent the action of calling a function. Like lists, calls are  recursive: they can contain constants, names, pairlists, and other calls.  <code>ast()</code> prints <code>()</code> and then lists the children. The first child is the  function that is called, and the remaining children are the function’s  arguments.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ast(f())</span><br><span class="line">ast(f(1, 2))</span><br><span class="line">ast(f(a, b))</span><br><span class="line">ast(f(g(), h(1, a)))</span><br></pre></td></tr></table></figure>
<p>  As mentioned in    <a href="#all-calls">every operation is a function call</a>,    even things that don’t look like function calls still have this    hierarchical structure:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ast(a + b)</span><br><span class="line">ast(if (x &gt; 1) x else 1/x)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>pairlists</strong>, short for dotted pair lists, are a legacy of R’s past.  They are only used in one place: the formal arguments of a function.  <code>ast()</code> prints <code>[]</code> at the top-level of a pairlist. Like calls, pairlists  are also recursive and can contain constants, names, and calls.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ast(function(x = 1, y) x)</span><br><span class="line">ast(function(x = 1, y = x * 2) &#123;x / y&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Note that <code>str()</code> does not follow these naming conventions when describing objects. Instead, it describes names as symbols and calls as language objects:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str(quote(a))</span><br><span class="line">str(quote(a + b))</span><br></pre></td></tr></table></figure>
<p>Using low-level functions, it is possible to create call trees that contain objects other than constants, names, calls, and pairlists. The following example uses <code>substitute()</code> to insert a data frame into a call tree. This is a bad idea, however, because the object does not print correctly: the printed call looks like it should return “list” but when evaluated, it returns “data.frame”.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class_df &lt;- substitute(class(df), list(df = data.frame(x = 10)))</span><br><span class="line">class_df</span><br><span class="line">eval(class_df)</span><br></pre></td></tr></table></figure>
<p>Together these four components define the structure of all R code. They are explained in more detail in the following sections.</p>
<h3 id="Exercises-41"><a href="#Exercises-41" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>There’s no existing base function that checks if an element is    a valid component of an expression (i.e., it’s a constant, name,    call, or pairlist). Implement one by guessing the names of the “is”    functions for calls, names, and pairlists.</li>
<li><code>pryr::ast()</code> uses non-standard evaluation. What’s its escape hatch to    standard evaluation?</li>
<li>What does the call tree of an if statement with multiple else conditions    look like?</li>
<li>Compare <code>ast(x + y %+% z)</code> to <code>ast(x ^ y %+% z)</code>. What do they    tell you about the precedence of custom infix functions?</li>
<li>Why can’t an expression contain an atomic vector of length greater than one?    Which one of the six types of atomic vector can’t appear in an expression?    Why?</li>
</ol>
<h2 id="Names-1"><a href="#Names-1" class="headerlink" title="Names"></a><a href="id=&quot;names&quot;">Names</a></h2><p>Typically, we use <code>quote()</code> to capture names. You can also convert a string to a name with <code>as.name()</code>. However, this is most useful only when your function receives strings as input. Otherwise it involves more typing than using <code>quote()</code>. (You can use <code>is.name()</code> to test if an object is a name.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">as.name(&quot;name&quot;)</span><br><span class="line">identical(quote(name), as.name(&quot;name&quot;))</span><br><span class="line"></span><br><span class="line">is.name(&quot;name&quot;)</span><br><span class="line">is.name(quote(name))</span><br><span class="line">is.name(quote(f(name)))</span><br></pre></td></tr></table></figure>
<p>(Names are also called symbols. <code>as.symbol()</code> and <code>is.symbol()</code> are identical to <code>as.name()</code> and <code>is.name()</code>.)</p>
<p>Names that would otherwise be invalid are automatically surrounded by backticks:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as.name(&quot;a b&quot;)</span><br><span class="line">as.name(&quot;if&quot;)</span><br></pre></td></tr></table></figure>
<p>There’s one special name that needs a little extra discussion: the empty name. It is used to represent missing arguments. This object behaves strangely. You can’t bind it to a variable. If you do, it triggers an error about missing arguments. It’s only useful if you want to programmatically create a function with missing arguments.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) 10</span><br><span class="line">formals(f)$x</span><br><span class="line">is.name(formals(f)$x)</span><br><span class="line">as.character(formals(f)$x)</span><br><span class="line"></span><br><span class="line">missing_arg &lt;- formals(f)$x</span><br><span class="line"># Doesn&apos;t work!</span><br><span class="line">is.name(missing_arg)</span><br></pre></td></tr></table></figure>
<p>To explicitly create it when needed, call <code>quote()</code> with a named argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quote(expr =)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-42"><a href="#Exercises-42" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>You can use <code>formals()</code> to both get and set the arguments of a function.    Use <code>formals()</code> to modify the following function so that the default value    of <code>x</code> is missing and <code>y</code> is 10.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g &lt;- function(x = 20, y) &#123;</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Write an equivalent to <code>get()</code> using <code>as.name()</code> and <code>eval()</code>. Write an    equivalent to <code>assign()</code> using <code>as.name()</code>, <code>substitute()</code>, and <code>eval()</code>.    (Don’t worry about the multiple ways of choosing an environment; assume    that the user supplies it explicitly.)</p>
</li>
</ol>
<h2 id="Calls"><a href="#Calls" class="headerlink" title="Calls"></a><a href="id=&quot;calls&quot;">Calls</a></h2><p>A call is very similar to a list. It has <code>length</code>, <code>[[</code> and <code>[</code> methods, and is recursive because calls can contain other calls. The first element of the call is the function that gets called. It’s usually the <em>name</em> of a function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- quote(read.csv(&quot;important.csv&quot;, row.names = FALSE))</span><br><span class="line">x[[1]]</span><br><span class="line">is.name(x[[1]])</span><br></pre></td></tr></table></figure>
<p>But it can also be another call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- quote(add(10)(20))</span><br><span class="line">y[[1]]</span><br><span class="line">is.call(y[[1]])</span><br></pre></td></tr></table></figure>
<p>The remaining elements are the arguments. They can be extracted by name or by position.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- quote(read.csv(&quot;important.csv&quot;, row.names = FALSE))</span><br><span class="line">x[[2]]</span><br><span class="line">x$row.names</span><br><span class="line">names(x)</span><br></pre></td></tr></table></figure>
<p>The length of a call minus 1 gives the number of arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">length(x) - 1</span><br></pre></td></tr></table></figure>
<h3 id="Modifying-a-call"><a href="#Modifying-a-call" class="headerlink" title="Modifying a call"></a>Modifying a call</h3><p>You can add, modify, and delete elements of the call with the standard replacement operators, <code>$&lt;-</code> and <code>[[&lt;-</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- quote(read.csv(&quot;important.csv&quot;, row.names = FALSE))</span><br><span class="line">y$row.names &lt;- TRUE</span><br><span class="line">y$col.names &lt;- FALSE</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">y[[2]] &lt;- quote(paste0(filename, &quot;.csv&quot;))</span><br><span class="line">y[[4]] &lt;- NULL</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">y$sep &lt;- &quot;,&quot;</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<p>Calls also support the <code>[</code> method. But use it with care. Removing the first element is unlikely to create a useful call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x[-3] # remove the second argument</span><br><span class="line">x[-1] # remove the function name - but it&apos;s still a call!</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>If you want a list of the unevaluated arguments (expressions), use explicit coercion:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># A list of the unevaluated arguments</span><br><span class="line">as.list(x[-1])</span><br></pre></td></tr></table></figure>
<p>Generally speaking, because R’s function calling semantics are so flexible, getting or setting arguments by position is dangerous. For example, even though the values at each position are different, the following three calls all have the same effect:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m1 &lt;- quote(read.delim(&quot;data.txt&quot;, sep = &quot;|&quot;))</span><br><span class="line">m2 &lt;- quote(read.delim(s = &quot;|&quot;, &quot;data.txt&quot;))</span><br><span class="line">m3 &lt;- quote(read.delim(file = &quot;data.txt&quot;, , &quot;|&quot;))</span><br></pre></td></tr></table></figure>
<p>To work around this problem, pryr provides <code>standardise_call()</code>. It uses the base <code>match.call()</code> function to convert all positional arguments to named arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">standardise_call(m1)</span><br><span class="line">standardise_call(m2)</span><br><span class="line">standardise_call(m3)</span><br></pre></td></tr></table></figure>
<h3 id="Creating-a-call-from-its-components"><a href="#Creating-a-call-from-its-components" class="headerlink" title="Creating a call from its components"></a>Creating a call from its components</h3><p>To create a new call from its components, you can use <code>call()</code> or <code>as.call()</code>. The first argument to <code>call()</code> is a string which gives a function name. The other arguments are expressions that represent the arguments of the call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call(&quot;:&quot;, 1, 10)</span><br><span class="line">call(&quot;mean&quot;, quote(1:10), na.rm = TRUE)</span><br></pre></td></tr></table></figure>
<p><code>as.call()</code> is a minor variant of <code>call()</code> that takes a single list as input. The first element is a name or call. The subsequent elements are the arguments.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">as.call(list(quote(mean), quote(1:10)))</span><br><span class="line">as.call(list(quote(adder(10)), 20))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-43"><a href="#Exercises-43" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>The following two calls look the same, but are actually different:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a &lt;- call(&quot;mean&quot;, 1:10))</span><br><span class="line">(b &lt;- call(&quot;mean&quot;, quote(1:10)))</span><br><span class="line">identical(a, b)</span><br></pre></td></tr></table></figure>
<p>What’s the difference? Which one should you prefer?</p>
</li>
<li>Implement a pure R version of <code>do.call()</code>.</li>
<li><p>Concatenating a call and an expression with <code>c()</code> creates a list. Implement    <code>concat()</code> so that the following code works to combine a call and    an additional argument.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concat(quote(f), a = 1, b = quote(mean(a)))</span><br><span class="line">#&gt; f(a = 1, b = mean(a))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Since <code>list()</code>s don’t belong in expressions, we could create a more    convenient call constructor that automatically combines lists into the    arguments. Implement <code>make_call()</code> so that the following code works.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">make_call(quote(mean), list(quote(x), na.rm = TRUE))</span><br><span class="line">#&gt; mean(x, na.rm = TRUE)</span><br><span class="line">make_call(quote(mean), quote(x), na.rm = TRUE)</span><br><span class="line">#&gt; mean(x, na.rm = TRUE)</span><br></pre></td></tr></table></figure>
</li>
<li><p>How does <code>mode&lt;-</code> work? How does it use <code>call()</code>?</p>
</li>
<li>Read the source for <code>pryr::standardise_call()</code>. How does it work?    Why is <code>is.primitive()</code> needed?</li>
<li><p><code>standardise_call()</code> doesn’t work so well for the following calls.    Why?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">standardise_call(quote(mean(1:10, na.rm = TRUE)))</span><br><span class="line">standardise_call(quote(mean(n = T, 1:10)))</span><br><span class="line">standardise_call(quote(mean(x = 1:10, , TRUE)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Read the documentation for <code>pryr::modify_call()</code>. How do you think    it works? Read the source code.</p>
</li>
<li>Use <code>ast()</code> and experimentation to figure out the three arguments in an    <code>if()</code> call. Which components are required? What are the arguments to    the <code>for()</code> and <code>while()</code> calls?</li>
</ol>
<h2 id="Capturing-the-current-call"><a href="#Capturing-the-current-call" class="headerlink" title="Capturing the current call"></a><a href="id=&quot;capturing-call&quot;">Capturing the current call</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std &lt;- c(&quot;package:base&quot;, &quot;package:utils&quot;, &quot;package:stats&quot;)</span><br><span class="line">names(find_uses(std, &quot;sys.call&quot;))</span><br><span class="line">names(find_uses(std, &quot;match.call&quot;))</span><br></pre></td></tr></table></figure>
<p>Many base R functions use the current call: the expression that caused the current function to be run. There are two ways to capture a current call:</p>
<ul>
<li><code>sys.call()</code> captures exactly what the user typed.</li>
<li><code>match.call()</code> makes a call that only uses named arguments. It’s like  automatically calling <code>pryr::standardise_call()</code> on the result of  <code>sys.call()</code></li>
</ul>
<p>The following example illustrates the difference between the two:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(abc = 1, def = 2, ghi = 3) &#123;</span><br><span class="line">  list(sys = sys.call(), match = match.call())</span><br><span class="line">&#125;</span><br><span class="line">f(d = 2, 2)</span><br></pre></td></tr></table></figure>
<p>Modelling functions often use <code>match.call()</code> to capture the call used to create the model. This makes it possible to <code>update()</code> a model, re-fitting the model after modifying some of original arguments. Here’s an example of <code>update()</code> in action:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mod &lt;- lm(mpg ~ wt, data = mtcars)</span><br><span class="line">update(mod, formula = . ~ . + cyl)</span><br></pre></td></tr></table></figure>
<p>How does <code>update()</code> work? We can rewrite it using some tools from pryr to focus on the essence of the algorithm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">update_call &lt;- function (object, formula., ...) &#123;</span><br><span class="line">  call &lt;- object$call</span><br><span class="line"></span><br><span class="line">  # Use update.formula to deal with formulas like . ~ .</span><br><span class="line">  if (!missing(formula.)) &#123;</span><br><span class="line">    call$formula &lt;- update.formula(formula(object), formula.)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modify_call(call, dots(...))</span><br><span class="line">&#125;</span><br><span class="line">update_model &lt;- function(object, formula., ...) &#123;</span><br><span class="line">  call &lt;- update_call(object, formula., ...)</span><br><span class="line">  eval(call, parent.frame())</span><br><span class="line">&#125;</span><br><span class="line">update_model(mod, formula = . ~ . + cyl)</span><br></pre></td></tr></table></figure>
<p>The original <code>update()</code> has an <code>evaluate</code> argument that controls whether the function returns the call or the result. But I think it’s better, on principle, that a function returns only one type of object, rather than different types depending on the function’s arguments.</p>
<p>This rewrite also allows us to fix a small bug in <code>update()</code>: it re-evaluates the call in the global environment, when what we really want is to re-evaluate it in the environment where the model was originally fit — in the formula.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function() &#123;</span><br><span class="line">  n &lt;- 3</span><br><span class="line">  lm(mpg ~ poly(wt, n), data = mtcars)</span><br><span class="line">&#125;</span><br><span class="line">mod &lt;- f()</span><br><span class="line">update(mod, data = mtcars)</span><br><span class="line"></span><br><span class="line">update_model &lt;- function(object, formula., ...) &#123;</span><br><span class="line">  call &lt;- update_call(object, formula., ...)</span><br><span class="line">  eval(call, environment(formula(object)))</span><br><span class="line">&#125;</span><br><span class="line">update_model(mod, data = mtcars)</span><br></pre></td></tr></table></figure>
<p>This is an important principle to remember: if you want to re-run code captured with <code>match.call()</code>, you also need to capture the environment in which it was evaluated, usually the <code>parent.frame()</code>. The downside to this is that capturing the environment also means capturing any large objects which happen to be in that environment, which prevents their memory from being released. This topic is explored in more detail in <a href="#gc">garbage collection</a>.</p>
<p>Some base R functions use <code>match.call()</code> where it’s not necessary. For example,  <code>write.csv()</code> captures the call to <code>write.csv()</code> and mangles it to call <code>write.table()</code> instead:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">write.csv &lt;- function(...) &#123;</span><br><span class="line">  Call &lt;- match.call(expand.dots = TRUE)</span><br><span class="line">  for (arg in c(&quot;append&quot;, &quot;col.names&quot;, &quot;sep&quot;, &quot;dec&quot;, &quot;qmethod&quot;)) &#123;</span><br><span class="line">    if (!is.null(Call[[arg]])) &#123;</span><br><span class="line">      warning(gettextf(&quot;attempt to set &apos;%s&apos; ignored&quot;, arg))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  rn &lt;- eval.parent(Call$row.names)</span><br><span class="line">  Call$append &lt;- NULL</span><br><span class="line">  Call$col.names &lt;- if (is.logical(rn) &amp;&amp; !rn) TRUE else NA</span><br><span class="line">  Call$sep &lt;- &quot;,&quot;</span><br><span class="line">  Call$dec &lt;- &quot;.&quot;</span><br><span class="line">  Call$qmethod &lt;- &quot;double&quot;</span><br><span class="line">  Call[[1L]] &lt;- as.name(&quot;write.table&quot;)</span><br><span class="line">  eval.parent(Call)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To fix this, we could implement <code>write.csv()</code> using regular function call semantics:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">write.csv &lt;- function(x, file = &quot;&quot;, sep = &quot;,&quot;, qmethod = &quot;double&quot;,</span><br><span class="line">                      ...) &#123;</span><br><span class="line">  write.table(x = x, file = file, sep = sep, qmethod = qmethod,</span><br><span class="line">    ...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is much easier to understand: it’s just calling <code>write.table()</code> with different defaults. This also fixes a subtle bug in the original <code>write.csv()</code>: <code>write.csv(mtcars, row = FALSE)</code> raises an error, but <code>write.csv(mtcars, row.names = FALSE)</code> does not. The lesson here is that it’s always better to solve a problem with the simplest tool possible.</p>
<h3 id="Exercises-44"><a href="#Exercises-44" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Compare and contrast <code>update_model()</code> with <code>update.default()</code>.</li>
<li>Why doesn’t <code>write.csv(mtcars, &quot;mtcars.csv&quot;, row = FALSE)</code> work?    What property of argument matching has the original author forgotten?</li>
<li>Rewrite <code>update.formula()</code> to use R code instead of C code.</li>
<li>Sometimes it’s necessary to uncover the function that called the    function that called the current function (i.e., the grandparent, not    the parent). How can you use <code>sys.call()</code> or <code>match.call()</code> to find    this function?</li>
</ol>
<h2 id="Pairlists"><a href="#Pairlists" class="headerlink" title="Pairlists"></a><a href="id=&quot;pairlists&quot;">Pairlists</a></h2><p>Pairlists are a holdover from R’s past. They behave identically to lists, but have a different internal representation (as a linked list rather than a vector). Pairlists have been replaced by lists everywhere except in function arguments.</p>
<p>The only place you need to care about the difference between a list and a pairlist is if you’re going to construct functions by hand. For example, the following function allows you to construct a function from its component pieces: a list of formal arguments, a body, and an environment. The function uses <code>as.pairlist()</code> to ensure that the <code>function()</code> has the pairlist of <code>args</code> it needs.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">make_function &lt;- function(args, body, env = parent.frame()) &#123;</span><br><span class="line">  args &lt;- as.pairlist(args)</span><br><span class="line"></span><br><span class="line">  eval(call(&quot;function&quot;, args, body), env)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This function is also available in pryr, where it does a little extra checking of arguments. <code>make_function()</code> is best used in conjunction with <code>alist()</code>, the <strong>a</strong>rgument list function. <code>alist()</code> doesn’t evaluate its arguments so that <code>alist(x = a)</code> is shorthand for <code>list(x = quote(a))</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- make_function(alist(a = 1, b = 2), quote(a + b))</span><br><span class="line">add(1)</span><br><span class="line">add(1, 2)</span><br><span class="line"></span><br><span class="line"># To have an argument with no default, you need an explicit =</span><br><span class="line">make_function(alist(a = , b = a), quote(a + b))</span><br><span class="line"># To take `...` as an argument put it on the LHS of =</span><br><span class="line">make_function(alist(a = , b = , ... =), quote(a + b))</span><br></pre></td></tr></table></figure>
<p><code>make_function()</code> has one advantage over using closures to construct functions: with it, you can easily read the source code. For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adder &lt;- function(x) &#123;</span><br><span class="line">  make_function(alist(y =), substitute(&#123;x + y&#125;), parent.frame())</span><br><span class="line">&#125;</span><br><span class="line">adder(10)</span><br></pre></td></tr></table></figure>
<p>One useful application of <code>make_function()</code> is in functions like <code>curve()</code>. <code>curve()</code> allows you to plot a mathematical function without creating an explicit R function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curve(sin(exp(4 * x)), n = 1000)</span><br></pre></td></tr></table></figure>
<p>Here <code>x</code> is a pronoun. <code>x</code> doesn’t represent a single concrete value, but is instead a placeholder that varies over the range of the plot. One way to implement <code>curve()</code> would be with <code>make_function()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curve2 &lt;- function(expr, xlim = c(0, 1), n = 100,</span><br><span class="line">                   env = parent.frame()) &#123;</span><br><span class="line">  f &lt;- make_function(alist(x = ), substitute(expr), env)</span><br><span class="line"></span><br><span class="line">  x &lt;- seq(xlim[1], xlim[2], length = n)</span><br><span class="line">  y &lt;- f(x)</span><br><span class="line"></span><br><span class="line">  plot(x, y, type = &quot;l&quot;, ylab = deparse(substitute(expr)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Functions that use a pronoun are called <a href="http://en.wikipedia.org/wiki/Anaphora_(linguistics" target="_blank" rel="external">anaphoric</a>) functions. They are used in <a href="http://www.arcfn.com/doc/anaphoric.html" target="_blank" rel="external">Arc</a> (a lisp like language), <a href="http://www.perlmonks.org/index.pl?node_id=666047" target="_blank" rel="external">Perl</a>, and <a href="http://amalloy.hubpages.com/hub/Unhygenic-anaphoric-Clojure-macros-for-fun-and-profit" target="_blank" rel="external">Clojure</a>.</p>
<h3 id="Exercises-45"><a href="#Exercises-45" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>How are <code>alist(a)</code> and <code>alist(a = )</code> different? Think about both the    input and the output.</li>
<li>Read the documentation and source code for <code>pryr::partial()</code>. What does it    do? How does it work? Read the documentation and source code for    <code>pryr::unenclose()</code>. What does it do and how does it work?</li>
<li><p>The actual implementation of <code>curve()</code> looks more like</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curve3 &lt;- function(expr, xlim = c(0, 1), n = 100,</span><br><span class="line">                   env = parent.frame()) &#123;</span><br><span class="line">  env2 &lt;- new.env(parent = env)</span><br><span class="line">  env2$x &lt;- seq(xlim[1], xlim[2], length = n)</span><br><span class="line"></span><br><span class="line">  y &lt;- eval(substitute(expr), env2)</span><br><span class="line">  plot(env2$x, y, type = &quot;l&quot;,</span><br><span class="line">    ylab = deparse(substitute(expr)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How does this approach differ from <code>curve2()</code> defined above?</p>
</li>
</ol>
<h2 id="Parsing-and-deparsing"><a href="#Parsing-and-deparsing" class="headerlink" title="Parsing and deparsing"></a><a href="id=&quot;parsing-and-deparsing&quot;">Parsing and deparsing</a></h2><p>Sometimes code is represented as a string, rather than as an expression. You can convert a string to an expression with <code>parse()</code>. <code>parse()</code> is the opposite of <code>deparse()</code>: it takes a character vector and returns an expression object. The primary use of <code>parse()</code> is parsing files of code to disk, so the first argument is a file path. Note that if you have code in a character vector, you need to use the <code>text</code> argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">z &lt;- quote(y &lt;- x * 10)</span><br><span class="line">deparse(z)</span><br><span class="line"></span><br><span class="line">parse(text = deparse(z))</span><br></pre></td></tr></table></figure>
<p>Because there might be many top-level calls in a file, <code>parse()</code> doesn’t return just a single expression. Instead, it returns an expression object, which is essentially a list of expressions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">exp &lt;- parse(text = c(&quot;</span><br><span class="line">  x &lt;- 4</span><br><span class="line">  x</span><br><span class="line">  5</span><br><span class="line">&quot;))</span><br><span class="line">length(exp)</span><br><span class="line">typeof(exp)</span><br><span class="line"></span><br><span class="line">exp[[1]]</span><br><span class="line">exp[[2]]</span><br></pre></td></tr></table></figure>
<p>You can create expression objects by hand with <code>expression()</code>, but I wouldn’t recommend it. There’s no need to learn about this esoteric data structure if you already know how to use expressions.</p>
<p>With <code>parse()</code> and <code>eval()</code>, it’s possible to write a simple version of <code>source()</code>. We read in the file from disk, <code>parse()</code> it and then <code>eval()</code> each component in a specified environment. This version defaults to a new environment, so it doesn’t affect existing objects. <code>source()</code> invisibly returns the result of the last expression in the file, so <code>simple_source()</code> does the same.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">simple_source &lt;- function(file, envir = new.env()) &#123;</span><br><span class="line">  stopifnot(file.exists(file))</span><br><span class="line">  stopifnot(is.environment(envir))</span><br><span class="line"></span><br><span class="line">  lines &lt;- readLines(file, warn = FALSE)</span><br><span class="line">  exprs &lt;- parse(text = lines)</span><br><span class="line"></span><br><span class="line">  n &lt;- length(exprs)</span><br><span class="line">  if (n == 0L) return(invisible())</span><br><span class="line"></span><br><span class="line">  for (i in seq_len(n - 1)) &#123;</span><br><span class="line">    eval(exprs[i], envir)</span><br><span class="line">  &#125;</span><br><span class="line">  invisible(eval(exprs[n], envir))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The real <code>source()</code> is considerably more complicated because it can <code>echo</code> input and output, and also has many additional settings to control behaviour.</p>
<h3 id="Exercises-46"><a href="#Exercises-46" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What are the differences between <code>quote()</code> and <code>expression()</code>?</li>
<li>Read the help for <code>deparse()</code> and construct a call that <code>deparse()</code>    and <code>parse()</code> do not operate symmetrically on.</li>
<li>Compare and contrast <code>source()</code> and <code>sys.source()</code>.</li>
<li>Modify <code>simple_source()</code> so it returns the result of <em>every</em> expression,    not just the last one.</li>
<li>The code generated by <code>simple_source()</code> lacks source references. Read    the source code for <code>sys.source()</code> and the help for <code>srcfilecopy()</code>,    then modify <code>simple_source()</code> to preserve source references. You can    test your code by sourcing a function that contains a comment. If    successful, when you look at the function, you’ll see the comment and    not just the source code.</li>
</ol>
<h2 id="Walking-the-AST-with-recursive-functions"><a href="#Walking-the-AST-with-recursive-functions" class="headerlink" title="Walking the AST with recursive functions"></a><a href="id=&quot;ast-funs&quot;">Walking the AST with recursive functions</a></h2><p>It’s easy to modify a single call with <code>substitute()</code> or <code>pryr::modify_call()</code>. For more complicated tasks we need to work directly with the AST. The base <code>codetools</code> package provides some useful motivating examples of how we can do this:</p>
<ul>
<li><code>findGlobals()</code> locates all global variables used by a function. This  can be useful if you want to check that your function doesn’t inadvertently  rely on variables defined in their parent environment.</li>
<li><code>checkUsage()</code> checks for a range of common problems including  unused local variables, unused parameters, and the use of partial  argument matching.</li>
</ul>
<p>To write functions like <code>findGlobals()</code> and <code>checkUsage()</code>, we’ll need a new tool. Because expressions have a tree structure, using a recursive function would be the natural choice. The key to doing that is getting the recursion right. This means making sure that you know what the base case is and figuring out how to combine the results from the recursive case. For calls, there are two base cases (atomic vectors and names) and two recursive cases (calls and pairlists). This means that a function for working with expressions will look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">recurse_call &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x)) &#123;</span><br><span class="line">    # Return a value</span><br><span class="line">  &#125; else if (is.name(x)) &#123;</span><br><span class="line">    # Return a value</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    # Call recurse_call recursively</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    # Call recurse_call recursively</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    # User supplied incorrect input</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Finding-F-and-T"><a href="#Finding-F-and-T" class="headerlink" title="Finding F and T"></a>Finding F and T</h3><p>We’ll start simple with a function that determines whether a function uses the logical abbreviations <code>T</code> and <code>F</code>. Using <code>T</code> and <code>F</code> is generally considered to be poor coding practice, and is something that <code>R CMD check</code> will warn about. Let’s first compare the AST for <code>T</code> vs. <code>TRUE</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ast(TRUE)</span><br><span class="line">ast(T)</span><br></pre></td></tr></table></figure>
<p><code>TRUE</code> is parsed as a logical vector of length one, while <code>T</code> is parsed as a name. This tells us how to write our base cases for the recursive function: while an atomic vector will never be a logical abbreviation, a name might, so we’ll need to test for both <code>T</code> and <code>F</code>. The recursive cases can be combined because they do the same thing in both cases: they recursively call <code>logical_abbr()</code> on each element of the object.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">logical_abbr &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x)) &#123;</span><br><span class="line">    FALSE</span><br><span class="line">  &#125; else if (is.name(x)) &#123;</span><br><span class="line">    identical(x, quote(T)) || identical(x, quote(F))</span><br><span class="line">  &#125; else if (is.call(x) || is.pairlist(x)) &#123;</span><br><span class="line">    for (i in seq_along(x)) &#123;</span><br><span class="line">      if (logical_abbr(x[[i]])) return(TRUE)</span><br><span class="line">    &#125;</span><br><span class="line">    FALSE</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logical_abbr(quote(TRUE))</span><br><span class="line">logical_abbr(quote(T))</span><br><span class="line">logical_abbr(quote(mean(x, na.rm = T)))</span><br><span class="line">logical_abbr(quote(function(x, na.rm = T) FALSE))</span><br></pre></td></tr></table></figure>
<h3 id="Finding-all-variables-created-by-assignment"><a href="#Finding-all-variables-created-by-assignment" class="headerlink" title="Finding all variables created by assignment"></a>Finding all variables created by assignment</h3><p><code>logical_abbr()</code> is very simple: it only returns a single <code>TRUE</code> or <code>FALSE</code>. The next task, listing all variables created by assignment, is a little more complicated. We’ll start simply, and then make the function progressively more rigorous.</p>
<p>Again, we start by looking at the AST for assignment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ast(x &lt;- 10)</span><br></pre></td></tr></table></figure>
<p>Assignment is a call where the first element is the name <code>&lt;-</code>, the second is the object the name is assigned to, and the third is the value to be assigned. This makes the base cases simple: constants and names don’t create assignments, so they return <code>NULL</code>. The recursive cases aren’t too hard either. We <code>lapply()</code> over pairlists and over calls to functions other than <code>&lt;-</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">find_assign &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    NULL</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    if (identical(x[[1]], quote(`&lt;-`))) &#123;</span><br><span class="line">      x[[2]]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      lapply(x, find_assign)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    lapply(x, find_assign)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">find_assign(quote(a &lt;- 1))</span><br><span class="line">find_assign(quote(&#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  b &lt;- 2</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>This function works for these simple cases, but the output is rather verbose and includes some extraneous <code>NULL</code>s. Instead of returning a list, let’s keep it simple and use a character vector. We’ll also test it with two slightly more complicated examples:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">find_assign2 &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    character()</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    if (identical(x[[1]], quote(`&lt;-`))) &#123;</span><br><span class="line">      as.character(x[[2]])</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      unlist(lapply(x, find_assign2))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    unlist(lapply(x, find_assign2))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find_assign2(quote(&#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  b &lt;- 2</span><br><span class="line">  a &lt;- 3</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">find_assign2(quote(&#123;</span><br><span class="line">  system.time(x &lt;- print(y &lt;- 5))</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>This is better, but we have two problems: dealing with repeated names and neglecting assignments inside other assignments. The fix for the first problem is easy. We need to wrap <code>unique()</code> around the recursive case to remove duplicate assignments. The fix for the second problem is a bit more tricky. We also need to recurse when the call is to <code>&lt;-</code>. <code>find_assign3()</code> implements both strategies:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">find_assign3 &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    character()</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    if (identical(x[[1]], quote(`&lt;-`))) &#123;</span><br><span class="line">      lhs &lt;- as.character(x[[2]])</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      lhs &lt;- character()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unique(c(lhs, unlist(lapply(x, find_assign3))))</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    unique(unlist(lapply(x, find_assign3)))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find_assign3(quote(&#123;</span><br><span class="line">  a &lt;- 1</span><br><span class="line">  b &lt;- 2</span><br><span class="line">  a &lt;- 3</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">find_assign3(quote(&#123;</span><br><span class="line">  system.time(x &lt;- print(y &lt;- 5))</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>We also need to test subassignment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find_assign3(quote(&#123;</span><br><span class="line">  l &lt;- list()</span><br><span class="line">  l$a &lt;- 5</span><br><span class="line">  names(l) &lt;- &quot;b&quot;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>We only want assignment of the object itself, not assignment that modifies a property of the object. Drawing the tree for the quoted object will help us see what condition to test for. The second element of the call to <code>&lt;-</code> should be a name, not another call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ast(l$a &lt;- 5)</span><br><span class="line">ast(names(l) &lt;- &quot;b&quot;)</span><br></pre></td></tr></table></figure>
<p>Now we have a complete version:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">find_assign4 &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    character()</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    if (identical(x[[1]], quote(`&lt;-`)) &amp;&amp; is.name(x[[2]])) &#123;</span><br><span class="line">      lhs &lt;- as.character(x[[2]])</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      lhs &lt;- character()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    unique(c(lhs, unlist(lapply(x, find_assign4))))</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    unique(unlist(lapply(x, find_assign4)))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">find_assign4(quote(&#123;</span><br><span class="line">  l &lt;- list()</span><br><span class="line">  l$a &lt;- 5</span><br><span class="line">  names(l) &lt;- &quot;b&quot;</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>While the complete version of this function is quite complicated, it’s important to remember we wrote it by working our way up by writing simple component parts.</p>
<h3 id="Modifying-the-call-tree"><a href="#Modifying-the-call-tree" class="headerlink" title="Modifying the call tree"></a><a href="id=&quot;modifying-code&quot;">Modifying the call tree</a></h3><p>The next step up in complexity is returning a modified call tree, like what you get with <code>bquote()</code>. <code>bquote()</code> is a slightly more flexible form of quote: it allows you to optionally quote and unquote some parts of an expression (it’s similar to the backtick operator in Lisp). Everything is quoted, <em>unless</em> it’s encapsulated in <code>.()</code> in which case it’s evaluated and the result is inserted:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 1</span><br><span class="line">b &lt;- 3</span><br><span class="line">bquote(a + b)</span><br><span class="line">bquote(a + .(b))</span><br><span class="line">bquote(.(a) + .(b))</span><br><span class="line">bquote(.(a + b))</span><br></pre></td></tr></table></figure>
<p>This provides a fairly easy way to control what gets evaluated and when. How does <code>bquote()</code> work? Below, I’ve rewritten <code>bquote()</code> to use the same style as our other functions: it expects input to be quoted already, and makes the base and recursive cases more explicit:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">bquote2 &lt;- function (x, where = parent.frame()) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    # Leave unchanged</span><br><span class="line">    x</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    if (identical(x[[1]], quote(.))) &#123;</span><br><span class="line">      # Call to .(), so evaluate</span><br><span class="line">      eval(x[[2]], where)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      # Otherwise apply recursively, turning result back into call</span><br><span class="line">      as.call(lapply(x, bquote2, where = where))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    as.pairlist(lapply(x, bquote2, where = where))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    # User supplied incorrect input</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- 1</span><br><span class="line">y &lt;- 2</span><br><span class="line">bquote2(quote(x == .(x)))</span><br><span class="line">bquote2(quote(function(x = .(x)) &#123;</span><br><span class="line">  x + .(y)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>The main difference between this and the previous recursive functions is that after we process each element of calls and pairlists, we need to coerce them back to their original types.</p>
<p>Note that functions that modify the source tree are most useful for creating expressions that are used at run-time, rather than those that are saved back to the original source file. This is because all non-code information is lost:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bquote2(quote(function(x = .(x)) &#123;</span><br><span class="line">  # This is a comment</span><br><span class="line">  x +  # funky spacing</span><br><span class="line">    .(y)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>
<p>These tools are somewhat similar to Lisp macros, as discussed in <a href="http://www.r-project.org/doc/Rnews/Rnews_2001-3.pdf#page=10" target="_blank" rel="external">Programmer’s Niche: Macros in R</a> by Thomas Lumley. However, macros are run at compile-time, which doesn’t have any meaning in R, and always return expressions. They’re also somewhat like Lisp <a href="http://en.wikipedia.org/wiki/Fexpr" target="_blank" rel="external">fexprs</a>. A fexpr is a function where the arguments are not evaluated by default. The terms macro and fexpr are useful to know when looking for useful techniques from other languages.</p>
<h3 id="Exercises-47"><a href="#Exercises-47" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Why does <code>logical_abbr()</code> use a for loop instead of a functional    like <code>lapply()</code>?</li>
<li><p><code>logical_abbr()</code> works when given quoted objects, but doesn’t work when    given an existing function, as in the example below. Why not? How could    you modify <code>logical_abbr()</code> to work with functions? Think about what    components make up a function.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x = TRUE) &#123;</span><br><span class="line">  g(x + T)</span><br><span class="line">&#125;</span><br><span class="line">logical_abbr(f)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Write a function called <code>ast_type()</code> that returns either “constant”,    “name”, “call”, or “pairlist”. Rewrite <code>logical_abbr()</code>, <code>find_assign()</code>,    and <code>bquote2()</code> to use this function with <code>switch()</code> instead of nested if    statements.</p>
</li>
<li>Write a function that extracts all calls to a function. Compare your    function to <code>pryr::fun_calls()</code>.</li>
<li>Write a wrapper around <code>bquote2()</code> that does non-standard evaluation    so that you don’t need to explicitly <code>quote()</code> the input.</li>
<li><p>Compare <code>bquote2()</code> to <code>bquote()</code>. There is a subtle bug in <code>bquote()</code>:    it won’t replace calls to functions with no arguments. Why?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bquote(.(x)(), list(x = quote(f)))</span><br><span class="line">bquote(.(x)(1), list(x = quote(f)))</span><br></pre></td></tr></table></figure>
</li>
<li><p>Improve the base <code>recurse_call()</code> template to also work with lists of    functions and expressions (e.g., as from <code>parse(path_to_file))</code>.</p>
</li>
</ol>
<hr>
<h1 id="Domain-specific-languages"><a href="#Domain-specific-languages" class="headerlink" title="Domain specific languages"></a><a href="id=&quot;dsl&quot;">Domain specific languages</a></h1><p>The combination of first class environments, lexical scoping, non-standard evaluation, and metaprogramming gives us a powerful toolkit for creating embedded domain specific languages (DSLs) in R. Embedded DSLs take advantage of a host language’s parsing and execution framework, but adjust the semantics to make them more suitable for a specific task. DSLs are a very large topic, and this chapter will only scratch the surface, focussing on important implementation techniques rather than on how you might come up with the language in the first place. If you’re interested in learning more, I highly recommend <a href="http://amzn.com/0321712943?tag=devtools-20" target="_blank" rel="external"><em>Domain Specific Languages</em></a> by Martin Fowler. It discusses many options for creating a DSL and provides many examples of different languages.</p>
<p>R’s most popular DSL is the formula specification, which provides a succinct way of describing the relationship between predictors and the response in a model. Other examples include ggplot2 (for visualisation) and plyr (for data manipulation). Another package that makes extensive use of these ideas is dplyr, which provides <code>translate_sql()</code> to convert R expressions into SQL:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">library(dplyr)</span><br><span class="line">translate_sql(sin(x) + tan(y))</span><br><span class="line">translate_sql(x &lt; 5 &amp; !(y &gt;= 5))</span><br><span class="line">translate_sql(first %like% &quot;Had*&quot;)</span><br><span class="line">translate_sql(first %in% c(&quot;John&quot;, &quot;Roger&quot;, &quot;Robert&quot;))</span><br><span class="line">translate_sql(like == 7)</span><br></pre></td></tr></table></figure>
<p>This chapter will develop two simple, but useful DSLs: one to generate HTML, and the other to turn mathematical expressions expressed in R code into LaTeX.</p>
<h5 id="Prerequisites-7"><a href="#Prerequisites-7" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>This chapter together pulls together many techniques discussed elsewhere in the book. In particular, you’ll need to understand environments, functionals, non-standard evaluation, and metaprogramming.</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><a href="id=&quot;html&quot;">HTML</a></h2><p>HTML (hypertext markup language) is the language that underlies the majority of the web. It’s a special case of SGML (standard generalised markup language), and it’s similar but not identical to XML (extensible markup language). HTML looks like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">'first'</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text &amp;amp; <span class="tag">&lt;<span class="name">b</span>&gt;</span>some bold text.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'myimg.png'</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">height</span>=<span class="string">'100'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Even if you’ve never looked at HTML before, you can still see that the key component of its coding structure is tags, <code>&lt;tag&gt;&lt;/tag&gt;</code>. Tags can be contained inside other tags and intermingled with text. Generally, HTML ignores whitespaces (a sequence of whitespace is equivalent to a single space) so you could put the previous example on a single line and it would still display the same in a browser:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">'first'</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text &amp;amp; <span class="tag">&lt;<span class="name">b</span>&gt;</span>some bold</span><br><span class="line">text.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'myimg.png'</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">height</span>=<span class="string">'100'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>However, like R code, you usually want to indent HTML to make the structure more obvious.</p>
<p>There are over 100 HTML tags. But to illustrate HTML, we’re going to focus on just a few:</p>
<ul>
<li><code>&lt;body&gt;</code>: the top-level tag that all content is enclosed within</li>
<li><code>&lt;h1&gt;</code>: creates a heading-1, the top level heading</li>
<li><code>&lt;p&gt;</code>: creates a paragraph</li>
<li><code>&lt;b&gt;</code>: emboldens text</li>
<li><code>&lt;img&gt;</code>: embeds an image</li>
</ul>
<p>(You probably guessed what these did already!)</p>
<p>Tags can also have named attributes. They look like <code>&lt;tag a=&quot;a&quot; b=&quot;b&quot;&gt;&lt;/tag&gt;</code>. Tag values should always be enclosed in either single or double quotes. Two important attributes used with just about every tag are <code>id</code> and <code>class</code>. These are used in conjunction with CSS (cascading style sheets) in order to control the style of the document.</p>
<p>Some tags, like <code>&lt;img&gt;</code>, can’t have any content. These are called <strong>void tags</strong> and have a slightly different syntax. Instead of writing <code>&lt;img&gt;&lt;/img&gt;</code>, you write <code>&lt;img /&gt;</code>. Since they have no content, attributes are more important. In fact, <code>img</code> has three that are used for almost every image: <code>src</code> (where the image lives), <code>width</code>, and <code>height</code>.</p>
<p>Because <code>&lt;</code> and <code>&gt;</code> have special meanings in HTML, you can’t write them directly. Instead you have to use the HTML escapes: <code>&amp;gt;</code> and <code>&amp;lt;</code>. And, since those escapes use <code>&amp;</code>, if you want a literal ampersand you have to escape with <code>&amp;amp;</code>.</p>
<h3 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h3><p>Our goal is to make it easy to generate HTML from R. To give a concrete example, we want to generate the following HTML with code that looks as similar to the HTML as possible.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">'first'</span>&gt;</span>A heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some text &amp;amp; <span class="tag">&lt;<span class="name">b</span>&gt;</span>some bold text.<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'myimg.png'</span> <span class="attr">width</span>=<span class="string">'100'</span> <span class="attr">height</span>=<span class="string">'100'</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>To do so, we will work our way up to the following DSL:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with_html(body(</span><br><span class="line">  h1(&quot;A heading&quot;, id = &quot;first&quot;),</span><br><span class="line">  p(&quot;Some text &amp;&quot;, b(&quot;some bold text.&quot;)),</span><br><span class="line">  img(src = &quot;myimg.png&quot;, width = 100, height = 100)</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p>Note that the nesting of function calls is the same as the nesting of tags: unnamed arguments become the content of the tag, and named arguments become their attributes. Because tags and text are clearly distinct in this API, we can automatically escape <code>&amp;</code> and other special characters.</p>
<h3 id="Escaping"><a href="#Escaping" class="headerlink" title="Escaping"></a>Escaping</h3><p>Escaping is so fundamental to DSLs that it’ll be our first topic. To create a way of escaping characters, we need to give “&amp;” a special meaning without ending up double-escaping. The easiest way to do this is to create an S3 class that distinguishes between regular text (that needs escaping) and HTML (that doesn’t).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html &lt;- function(x) structure(x, class = &quot;html&quot;)</span><br><span class="line">print.html &lt;- function(x, ...) &#123;</span><br><span class="line">  out &lt;- paste0(&quot;&lt;HTML&gt; &quot;, x)</span><br><span class="line">  cat(paste(strwrap(out), collapse = &quot;\n&quot;), &quot;\n&quot;, sep = &quot;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knit_print.html &lt;- function(x, ...) print(x)</span><br></pre></td></tr></table></figure>
<p>We then write an escape method that leaves HTML unchanged and escapes the special characters (<code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>) for ordinary text. We also add a list method for convenience.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">escape &lt;- function(x) UseMethod(&quot;escape&quot;)</span><br><span class="line">escape.html &lt;- function(x) x</span><br><span class="line">escape.character &lt;- function(x) &#123;</span><br><span class="line">  x &lt;- gsub(&quot;&amp;&quot;, &quot;&amp;amp;&quot;, x)</span><br><span class="line">  x &lt;- gsub(&quot;&lt;&quot;, &quot;&amp;lt;&quot;, x)</span><br><span class="line">  x &lt;- gsub(&quot;&gt;&quot;, &quot;&amp;gt;&quot;, x)</span><br><span class="line"></span><br><span class="line">  html(x)</span><br><span class="line">&#125;</span><br><span class="line">escape.list &lt;- function(x) &#123;</span><br><span class="line">  lapply(x, escape)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Now we check that it works</span><br><span class="line">escape(&quot;This is some text.&quot;)</span><br><span class="line">escape(&quot;x &gt; 1 &amp; y &lt; 2&quot;)</span><br><span class="line"></span><br><span class="line"># Double escaping is not a problem</span><br><span class="line">escape(escape(&quot;This is some text. 1 &gt; 2&quot;))</span><br><span class="line"></span><br><span class="line"># And text we know is HTML doesn&apos;t get escaped.</span><br><span class="line">escape(html(&quot;&lt;hr /&gt;&quot;))</span><br></pre></td></tr></table></figure>
<p>Escaping is an important component for many DSLs.</p>
<h3 id="Basic-tag-functions"><a href="#Basic-tag-functions" class="headerlink" title="Basic tag functions"></a>Basic tag functions</h3><p>Next, we’ll write a few simple tag functions and then figure out how to generalise this function to cover all possible HTML tags. Let’s start with <code>&lt;p&gt;</code>. HTML tags can have both attributes (e.g., id or class) and children (like <code>&lt;b&gt;</code> or <code>&lt;i&gt;</code>). We need some way of separating these in the function call. Given that attributes are named values and children don’t have names, it seems natural to separate using named arguments from unnamed ones. For example, a call to <code>p()</code> might look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p(&quot;Some text.&quot;, b(&quot;some bold text&quot;), class = &quot;mypara&quot;)</span><br></pre></td></tr></table></figure>
<p>We could list all the possible attributes of the <code>&lt;p&gt;</code> tag in the function definition. However, that’s hard not only because there are many attributes, but also because it’s possible to use <a href="http://html5doctor.com/html5-custom-data-attributes/" target="_blank" rel="external">custom attributes</a>. Instead, we’ll just use <code>...</code> and separate the components based on whether or not they are named. To do this correctly, we need to be aware of an inconsistency in <code>names()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names(c(a = 1, b = 2))</span><br><span class="line">names(c(a = 1, 2))</span><br><span class="line">names(c(1, 2))</span><br></pre></td></tr></table></figure>
<p>With this in mind, we create two helper functions to extract the named and unnamed components of a vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">named &lt;- function(x) &#123;</span><br><span class="line">  if (is.null(names(x))) return(NULL)</span><br><span class="line">  x[names(x) != &quot;&quot;]</span><br><span class="line">&#125;</span><br><span class="line">unnamed &lt;- function(x) &#123;</span><br><span class="line">  if (is.null(names(x))) return(x)</span><br><span class="line">  x[names(x) == &quot;&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can now create our <code>p()</code> function. Notice that there’s one new function here: <code>html_attributes()</code>. It uses a list of name-value pairs to create the correct specification of HTML attributes. It’s a little complicated (in part, because it deals with some idiosyncracies of HTML that I haven’t mentioned.). However, because it’s not that important and doesn’t introduce any new ideas, I won’t discuss it here (you can find the source online).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">source(&quot;dsl-html-attributes.r&quot;, local = TRUE)</span><br><span class="line">p &lt;- function(...) &#123;</span><br><span class="line">  args &lt;- list(...)</span><br><span class="line">  attribs &lt;- html_attributes(named(args))</span><br><span class="line">  children &lt;- unlist(escape(unnamed(args)))</span><br><span class="line"></span><br><span class="line">  html(paste0(</span><br><span class="line">    &quot;&lt;p&quot;, attribs, &quot;&gt;&quot;,</span><br><span class="line">    paste(children, collapse = &quot;&quot;),</span><br><span class="line">    &quot;&lt;/p&gt;&quot;</span><br><span class="line">  ))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p(&quot;Some text&quot;)</span><br><span class="line">p(&quot;Some text&quot;, id = &quot;myid&quot;)</span><br><span class="line">p(&quot;Some text&quot;, image = NULL)</span><br><span class="line">p(&quot;Some text&quot;, class = &quot;important&quot;, &quot;data-value&quot; = 10)</span><br></pre></td></tr></table></figure>
<h3 id="Tag-functions"><a href="#Tag-functions" class="headerlink" title="Tag functions"></a>Tag functions</h3><p>With this definition of <code>p()</code>, it’s pretty easy to see how we can apply this approach to different tags: we just need to replace <code>&quot;p&quot;</code> with a variable.  We’ll use a closure to make it easy to generate a tag function given a tag name:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">tag &lt;- function(tag) &#123;</span><br><span class="line">  force(tag)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    args &lt;- list(...)</span><br><span class="line">    attribs &lt;- html_attributes(named(args))</span><br><span class="line">    children &lt;- unlist(escape(unnamed(args)))</span><br><span class="line"></span><br><span class="line">    html(paste0(</span><br><span class="line">      &quot;&lt;&quot;, tag, attribs, &quot;&gt;&quot;,</span><br><span class="line">      paste(children, collapse = &quot;&quot;),</span><br><span class="line">      &quot;&lt;/&quot;, tag, &quot;&gt;&quot;</span><br><span class="line">    ))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(We’re forcing the evaluation of <code>tag</code> with the expectation that we’ll be calling this function from a loop. This will help to avoid potential bugs caused by lazy evaluation.)</p>
<p>Now we can run our earlier example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p &lt;- tag(&quot;p&quot;)</span><br><span class="line">b &lt;- tag(&quot;b&quot;)</span><br><span class="line">i &lt;- tag(&quot;i&quot;)</span><br><span class="line">p(&quot;Some text.&quot;, b(&quot;Some bold text&quot;), i(&quot;Some italic text&quot;),</span><br><span class="line">  class = &quot;mypara&quot;)</span><br></pre></td></tr></table></figure>
<p>Before we continue writing functions for every possible HTML tag, we need to create a variant of <code>tag()</code> for void tags. It can be very similar to <code>tag()</code>, but if there are any unnamed tags, it needs to throw an error. Also note that the tag itself will look slightly different:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void_tag &lt;- function(tag) &#123;</span><br><span class="line">  force(tag)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    args &lt;- list(...)</span><br><span class="line">    if (length(unnamed(args)) &gt; 0) &#123;</span><br><span class="line">      stop(&quot;Tag &quot;, tag, &quot; can not have children&quot;, call. = FALSE)</span><br><span class="line">    &#125;</span><br><span class="line">    attribs &lt;- html_attributes(named(args))</span><br><span class="line"></span><br><span class="line">    html(paste0(&quot;&lt;&quot;, tag, attribs, &quot; /&gt;&quot;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img &lt;- void_tag(&quot;img&quot;)</span><br><span class="line">img(src = &quot;myimage.png&quot;, width = 100, height = 100)</span><br></pre></td></tr></table></figure>
<h3 id="Processing-all-tags"><a href="#Processing-all-tags" class="headerlink" title="Processing all tags"></a>Processing all tags</h3><p>Next we need a list of all the HTML tags:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tags &lt;- c(&quot;a&quot;, &quot;abbr&quot;, &quot;address&quot;, &quot;article&quot;, &quot;aside&quot;, &quot;audio&quot;,</span><br><span class="line">  &quot;b&quot;,&quot;bdi&quot;, &quot;bdo&quot;, &quot;blockquote&quot;, &quot;body&quot;, &quot;button&quot;, &quot;canvas&quot;,</span><br><span class="line">  &quot;caption&quot;,&quot;cite&quot;, &quot;code&quot;, &quot;colgroup&quot;, &quot;data&quot;, &quot;datalist&quot;,</span><br><span class="line">  &quot;dd&quot;, &quot;del&quot;,&quot;details&quot;, &quot;dfn&quot;, &quot;div&quot;, &quot;dl&quot;, &quot;dt&quot;, &quot;em&quot;,</span><br><span class="line">  &quot;eventsource&quot;,&quot;fieldset&quot;, &quot;figcaption&quot;, &quot;figure&quot;, &quot;footer&quot;,</span><br><span class="line">  &quot;form&quot;, &quot;h1&quot;, &quot;h2&quot;, &quot;h3&quot;, &quot;h4&quot;, &quot;h5&quot;, &quot;h6&quot;, &quot;head&quot;, &quot;header&quot;,</span><br><span class="line">  &quot;hgroup&quot;, &quot;html&quot;, &quot;i&quot;,&quot;iframe&quot;, &quot;ins&quot;, &quot;kbd&quot;, &quot;label&quot;,</span><br><span class="line">  &quot;legend&quot;, &quot;li&quot;, &quot;mark&quot;, &quot;map&quot;,&quot;menu&quot;, &quot;meter&quot;, &quot;nav&quot;,</span><br><span class="line">  &quot;noscript&quot;, &quot;object&quot;, &quot;ol&quot;, &quot;optgroup&quot;, &quot;option&quot;, &quot;output&quot;,</span><br><span class="line">  &quot;p&quot;, &quot;pre&quot;, &quot;progress&quot;, &quot;q&quot;, &quot;ruby&quot;, &quot;rp&quot;,&quot;rt&quot;, &quot;s&quot;, &quot;samp&quot;,</span><br><span class="line">  &quot;script&quot;, &quot;section&quot;, &quot;select&quot;, &quot;small&quot;, &quot;span&quot;, &quot;strong&quot;,</span><br><span class="line">  &quot;style&quot;, &quot;sub&quot;, &quot;summary&quot;, &quot;sup&quot;, &quot;table&quot;, &quot;tbody&quot;, &quot;td&quot;,</span><br><span class="line">  &quot;textarea&quot;, &quot;tfoot&quot;, &quot;th&quot;, &quot;thead&quot;, &quot;time&quot;, &quot;title&quot;, &quot;tr&quot;,</span><br><span class="line">  &quot;u&quot;, &quot;ul&quot;, &quot;var&quot;, &quot;video&quot;)</span><br><span class="line"></span><br><span class="line">void_tags &lt;- c(&quot;area&quot;, &quot;base&quot;, &quot;br&quot;, &quot;col&quot;, &quot;command&quot;, &quot;embed&quot;,</span><br><span class="line">  &quot;hr&quot;, &quot;img&quot;, &quot;input&quot;, &quot;keygen&quot;, &quot;link&quot;, &quot;meta&quot;, &quot;param&quot;,</span><br><span class="line">  &quot;source&quot;, &quot;track&quot;, &quot;wbr&quot;)</span><br></pre></td></tr></table></figure>
<p>If you look at this list carefully, you’ll see there are quite a few tags that have the same name as base R functions (<code>body</code>, <code>col</code>, <code>q</code>, <code>source</code>, <code>sub</code>, <code>summary</code>, <code>table</code>), and others that have the same name as popular packages (e.g., <code>map</code>). This means we don’t want to make all the functions available by default, in either the global environment or the package environment. Instead, we’ll put them in a list and add some additional code to make it easy to use them when desired. First, we make a named list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tag_fs &lt;- c(</span><br><span class="line">  setNames(lapply(tags, tag), tags),</span><br><span class="line">  setNames(lapply(void_tags, void_tag), void_tags)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>This gives us an explicit (but verbose) way to call tag functions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tag_fs$p(&quot;Some text.&quot;, tag_fs$b(&quot;Some bold text&quot;),</span><br><span class="line">  tag_fs$i(&quot;Some italic text&quot;))</span><br></pre></td></tr></table></figure>
<p>We can then finish off our HTML DSL with a function that allows us to evaluate code in the context of that list:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with_html &lt;- function(code) &#123;</span><br><span class="line">  eval(substitute(code), tag_fs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This gives us a succinct API which allows us to write HTML when we need it but doesn’t clutter up the namespace when we don’t.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">with_html(body(</span><br><span class="line">  h1(&quot;A heading&quot;, id = &quot;first&quot;),</span><br><span class="line">  p(&quot;Some text &amp;&quot;, b(&quot;some bold text.&quot;)),</span><br><span class="line">  img(src = &quot;myimg.png&quot;, width = 100, height = 100)</span><br><span class="line">))</span><br></pre></td></tr></table></figure>
<p>If you want to access the R function overridden by an HTML tag with the same name inside <code>with_html()</code>, you can use the full <code>package::function</code> specification.</p>
<h3 id="Exercises-48"><a href="#Exercises-48" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>The escaping rules for <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags are different: you    don’t want to escape angle brackets or ampersands, but you do want to    escape <code>&lt;/script&gt;</code> or <code>&lt;/style&gt;</code>.  Adapt the code above to follow these    rules.</li>
<li><p>The use of <code>...</code> for all functions has some big downsides. There’s no    input validation and there will be little information in the    documentation or autocomplete about how they are used in the function.    Create a new function that, when given a named list of tags and their    attribute names (like below), creates functions which address this problem.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list(</span><br><span class="line">  a = c(&quot;href&quot;),</span><br><span class="line">  img = c(&quot;src&quot;, &quot;width&quot;, &quot;height&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>All tags should get <code>class</code> and <code>id</code> attributes.</p>
</li>
<li><p>Currently the HTML doesn’t look terribly pretty, and it’s hard to see the   structure. How could you adapt <code>tag()</code> to do indenting and formatting?</p>
</li>
</ol>
<h2 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a><a href="id=&quot;latex&quot;">LaTeX</a></h2><p>The next DSL will convert R expressions into their LaTeX math equivalents. (This is a bit like <code>?plotmath</code>, but for text instead of plots.) LaTeX is the lingua franca of mathematicians and statisticians: whenever you want to describe an equation in text (e.g., in an email), you write it as a LaTeX equation. Since many reports are produced using both R and LaTeX, it might be useful to be able to automatically convert mathematical expressions from one language to the other.</p>
<p>Because we need to convert both functions and names, this mathematical DSL will be more complicated than the HTML DSL. We’ll also need to create a “default” conversion, so that functions we don’t know about get a standard conversion. Like the HTML DSL, we’ll also write functionals to make it easier to generate the translators.</p>
<p>Before we begin, let’s quickly cover how formulas are expressed in LaTeX.</p>
<h3 id="LaTeX-mathematics"><a href="#LaTeX-mathematics" class="headerlink" title="LaTeX mathematics"></a>LaTeX mathematics</h3><p>LaTeX mathematics are complex. Fortunately, they are <a href="http://en.wikibooks.org/wiki/LaTeX/Mathematics" target="_blank" rel="external">well documented</a>. That said, they have a fairly simple structure:</p>
<ul>
<li>Most simple mathematical equations are written in the same way you’d type  them in R: <code>x * y</code>, <code>z ^ 5</code>. Subscripts are written using <code>_</code> (e.g., <code>x_1</code>).</li>
<li>Special characters start with a <code>\</code>: <code>\pi</code> = π, <code>\pm</code> = ±, and so on.  There are a huge number of symbols available in LaTeX. Googling for  <code>latex math symbols</code> will return many  <a href="http://www.sunilpatel.co.uk/latex-type/latex-math-symbols/" target="_blank" rel="external">lists</a>.  There’s even <a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="external">a service</a> that  will look up the symbol you sketch in the browser.</li>
<li>More complicated functions look like <code>\name{arg1}{arg2}</code>. For example, to  write a fraction you’d use <code>\frac{a}{b}</code>. To write a square root, you’d use  <code>\sqrt{a}</code>.</li>
<li>To group elements together use <code>{}</code>: i.e., <code>x ^ a + b</code> vs. <code>x ^ {a + b}</code>.</li>
<li>In good math typesetting, a distinction is made between variables and  functions. But without extra information, LaTeX doesn’t know whether  <code>f(a * b)</code> represents calling the function <code>f</code> with input <code>a * b</code>,  or is shorthand for <code>f * (a * b)</code>. If <code>f</code> is a function, you can tell  LaTeX to typeset it using an upright font with <code>\textrm{f}(a * b)</code>.</li>
</ul>
<h3 id="Goal-1"><a href="#Goal-1" class="headerlink" title="Goal"></a>Goal</h3><p>Our goal is to use these rules to automatically convert an R expression to its appropriate LaTeX representation. We’ll tackle this in four stages:</p>
<ul>
<li>Convert known symbols: <code>pi</code> -&gt; <code>\pi</code></li>
<li>Leave other symbols unchanged: <code>x</code> -&gt; <code>x</code>, <code>y</code> -&gt; <code>y</code></li>
<li>Convert known functions to their special forms: <code>sqrt(frac(a, b))</code> -&gt;  <code>\sqrt{\frac{a, b}}</code></li>
<li>Wrap unknown functions with <code>\textrm</code>: <code>f(a)</code> -&gt; <code>\textrm{f}(a)</code></li>
</ul>
<p>We’ll code this translation in the opposite direction of what we did with the HTML DSL. We’ll start with infrastructure, because that makes it easy to experiment with our DSL, and then work our way back down to generate the desired output.</p>
<h3 id="to-math"><a href="#to-math" class="headerlink" title="to_math"></a><code>to_math</code></h3><p>To begin, we need a wrapper function that will convert R expressions into LaTeX math expressions. This will work the same way as <code>to_html()</code>: capture the unevaluated expression and evaluate it in a special environment. However, the special environment is no longer fixed. It will vary depending on the expression. We do this in order to be able to deal with symbols and functions that we haven’t yet seen.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">to_math &lt;- function(x) &#123;</span><br><span class="line">  expr &lt;- substitute(x)</span><br><span class="line">  eval(expr, latex_env(expr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Known-symbols"><a href="#Known-symbols" class="headerlink" title="Known symbols"></a>Known symbols</h3><p>Our first step is to create an environment that will convert the special LaTeX symbols used for Greek, e.g., <code>pi</code> to <code>\pi</code>. This is the same basic trick used in <code>subset</code> that makes it possible to select column ranges by name (<code>subset(mtcars, , cyl:wt)</code>): bind a name to a string in a special environment.</p>
<p>We create that environment by naming a vector, converting the vector into a list, and converting the list into an environment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">greek &lt;- c(</span><br><span class="line">  &quot;alpha&quot;, &quot;theta&quot;, &quot;tau&quot;, &quot;beta&quot;, &quot;vartheta&quot;, &quot;pi&quot;, &quot;upsilon&quot;,</span><br><span class="line">  &quot;gamma&quot;, &quot;gamma&quot;, &quot;varpi&quot;, &quot;phi&quot;, &quot;delta&quot;, &quot;kappa&quot;, &quot;rho&quot;,</span><br><span class="line">  &quot;varphi&quot;, &quot;epsilon&quot;, &quot;lambda&quot;, &quot;varrho&quot;, &quot;chi&quot;, &quot;varepsilon&quot;,</span><br><span class="line">  &quot;mu&quot;, &quot;sigma&quot;, &quot;psi&quot;, &quot;zeta&quot;, &quot;nu&quot;, &quot;varsigma&quot;, &quot;omega&quot;, &quot;eta&quot;,</span><br><span class="line">  &quot;xi&quot;, &quot;Gamma&quot;, &quot;Lambda&quot;, &quot;Sigma&quot;, &quot;Psi&quot;, &quot;Delta&quot;, &quot;Xi&quot;,</span><br><span class="line">  &quot;Upsilon&quot;, &quot;Omega&quot;, &quot;Theta&quot;, &quot;Pi&quot;, &quot;Phi&quot;)</span><br><span class="line">greek_list &lt;- setNames(paste0(&quot;\\&quot;, greek), greek)</span><br><span class="line">greek_env &lt;- list2env(as.list(greek_list), parent = emptyenv())</span><br></pre></td></tr></table></figure>
<p>We can then check it:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">latex_env &lt;- function(expr) &#123;</span><br><span class="line">  greek_env</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to_math(pi)</span><br><span class="line">to_math(beta)</span><br></pre></td></tr></table></figure>
<h3 id="Unknown-symbols"><a href="#Unknown-symbols" class="headerlink" title="Unknown symbols"></a>Unknown symbols</h3><p>If a symbol isn’t Greek, we want to leave it as is. This is tricky because we don’t know in advance what symbols will be used, and we can’t possibly generate them all. So we’ll use a little bit of metaprogramming to find out what symbols are present in an expression. The <code>all_names</code> function takes an expression and does the following: if it’s a name, it converts it to a string; if it’s a call, it recurses down through its arguments.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">all_names &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x)) &#123;</span><br><span class="line">    character()</span><br><span class="line">  &#125; else if (is.name(x)) &#123;</span><br><span class="line">    as.character(x)</span><br><span class="line">  &#125; else if (is.call(x) || is.pairlist(x)) &#123;</span><br><span class="line">    children &lt;- lapply(x[-1], all_names)</span><br><span class="line">    unique(unlist(children))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x),</span><br><span class="line">      call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">all_names(quote(x + y + f(a, b, c, 10)))</span><br></pre></td></tr></table></figure>
<p>We now want to take that list of symbols, and convert it to an environment so that each symbol is mapped to its corresponding string representation (e.g., so <code>eval(quote(x), env)</code> yields <code>&quot;x&quot;</code>). We again use the pattern of converting a named character vector to a list, then converting the list to an environment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">latex_env &lt;- function(expr) &#123;</span><br><span class="line">  names &lt;- all_names(expr)</span><br><span class="line">  symbol_list &lt;- setNames(as.list(names), names)</span><br><span class="line">  symbol_env &lt;- list2env(symbol_list)</span><br><span class="line"></span><br><span class="line">  symbol_env</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to_math(x)</span><br><span class="line">to_math(longvariablename)</span><br><span class="line">to_math(pi)</span><br></pre></td></tr></table></figure>
<p>This works, but we need to combine it with the Greek symbols environment. Since we want to give preference to Greek over defaults (e.g., <code>to_math(pi)</code> should give <code>&quot;\\pi&quot;</code>, not <code>&quot;pi&quot;</code>), <code>symbol_env</code> needs to be the parent of <code>greek_env</code>. To do that, we need to make a copy of <code>greek_env</code> with a new parent. While R doesn’t come with a function for cloning environments, we can easily create one by combining two existing functions:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clone_env &lt;- function(env, parent = parent.env(env)) &#123;</span><br><span class="line">  list2env(as.list(env), parent = parent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This gives us a function that can convert both known (Greek) and unknown symbols.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">latex_env &lt;- function(expr) &#123;</span><br><span class="line">  # Unknown symbols</span><br><span class="line">  names &lt;- all_names(expr)</span><br><span class="line">  symbol_list &lt;- setNames(as.list(names), names)</span><br><span class="line">  symbol_env &lt;- list2env(symbol_list)</span><br><span class="line"></span><br><span class="line">  # Known symbols</span><br><span class="line">  clone_env(greek_env, symbol_env)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to_math(x)</span><br><span class="line">to_math(longvariablename)</span><br><span class="line">to_math(pi)</span><br></pre></td></tr></table></figure>
<h3 id="Known-functions"><a href="#Known-functions" class="headerlink" title="Known functions"></a>Known functions</h3><p>Next we’ll add functions to our DSL. We’ll start with a couple of helper closures that make it easy to add new unary and binary operators. These functions are very simple: they only assemble strings. (Again we use <code>force()</code> to make sure the arguments are evaluated at the right time.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">unary_op &lt;- function(left, right) &#123;</span><br><span class="line">  force(left)</span><br><span class="line">  force(right)</span><br><span class="line">  function(e1) &#123;</span><br><span class="line">    paste0(left, e1, right)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">binary_op &lt;- function(sep) &#123;</span><br><span class="line">  force(sep)</span><br><span class="line">  function(e1, e2) &#123;</span><br><span class="line">    paste0(e1, sep, e2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using these helpers, we can map a few illustrative examples of converting R to LaTeX. Note that with R’s lexical scoping rules helping us, we can easily provide new meanings for standard functions like <code>+</code>, <code>-</code>, and <code>*</code>, and even <code>(</code> and <code>{</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># Binary operators</span><br><span class="line">f_env &lt;- new.env(parent = emptyenv())</span><br><span class="line">f_env$&quot;+&quot; &lt;- binary_op(&quot; + &quot;)</span><br><span class="line">f_env$&quot;-&quot; &lt;- binary_op(&quot; - &quot;)</span><br><span class="line">f_env$&quot;*&quot; &lt;- binary_op(&quot; * &quot;)</span><br><span class="line">f_env$&quot;/&quot; &lt;- binary_op(&quot; / &quot;)</span><br><span class="line">f_env$&quot;^&quot; &lt;- binary_op(&quot;^&quot;)</span><br><span class="line">f_env$&quot;[&quot; &lt;- binary_op(&quot;_&quot;)</span><br><span class="line"></span><br><span class="line"># Grouping</span><br><span class="line">f_env$&quot;&#123;&quot; &lt;- unary_op(&quot;\\left&#123; &quot;, &quot; \\right&#125;&quot;)</span><br><span class="line">f_env$&quot;(&quot; &lt;- unary_op(&quot;\\left( &quot;, &quot; \\right)&quot;)</span><br><span class="line">f_env$paste &lt;- paste</span><br><span class="line"></span><br><span class="line"># Other math functions</span><br><span class="line">f_env$sqrt &lt;- unary_op(&quot;\\sqrt&#123;&quot;, &quot;&#125;&quot;)</span><br><span class="line">f_env$sin &lt;- unary_op(&quot;\\sin(&quot;, &quot;)&quot;)</span><br><span class="line">f_env$log &lt;- unary_op(&quot;\\log(&quot;, &quot;)&quot;)</span><br><span class="line">f_env$abs &lt;- unary_op(&quot;\\left| &quot;, &quot;\\right| &quot;)</span><br><span class="line">f_env$frac &lt;- function(a, b) &#123;</span><br><span class="line">  paste0(&quot;\\frac&#123;&quot;, a, &quot;&#125;&#123;&quot;, b, &quot;&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Labelling</span><br><span class="line">f_env$hat &lt;- unary_op(&quot;\\hat&#123;&quot;, &quot;&#125;&quot;)</span><br><span class="line">f_env$tilde &lt;- unary_op(&quot;\\tilde&#123;&quot;, &quot;&#125;&quot;)</span><br></pre></td></tr></table></figure>
<p>We again modify <code>latex_env()</code> to include this environment. It should be the last environment R looks for names in: in other words, <code>sin(sin)</code> should work.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">latex_env &lt;- function(expr) &#123;</span><br><span class="line">  # Known functions</span><br><span class="line">  f_env</span><br><span class="line"></span><br><span class="line">  # Default symbols</span><br><span class="line">  names &lt;- all_names(expr)</span><br><span class="line">  symbol_list &lt;- setNames(as.list(names), names)</span><br><span class="line">  symbol_env &lt;- list2env(symbol_list, parent = f_env)</span><br><span class="line"></span><br><span class="line">  # Known symbols</span><br><span class="line">  greek_env &lt;- clone_env(greek_env, parent = symbol_env)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to_math(sin(x + pi))</span><br><span class="line">to_math(log(x_i ^ 2))</span><br><span class="line">to_math(sin(sin))</span><br></pre></td></tr></table></figure>
<h3 id="Unknown-functions"><a href="#Unknown-functions" class="headerlink" title="Unknown functions"></a>Unknown functions</h3><p>Finally, we’ll add a default for functions that we don’t yet know about. Like the unknown names, we can’t know in advance what these will be, so we again use a little metaprogramming to figure them out:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">all_calls &lt;- function(x) &#123;</span><br><span class="line">  if (is.atomic(x) || is.name(x)) &#123;</span><br><span class="line">    character()</span><br><span class="line">  &#125; else if (is.call(x)) &#123;</span><br><span class="line">    fname &lt;- as.character(x[[1]])</span><br><span class="line">    children &lt;- lapply(x[-1], all_calls)</span><br><span class="line">    unique(c(fname, unlist(children)))</span><br><span class="line">  &#125; else if (is.pairlist(x)) &#123;</span><br><span class="line">    unique(unlist(lapply(x[-1], all_calls), use.names = FALSE))</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    stop(&quot;Don&apos;t know how to handle type &quot;, typeof(x), call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">all_calls(quote(f(g + b, c, d(a))))</span><br></pre></td></tr></table></figure>
<p>And we need a closure that will generate the functions for each unknown call.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unknown_op &lt;- function(op) &#123;</span><br><span class="line">  force(op)</span><br><span class="line">  function(...) &#123;</span><br><span class="line">    contents &lt;- paste(..., collapse = &quot;, &quot;)</span><br><span class="line">    paste0(&quot;\\mathrm&#123;&quot;, op, &quot;&#125;(&quot;, contents, &quot;)&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And again we update <code>latex_env()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">latex_env &lt;- function(expr) &#123;</span><br><span class="line">  calls &lt;- all_calls(expr)</span><br><span class="line">  call_list &lt;- setNames(lapply(calls, unknown_op), calls)</span><br><span class="line">  call_env &lt;- list2env(call_list)</span><br><span class="line"></span><br><span class="line">  # Known functions</span><br><span class="line">  f_env &lt;- clone_env(f_env, call_env)</span><br><span class="line"></span><br><span class="line">  # Default symbols</span><br><span class="line">  symbols &lt;- all_names(expr)</span><br><span class="line">  symbol_list &lt;- setNames(as.list(symbols), symbols)</span><br><span class="line">  symbol_env &lt;- list2env(symbol_list, parent = f_env)</span><br><span class="line"></span><br><span class="line">  # Known symbols</span><br><span class="line">  greek_env &lt;- clone_env(greek_env, parent = symbol_env)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to_math(f(a * b))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-49"><a href="#Exercises-49" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Add escaping. The special symbols that should be escaped by adding a backslash    in front of them are <code>\</code>, <code>$</code>, and <code>%</code>. Just as with HTML, you’ll need to    make sure you don’t end up double-escaping. So you’ll need to create a small    S3 class and then use that in function operators. That will also allow you    to embed arbitrary LaTeX if needed.</li>
<li>Complete the DSL to support all the functions that <code>plotmath</code> supports.</li>
<li>There’s a repeating pattern in <code>latex_env()</code>: we take a character vector,    do something to each piece, convert it to a list, and then convert the list    to an environment. Write a function that automates this task, and then rewrite    <code>latex_env()</code>.</li>
<li>Study the source code for <code>dplyr</code>. An important part of its structure is    <code>partial_eval()</code> which helps manage expressions when some of the    components refer to variables in the database while others refer to local R    objects. Note that you could use very similar ideas if you needed to    translate small R expressions into other languages, like JavaScript or    Python.</li>
</ol>
<hr>
<h1 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a><a href="id=&quot;performance&quot;">Performance</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source(&quot;performance-microbenchmark.R&quot;)</span><br><span class="line">options(&quot;microbenchmark.unit&quot; = &quot;ns&quot;)</span><br></pre></td></tr></table></figure>
<p>R is not a fast language. This is not an accident. R was purposely designed to make data analysis and statistics easier for you to do. It was not designed to make life easier for your computer. While R is slow compared to other programming languages, for most purposes, it’s fast enough.</p>
<p>The goal of this part of the book is to give you a deeper understanding of R’s performance characteristics. In this chapter, you’ll learn about some of the trade-offs that R has made, valuing flexibility over performance. The following four chapters will give you the skills to improve the speed of your code when you need to:</p>
<ul>
<li>In <a href="#profiling">Profiling</a>, you’ll learn how to systematically make your  code faster. First you figure what’s slow, and then you apply some general  techniques to make the slow parts faster.</li>
<li>In <a href="#memory">Memory</a>, you’ll learn about how R uses memory, and how  garbage collection and copy-on-modify affect performance and memory usage.</li>
<li>For really high-performance code, you can move outside of R and use  another programming language. <a href="#rcpp">Rcpp</a> will teach you the absolute  minimum you need to know about C++ so you can write fast code using the  Rcpp package.</li>
<li>To really understand the performance of built-in base functions,  you’ll need to learn a little bit about R’s C API. In <a href="#c-api">R’s C  interface</a>, you’ll learn a little about R’s C internals.</li>
</ul>
<p>Let’s get started by learning more about why R is slow.</p>
<h2 id="Why-is-R-slow"><a href="#Why-is-R-slow" class="headerlink" title="Why is R slow?"></a><a href="id=&quot;why-is-r-slow&quot;">Why is R slow?</a></h2><p>To understand R’s performance, it helps to think about R as both a language and as an implementation of that language. The R-language is abstract: it defines what R code means and how it should work. The implementation is concrete: it reads R code and computes a result. The most popular implementation is the one from <a href="http://r-project.org" target="_blank" rel="external">r-project.org</a>. I’ll call that implementation GNU-R to distinguish it from R-language, and from the other implementations I’ll discuss later in the chapter.</p>
<p>The distinction between R-language and GNU-R is a bit murky because the R-language is not formally defined. While there is the <a href="http://cran.r-project.org/doc/manuals/R-lang.html" target="_blank" rel="external">R language definition</a>, it is informal and incomplete. The R-language is mostly defined in terms of how GNU-R works. This is in contrast to other languages, like <a href="http://isocpp.org/std/the-standard" target="_blank" rel="external">C++</a> and <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="external">javascript</a>, that make a clear distinction between language and implementation by laying out formal specifications that describe in minute detail how every aspect of the language should work. Nevertheless, the distinction between R-language and GNU-R is still useful: poor performance due to the language is hard to fix without breaking existing code; fixing poor performance due to the implementation is easier.</p>
<p>In <a href="#language-performance">Language performance</a>, I discuss some of the ways in which the design of the R-language imposes fundamental constraints on R’s speed. In <a href="#implementation-performance">Implementation performance</a>, I discuss why GNU-R is currently far from the theoretical maximum, and why improvements in performance happen so slowly. While it’s hard to know exactly how much faster a better implementation could be, a &gt;10x improvement in speed seems achievable. In <a href="#faster-r">alternative implementations</a>, I discuss some of the promising new implementations of R, and describe one important technique they use to make R code run faster.</p>
<p>Beyond performance limitations due to design and implementation, it has to be said that a lot of R code is slow simply because it’s poorly written. Few R users have any formal training in programming or software development. Fewer still write R code for a living. Most people use R to understand data: it’s more important to get an answer quickly than to develop a system that will work in a wide variety of situations. This means that it’s relatively easy to make most R code much faster, as we’ll see in the following chapters.</p>
<p>Before we examine some of the slower parts of the R-language and GNU-R, we need to learn a little about benchmarking so that we can give our intuitions about performance a concrete foundation.</p>
<h2 id="Microbenchmarking"><a href="#Microbenchmarking" class="headerlink" title="Microbenchmarking"></a><a href="id=&quot;microbenchmarking&quot;">Microbenchmarking</a></h2><p>A microbenchmark is a measurement of the performance of a very small piece of code, something that might take microseconds (µs) or nanoseconds (ns) to run. I’m going to use microbenchmarks to demonstrate the performance of very low-level pieces of R code, which help develop your intuition for how R works. This intuition, by-and-large, is not useful for increasing the speed of real code. The observed differences in microbenchmarks will typically be dominated by higher-order effects in real code; a deep understanding of subatomic physics is not very helpful when baking. Don’t change the way you code because of these microbenchmarks. Instead wait until you’ve read the practical advice in the following chapters.</p>
<p>The best tool for microbenchmarking in R is the <a href="http://cran.r-project.org/web/packages/microbenchmark/" target="_blank" rel="external">microbenchmark</a> package. It provides very precise timings, making it possible to compare operations that only take a tiny amount of time. For example, the following code compares the speed of two ways of computing a square root.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">library(microbenchmark)</span><br><span class="line"></span><br><span class="line">x &lt;- runif(100)</span><br><span class="line">microbenchmark(</span><br><span class="line">  sqrt(x),</span><br><span class="line">  x ^ 0.5</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>By default, <code>microbenchmark()</code> runs each expression 100 times (controlled by the <code>times</code> parameter). In the process, it also randomises the order of the expressions. It summarises the results with a minimum (<code>min</code>), lower quartile (<code>lq</code>), median, upper quartile (<code>uq</code>), and maximum (<code>max</code>). Focus on the median, and use the upper and lower quartiles (<code>lq</code> and <code>uq</code>) to get a feel for the variability. In this example, you can see that using the special purpose <code>sqrt()</code> function is faster than the general exponentiation operator.</p>
<p>As with all microbenchmarks, pay careful attention to the units: each computation takes about 800 ns, 800 billionths of a second. To help calibrate the impact of a microbenchmark on run time, it’s useful to think about how many times a function needs to run before it takes a second. If a microbenchmark takes:</p>
<ul>
<li>1 ms, then one thousand calls takes a second</li>
<li>1 µs, then one million calls takes a second</li>
<li>1 ns, then one billion calls takes a second</li>
</ul>
<p>The <code>sqrt()</code> function takes about 800 ns, or 0.8 µs, to compute the square root of 100 numbers. That means if you repeated the operation a million times, it would take 0.8 s. So changing the way you compute the square root is unlikely to significantly affect real code.</p>
<h3 id="Exercises-50"><a href="#Exercises-50" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>Instead of using <code>microbenchmark()</code>, you could use the built-in function   <code>system.time()</code>. But <code>system.time()</code> is much less precise, so you’ll   need to repeat each operation many times with a loop, and then divide   to find the average time of each operation, as in the code below.</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n &lt;- 1:1e6</span><br><span class="line">system.time(for (i in n) sqrt(x)) / length(n)</span><br><span class="line">system.time(for (i in n) x ^ 0.5) / length(n)</span><br></pre></td></tr></table></figure>
<p> How do the estimates from <code>system.time()</code> compare to those from    <code>microbenchmark()</code>? Why are they different?</p>
</li>
<li><p>Here are two other ways to compute the square root of a vector. Which    do you think will be fastest? Which will be slowest? Use microbenchmarking    to test your answers.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x ^ (1 / 2)</span><br><span class="line">exp(log(x) / 2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Use microbenchmarking to rank the basic arithmetic operators (<code>+</code>, <code>-</code>,    <code>*</code>, <code>/</code>, and <code>^</code>) in terms of their speed. Visualise the results. Compare    the speed of arithmetic on integers vs. doubles.</p>
</li>
<li>You can change the units in which the microbenchmark results are    expressed with the <code>unit</code> parameter. Use <code>unit = &quot;eps&quot;</code> to show    the number of evaluations needed to take 1 second. Repeat the benchmarks    above with the eps unit. How does this change your intuition for performance?</li>
</ol>
<h2 id="Language-performance"><a href="#Language-performance" class="headerlink" title="Language performance"></a><a href="id=&quot;language-performance&quot;">Language performance</a></h2><p>In this section, I’ll explore three trade-offs that limit the performance of the R-language: extreme dynamism, name lookup with mutable environments, and lazy evaluation of function arguments. I’ll illustrate each trade-off with a microbenchmark, showing how it slows GNU-R down. I benchmark GNU-R because you can’t benchmark the R-language (it can’t run code). This means that the results are only suggestive of the cost of these design decisions, but are nevertheless useful. I’ve picked these three examples to illustrate some of the trade-offs that are key to language design: the designer must balance speed, flexibility, and ease of implementation.</p>
<p>If you’d like to learn more about the performance characteristics of the R-language and how they affect real code, I highly recommend <a href="http://r.cs.purdue.edu/pub/ecoop12.pdf" target="_blank" rel="external">“Evaluating the Design of the R Language”</a> by Floreal Morandat, Brandon Hill, Leo Osvald, and Jan Vitek. It uses a powerful methodology that combines a modified R interpreter and a wide set of code found in the wild.</p>
<h3 id="Extreme-dynamism"><a href="#Extreme-dynamism" class="headerlink" title="Extreme dynamism"></a><a href="id=&quot;extreme-dynamism&quot;">Extreme dynamism</a></h3><p>R is an extremely dynamic programming language. Almost anything can be modified after it is created. To give just a few examples, you can:</p>
<ul>
<li>Change the body, arguments, and environment of functions.</li>
<li>Change the S4 methods for a generic.</li>
<li>Add new fields to an S3 object, or even change its class.</li>
<li>Modify objects outside of the local environment with <code>&lt;&lt;-</code>.</li>
</ul>
<p>Pretty much the only things you can’t change are objects in sealed namespaces, which are created when you load a package.</p>
<p>The advantage of dynamism is that you need minimal upfront planning. You can change your mind at any time, iterating your way to a solution without having to start afresh. The disadvantage of dynamism is that it’s difficult to predict exactly what will happen with a given function call. This is a problem because the easier it is to predict what’s going to happen, the easier it is for an interpreter or compiler to make an optimisation. (If you’d like more details, Charles Nutter expands on this idea at <a href="http://blog.headius.com/2013/05/on-languages-vms-optimization-and-way.html" target="_blank" rel="external">On Languages, VMs, Optimization, and the Way of the World</a>.) If an interpreter can’t predict what’s going to happen, it has to consider many options before it finds the right one. For example, the following loop is slow in R, because R doesn’t know that <code>x</code> is always an integer. That means R has to look for the right <code>+</code> method (i.e., is it adding doubles, or integers?) in every iteration of the loop.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 0L</span><br><span class="line">for (i in 1:1e6) &#123;</span><br><span class="line">  x &lt;- x + 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The cost of finding the right method is higher for non-primitive functions. The following microbenchmark illustrates the cost of method dispatch for S3, S4, and RC. I create a generic and a method for each OO system, then call the generic and see how long it takes to find and call the method. I also time how long it takes to call the bare function for comparison.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x) NULL</span><br><span class="line"></span><br><span class="line">s3 &lt;- function(x) UseMethod(&quot;s3&quot;)</span><br><span class="line">s3.integer &lt;- f</span><br><span class="line"></span><br><span class="line">A &lt;- setClass(&quot;A&quot;, representation(a = &quot;list&quot;))</span><br><span class="line">setGeneric(&quot;s4&quot;, function(x) standardGeneric(&quot;s4&quot;))</span><br><span class="line">setMethod(s4, &quot;A&quot;, f)</span><br><span class="line"></span><br><span class="line">B &lt;- setRefClass(&quot;B&quot;, methods = list(rc = f))</span><br><span class="line"></span><br><span class="line">a &lt;- A()</span><br><span class="line">b &lt;- B$new()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  fun = f(),</span><br><span class="line">  S3 = s3(1L),</span><br><span class="line">  S4 = s4(a),</span><br><span class="line">  RC = b$rc()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>On my computer, the bare function takes about 200 ns. S3 method dispatch takes an additional 2,000 ns; S4 dispatch, 11,000 ns; and RC dispatch, 10,000 ns. S3 and S4 method dispatch are expensive because R must search for the right method every time the generic is called; it might have changed between this call and the last. R could do better by caching methods between calls, but caching is hard to do correctly and a notorious source of bugs.</p>
<h3 id="Name-lookup-with-mutable-environments"><a href="#Name-lookup-with-mutable-environments" class="headerlink" title="Name lookup with mutable environments"></a>Name lookup with mutable environments</h3><p>It’s surprisingly difficult to find the value associated with a name in the R-language. This is due to combination of lexical scoping and extreme dynamism. Take the following example. Each time we print <code>a</code> it comes from a different environment:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a &lt;- 1</span><br><span class="line">f &lt;- function() &#123;</span><br><span class="line">  g &lt;- function() &#123;</span><br><span class="line">    print(a)</span><br><span class="line">    assign(&quot;a&quot;, 2, envir = parent.frame())</span><br><span class="line">    print(a)</span><br><span class="line">    a &lt;- 3</span><br><span class="line">    print(a)</span><br><span class="line">  &#125;</span><br><span class="line">  g()</span><br><span class="line">&#125;</span><br><span class="line">f()</span><br></pre></td></tr></table></figure>
<p>This means that you can’t do name lookup just once: you have to start from scratch each time. This problem is exacerbated by the fact that almost every operation is a lexically scoped function call. You might think the following simple function calls two functions: <code>+</code> and <code>^</code>. In fact, it calls four because <code>{</code> and <code>(</code> are regular functions in R.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(x, y) &#123;</span><br><span class="line">  (x + y) ^ 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Since these functions are in the global environment, R has to look through every environment in the search path, which could easily be 10 or 20 environments. The following microbenchmark hints at the performance costs. We create four versions of <code>f()</code>, each with one more environment (containing 26 bindings) between the environment of <code>f()</code> and the base environment where <code>+</code>, <code>^</code>, <code>(</code>, and <code>{</code> are defined.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">random_env &lt;- function(parent = globalenv()) &#123;</span><br><span class="line">  letter_list &lt;- setNames(as.list(runif(26)), LETTERS)</span><br><span class="line">  list2env(letter_list, envir = new.env(parent = parent))</span><br><span class="line">&#125;</span><br><span class="line">set_env &lt;- function(f, e) &#123;</span><br><span class="line">  environment(f) &lt;- e</span><br><span class="line">  f</span><br><span class="line">&#125;</span><br><span class="line">f2 &lt;- set_env(f, random_env())</span><br><span class="line">f3 &lt;- set_env(f, random_env(environment(f2)))</span><br><span class="line">f4 &lt;- set_env(f, random_env(environment(f3)))</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  f(1, 2),</span><br><span class="line">  f2(1, 2),</span><br><span class="line">  f3(1, 2),</span><br><span class="line">  f4(1, 2),</span><br><span class="line">  times = 10000</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Each additional environment between <code>f()</code> and the base environment makes the function slower by about 30 ns.</p>
<p>It might be possible to implement a caching system so that R only needs to look up the value of each name once. This is hard because there are so many ways to change the value associated with a name: <code>&lt;&lt;-</code>, <code>assign()</code>, <code>eval()</code>, and so on. Any caching system would have to know about these functions to make sure the cache was correctly invalidated and you didn’t get an out-of-date value.</p>
<p>Another simple fix would be to add more built-in constants that you can’t override. This, for example, would mean that R always knew exactly what <code>+</code>, <code>-</code>, <code>{</code>, and <code>(</code> meant, and you wouldn’t have to repeatedly look up their definitions. That would make the interpreter more complicated (because there are more special cases) and hence harder to maintain, and the language less flexible. This would change the R-language, but it would be unlikely to affect much existing code because it’s such a bad idea to override functions like <code>{</code> and <code>(</code>.</p>
<h3 id="Lazy-evaluation-overhead"><a href="#Lazy-evaluation-overhead" class="headerlink" title="Lazy evaluation overhead"></a>Lazy evaluation overhead</h3><p>In R, function arguments are evaluated lazily (as discussed in <a href="#lazy-evaluation">lazy evaluation</a> and <a href="#capturing-expressions">capturing expressions</a>). To implement lazy evaluation, R uses a promise object that contains the expression needed to compute the result and the environment in which to perform the computation. Creating these objects has some overhead, so each additional argument to a function decreases its speed a little.</p>
<p>The following microbenchmark compares the runtime of a very simple function. Each version of the function has one additional argument. This suggests that adding an additional argument slows the function down by ~20 ns.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f0 &lt;- function() NULL</span><br><span class="line">f1 &lt;- function(a = 1) NULL</span><br><span class="line">f2 &lt;- function(a = 1, b = 1) NULL</span><br><span class="line">f3 &lt;- function(a = 1, b = 2, c = 3) NULL</span><br><span class="line">f4 &lt;- function(a = 1, b = 2, c = 4, d = 4) NULL</span><br><span class="line">f5 &lt;- function(a = 1, b = 2, c = 4, d = 4, e = 5) NULL</span><br><span class="line">microbenchmark(f0(), f1(), f2(), f3(), f4(), f5(), times = 10000)</span><br></pre></td></tr></table></figure>
<p>In most other programming languages there is little overhead for adding extra arguments. Many compiled languages will even warn you if arguments are never used (like in the above example), and automatically remove them from the function.</p>
<h3 id="Exercises-51"><a href="#Exercises-51" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><code>scan()</code> has the most arguments (21) of any base function. About how    much time does it take to make 21 promises each time scan is called?    Given a simple input (e.g., <code>scan(text = &quot;1 2 3&quot;, quiet = T)</code>) what    proportion of the total run time is due to creating those promises?</li>
<li>Read <a href="http://r.cs.purdue.edu/pub/ecoop12.pdf" target="_blank" rel="external">“Evaluating the Design of the R Language”</a>. What other aspects of the R-language slow it    down? Construct microbenchmarks to illustrate.</li>
<li>How does the performance of S3 method dispatch change with the length    of the class vector? How does performance of S4 method dispatch change    with number of superclasses? How about RC?</li>
<li>What is the cost of multiple inheritance and multiple dispatch on    S4 method dispatch?</li>
<li>Why is the cost of name lookup less for functions in the base package?</li>
</ol>
<h2 id="Implementation-performance"><a href="#Implementation-performance" class="headerlink" title="Implementation performance"></a><a href="id=&quot;implementation-performance&quot;">Implementation performance</a></h2><p>The design of the R language limits its maximum theoretical performance, but GNU-R is currently nowhere near that maximum. There are many things that can (and will) be done to improve performance. This section discusses some aspects of GNU-R that are slow not because of their definition, but because of their implementation.</p>
<p>R is over 20 years old. It contains nearly 800,000 lines of code (about 45% C, 19% R, and 17% Fortran). Changes to base R can only be made by members of the R Core Team (or R-core for short). Currently R-core has <a href="http://www.r-project.org/contributors.html" target="_blank" rel="external">twenty members</a>, but only six are active in day-to-day development. No one on R-core works full time on R. Most are statistics professors who can only spend a relatively small amount of their time on R. Because of the care that must be taken to avoid breaking existing code, R-core tends to be very conservative about accepting new code. It can be frustrating to see R-core reject proposals that would improve performance. However, the overriding concern for R-core is not to make R fast, but to build a stable platform for data analysis and statistics.</p>
<p>Below, I’ll show two small, but illustrative, examples of parts of R that are currently slow but could, with some effort, be made faster. They are not critical parts of base R, but they have been sources of frustration for me in the past. As with all microbenchmarks, these won’t affect the performance of most code, but can be important for special cases.</p>
<h3 id="Extracting-a-single-value-from-a-data-frame"><a href="#Extracting-a-single-value-from-a-data-frame" class="headerlink" title="Extracting a single value from a data frame"></a>Extracting a single value from a data frame</h3><p>The following microbenchmark shows seven ways to access a single value (the number in the bottom-right corner) from the built-in <code>mtcars</code> dataset. The variation in performance is startling: the slowest method takes 30x longer than the fastest. There’s no reason that there has to be such a huge difference in performance. It’s simply that no one has had the time to fix it.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  &quot;[32, 11]&quot;      = mtcars[32, 11],</span><br><span class="line">  &quot;$carb[32]&quot;     = mtcars$carb[32],</span><br><span class="line">  &quot;[[c(11, 32)]]&quot; = mtcars[[c(11, 32)]],</span><br><span class="line">  &quot;[[11]][32]&quot;    = mtcars[[11]][32],</span><br><span class="line">  &quot;.subset2&quot;      = .subset2(mtcars, 11)[32]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="ifelse-pmin-and-pmax"><a href="#ifelse-pmin-and-pmax" class="headerlink" title="ifelse(), pmin(), and pmax()"></a><code>ifelse()</code>, <code>pmin()</code>, and <code>pmax()</code></h3><p>Some base functions are known to be slow. For example, take the following three implementations of <code>squish()</code>, a function that ensures that the smallest value in a vector is at least <code>a</code> and its largest value is at most <code>b</code>. The first implementation, <code>squish_ife()</code>, uses <code>ifelse()</code>. <code>ifelse()</code> is known to be slow because it is relatively general and must evaluate all arguments fully. The second implementation, <code>squish_p()</code>, uses <code>pmin()</code> and <code>pmax()</code>. Because these two functions are so specialised, one might expect that they would be fast. However, they’re actually rather slow. This is because they can take any number of arguments and they have to do some relatively complicated checks to determine which method to use. The final implementation uses basic subassignment.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">squish_ife &lt;- function(x, a, b) &#123;</span><br><span class="line">  ifelse(x &lt;= a, a, ifelse(x &gt;= b, b, x))</span><br><span class="line">&#125;</span><br><span class="line">squish_p &lt;- function(x, a, b) &#123;</span><br><span class="line">  pmax(pmin(x, b), a)</span><br><span class="line">&#125;</span><br><span class="line">squish_in_place &lt;- function(x, a, b) &#123;</span><br><span class="line">  x[x &lt;= a] &lt;- a</span><br><span class="line">  x[x &gt;= b] &lt;- b</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x &lt;- runif(100, -1.5, 1.5)</span><br><span class="line">microbenchmark(</span><br><span class="line">  squish_ife      = squish_ife(x, -1, 1),</span><br><span class="line">  squish_p        = squish_p(x, -1, 1),</span><br><span class="line">  squish_in_place = squish_in_place(x, -1, 1),</span><br><span class="line">  unit = &quot;us&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Using <code>pmin()</code> and <code>pmax()</code> is about 3x faster than <code>ifelse()</code>, and using subsetting directly is about twice as fast again. We can often do even better by using C++. The following example compares the best R implementation to a relatively simple, if verbose, implementation in C++. Even if you’ve never used C++, you should still be able to follow the basic strategy: loop over every element in the vector and perform a different action depending on whether or not the value is less than <code>a</code> and/or greater than <code>b</code>. The C++ implementation is around 3x faster than the best pure R implementation.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">NumericVector squish_cpp(NumericVector x, double a, double b) &#123;</span><br><span class="line">  int n = x.length();</span><br><span class="line">  NumericVector out(n);</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    double xi = x[i];</span><br><span class="line">    if (xi &lt; a) &#123;</span><br><span class="line">      out[i] = a;</span><br><span class="line">    &#125; else if (xi &gt; b) &#123;</span><br><span class="line">      out[i] = b;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      out[i] = xi;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(You’ll learn how to access this C++ code from R in <a href="#rcpp">Rcpp</a>.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  squish_in_place = squish_in_place(x, -1, 1),</span><br><span class="line">  squish_cpp      = squish_cpp(x, -1, 1),</span><br><span class="line">  unit = &quot;us&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-52"><a href="#Exercises-52" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>The performance characteristics of <code>squish_ife()</code>, <code>squish_p()</code>, and   <code>squish_in_place()</code> vary considerably with the size of <code>x</code>. Explore the   differences. Which sizes lead to the biggest and smallest differences?</li>
<li>Compare the performance costs of extracting an element from a list, a    column from a matrix, and a column from a data frame. Do the same for rows.</li>
</ol>
<h2 id="Alternative-R-implementations"><a href="#Alternative-R-implementations" class="headerlink" title="Alternative R implementations"></a><a href="id=&quot;faster-r&quot;">Alternative R implementations</a></h2><p>There are some exciting new implementations of R. While they all try to stick as closely as possible to the existing language definition, they improve speed by using ideas from modern interpreter design. The four most mature open-source projects are:</p>
<ul>
<li><a href="http://www.pqr-project.org/" target="_blank" rel="external">pqR</a> (pretty quick R) by Radford Neal. Built  on top of R 2.15.0, it fixes many obvious performance issues, and provides  better memory management and some support for automatic multithreading.</li>
<li><a href="http://www.renjin.org/" target="_blank" rel="external">Renjin</a> by BeDataDriven. Renjin uses the  Java virtual machine, and has an extensive  <a href="http://packages.renjin.org/" target="_blank" rel="external">test suite</a>.</li>
<li><a href="https://github.com/allr/fastr" target="_blank" rel="external">FastR</a> by a team from Purdue. FastR  is similar to Renjin, but it makes more ambitious optimisations and  is somewhat less mature.</li>
<li><a href="https://github.com/jtalbot/riposte" target="_blank" rel="external">Riposte</a> by Justin Talbot and  Zachary DeVito. Riposte is experimental and ambitious. For the parts of R it  implements, it is extremely fast. Riposte is described in more detail in  <a href="http://www.justintalbot.com/wp-content/uploads/2012/10/pact080talbot.pdf" target="_blank" rel="external">Riposte: A Trace-Driven Compiler and Parallel VM for Vector Code in  R</a>.</li>
</ul>
<p>These are roughly ordered from most practical to most ambitious. Another project, <a href="http://www.cs.kent.ac.uk/projects/cxxr/" target="_blank" rel="external">CXXR</a> by Andrew Runnalls, does not provide any performance improvements. Instead, it aims to refactor R’s internal C code in order to build a stronger foundation for future development, to keep behaviour identical to GNU-R, and to create better, more extensible documentation of its internals.</p>
<p>R is a huge language and it’s not clear whether any of these approaches will ever become mainstream. It’s a hard task to make an alternative implementation run all R code in the same way as GNU-R. Can you imagine having to reimplement every function in base R to be not only faster, but also to have exactly the same documented bugs? However, even if these implementations never make a dent in the use of GNU-R, they still provide benefits:</p>
<ul>
<li>Simpler implementations make it easy to validate new approaches before  porting to GNU-R.</li>
<li>Knowing which aspects of the language can be changed with minimal  impact on existing code and maximal impact on performance can help to guide  us to where we should direct our attention.</li>
<li>Alternative implementations put pressure on the R-core to incorporate  performance improvements.</li>
</ul>
<p>One of the most important approaches that pqR, Renjin, FastR, and Riposte are exploring is the idea of deferred evaluation. As Justin Talbot, the author of Riposte, points out: “for long vectors, R’s execution is completely memory bound. It spends almost all of its time reading and writing vector intermediates to memory”. If we could eliminate these intermediate vectors, we could improve performance and reduce memory usage.</p>
<p>The following example shows a very simple example of how deferred evaluation can help. We have three vectors, <code>x</code>, <code>y</code>, <code>z</code>, each containing 1 million elements, and we want to find the sum of <code>x</code> + <code>y</code> where <code>z</code> is TRUE. (This represents a simplification of a pretty common sort of data analysis question.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(1e6)</span><br><span class="line">y &lt;- runif(1e6)</span><br><span class="line">z &lt;- sample(c(T, F), 1e6, rep = TRUE)</span><br><span class="line"></span><br><span class="line">sum((x + y)[z])</span><br></pre></td></tr></table></figure>
<p>In R, this creates two big temporary vectors: <code>x + y</code>, 1 million elements long, and <code>(x + y)[z]</code>, about 500,000 elements long. This means you need to have extra memory available for the intermediate calculation, and you have to shuttle the data back and forth between the CPU and memory. This slows computation down because the CPU can’t work at maximum efficiency if it’s always waiting for more data to come in.</p>
<p>However, if we rewrote the function using a loop in a language like C++, we only need one intermediate value: the sum of all the values we’ve seen:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">double cond_sum_cpp(NumericVector x, NumericVector y,</span><br><span class="line">                    LogicalVector z) &#123;</span><br><span class="line">  double sum = 0;</span><br><span class="line">  int n = x.length();</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    if (!z[i]) continue;</span><br><span class="line">    sum += x[i] + y[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>On my computer, this approach is about eight times faster than the vectorised R equivalent, which is already pretty fast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cond_sum_r &lt;- function(x, y, z) &#123;</span><br><span class="line">  sum((x + y)[z])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  cond_sum_cpp(x, y, z),</span><br><span class="line">  cond_sum_r(x, y, z),</span><br><span class="line">  unit = &quot;ms&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>The goal of deferred evaluation is to perform this transformation automatically, so you can write concise R code and have it automatically translated into efficient machine code. Sophisticated translators can also figure out how to make the most of multiple cores. In the above example, if you have four cores, you could split <code>x</code>, <code>y</code>, and <code>z</code> into four pieces performing the conditional sum on each core, then adding together the four individual results. Deferred evaluation can also work with for loops, automatically discovering operations that can be vectorised.</p>
<p>This chapter has discussed some of the fundamental reasons that R is slow. The following chapters will give you the tools to do something about it when it impacts your code.</p>
<hr>
<h1 id="Optimising-code"><a href="#Optimising-code" class="headerlink" title="Optimising code"></a><a href="id=&quot;profiling&quot;">Optimising code</a></h1><blockquote>
<p>“Programmers waste enormous amounts of time thinking about, or worrying<br>about, the speed of noncritical parts of their programs, and these attempts<br>at efficiency actually have a strong negative impact when debugging and<br>maintenance are considered.”</p>
<p>— Donald Knuth.</p>
</blockquote>
<p>Optimising code to make it run faster is an iterative process:</p>
<ol>
<li>Find the biggest bottleneck (the slowest part of your code).</li>
<li>Try to eliminate it (you may not succeed but that’s ok).</li>
<li>Repeat until your code is “fast enough.”</li>
</ol>
<p>This sounds easy, but it’s not.</p>
<p>Even experienced programmers have a hard time identifying bottlenecks in their code. Instead of relying on your intuition, you should <strong>profile</strong> your code: use realistic inputs and measure the run-time of each individual operation. Only once you’ve identified the most important bottlenecks can you attempt to eliminate them. It’s difficult to provide general advice on improving performance, but I try my best with six techniques that can be applied in many situations. I’ll also suggest a general strategy for performance optimisation that helps ensure that your faster code will still be correct code.</p>
<p>It’s easy to get caught up in trying to remove all bottlenecks. Don’t! Your time is valuable and is better spent analysing your data, not eliminating possible inefficiencies in your code. Be pragmatic: don’t spend hours of your time to save seconds of computer time. To enforce this advice, you should set a goal time for your code and optimise only up to that goal. This means you will not eliminate all bottlenecks. Some you will not get to because you’ve met your goal. Others you may need to pass over and accept either because there is no quick and easy solution or because the code is already well optimised and no significant improvement is possible. Accept these possibilities and move on to the next candidate.</p>
<h5 id="Outline-11"><a href="#Outline-11" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#measure-perf">Measuring performance</a> describes how to find the bottlenecks  in your code using line profiling.</li>
<li><a href="#improve-perf">Improving performance</a> outlines seven general strategies for  improving the performance of your code.</li>
<li><a href="#code-organisation">Code organisation</a> teaches you how to organise  your code to make optimisation as easy, and bug free, as possible.</li>
<li><a href="#already-solved">Already solved</a> reminds you to look for existing  solutions.</li>
<li><a href="#be-lazy">Do as little as possible</a> emphasises the importance of  being lazy: often the easiest way to make a function faster is to  let it to do less work.</li>
<li><a href="#vectorise">Vectorise</a> concisely defines vectorisation, and shows you  how to make the most of built-in functions.</li>
<li><a href="#avoid-copies">Avoid copies</a> discusses the performance perils of  copying data.</li>
<li><a href="#byte-code">Byte code compilation</a> shows you how to take advantage of  R’s byte code compiler.</li>
<li><a href="#t-test">Case study: t-test</a> pulls all the pieces together into a case  study showing how to speed up repeated t-tests by ~1000x.</li>
<li><a href="#parallelise">Parallelise</a> teaches you how to use parallelisation to  spread computation across all the cores in your computer.</li>
<li><a href="#more-techniques">Other techniques</a> finishes the chapter with pointers to  more resources that will help you write fast code.</li>
</ul>
<h5 id="Prerequisites-8"><a href="#Prerequisites-8" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>In this chapter we’ll be using the <code>lineprof</code> package to understand the performance of R code. Get it with:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtools::install_github(&quot;hadley/lineprof&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="Measuring-performance"><a href="#Measuring-performance" class="headerlink" title="Measuring performance"></a><a href="id=&quot;measure-perf&quot;">Measuring performance</a></h2><p>To understand performance, you use a profiler. There are a number of different types of profilers. R uses a fairly simple type called a sampling or statistical profiler. A sampling profiler stops the execution of code every few milliseconds and records which function is currently executing (along with which function called that function, and so on). For example, consider <code>f()</code>, below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">library(lineprof)</span><br><span class="line">f &lt;- function() &#123;</span><br><span class="line">  pause(0.1)</span><br><span class="line">  g()</span><br><span class="line">  h()</span><br><span class="line">&#125;</span><br><span class="line">g &lt;- function() &#123;</span><br><span class="line">  pause(0.1)</span><br><span class="line">  h()</span><br><span class="line">&#125;</span><br><span class="line">h &lt;- function() &#123;</span><br><span class="line">  pause(0.1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(I use <code>pause()</code> instead of <code>Sys.sleep()</code> because <code>Sys.sleep()</code> does not appear in profiling outputs because as far as R can tell, it doesn’t use up any computing time.)</p>
<p>If we profiled the execution of <code>f()</code>, stopping the execution of code every 0.1 s, we’d see a profile like below. Each line represents one “tick” of the profiler (0.1 s in this case), and function calls are nested with <code>&gt;</code>. It shows that the code spends 0.1 s running <code>f()</code>, then 0.2 s running <code>g()</code>, then 0.1 s running <code>h()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f()</span><br><span class="line">f() &gt; g()</span><br><span class="line">f() &gt; g() &gt; h()</span><br><span class="line">f() &gt; h()</span><br></pre></td></tr></table></figure>
<p>If we actually profile <code>f()</code>, using the code below, we’re unlikely to get such a clear result.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tmp &lt;- tempfile()</span><br><span class="line">Rprof(tmp, interval = 0.1)</span><br><span class="line">f()</span><br><span class="line">Rprof(NULL)</span><br></pre></td></tr></table></figure>
<p>That’s because profiling is hard to do accurately without slowing your code down by many orders of magnitude. The compromise that <code>RProf()</code> makes, sampling, only has minimal impact on the overall performance, but is fundamentally stochastic. There’s some variability in both the accuracy of the timer and in the time taken by each operation, so each time you profile you’ll get a slightly different answer. Fortunately, pinpoint accuracy is not needed to identify the slowest parts of your code.</p>
<p>Rather than focussing on individual calls, we’ll visualise aggregates using the lineprof package. There are a number of other options, like <code>summaryRprof()</code>, the proftools package, and the profr package, but these tools are beyond the scope of this book. I wrote the <code>lineprof</code> package as a simpler way to visualise profiling data. As the name suggests, the fundamental unit of analysis in <code>lineprof()</code> is a line of code. This makes lineprof less precise than the alternatives (because a line of code can contain multiple function calls), but it’s easier to understand the context.</p>
<p>To use <code>lineprof</code>, we first save the code in a file and <code>source()</code> it. Here <code>profiling-example.R</code> contains the definition of <code>f()</code>, <code>g()</code>, and <code>h()</code>. Note that you <em>must</em> use <code>source()</code> to load the code. This is because lineprof uses srcrefs to match up the code to the profile, and the needed srcrefs are only created when you load code from disk. We then use <code>lineprof()</code> to run our function and capture the timing output. Printing this object shows some basic information. For now, we’ll just focus on the time column which estimates how long each line took to run and the ref column which tells us which line of code was run. The estimates aren’t perfect, but the ratios look about right.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">library(lineprof)</span><br><span class="line">source(&quot;profiling-example.R&quot;)</span><br><span class="line">l &lt;- lineprof(f())</span><br><span class="line">l</span><br><span class="line">#&gt;    time alloc release dups           ref     src</span><br><span class="line">#&gt; 1 0.074 0.001       0    0 profiling.R#2 f/pause</span><br><span class="line">#&gt; 2 0.143 0.002       0    0 profiling.R#3 f/g</span><br><span class="line">#&gt; 3 0.071 0.000       0    0 profiling.R#4 f/h</span><br></pre></td></tr></table></figure>
<p>lineprof provides some functions to navigate through this data structure, but they’re a bit clumsy. Instead, we’ll start an interactive explorer using the shiny package. <code>shine(l)</code> will open a new web page (or if you’re using RStudio, a new pane) that shows your source code annotated with information about how long each line took to run. <code>shine()</code> starts a shiny app which “blocks” your R session. To exit, you’ll need to stop the process using escape or ctrl + c.</p>
<p><img src="screenshots/profiling-lineprof-f.png" alt=""></p>
<p>The <code>t</code> column visualises how much time is spent on each line. (You’ll learn about the other columns in <a href="#memory-profiling">memory profiling</a>.) While not precise, it allows you to spot bottlenecks, and you can get precise numbers by hovering over each bar. This shows that twice as much time is spent on <code>g()</code> as on <code>h()</code>, so it would make sense to drill down into <code>g()</code> for more details. To do so, click <code>g()</code>:</p>
<p><img src="screenshots/profiling-lineprof-g.png" alt=""></p>
<p>Then <code>h()</code>:</p>
<p><img src="screenshots/profiling-lineprof-h.png" alt=""></p>
<p>This technique should allow you to quickly identify the major bottlenecks in your code.</p>
<h3 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h3><p>There are some other limitations to profiling:</p>
<ul>
<li>Profiling does not extend to C code. You can see if your R code calls C/C++  code but not what functions are called inside of your C/C++ code. Unfortunately,  tools for profiling compiled code are beyond the scope of this book (i.e., I  have no idea how to do it).</li>
<li>Similarly, you can’t see what’s going on inside primitive functions or byte  code compiled code.</li>
<li>If you’re doing a lot of functional programming with anonymous functions,  it can be hard to figure out exactly which function is being called.  The easiest way to work around this is to name your functions.</li>
<li><p>Lazy evaluation means that arguments are often evaluated inside another  function. For example, in the following code, profiling would make it seem  like <code>i()</code> was called by <code>j()</code> because the argument isn’t evaluated until it’s  needed by <code>j()</code>.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i &lt;- function() &#123;</span><br><span class="line">  pause(0.1)</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">j &lt;- function(x) &#123;</span><br><span class="line">  x + 10</span><br><span class="line">&#125;</span><br><span class="line">j(i())</span><br></pre></td></tr></table></figure>
<p>  If this is confusing, you can create temporary variables to force    computation to happen earlier.</p>
</li>
</ul>
<h2 id="Improving-performance"><a href="#Improving-performance" class="headerlink" title="Improving performance"></a><a href="id=&quot;improve-perf&quot;">Improving performance</a></h2><blockquote>
<p>“We should forget about small efficiencies, say about 97% of the time:<br>premature optimization is the root of all evil. Yet we should not pass up our<br>opportunities in that critical 3%. A good programmer will not be lulled<br>into complacency by such reasoning, he will be wise to look carefully at<br>the critical code; but only after that code has been identified.”</p>
<p>— Donald Knuth.</p>
</blockquote>
<p>Once you’ve used profiling to identify a bottleneck, you need to make it faster. The following sections introduce you to a number of techniques that I’ve found broadly useful:</p>
<ol>
<li>Look for existing solutions.</li>
<li>Do less work.</li>
<li>Vectorise.</li>
<li>Parallelise.</li>
<li>Avoid copies.</li>
<li>Byte-code compile.</li>
</ol>
<p>A final technique is to rewrite in a faster language, like C++. That’s a big topic and is covered in <a href="#rcpp">Rcpp</a>.</p>
<p>Before we get into specific techniques, I’ll first describe a general strategy and organisational style that’s useful when working on performance.</p>
<h2 id="Code-organisation"><a href="#Code-organisation" class="headerlink" title="Code organisation"></a><a href="id=&quot;code-organisation&quot;">Code organisation</a></h2><p>There are two traps that are easy to fall into when trying to make your code faster:</p>
<ol>
<li>Writing faster but incorrect code.</li>
<li>Writing code that you think is faster, but is actually no better.</li>
</ol>
<p>The strategy outlined below will help you avoid these pitfalls.</p>
<p>When tackling a bottleneck, you’re likely to come up with multiple approaches. Write a function for each approach, encapsulating all relevant behaviour. This makes it easier to check that each approach returns the correct result and to time how long it takes to run. To demonstrate the strategy, I’ll compare two approaches for computing the mean:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mean1 &lt;- function(x) mean(x)</span><br><span class="line">mean2 &lt;- function(x) sum(x) / length(x)</span><br></pre></td></tr></table></figure>
<p>I recommend that you keep a record of everything you try, even the failures. If a similar problem occurs in the future, it’ll be useful to see everything you’ve tried. To do this I often use R Markdown, which makes it easy to intermingle code with detailed comments and notes.</p>
<p>Next, generate a representative test case. The case should be big enough to capture the essence of your problem but small enough that it takes only a few seconds to run. You don’t want it to take too long because you’ll need to run the test case many times to compare approaches. On the other hand, you don’t want the case to be too small because then results might not scale up to the real problem.</p>
<p>Use this test case to quickly check that all variants return the same result. An easy way to do so is with <code>stopifnot()</code> and <code>all.equal()</code>. For real problems with fewer possible outputs, you may need more tests to make sure that an approach doesn’t accidentally return the correct answer. That’s unlikely for the mean.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(100)</span><br><span class="line">stopifnot(all.equal(mean1(x), mean2(x)))</span><br></pre></td></tr></table></figure>
<p>Finally, use the <code>microbenchmark</code> package to compare how long each variation takes to run. For bigger problems, reduce the <code>times</code> parameter so that it only takes a couple of seconds to run. Focus on the median time, and use the upper and lower quartiles to gauge the variability of the measurement.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  mean1(x),</span><br><span class="line">  mean2(x)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>(You might be surprised by the results: <code>mean(x)</code> is considerably slower than <code>sum(x) / length(x)</code>. This is because, among other reasons, <code>mean(x)</code> makes two passes over the vector to be more numerically accurate.)</p>
<p>Before you start experimenting, you should have a target speed that defines when the bottleneck is no longer a problem. Setting such a goal is important because you don’t want to spend valuable time over-optimising your code.</p>
<p>If you’d like to see this strategy in action, I’ve used it a few times on stackoverflow:</p>
<ul>
<li><a href="http://stackoverflow.com/questions/22515525#22518603" target="_blank" rel="external">http://stackoverflow.com/questions/22515525#22518603</a></li>
<li><a href="http://stackoverflow.com/questions/22515175#22515856" target="_blank" rel="external">http://stackoverflow.com/questions/22515175#22515856</a></li>
<li><a href="http://stackoverflow.com/questions/3476015#22511936" target="_blank" rel="external">http://stackoverflow.com/questions/3476015#22511936</a></li>
</ul>
<h2 id="Has-someone-already-solved-the-problem"><a href="#Has-someone-already-solved-the-problem" class="headerlink" title="Has someone already solved the problem?"></a><a href="id=&quot;already-solved&quot;">Has someone already solved the problem?</a></h2><p>Once you’ve organised your code and captured all the variations you can think of, it’s natural to see what others have done. You are part of a large community, and it’s quite possible that someone has already tackled the same problem. If your bottleneck is a function in a package, it’s worth looking at other packages that do the same thing. Two good places to start are:</p>
<ul>
<li><a href="http://cran.rstudio.com/web/views/" target="_blank" rel="external">CRAN task views</a>. If there’s a  CRAN task view related to your problem domain, it’s worth looking at  the packages listed there.</li>
<li>Reverse dependencies of Rcpp, as listed on its  <a href="http://cran.r-project.org/web/packages/Rcpp" target="_blank" rel="external">CRAN page</a>. Since these  packages use C++, it’s possible to find a solution to your bottleneck  written in a higher performance language.</li>
</ul>
<p>Otherwise, the challenge is describing your bottleneck in a way that helps you find related problems and solutions. Knowing the name of the problem or its synonyms will make this search much easier. But because you don’t know what it’s called, it’s hard to search for it! By reading broadly about statistics and algorithms, you can build up your own knowledge base over time. Alternatively, ask others. Talk to your colleagues and brainstorm some possible names, then search on Google and stackoverflow. It’s often helpful to restrict your search to R related pages. For Google, try <a href="http://www.rseek.org/" target="_blank" rel="external">rseek</a>. For stackoverflow, restrict your search by including the R tag, <code>[R]</code>, in your search.</p>
<p>As discussed above, record all solutions that you find, not just those that immediately appear to be faster. Some solutions might be initially slower, but because they are easier to optimise they end up being faster. You may also be able to combine the fastest parts from different approaches. If you’ve found a solution that’s fast enough, congratulations! If appropriate, you may want to share your solution with the R community. Otherwise, read on.</p>
<h3 id="Exercises-53"><a href="#Exercises-53" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>What are faster alternatives to <code>lm</code>? Which are specifically designed    to work with larger datasets?</li>
<li>What package implements a version of <code>match()</code> that’s faster for    repeated lookups? How much faster is it?</li>
<li>List four functions (not just those in base R) that convert a string into a    date time object. What are their strengths and weaknesses?</li>
<li>How many different ways can you compute a 1d density estimate in R?</li>
<li>Which packages provide the ability to compute a rolling mean?</li>
<li>What are the alternatives to <code>optim()</code>?</li>
</ol>
<h2 id="Do-as-little-as-possible"><a href="#Do-as-little-as-possible" class="headerlink" title="Do as little as possible"></a><a href="id=&quot;be-lazy&quot;">Do as little as possible</a></h2><p>The easiest way to make a function faster is to let it do less work. One way to do that is use a function tailored to a more specific type of input or ouput, or a more specific problem. For example:</p>
<ul>
<li><code>rowSums()</code>, <code>colSums()</code>, <code>rowMeans()</code>, and <code>colMeans()</code> are faster than  equivalent invocations that use <code>apply()</code> because they are vectorised (the  topic of the next section).</li>
<li><code>vapply()</code> is faster than <code>sapply()</code> because it pre-specifies the output  type.</li>
<li>If you want to see if a vector contains a single value, <code>any(x == 10)</code>  is much faster than <code>10 %in% x</code>. This is because testing equality is simpler  than testing inclusion in a set.</li>
</ul>
<p>Having this knowledge at your fingertips requires knowing that alternative functions exist: you need to have a good vocabulary. Start with <a href="#vocabulary">the basics</a>, and expand your vocab by regularly reading R code. Good places to read code are the <a href="https://stat.ethz.ch/mailman/listinfo/r-help" target="_blank" rel="external">R-help mailing list</a> and <a href="http://stackoverflow.com/questions/tagged/r" target="_blank" rel="external">stackoverflow</a>.</p>
<p>Some functions coerce their inputs into a specific type. If your input is not the right type, the function has to do extra work. Instead, look for a function that works with your data as it is, or consider changing the way you store your data. The most common example of this problem is using <code>apply()</code> on a data frame. <code>apply()</code> always turns its input into a matrix. Not only is this error prone (because a data frame is more general than a matrix), it is also slower.</p>
<p>Other functions will do less work if you give them more information about the problem. It’s always worthwhile to carefully read the documentation and experiment with different arguments. Some examples that I’ve discovered in the past include:</p>
<ul>
<li><code>read.csv()</code>: specify known column types with <code>colClasses</code>.</li>
<li><code>factor()</code>: specify known levels with <code>levels</code>.</li>
<li><code>cut()</code>: don’t generate labels with <code>labels = FALSE</code> if you don’t need them,  or, even better, use <code>findInterval()</code> as mentioned in the “see also” section  of the documentation.</li>
<li><code>unlist(x, use.names = FALSE)</code> is much faster than <code>unlist(x)</code>.</li>
<li><code>interaction()</code>: if you only need combinations that exist in the data, use  <code>drop = TRUE</code>.</li>
</ul>
<p>Sometimes you can make a function faster by avoiding method dispatch. As we saw in (<a href="#extreme-dynamism">Extreme dynamism</a>), method dispatch in R can be costly. If you’re calling a method in a tight loop, you can avoid some of the costs by doing the method lookup only once:</p>
<ul>
<li>For S3, you can do this by calling <code>generic.class()</code> instead of <code>generic()</code>.</li>
<li>For S4, you can do this by using <code>findMethod()</code> to find the method, saving  it to a variable, and then calling that function.</li>
</ul>
<p>For example, calling <code>mean.default()</code> quite a bit faster than calling <code>mean()</code> for small vectors:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(1e2)</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  mean(x),</span><br><span class="line">  mean.default(x)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>This optimisation is a little risky. While <code>mean.default()</code> is almost twice as fast, it’ll fail in surprising ways if <code>x</code> is not a numeric vector. You should only use it if you know for sure what <code>x</code> is.</p>
<p>Knowing that you’re dealing with a specific type of input can be another way to write faster code. For example, <code>as.data.frame()</code> is quite slow because it coerces each element into a data frame and then <code>rbind()</code>s them together. If you have a named list with vectors of equal length, you can directly transform it into a data frame. In this case, if you’re able to make strong assumptions about your input, you can write a method that’s about 20x faster than the default.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">quickdf &lt;- function(l) &#123;</span><br><span class="line">  class(l) &lt;- &quot;data.frame&quot;</span><br><span class="line">  attr(l, &quot;row.names&quot;) &lt;- .set_row_names(length(l[[1]]))</span><br><span class="line">  l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">l &lt;- lapply(1:26, function(i) runif(1e3))</span><br><span class="line">names(l) &lt;- letters</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  quick_df      = quickdf(l),</span><br><span class="line">  as.data.frame = as.data.frame(l)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Again, note the trade-off. This method is fast because it’s dangerous. If you give it bad inputs, you’ll get a corrupt data frame:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quickdf(list(x = 1, y = 1:2))</span><br></pre></td></tr></table></figure>
<p>To come up with this minimal method, I carefully read through and then rewrote the source code for <code>as.data.frame.list()</code> and <code>data.frame()</code>. I made many small changes, each time checking that I hadn’t broken existing behaviour. After several hours work, I was able to isolate the minimal code shown above. This is a very useful technique. Most base R functions are written for flexibility and functionality, not performance. Thus, rewriting for your specific need can often yield substantial improvements. To do this, you’ll need to read the source code. It can be complex and confusing, but don’t give up!</p>
<p>The following example shows a progressive simplification of the <code>diff()</code> function if you only want computing differences between adjacent values. At each step, I replace one argument with a specific case, and then check to see that the function still works. The initial function is long and complicated, but by restricting the arguments I not only make it around twice as fast, I also make it easier to understand.</p>
<p>First, I take the code of <code>diff()</code> and reformat it to my style:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">diff1 &lt;- function (x, lag = 1L, differences = 1L) &#123;</span><br><span class="line">  ismat &lt;- is.matrix(x)</span><br><span class="line">  xlen &lt;- if (ismat) dim(x)[1L] else length(x)</span><br><span class="line">  if (length(lag) &gt; 1L || length(differences) &gt; 1L ||</span><br><span class="line">      lag &lt; 1L || differences &lt; 1L)</span><br><span class="line">    stop(&quot;&apos;lag&apos; and &apos;differences&apos; must be integers &gt;= 1&quot;)</span><br><span class="line"></span><br><span class="line">  if (lag * differences &gt;= xlen) &#123;</span><br><span class="line">    return(x[0L])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  r &lt;- unclass(x)</span><br><span class="line">  i1 &lt;- -seq_len(lag)</span><br><span class="line">  if (ismat) &#123;</span><br><span class="line">    for (i in seq_len(differences)) &#123;</span><br><span class="line">      r &lt;- r[i1, , drop = FALSE] -</span><br><span class="line">        r[-nrow(r):-(nrow(r) - lag + 1L), , drop = FALSE]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    for (i in seq_len(differences)) &#123;</span><br><span class="line">      r &lt;- r[i1] - r[-length(r):-(length(r) - lag + 1L)]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  class(r) &lt;- oldClass(x)</span><br><span class="line">  r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Next, I assume vector input. This allows me to remove the <code>is.matrix()</code> test and the method that uses matrix subsetting.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">diff2 &lt;- function (x, lag = 1L, differences = 1L) &#123;</span><br><span class="line">  xlen &lt;- length(x)</span><br><span class="line">  if (length(lag) &gt; 1L || length(differences) &gt; 1L ||</span><br><span class="line">      lag &lt; 1L || differences &lt; 1L)</span><br><span class="line">    stop(&quot;&apos;lag&apos; and &apos;differences&apos; must be integers &gt;= 1&quot;)</span><br><span class="line"></span><br><span class="line">  if (lag * differences &gt;= xlen) &#123;</span><br><span class="line">    return(x[0L])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  i1 &lt;- -seq_len(lag)</span><br><span class="line">  for (i in seq_len(differences)) &#123;</span><br><span class="line">    x &lt;- x[i1] - x[-length(x):-(length(x) - lag + 1L)]</span><br><span class="line">  &#125;</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line">diff2(cumsum(0:10))</span><br></pre></td></tr></table></figure>
<p>I now assume that <code>difference = 1L</code>. This simplifies input checking and eliminates the for loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff3 &lt;- function (x, lag = 1L) &#123;</span><br><span class="line">  xlen &lt;- length(x)</span><br><span class="line">  if (length(lag) &gt; 1L || lag &lt; 1L)</span><br><span class="line">    stop(&quot;&apos;lag&apos; must be integer &gt;= 1&quot;)</span><br><span class="line"></span><br><span class="line">  if (lag &gt;= xlen) &#123;</span><br><span class="line">    return(x[0L])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  i1 &lt;- -seq_len(lag)</span><br><span class="line">  x[i1] - x[-length(x):-(length(x) - lag + 1L)]</span><br><span class="line">&#125;</span><br><span class="line">diff3(cumsum(0:10))</span><br></pre></td></tr></table></figure>
<p>Finally I assume <code>lag = 1L</code>. This eliminates input checking and simplifies subsetting.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff4 &lt;- function (x) &#123;</span><br><span class="line">  xlen &lt;- length(x)</span><br><span class="line">  if (xlen &lt;= 1) return(x[0L])</span><br><span class="line"></span><br><span class="line">  x[-1] - x[-xlen]</span><br><span class="line">&#125;</span><br><span class="line">diff4(cumsum(0:10))</span><br></pre></td></tr></table></figure>
<p>Now <code>diff4()</code> is both considerably simpler and considerably faster than <code>diff1()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(100)</span><br><span class="line">microbenchmark(</span><br><span class="line">  diff1(x),</span><br><span class="line">  diff2(x),</span><br><span class="line">  diff3(x),</span><br><span class="line">  diff4(x)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>You’ll be able to make <code>diff()</code> even faster for this special case once you’ve read <a href="#rcpp">Rcpp</a>.</p>
<p>A final example of doing less work is to use simpler data structures. For example, when working with rows from a data frame, it’s often faster to work with row indices than data frames. For instance, if you wanted to compute a bootstrap estimate of the correlation between two columns in a data frame, there are two basic approaches: you can either work with the whole data frame or with the individual vectors. The following example shows that working with vectors is about twice as fast.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">sample_rows &lt;- function(df, i) sample.int(nrow(df), i,</span><br><span class="line">  replace = TRUE)</span><br><span class="line"></span><br><span class="line"># Generate a new data frame containing randomly selected rows</span><br><span class="line">boot_cor1 &lt;- function(df, i) &#123;</span><br><span class="line">  sub &lt;- df[sample_rows(df, i), , drop = FALSE]</span><br><span class="line">  cor(sub$x, sub$y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Generate new vectors from random rows</span><br><span class="line">boot_cor2 &lt;- function(df, i ) &#123;</span><br><span class="line">  idx &lt;- sample_rows(df, i)</span><br><span class="line">  cor(df$x[idx], df$y[idx])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df &lt;- data.frame(x = runif(100), y = runif(100))</span><br><span class="line">microbenchmark(</span><br><span class="line">  boot_cor1(df, 10),</span><br><span class="line">  boot_cor2(df, 10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-54"><a href="#Exercises-54" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>How do the results change if you compare <code>mean()</code> and <code>mean.default()</code>    on 10,000 observations, rather than on 100?</li>
<li><p>The following code provides an alternative implementation of <code>rowSums()</code>.    Why is it faster for this input?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rowSums2 &lt;- function(df) &#123;</span><br><span class="line">  out &lt;- df[[1L]]</span><br><span class="line">  if (ncol(df) == 1) return(out)</span><br><span class="line"></span><br><span class="line">  for (i in 2:ncol(df)) &#123;</span><br><span class="line">    out &lt;- out + df[[i]]</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">df &lt;- as.data.frame(</span><br><span class="line">  replicate(1e3, sample(100, 1e4, replace = TRUE))</span><br><span class="line">)</span><br><span class="line">system.time(rowSums(df))</span><br><span class="line">system.time(rowSums2(df))</span><br></pre></td></tr></table></figure>
</li>
<li><p>What’s the difference between <code>rowSums()</code> and <code>.rowSums()</code>?</p>
</li>
<li>Make a faster version of <code>chisq.test()</code> that only computes the chi-square    test statistic when the input is two numeric vectors with no missing    values. You can try simplifying <code>chisq.test()</code> or by coding from the    <a href="http://en.wikipedia.org/wiki/Pearson%27s_chi-squared_test" target="_blank" rel="external">mathematical definition</a>.</li>
<li>Can you make a faster version of <code>table()</code> for the case of an input of    two integer vectors with no missing values? Can you use it to    speed up your chi-square test?</li>
<li><p>Imagine you want to compute the bootstrap distribution of a sample    correlation using <code>cor_df()</code> and the data in the example below. Given that you    want to run this many times, how can you make this code faster? (Hint: the    function has three components that you can speed up.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n &lt;- 1e6</span><br><span class="line">df &lt;- data.frame(a = rnorm(n), b = rnorm(n))</span><br><span class="line"></span><br><span class="line">cor_df &lt;- function(i) &#123;</span><br><span class="line">  i &lt;- sample(seq(n), n * 0.01)</span><br><span class="line">  cor(q[i, , drop = FALSE])[2,1]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Is there a way to vectorise this procedure?</p>
</li>
</ol>
<h2 id="Vectorise"><a href="#Vectorise" class="headerlink" title="Vectorise"></a><a href="id=&quot;vectorise&quot;">Vectorise</a></h2><p>If you’ve used R for any length of time, you’ve probably heard the admonishment to “vectorise your code”. But what does that actually mean? Vectorising your code is not just about avoiding for loops, although that’s often a step. Vectorising is about taking a “whole object” approach to a problem, thinking about vectors, not scalars. There are two key attributes of a vectorised function:</p>
<ul>
<li>It makes many problems simpler. Instead of having to think about the  components of a vector, you only think about entire vectors.</li>
<li>The loops in a vectorised function are written in C instead of R. Loops in C  are much faster because they have much less overhead.</li>
</ul>
<p><a href="#functionals">Functionals</a> stressed the importance of vectorised code as a higher level abstraction. Vectorisation is also important for writing fast R code. This doesn’t mean simply using <code>apply()</code> or <code>lapply()</code>, or even <code>Vectorise()</code>. Those functions improve the interface of a function, but don’t fundamentally change performance. Using vectorisation for performance means finding the existing R function that is implemented in C and most closely applies to your problem.</p>
<p>Vectorised functions that apply to many common performance bottlenecks include:</p>
<ul>
<li><p><code>rowSums()</code>, <code>colSums()</code>, <code>rowMeans()</code>, and <code>colMeans()</code>. These vectorised  matrix functions will always be faster than using <code>apply()</code>. You can  sometimes use these functions to build other vectorised functions.</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rowAny &lt;- function(x) rowSums(x) &gt; 0</span><br><span class="line">rowAll &lt;- function(x) rowSums(x) == ncol(x)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Vectorised subsetting can lead to big improvements in speed. Remember the  techniques behind lookup tables (<a href="#lookup-tables">lookup tables</a>) and matching  and merging by hand (<a href="#matching-merging">matching and merging by hand</a>). Also  remember that you can use subsetting assignment to replace multiple values in  a single step. If <code>x</code> is a vector, matrix or data frame then<br><code>x[is.na(x)] &lt;- 0</code> will replace all missing values with 0.</p>
</li>
<li>If you’re extracting or replacing values in scattered locations in a matrix  or data frame, subset with an integer matrix.<br>See <a href="#matrix-subsetting">matrix subsetting</a> for more details.</li>
<li>If you’re converting continuous values to categorical make sure you know  how to use <code>cut()</code> and <code>findInterval()</code>.</li>
<li>Be aware of vectorised functions like <code>cumsum()</code> and <code>diff()</code>.</li>
</ul>
<p>Matrix algebra is a general example of vectorisation. There loops are executed by highly tuned external libraries like BLAS. If you can figure out a way to use matrix algebra to solve your problem, you’ll often get a very fast solution. The ability to solve problems with matrix algebra is a product of experience. While this skill is something you’ll develop over time, a good place to start is to ask people with experience in your domain.</p>
<p>The downside of vectorisation is that it makes it harder to predict how operations will scale. The following example measures how long it takes to use character subsetting to lookup 1, 10, and 100 elements from a list. You might expect that looking up 10 elements would take 10x as long as looking up 1, and that looking up 100 elements would take 10x longer again. In fact, the following example shows that it only takes about 9 times longer to look up 100 elements than it does to look up 1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lookup &lt;- setNames(as.list(sample(100, 26)), letters)</span><br><span class="line"></span><br><span class="line">x1 &lt;- &quot;j&quot;</span><br><span class="line">x10 &lt;- sample(letters, 10)</span><br><span class="line">x100 &lt;- sample(letters, 100, replace = TRUE)</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  lookup[x1],</span><br><span class="line">  lookup[x10],</span><br><span class="line">  lookup[x100]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Vectorisation won’t solve every problem, and rather than torturing an existing algorithm into one that uses a vectorised approach, you’re often better off writing your own vectorised function in C++. You’ll learn how to do so in <a href="#rcpp">Rcpp</a>.</p>
<h3 id="Exercises-55"><a href="#Exercises-55" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>The density functions, e.g., <code>dnorm()</code>, have a common interface. Which    arguments are vectorised over? What does <code>rnorm(10, mean = 10:1)</code> do?</li>
<li>Compare the speed of <code>apply(x, 1, sum)</code> with <code>rowSums(x)</code> for varying sizes    of <code>x</code>.</li>
<li>How can you use <code>crossprod()</code> to compute a weighted sum? How much faster is    it than the naive <code>sum(x * w)</code>?</li>
</ol>
<h2 id="Avoid-copies"><a href="#Avoid-copies" class="headerlink" title="Avoid copies"></a><a href="id=&quot;avoid-copies&quot;">Avoid copies</a></h2><p>A pernicious source of slow R code is growing an object with a loop. Whenever you use <code>c()</code>, <code>append()</code>, <code>cbind()</code>, <code>rbind()</code>, or <code>paste()</code> to create a bigger object, R must first allocate space for the new object and then copy the old object to its new home. If you’re repeating this many times, like in a for loop, this can be quite expensive. You’ve entered Circle 2 of the <a href="http://www.burns-stat.com/pages/Tutor/R_inferno.pdf" target="_blank" rel="external">“R inferno”</a>.</p>
<p>Here’s a little example that shows the problem. We first generate some random strings, and then combine them either iteratively with a loop using <code>collapse()</code>, or in a single pass using <code>paste()</code>. Note that the performance of <code>collapse()</code> gets relatively worse as the number of strings grows: combining 100 strings takes almost 30 times longer than combining 10 strings.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">random_string &lt;- function() &#123;</span><br><span class="line">  paste(sample(letters, 50, replace = TRUE), collapse = &quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">strings10 &lt;- replicate(10, random_string())</span><br><span class="line">strings100 &lt;- replicate(100, random_string())</span><br><span class="line"></span><br><span class="line">collapse &lt;- function(xs) &#123;</span><br><span class="line">  out &lt;- &quot;&quot;</span><br><span class="line">  for (x in xs) &#123;</span><br><span class="line">    out &lt;- paste0(out, x)</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  loop10  = collapse(strings10),</span><br><span class="line">  loop100 = collapse(strings100),</span><br><span class="line">  vec10   = paste(strings10, collapse = &quot;&quot;),</span><br><span class="line">  vec100  = paste(strings100, collapse = &quot;&quot;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Modifying an object in a loop, e.g., <code>x[i] &lt;- y</code>, can also create a copy, depending on the class of <code>x</code>. <a href="#modification">Modification in place</a> discusses this issue in more depth and gives you some tools to determine when you’re making copies.</p>
<h2 id="Byte-code-compilation"><a href="#Byte-code-compilation" class="headerlink" title="Byte code compilation"></a><a href="id=&quot;byte-code&quot;">Byte code compilation</a></h2><p>R 2.13.0 introduced a byte code compiler which can increase the speed of some code. Using the compiler is an easy way to get improvements in speed. Even if it doesn’t work well for your function, you won’t have invested a lot of time in the effort. The following example shows the pure R version of <code>lapply()</code> from <a href="#lapply">functionals</a>. Compiling it gives a considerable speedup, although it’s still not quite as fast as the C version provided by base R.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lapply2 &lt;- function(x, f, ...) &#123;</span><br><span class="line">  out &lt;- vector(&quot;list&quot;, length(x))</span><br><span class="line">  for (i in seq_along(x)) &#123;</span><br><span class="line">    out[[i]] &lt;- f(x[[i]], ...)</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lapply2_c &lt;- compiler::cmpfun(lapply2)</span><br><span class="line"></span><br><span class="line">x &lt;- list(1:10, letters, c(F, T), NULL)</span><br><span class="line">microbenchmark(</span><br><span class="line">  lapply2(x, is.null),</span><br><span class="line">  lapply2_c(x, is.null),</span><br><span class="line">  lapply(x, is.null)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Byte code compilation really helps here, but in most cases you’re more likely to get a 5-10% improvement. All base R functions are byte code compiled by default.</p>
<h2 id="Case-study-t-test"><a href="#Case-study-t-test" class="headerlink" title="Case study: t-test"></a><a href="id=&quot;t-test&quot;">Case study: t-test</a></h2><p>The following case study shows how to make t-tests faster using some of the techniques described above. It’s based on an example in <a href="http://stat-computing.org/newsletter/issues/scgn-18-1.pdf" target="_blank" rel="external">“Computing thousands of test statistics simultaneously in R”</a> by Holger Schwender and Tina Müller. I thoroughly recommend reading the paper in full to see the same idea applied to other tests.</p>
<p>Imagine we have run 1000 experiments (rows), each of which collects data on 50 individuals (columns). The first 25 individuals in each experiment are assigned to group 1 and the rest to group 2. We’ll first generate some random data to represent this problem:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m &lt;- 1000</span><br><span class="line">n &lt;- 50</span><br><span class="line">X &lt;- matrix(rnorm(m * n, mean = 10, sd = 3), nrow = m)</span><br><span class="line">grp &lt;- rep(1:2, each = n / 2)</span><br></pre></td></tr></table></figure>
<p>For data in this form, there are two ways to use <code>t.test()</code>. We can either use the formula interface or provide two vectors, one for each group. Timing reveals that the formula interface is considerably slower.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system.time(for(i in 1:m) t.test(X[i, ] ~ grp)$stat)</span><br><span class="line">system.time(</span><br><span class="line">  for(i in 1:m) t.test(X[i, grp == 1], X[i, grp == 2])$stat</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Of course, a for loop computes, but doesn’t save the values. We’ll use <code>apply()</code> to do that. This adds a little overhead:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">compT &lt;- function(x, grp)&#123;</span><br><span class="line">  t.test(x[grp == 1], x[grp == 2])$stat</span><br><span class="line">&#125;</span><br><span class="line">system.time(t1 &lt;- apply(X, 1, compT, grp = grp))</span><br></pre></td></tr></table></figure>
<p>How can we make this faster? First, we could try doing less work. If you look at the source code of <code>stats:::t.test.default()</code>, you’ll see that it does a lot more than just compute the t-statistic. It also computes the p-value and formats the output for printing. We can try to make our code faster by stripping out those pieces.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">my_t &lt;- function(x, grp) &#123;</span><br><span class="line">  t_stat &lt;- function(x) &#123;</span><br><span class="line">    m &lt;- mean(x)</span><br><span class="line">    n &lt;- length(x)</span><br><span class="line">    var &lt;- sum((x - m) ^ 2) / (n - 1)</span><br><span class="line"></span><br><span class="line">    list(m = m, n = n, var = var)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  g1 &lt;- t_stat(x[grp == 1])</span><br><span class="line">  g2 &lt;- t_stat(x[grp == 2])</span><br><span class="line"></span><br><span class="line">  se_total &lt;- sqrt(g1$var / g1$n + g2$var / g2$n)</span><br><span class="line">  (g1$m - g2$m) / se_total</span><br><span class="line">&#125;</span><br><span class="line">system.time(t2 &lt;- apply(X, 1, my_t, grp = grp))</span><br><span class="line">stopifnot(all.equal(t1, t2))</span><br></pre></td></tr></table></figure>
<p>This gives us about a 6x speed improvement.</p>
<p>Now that we have a fairly simple function, we can make it faster still by vectorising it. Instead of looping over the array outside the function, we will modify <code>t_stat()</code> to work with a matrix of values. Thus, <code>mean()</code> becomes <code>rowMeans()</code>, <code>length()</code> becomes <code>ncol()</code>, and <code>sum()</code> becomes <code>rowSums()</code>. The rest of the code stays the same.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rowtstat &lt;- function(X, grp)&#123;</span><br><span class="line">  t_stat &lt;- function(X) &#123;</span><br><span class="line">    m &lt;- rowMeans(X)</span><br><span class="line">    n &lt;- ncol(X)</span><br><span class="line">    var &lt;- rowSums((X - m) ^ 2) / (n - 1)</span><br><span class="line"></span><br><span class="line">    list(m = m, n = n, var = var)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  g1 &lt;- t_stat(X[, grp == 1])</span><br><span class="line">  g2 &lt;- t_stat(X[, grp == 2])</span><br><span class="line"></span><br><span class="line">  se_total &lt;- sqrt(g1$var / g1$n + g2$var / g2$n)</span><br><span class="line">  (g1$m - g2$m) / se_total</span><br><span class="line">&#125;</span><br><span class="line">system.time(t3 &lt;- rowtstat(X, grp))</span><br><span class="line">stopifnot(all.equal(t1, t3))</span><br></pre></td></tr></table></figure>
<p>That’s much faster! It’s at least 40x faster than our previous effort, and around 1000x faster than where we started.</p>
<p>Finally, we could try byte code compilation. Here we’ll need to use <code>microbenchmark()</code> instead of <code>system.time()</code> in order to get enough accuracy to see a difference:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rowtstat_bc &lt;- compiler::cmpfun(rowtstat)</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  rowtstat(X, grp),</span><br><span class="line">  rowtstat_bc(X, grp),</span><br><span class="line">  unit = &quot;ms&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>In this example, byte code compilation doesn’t help at all.</p>
<h2 id="Parallelise"><a href="#Parallelise" class="headerlink" title="Parallelise"></a><a href="id=&quot;parallelise&quot;">Parallelise</a></h2><p>Parallelisation uses multiple cores to work simultaneously on different parts of a problem. It doesn’t reduce the computing time, but it saves your time because you’re using more of your computer’s resources. Parallel computing is a complex topic, and there’s no way to cover it in depth here. Some resources I recommend are:</p>
<ul>
<li><a href="http://amzn.com/B005Z29QT4" target="_blank" rel="external"><em>Parallel R</em></a> by Q. Ethan McCallum and Stephen Weston.</li>
<li><a href="http://heather.cs.ucdavis.edu/paralleldatasci.pdf" target="_blank" rel="external"><em>Parallel Computing for Data Science</em></a> by<br>Norm Matloff.</li>
</ul>
<p>What I want to show is a simple application of parallel computing to what are called “embarrassingly parallel problems”. An embarrassingly parallel problem is one that’s made up of many simple problems that can be solved independently. A great example of this is <code>lapply()</code> because it operates on each element independently of the others. It’s very easy to parallelise <code>lapply()</code> on Linux and the Mac because you simply substitute <code>mclapply()</code> for <code>lapply()</code>. The following code snippet runs a trivial (but slow) function on all cores of your computer.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(parallel)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cores &lt;- detectCores()</span><br><span class="line">cores</span><br><span class="line"></span><br><span class="line">pause &lt;- function(i) &#123;</span><br><span class="line">  function(x) Sys.sleep(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system.time(lapply(1:10, pause(0.25)))</span><br><span class="line">system.time(mclapply(1:10, pause(0.25), mc.cores = cores))</span><br></pre></td></tr></table></figure>
<p>Life is a bit harder in Windows. You need to first set up a local cluster and then use <code>parLapply()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cluster &lt;- makePSOCKcluster(cores)</span><br><span class="line">system.time(parLapply(cluster, 1:10, function(i) Sys.sleep(1)))</span><br></pre></td></tr></table></figure>
<p>The main difference between <code>mclapply()</code> and <code>makePSOCKcluster()</code> is that the individual processes generated by <code>mclapply()</code> inherit from the current process, while those generated by <code>makePSOCKcluster()</code> start with a fresh session. This means that most real code will need some setup. Use <code>clusterEvalQ()</code> to run arbitrary code on each cluster and load needed packages, and <code>clusterExport()</code> to copy objects in the current session to the remote sessions.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 10</span><br><span class="line">psock &lt;- parallel::makePSOCKcluster(1L)</span><br><span class="line">clusterEvalQ(psock, x)</span><br><span class="line">#&gt; Error: one node produced an error: object &apos;x&apos; not found</span><br><span class="line"></span><br><span class="line">clusterExport(psock, &quot;x&quot;)</span><br><span class="line">clusterEvalQ(psock, x)</span><br><span class="line">#&gt; [[1]]</span><br><span class="line">#&gt; [1] 10</span><br></pre></td></tr></table></figure>
<p>There is some communication overhead with parallel computing. If the subproblems are very small, then parallelisation might hurt rather than help. It’s also possible to distribute computation over a network of computers (not just the cores on your local computer) but that’s beyond the scope of this book, because it gets increasingly complicated to balance computation and communication costs. A good place to start for more information is the <a href="http://cran.r-project.org/web/views/HighPerformanceComputing.html" target="_blank" rel="external">high performance computing CRAN task view</a>.</p>
<h2 id="Other-techniques"><a href="#Other-techniques" class="headerlink" title="Other techniques"></a><a href="id=&quot;more-techniques&quot;">Other techniques</a></h2><p>Being able to write fast R code is part of being a good R programmer. Beyond the specific hints in this chapter, if you want to write fast R code, you’ll need to improve your general programming skills. Some ways to do this are to:</p>
<ul>
<li><a href="http://www.r-bloggers.com/" target="_blank" rel="external">Read R blogs</a> to see what performance  problems other people have struggled with, and how they have made their  code faster.</li>
<li>Read other R programming books, like Norm Matloff’s  <a href="http://amzn.com/1593273843" target="_blank" rel="external"><em>The Art of R Programming</em></a> or Patrick Burns’  <a href="http://www.burns-stat.com/documents/books/the-r-inferno/" target="_blank" rel="external"><em>R Inferno</em></a> to  learn about common traps.</li>
<li>Take an algorithms and data structure course to learn some  well known ways of tackling certain classes of problems. I have heard  good things about Princeton’s  <a href="https://www.coursera.org/course/algs4partI" target="_blank" rel="external">Algorithms course</a> offered on<br>Coursera.</li>
<li>Read general books about optimisation like  <a href="http://carlos.bueno.org/optimization/mature-optimization.pdf" target="_blank" rel="external"><em>Mature optimisation</em></a>  by Carlos Bueno, or the <a href="http://amzn.com/020161622X" target="_blank" rel="external"><em>Pragmatic Programmer</em></a>  by Andrew Hunt and David Thomas.</li>
</ul>
<p>You can also reach out to the community for help. Stackoverflow can be a useful resource. You’ll need to put some effort into creating an easily digestible example that also captures the salient features of your problem. If your example is too complex, few people will have the time and motivation to attempt a solution. If it’s too simple, you’ll get answers that solve the toy problem but not the real problem. If you also try to answer questions on stackoverflow, you’ll quickly get a feel for what makes a good question.</p>
<hr>
<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a><a href="id=&quot;memory&quot;">Memory</a></h1><p>A solid understanding of R’s memory management will help you predict how much memory you’ll need for a given task and help you to make the most of the memory you have. It can even help you write faster code because accidental copies are a major cause of slow code. The goal of this chapter is to help you understand the basics of memory management in R, moving from individual objects to functions to larger blocks of code. Along the way, you’ll learn about some common myths, such as that you need to call <code>gc()</code> to free up memory, or that <code>for</code> loops are always slow.</p>
<h5 id="Outline-12"><a href="#Outline-12" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#object-size">Object size</a> shows you how to use <code>object_size()</code> to see  how much memory an object occupies, and uses that as a launching point to  improve your understanding of how R objects are stored in memory.</li>
<li><a href="#gc">Memory usage and garbage collection</a> introduces you to the <code>mem_used()</code>  and <code>mem_change()</code> functions that will help you understand how R allocates  and frees memory.</li>
<li><a href="#memory-profiling">Memory profiling with lineprof</a> shows you how to use  the lineprof package to understand how memory is allocated and released in  larger code blocks.</li>
<li><a href="#modification">Modification in place</a> introduces you to the <code>address()</code> and  <code>refs()</code> functions so that you can understand when R modifies in place and  when R modifies a copy. Understanding when objects are copied is very  important for writing efficient R code.</li>
</ul>
<h5 id="Prerequisites-9"><a href="#Prerequisites-9" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>In this chapter, we’ll use tools from the pryr and lineprof packages to understand memory usage, and a sample dataset from ggplot2. If you don’t already have them, run this code to get the packages you need:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install.packages(&quot;ggplot2&quot;)</span><br><span class="line">install.packages(&quot;pryr&quot;)</span><br><span class="line">install.packages(&quot;devtools&quot;)</span><br><span class="line">devtools::install_github(&quot;hadley/lineprof&quot;)</span><br></pre></td></tr></table></figure>
<h5 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h5><!-- FIXME: cite R-exts and R-ints formally -->
<p>The details of R’s memory management are not documented in a single place. Most of the information in this chapter was gleaned from a close reading of the documentation (particularly <code>?Memory</code> and <code>?gc</code>), the <a href="http://cran.r-project.org/doc/manuals/R-exts.html#Profiling-R-code-for-memory-use" target="_blank" rel="external">memory profiling</a> section of R-exts, and the <a href="http://cran.r-project.org/doc/manuals/R-ints.html#SEXPs" target="_blank" rel="external">SEXPs</a> section of R-ints. The rest I figured out by reading the C source code, performing small experiments, and asking questions on R-devel. Any mistakes are entirely mine.</p>
<h2 id="Object-size"><a href="#Object-size" class="headerlink" title="Object size"></a><a href="id=&quot;object-size&quot;">Object size</a></h2><p>To understand memory usage in R, we will start with <code>pryr::object_size()</code>. This function tells you how many bytes of memory an object occupies:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">object_size(1:10)</span><br><span class="line">object_size(mean)</span><br><span class="line">object_size(mtcars)</span><br></pre></td></tr></table></figure>
<p>(This function is better than the built-in <code>object.size()</code> because it accounts for shared elements within an object and includes the size of environments.)</p>
<p>Something interesting occurs if we use <code>object_size()</code> to systematically explore the size of an integer vector. The code below computes and plots the memory usage of integer vectors ranging in length from 0 to 50 elements. You might expect that the size of an empty vector would be zero and that memory usage would grow proportionately with length. Neither of those things are true!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sizes &lt;- sapply(0:50, function(n) object_size(seq_len(n)))</span><br><span class="line">plot(0:50, sizes, xlab = &quot;Length&quot;, ylab = &quot;Size (bytes)&quot;,</span><br><span class="line">  type = &quot;s&quot;)</span><br></pre></td></tr></table></figure>
<p>This isn’t just an artefact of integer vectors. Every length 0 vector occupies 40 bytes of memory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">object_size(numeric())</span><br><span class="line">object_size(logical())</span><br><span class="line">object_size(raw())</span><br><span class="line">object_size(list())</span><br></pre></td></tr></table></figure>
<p>Those 40 bytes are used to store four components possessed by every object in R:</p>
<ul>
<li>Object metadata (4 bytes). These metadata store the base type (e.g. integer)  and information used for debugging and memory management.</li>
<li>Two pointers: one to the next object in memory and one to the previous  object (2 * 8 bytes). This doubly-linked list makes it easy for internal  R code to loop through every object in memory.</li>
<li>A pointer to the attributes (8 bytes).</li>
</ul>
<p>All vectors have three additional components:</p>
<ul>
<li>The length of the vector (4 bytes). By using only 4 bytes, you might expect  that R could only support vectors up to $2 ^ {4 \times 8 - 1}$ ($2 ^ {31}$, about  two billion) elements. But in R 3.0.0 and later, you can actually have  vectors up to $2 ^ {52}$ elements. <a href="http://cran.r-project.org/doc/manuals/R-ints.html#Long-vectors" target="_blank" rel="external">Read R-internals</a> to see how  support for long vectors was added without having to change the size of this  field.</li>
<li>The “true” length of the vector (4 bytes). This is basically never used,  except when the object is the hash table used for an environment. In that  case, the true length represents the allocated space, and the length  represents the space currently used.</li>
<li>The data (?? bytes). An empty vector has 0 bytes of data, but it’s  obviously very important otherwise! Numeric vectors occupy 8 bytes for  every element, integer vectors 4, and complex vectors 16.</li>
</ul>
<p>If you’re keeping count you’ll notice that this only adds up to 36 bytes. The remaining 4 bytes are used for padding so that each component starts on an 8 byte (= 64-bit) boundary. Most cpu architectures require pointers to be aligned in this way, and even if they don’t require it, accessing non-aligned pointers tends to be rather slow. (If you’re interested, you can read more about it in <a href="http://www.catb.org/esr/structure-packing/" target="_blank" rel="external">C structure packing</a>.)</p>
<p>This explains the intercept on the graph. But why does the memory size grow irregularly? To understand why, you need to know a little bit about how R requests memory from the operating system. Requesting memory (with <code>malloc()</code>) is a relatively expensive operation. Having to request memory every time a small vector is created would slow R down considerably. Instead, R asks for a big block of memory and then manages that block itself. This block is called the small vector pool and is used for vectors less than 128 bytes long. For efficiency and simplicity, it only allocates vectors that are 8, 16, 32, 48, 64, or 128 bytes long. If we adjust our previous plot to remove the 40 bytes of overhead, we can see that those values correspond to the jumps in memory use.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plot(0:50, sizes - 40, xlab = &quot;Length&quot;,</span><br><span class="line">  ylab = &quot;Bytes excluding overhead&quot;, type = &quot;n&quot;)</span><br><span class="line">abline(h = 0, col = &quot;grey80&quot;)</span><br><span class="line">abline(h = c(8, 16, 32, 48, 64, 128), col = &quot;grey80&quot;)</span><br><span class="line">abline(a = 0, b = 4, col = &quot;grey90&quot;, lwd = 4)</span><br><span class="line">lines(sizes - 40, type = &quot;s&quot;)</span><br></pre></td></tr></table></figure>
<p>Beyond 128 bytes, it no longer makes sense for R to manage vectors. After all, allocating big chunks of memory is something that operating systems are very good at. Beyond 128 bytes, R will ask for memory in multiples of 8 bytes. This ensures good alignment.</p>
<p>A subtlety of the size of an object is that components can be shared across multiple objects. For example, look at the following code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:1e6</span><br><span class="line">object_size(x)</span><br><span class="line"></span><br><span class="line">y &lt;- list(x, x, x)</span><br><span class="line">object_size(y)</span><br></pre></td></tr></table></figure>
<p><code>y</code> isn’t three times as big as <code>x</code> because R is smart enough to not copy <code>x</code> three times; instead it just points to the existing <code>x</code>.</p>
<p>It’s misleading to look at the sizes of <code>x</code> and <code>y</code> individually. If you want to know how much space they take up together, you have to supply them to the same <code>object_size()</code> call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object_size(x, y)</span><br></pre></td></tr></table></figure>
<p>In this case, <code>x</code> and <code>y</code> together take up the same amount of space as <code>y</code> alone. This is not always the case. If there are no shared components, as in the following example, then you can add up the sizes of individual components to find out the total size:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x1 &lt;- 1:1e6</span><br><span class="line">y1 &lt;- list(1:1e6, 1:1e6, 1:1e6)</span><br><span class="line"></span><br><span class="line">object_size(x1)</span><br><span class="line">object_size(y1)</span><br><span class="line">object_size(x1, y1)</span><br><span class="line">object_size(x1) + object_size(y1) == object_size(x1, y1)</span><br></pre></td></tr></table></figure>
<p>The same issue also comes up with strings, because R has a global string pool. This means that each unique string is only stored in one place, and therefore character vectors take up less memory than you might expect:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object_size(&quot;banana&quot;)</span><br><span class="line">object_size(rep(&quot;banana&quot;, 10))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-56"><a href="#Exercises-56" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Repeat the analysis above for numeric, logical, and complex vectors.</li>
<li>If a data frame has one million rows, and three variables (two numeric, and    one integer), how much space will it take up? Work it out from theory,    then verify your work by creating a data frame and measuring its size.</li>
<li><p>Compare the sizes of the elements in the following two lists. Each    contains basically the same data, but one contains vectors of small    strings while the other contains a single long string.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vec &lt;- lapply(0:50, function(i) c(&quot;ba&quot;, rep(&quot;na&quot;, i)))</span><br><span class="line">str &lt;- lapply(vec, paste0, collapse = &quot;&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Which takes up more memory: a factor (<code>x</code>) or the equivalent character    vector (<code>as.character(x)</code>)? Why?</p>
</li>
<li>Explain the difference in size between <code>1:5</code> and <code>list(1:5)</code>.</li>
</ol>
<h2 id="Memory-usage-and-garbage-collection"><a href="#Memory-usage-and-garbage-collection" class="headerlink" title="Memory usage and garbage collection"></a><a href="id=&quot;gc&quot;">Memory usage and garbage collection</a></h2><p>While <code>object_size()</code> tells you the size of a single object, <code>pryr::mem_used()</code> tells you the total size of all objects in memory:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">mem_used()</span><br></pre></td></tr></table></figure>
<p>This number won’t agree with the amount of memory reported by your operating system for a number of reasons:</p>
<ol>
<li>It only includes objects created by R, not the R interpreter itself.</li>
<li>Both R and the operating system are lazy: they won’t reclaim memory   until it’s actually needed. R might be holding on to memory because   the OS hasn’t yet asked for it back.</li>
<li>R counts the memory occupied by objects but there may be gaps due to   deleted objects. This problem is known as memory fragmentation.</li>
</ol>
<p><code>mem_change()</code> builds on top of <code>mem_used()</code> to tell you how memory changes during code execution. Positive numbers represent an increase in the memory used by R, and negative numbers represent a decrease.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Need about 4 mb to store 1 million integers</span><br><span class="line">mem_change(x &lt;- 1:1e6)</span><br><span class="line"># We get that memory back when we delete it</span><br><span class="line">mem_change(rm(x))</span><br></pre></td></tr></table></figure>
<p>Even operations that don’t do anything use up a little memory. This is because R is tracking the history of everything you do. You can ignore anything on the order of around 2 kB.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mem_change(NULL)</span><br><span class="line">mem_change(NULL)</span><br></pre></td></tr></table></figure>
<p>In some languages, you have to explicitly delete unused objects for their memory to be returned. R uses an alternative approach: garbage collection (or GC for short). GC automatically releases memory when an object is no longer used. It does this by tracking how many names point to each object, and when there are no names pointing to an object, it deletes that object.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm(y)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Create a big object</span><br><span class="line">mem_change(x &lt;- 1:1e6)</span><br><span class="line"># Also point to 1:1e6 from y</span><br><span class="line">mem_change(y &lt;- x)</span><br><span class="line"># Remove x, no memory freed because y is still pointing to it</span><br><span class="line">mem_change(rm(x))</span><br><span class="line"># Now nothing points to it and the memory can be freed</span><br><span class="line">mem_change(rm(y))</span><br></pre></td></tr></table></figure>
<p>Despite what you might have read elsewhere, there’s never any need to call <code>gc()</code> yourself. R will automatically run garbage collection whenever it needs more space; if you want to see when that is, call <code>gcinfo(TRUE)</code>. The only reason you <em>might</em> want to call <code>gc()</code> is to ask R to return memory to the operating system. However, even that might not have any effect: older versions of Windows had no way for a program to return memory to the OS.</p>
<p>GC takes care of releasing objects that are no longer used. However, you do need to be aware of possible memory leaks. A memory leak occurs when you keep pointing to an object without realising it. In R, the two main causes of memory leaks are formulas and closures because they both capture the enclosing environment. The following code illustrates the problem. In <code>f1()</code>, <code>1:1e6</code> is only referenced inside the function, so when the function completes the memory is returned and the net memory change is 0. <code>f2()</code> and <code>f3()</code> both return objects that capture environments, so that <code>x</code> is not freed when the function completes.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f1 &lt;- function() &#123;</span><br><span class="line">  x &lt;- 1:1e6</span><br><span class="line">  10</span><br><span class="line">&#125;</span><br><span class="line">mem_change(x &lt;- f1())</span><br><span class="line">object_size(x)</span><br><span class="line"></span><br><span class="line">f2 &lt;- function() &#123;</span><br><span class="line">  x &lt;- 1:1e6</span><br><span class="line">  a ~ b</span><br><span class="line">&#125;</span><br><span class="line">mem_change(y &lt;- f2())</span><br><span class="line">object_size(y)</span><br><span class="line"></span><br><span class="line">f3 &lt;- function() &#123;</span><br><span class="line">  x &lt;- 1:1e6</span><br><span class="line">  function() 10</span><br><span class="line">&#125;</span><br><span class="line">mem_change(z &lt;- f3())</span><br><span class="line">object_size(z)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm(y, z)</span><br></pre></td></tr></table></figure>
<h2 id="Memory-profiling-with-lineprof"><a href="#Memory-profiling-with-lineprof" class="headerlink" title="Memory profiling with lineprof"></a><a href="id=&quot;memory-profiling&quot;">Memory profiling with lineprof</a></h2><p><code>mem_change()</code> captures the net change in memory when running a block of code. Sometimes, however, we may want to measure incremental change. One way to do this is to use memory profiling to capture usage every few milliseconds. This functionality is provided by <code>utils::Rprof()</code> but it doesn’t provide a very useful display of the results. Instead we’ll use the <a href="https://github.com/hadley/lineprof" target="_blank" rel="external">lineprof</a> package. It is powered by <code>Rprof()</code>, but displays the results in a more informative manner.</p>
<p>To demonstrate <code>lineprof</code>, we’re going to explore a bare-bones implementation of <code>read.delim()</code> with only three arguments:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">We&apos;ll also create a sample csv file:</span><br><span class="line"></span><br><span class="line">```&#123;r&#125;</span><br><span class="line">library(ggplot2)</span><br><span class="line">write.csv(diamonds, &quot;diamonds.csv&quot;, row.names = FALSE)</span><br></pre></td></tr></table></figure>
<p>Using lineprof is straightforward. <code>source()</code> the code, apply <code>lineprof()</code> to an expression, then use <code>shine()</code> to view the results. Note that you <em>must</em> use <code>source()</code> to load the code. This is because lineprof uses srcrefs to match up the code and run times. The needed srcrefs are only created when you load code from disk.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">library(lineprof)</span><br><span class="line"></span><br><span class="line">source(&quot;code/read-delim.R&quot;)</span><br><span class="line">prof &lt;- lineprof(read_delim(&quot;diamonds.csv&quot;))</span><br><span class="line">shine(prof)</span><br></pre></td></tr></table></figure>
<p><img src="screenshots/memory-lineprof.png" alt=""></p>
<p><code>shine()</code> will also open a new web page (or if you’re using RStudio, a new pane) that shows your source code annotated with information about memory usage. <code>shine()</code> starts a shiny app which will “block” your R session. To exit, press escape or ctrl + break.</p>
<p>Next to the source code, four columns provide details about the performance of the code:</p>
<ul>
<li><code>t</code>, the time (in seconds) spent on that line of code (explained in  <a href="#measure-perf">measuring performance</a>).</li>
<li><code>a</code>, the memory (in megabytes) allocated by that line of code.</li>
<li><code>r</code>, the memory (in megabytes) released by that line of code. While memory  allocation is deterministic, memory release is stochastic: it depends on when  the GC was run. This means that memory release only tells you that the memory  released was no longer needed before this line.</li>
<li><code>d</code>, the number of vector duplications that occurred. A vector duplication  occurs when R copies a vector as a result of its copy on modify semantics.</li>
</ul>
<p>You can hover over any of the bars to get the exact numbers. In this example, looking at the allocations tells us most of the story:</p>
<ul>
<li><code>scan()</code> allocates about 2.5 MB of memory, which is very close to the 2.8 MB  of space that the file occupies on disk. You wouldn’t expect the two numbers  to be identical because R doesn’t need to store the commas and because the  global string pool will save some memory.</li>
<li>Converting the columns allocates another 0.6 MB of memory. You’d also expect  this step to free some memory because we’ve converted string columns into  integer and numeric columns (which occupy less space), but we can’t see those  releases because GC hasn’t been triggered yet.</li>
<li>Finally, calling <code>as.data.frame()</code> on a list allocates about 1.6 megabytes  of memory and performs over 600 duplications. This is because  <code>as.data.frame()</code> isn’t terribly efficient and ends up copying the input  multiple times. We’ll discuss duplication more in the next section.</li>
</ul>
<p>There are two downsides to profiling:</p>
<ol>
<li><code>read_delim()</code> only takes around half a second, but profiling can, at best,   capture memory usage every 1 ms. This means we’ll only get about 500 samples.</li>
<li>Since GC is lazy, we can never tell exactly when memory is no longer needed.</li>
</ol>
<p>You can work around both problems by using <code>torture = TRUE</code>, which forces R to run GC after every allocation (see <code>gctorture()</code> for more details). This helps with both problems because memory is freed as soon as possible, and R runs 10–100x slower. This effectively makes the resolution of the timer greater, so that you can see smaller allocations and exactly when memory is no longer needed.</p>
<h3 id="Exercises-57"><a href="#Exercises-57" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>When the input is a list, we can make a more efficient <code>as.data.frame()</code>   by using special knowledge. A data frame is a list with class <code>data.frame</code>   and <code>row.names</code> attribute. <code>row.names</code> is either a character vector or   vector of sequential integers, stored in a special format created by   <code>.set_row_names()</code>. This leads to an alternative <code>as.data.frame()</code>:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">to_df &lt;- function(x) &#123;</span><br><span class="line">  class(x) &lt;- &quot;data.frame&quot;</span><br><span class="line">  attr(x, &quot;row.names&quot;) &lt;- .set_row_names(length(x[[1]]))</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> What impact does this function have on <code>read_delim()</code>?  What are the    downsides of this function?</p>
</li>
<li><p>Line profile the following function with <code>torture = TRUE</code>. What is    surprising? Read the source code of <code>rm()</code> to figure out what’s going on.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f &lt;- function(n = 1e5) &#123;</span><br><span class="line">  x &lt;- rep(1, n)</span><br><span class="line">  rm(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Modification-in-place"><a href="#Modification-in-place" class="headerlink" title="Modification in place"></a><a href="id=&quot;modification&quot;">Modification in place</a></h2><p>What happens to <code>x</code> in the following code?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line">x[5] &lt;- 10</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<p>There are two possibilities:</p>
<ol>
<li>R modifies <code>x</code> in place.</li>
<li>R makes a copy of <code>x</code> to a new location, modifies the copy, and then uses   the name <code>x</code> to point to the new location.</li>
</ol>
<p>It turns out that R can do either depending on the circumstances. In the example above, it will modify in place. But if another variable also points to <code>x</code>, then R will copy it to a new location. To explore what’s going on in greater detail, we use two tools from the pryr package. Given the name of a variable, <code>address()</code> will tell us the variable’s location in memory and <code>refs()</code> will tell us how many names point to that location.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line">x &lt;- 1:10</span><br><span class="line">c(address(x), refs(x))</span><br><span class="line"># [1] &quot;0x103100060&quot; &quot;1&quot;</span><br><span class="line"></span><br><span class="line">y &lt;- x</span><br><span class="line">c(address(y), refs(y))</span><br><span class="line"># [1] &quot;0x103100060&quot; &quot;2&quot;</span><br></pre></td></tr></table></figure>
<p>(Note that if you’re using RStudio, <code>refs()</code> will always return 2: the environment browser makes a reference to every object you create on the command line.)</p>
<p><code>refs()</code> is only an estimate. It can only distinguish between one and more than one reference (future versions of R might do better). This means that <code>refs()</code> returns 2 in both of the following cases:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:5</span><br><span class="line">y &lt;- x</span><br><span class="line">rm(y)</span><br><span class="line"># Should really be 1, because we&apos;ve deleted y</span><br><span class="line">refs(x)</span><br><span class="line"></span><br><span class="line">x &lt;- 1:5</span><br><span class="line">y &lt;- x</span><br><span class="line">z &lt;- x</span><br><span class="line"># Should really be 3</span><br><span class="line">refs(x)</span><br></pre></td></tr></table></figure>
<p>When <code>refs(x)</code> is 1, modification will occur in place. When <code>refs(x)</code> is 2, R will make a copy (this ensures that other pointers to the object remain unaffected). Note that in the following example, <code>y</code> keeps pointing to the same location while <code>x</code> changes.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line">y &lt;- x</span><br><span class="line">c(address(x), address(y))</span><br><span class="line"></span><br><span class="line">x[5] &lt;- 6L</span><br><span class="line">c(address(x), address(y))</span><br></pre></td></tr></table></figure>
<p>Another useful function is <code>tracemem()</code>. It prints a message every time the traced object is copied:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- 1:10</span><br><span class="line"># Prints the current memory location of the object</span><br><span class="line">tracemem(x)</span><br><span class="line"># [1] &quot;&lt;0x7feeaaa1c6b8&gt;&quot;</span><br><span class="line"></span><br><span class="line">x[5] &lt;- 6L</span><br><span class="line"></span><br><span class="line">y &lt;- x</span><br><span class="line"># Prints where it has moved from and to</span><br><span class="line">x[5] &lt;- 6L</span><br><span class="line"># tracemem[0x7feeaaa1c6b8 -&gt; 0x7feeaaa1c768]:</span><br></pre></td></tr></table></figure>
<p>For interactive use, <code>tracemem()</code> is slightly more useful than <code>refs()</code>, but because it just prints a message, it’s harder to program with. I don’t use it in this book because it interacts poorly with <a href="http://yihui.name/knitr/" target="_blank" rel="external">knitr</a>, the tool I use to interleave text and code.</p>
<p>Non-primitive functions that touch the object always increment the ref count. Primitive functions usually don’t. (The reasons are a little complicated, but see the R-devel thread <a href="http://r.789695.n4.nabble.com/Confused-about-NAMED-td4103326.html" target="_blank" rel="external">confused about NAMED</a>.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Touching the object forces an increment</span><br><span class="line">f &lt;- function(x) x</span><br><span class="line">&#123;x &lt;- 1:10; f(x); refs(x)&#125;</span><br><span class="line"></span><br><span class="line"># Sum is primitive, so no increment</span><br><span class="line">&#123;x &lt;- 1:10; sum(x); refs(x)&#125;</span><br><span class="line"></span><br><span class="line"># f() and g() never evaluate x, so refs don&apos;t increment</span><br><span class="line">f &lt;- function(x) 10</span><br><span class="line">g &lt;- function(x) substitute(x)</span><br><span class="line"></span><br><span class="line">&#123;x &lt;- 1:10; f(x); refs(x)&#125;</span><br><span class="line">&#123;x &lt;- 1:10; g(x); refs(x)&#125;</span><br></pre></td></tr></table></figure>
<p>Generally, provided that the object is not referred to elsewhere, any primitive replacement function will modify in place. This includes <code>[[&lt;-</code>, <code>[&lt;-</code>, <code>@&lt;-</code>, <code>$&lt;-</code>, <code>attr&lt;-</code>, <code>attributes&lt;-</code>, <code>class&lt;-</code>, <code>dim&lt;-</code>, <code>dimnames&lt;-</code>, <code>names&lt;-</code>, and <code>levels&lt;-</code>. To be precise, all non-primitive functions increment refs, but a primitive function may be written in such a way that it doesn’t. The rules are sufficiently complicated that there’s little point in trying to memorise them. Instead, you should approach the problem practically by using <code>refs()</code> and <code>address()</code> to figure out when objects are being copied.</p>
<p>While determining that copies are being made is not hard, preventing such behaviour is. If you find yourself resorting to exotic tricks to avoid copies, it may be time to rewrite your function in C++, as described in <a href="#rcpp">Rcpp</a>.</p>
<h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><p>For loops in R have a reputation for being slow. Often that slowness is because you’re modifying a copy instead of modifying in place. Consider the following code. It subtracts the median from each column of a large data frame:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- data.frame(matrix(runif(100 * 1e4), ncol = 100))</span><br><span class="line">medians &lt;- vapply(x, median, numeric(1))</span><br><span class="line"></span><br><span class="line">for(i in seq_along(medians)) &#123;</span><br><span class="line">  x[, i] &lt;- x[, i] - medians[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You may be surprised to realise that every iteration of the loop copies the data frame. We can see that more clearly by using <code>address()</code> and <code>refs()</code> for a small sample of the loop:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(i in 1:5) &#123;</span><br><span class="line">  x[, i] &lt;- x[, i] - medians[i]</span><br><span class="line">  print(c(address(x), refs(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For each iteration, <code>x</code> is moved to a new location so <code>refs(x)</code> is always 2. This occurs because <code>[&lt;-.data.frame</code> is not a primitive function, so it always increments the refs. We can make the function substantially more efficient by using a list instead of a data frame. Modifying a list uses primitive functions, so the refs are not incremented and all modifications occur in place:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- as.list(x)</span><br><span class="line"></span><br><span class="line">for(i in 1:5) &#123;</span><br><span class="line">  y[[i]] &lt;- y[[i]] - medians[i]</span><br><span class="line">  print(c(address(y), refs(y)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This behaviour was substantially more problematic prior to R 3.1.0, because every copy of the data frame was a deep copy. This made the motivating example take around 5 s, compared to 0.01 s today.</p>
<h3 id="Exercises-58"><a href="#Exercises-58" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li><p>The code below makes one duplication. Where does it occur and why?    (Hint: look at <code>refs(y)</code>.)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">y &lt;- as.list(x)</span><br><span class="line">for(i in seq_along(medians)) &#123;</span><br><span class="line">  y[[i]] &lt;- y[[i]] - medians[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>The implementation of <code>as.data.frame()</code> in the previous section has one    big downside. What is it and how could you avoid it?</p>
</li>
</ol>
<hr>
<h1 id="High-performance-functions-with-Rcpp"><a href="#High-performance-functions-with-Rcpp" class="headerlink" title="High performance functions with Rcpp"></a><a href="id=&quot;rcpp&quot;">High performance functions with Rcpp</a></h1><p>Sometimes R code just isn’t fast enough. You’ve used profiling to figure out where your bottlenecks are, and you’ve done everything you can in R, but your code still isn’t fast enough. In this chapter you’ll learn how to improve performance by rewriting key functions in C++. This magic comes by way of the <a href="http://www.rcpp.org/" target="_blank" rel="external">Rcpp</a> package, a fantastic tool written by Dirk Eddelbuettel and Romain Francois (with key contributions by Doug Bates, John Chambers, and JJ Allaire). Rcpp makes it very simple to connect C++ to R. While it is <em>possible</em> to write C or Fortran code for use in R, it will be painful by comparison. Rcpp provides a clean, approachable API that lets you write high-performance code, insulated from R’s arcane C API.</p>
<p>Typical bottlenecks that C++ can address include:</p>
<ul>
<li>Loops that can’t be easily vectorised because subsequent iterations depend  on previous ones.</li>
<li>Recursive functions, or problems which involve calling functions millions of  times. The overhead of calling a function in C++ is much lower than that in  R.</li>
<li>Problems that require advanced data structures and algorithms that R doesn’t  provide. Through the standard template library (STL), C++ has efficient  implementations of many important data structures, from ordered maps to  double-ended queues.</li>
</ul>
<p>The aim of this chapter is to discuss only those aspects of C++ and Rcpp that are absolutely necessary to help you eliminate bottlenecks in your code. We won’t spend much time on advanced features like object oriented programming or templates because the focus is on writing small, self-contained functions, not big programs. A working knowledge of C++ is helpful, but not essential. Many good tutorials and references are freely available, including <a href="http://www.learncpp.com/" target="_blank" rel="external">http://www.learncpp.com/</a> and <a href="http://www.cplusplus.com/" target="_blank" rel="external">http://www.cplusplus.com/</a>. For more advanced topics, the <em>Effective C++</em> series by Scott Meyers is popular choice. You may also enjoy Dirk Eddelbuettel’s <a href="http://www.springer.com/statistics/computational+statistics/book/978-1-4614-6867-7" target="_blank" rel="external"><em>Seamless R and C++ integration with Rcpp</em></a>, which goes into much greater detail into all aspects of Rcpp.</p>
<h5 id="Outline-13"><a href="#Outline-13" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#rcpp-intro">Getting started with C++</a> teaches you how to write C++ by  converting simple R functions to their C++ equivalents. You’ll learn how  C++ differs from R, and what the key scalar, vector, and matrix classes  are called.</li>
<li><a href="#sourceCpp">Using sourceCpp</a> shows you how to use <code>sourceCpp()</code> to load  a C++ file from disk in the same way you use <code>source()</code> to load a file of  R code.</li>
<li><a href="#rcpp-classes">Attributes &amp; other classes</a> discusses how to modify  attributes from Rcpp, and mentions some of the other important classes.</li>
<li><a href="#rcpp-na">Missing values</a> teaches you how to work with R’s missing values  in C++.</li>
<li><a href="#rcpp-sugar">Rcpp sugar</a> discusses Rcpp “sugar”, which allows you to  avoid loops in C++ and write code that looks very similar to vectorised R  code.</li>
<li><a href="#stl">The STL</a> shows you how to use some of the most important data  structures and algorithms from the standard template library, or STL,  built-in to C++.</li>
<li><a href="#rcpp-case-studies">Case studies</a> shows two real case studies where  Rcpp was used to get considerable performance improvements.</li>
<li><a href="#rcpp-package">Putting Rcpp in a package</a> teaches you how to add C++ code  to a package.</li>
<li><a href="#rcpp-more">Learning more</a> concludes the chapter with pointers to  more resources to help you learn Rcpp and C++.</li>
</ul>
<h5 id="Prerequistes"><a href="#Prerequistes" class="headerlink" title="Prerequistes"></a>Prerequistes</h5><p>All examples in this chapter need version 0.10.1 or above of the <code>Rcpp</code> package. This version includes <code>cppFunction()</code> and <code>sourceCpp()</code>, which makes it very easy to connect C++ to R. Install the latest version of Rcpp from CRAN with <code>install.packages(&quot;Rcpp&quot;)</code>.</p>
<p>You’ll also need a working C++ compiler. To get it:</p>
<ul>
<li>On Windows, install <a href="http://cran.r-project.org/bin/windows/Rtools/" target="_blank" rel="external">Rtools</a>.</li>
<li>On Mac, install Xcode from the app store.</li>
<li>On Linux, <code>sudo apt-get install r-base-dev</code> or similar.</li>
</ul>
<h2 id="Getting-started-with-C"><a href="#Getting-started-with-C" class="headerlink" title="Getting started with C++"></a><a href="id=&quot;rcpp-intro&quot;">Getting started with C++</a></h2><p><code>cppFunction()</code> allows you to write C++ functions in R:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">library(Rcpp)</span><br><span class="line">cppFunction(&apos;int add(int x, int y, int z) &#123;</span><br><span class="line">  int sum = x + y + z;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;&apos;)</span><br><span class="line"># add works like a regular R function</span><br><span class="line">add</span><br><span class="line">add(1, 2, 3)</span><br></pre></td></tr></table></figure>
<p>When you run this code, Rcpp will compile the C++ code and construct an R function that connects to the compiled C++ function. We’re going to use this simple interface to learn how to write C++. C++ is a large language, and there’s no way to cover it all in just one chapter. Instead, you’ll get the basics so that you can start writing useful functions to address bottlenecks in your R code.</p>
<p>The following sections will teach you the basics by translating simple R functions to their C++ equivalents. We’ll start simple with a function that has no inputs and a scalar output, and then get progressively more complicated:</p>
<ul>
<li>Scalar input and scalar output</li>
<li>Vector input and scalar output</li>
<li>Vector input and vector output</li>
<li>Matrix input and vector output</li>
</ul>
<h3 id="No-inputs-scalar-output"><a href="#No-inputs-scalar-output" class="headerlink" title="No inputs, scalar output"></a>No inputs, scalar output</h3><p>Let’s start with a very simple function. It has no arguments and always returns the integer 1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one &lt;- function() 1L</span><br></pre></td></tr></table></figure>
<p>The equivalent C++ function is:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can compile and use this from R with <code>cppFunction</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cppFunction(&apos;int one() &#123;</span><br><span class="line">  return 1;</span><br><span class="line">&#125;&apos;)</span><br></pre></td></tr></table></figure>
<p>This small function illustrates a number of important differences between R and C++:</p>
<ul>
<li>The syntax to create a function looks like the syntax to call a function;  you don’t use assignment to create functions as you do in R.</li>
<li>You must declare the type of output the function returns. This function  returns an <code>int</code> (a scalar integer). The classes for the most common types  of R vectors are: <code>NumericVector</code>, <code>IntegerVector</code>, <code>CharacterVector</code>, and  <code>LogicalVector</code>.</li>
<li>Scalars and vectors are different. The scalar equivalents of numeric,  integer, character, and logical vectors are: <code>double</code>, <code>int</code>, <code>String</code>, and  <code>bool</code>.</li>
<li>You must use an explicit <code>return</code> statement to return a value from a  function.</li>
<li>Every statement is terminated by a <code>;</code>.</li>
</ul>
<h3 id="Scalar-input-scalar-output"><a href="#Scalar-input-scalar-output" class="headerlink" title="Scalar input, scalar output"></a>Scalar input, scalar output</h3><p>The next example function implements a scalar version of the <code>sign()</code> function which returns 1 if the input is positive, and -1 if it’s negative:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">signR &lt;- function(x) &#123;</span><br><span class="line">  if (x &gt; 0) &#123;</span><br><span class="line">    1</span><br><span class="line">  &#125; else if (x == 0) &#123;</span><br><span class="line">    0</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    -1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cppFunction(&apos;int signC(int x) &#123;</span><br><span class="line">  if (x &gt; 0) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else if (x == 0) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;)</span><br></pre></td></tr></table></figure>
<p>In the C++ version:</p>
<ul>
<li>We declare the type of each input in the same way we declare the type of the  output. While this makes the code a little more verbose, it also makes it  very obvious what type of input the function needs.</li>
<li>The <code>if</code> syntax is identical — while there are some big differences between  R and C++, there are also lots of similarities! C++ also has a <code>while</code>  statement that works the same way as R’s. As in R you can use <code>break</code> to  exit the loop, but to skip one iteration you need to use <code>continue</code> instead  of <code>next</code>.</li>
</ul>
<h3 id="Vector-input-scalar-output"><a href="#Vector-input-scalar-output" class="headerlink" title="Vector input, scalar output"></a>Vector input, scalar output</h3><p>One big difference between R and C++ is that the cost of loops is much lower in C++. For example, we could implement the <code>sum</code> function in R using a loop. If you’ve been programming in R a while, you’ll probably have a visceral reaction to this function!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sumR &lt;- function(x) &#123;</span><br><span class="line">  total &lt;- 0</span><br><span class="line">  for (i in seq_along(x)) &#123;</span><br><span class="line">    total &lt;- total + x[i]</span><br><span class="line">  &#125;</span><br><span class="line">  total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In C++, loops have very little overhead, so it’s fine to use them. In <a href="#stl">STL</a>, you’ll see alternatives to <code>for</code> loops that more clearly express your intent; they’re not faster, but they can make your code easier to understand.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cppFunction(&apos;double sumC(NumericVector x) &#123;</span><br><span class="line">  int n = x.size();</span><br><span class="line">  double total = 0;</span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    total += x[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return total;</span><br><span class="line">&#125;&apos;)</span><br></pre></td></tr></table></figure>
<p>The C++ version is similar, but:</p>
<ul>
<li>To find the length of the vector, we use the <code>.size()</code> method, which returns  an integer. C++ methods are called with <code>.</code> (i.e., a full stop).</li>
<li>The <code>for</code> statement has a different syntax: <code>for(init; check; increment)</code>.  This loop is initialised by creating a new variable called <code>i</code> with value 0.  Before each iteration we check that <code>i &lt; n</code>, and terminate the loop if it’s  not. After each iteration, we increment the value of <code>i</code> by one, using the  special prefix operator <code>++</code> which increases the value of <code>i</code> by 1.</li>
<li>In C++, vector indices start at 0. I’ll say this again because it’s so  important: <strong>IN C++, VECTOR INDICES START AT 0</strong>! This is a very common  source of bugs when converting R functions to C++.</li>
<li>Use <code>=</code> for assignment, not <code>&lt;-</code>.</li>
<li>C++ provides operators that modify in-place: <code>total += x[i]</code> is equivalent to  <code>total = total + x[i]</code>. Similar in-place operators are <code>-=</code>, <code>*=</code>, and <code>/=</code>.</li>
</ul>
<p>This is a good example of where C++ is much more efficient than R. As shown by the following microbenchmark, <code>sumC()</code> is competitive with the built-in (and highly optimised) <code>sum()</code>, while <code>sumR()</code> is several orders of magnitude slower.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x &lt;- runif(1e3)</span><br><span class="line">microbenchmark(</span><br><span class="line">  sum(x),</span><br><span class="line">  sumC(x),</span><br><span class="line">  sumR(x)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Vector-input-vector-output"><a href="#Vector-input-vector-output" class="headerlink" title="Vector input, vector output"></a>Vector input, vector output</h3><!-- FIXME: come up with better example. Also fix in two other places it occurs -->
<p>Next we’ll create a function that computes the Euclidean distance between a value and a vector of values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pdistR &lt;- function(x, ys) &#123;</span><br><span class="line">  sqrt((x - ys) ^ 2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It’s not obvious that we want <code>x</code> to be a scalar from the function definition. We’d need to make that clear in the documentation. That’s not a problem in the C++ version because we have to be explicit about types:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cppFunction(&apos;NumericVector pdistC(double x, NumericVector ys) &#123;</span><br><span class="line">  int n = ys.size();</span><br><span class="line">  NumericVector out(n);</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = sqrt(pow(ys[i] - x, 2.0));</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;&apos;)</span><br></pre></td></tr></table></figure>
<p>This function introduces only a few new concepts:</p>
<ul>
<li>We create a new numeric vector of length <code>n</code> with a constructor: <code>NumericVector out(n)</code>. Another useful way of making a vector is to copy an existing one: <code>NumericVector zs = clone(ys)</code>.</li>
<li>C++ uses <code>pow()</code>, not <code>^</code>, for exponentiation.</li>
</ul>
<p>Note that because the R version is fully vectorised, it’s already going to be fast. On my computer, it takes around 8 ms with a 1 million element <code>y</code> vector. The C++ function is twice as fast, ~4 ms, but assuming it took you 10 minutes to write the C++ function, you’d need to run it ~150,000 times to make rewriting worthwhile. The reason why the C++ function is faster is subtle, and relates to memory management. The R version needs to create an intermediate vector the same length as y (<code>x - ys</code>), and allocating memory is an expensive operation. The C++ function avoids this overhead because it uses an intermediate scalar.</p>
<p>In the sugar section, you’ll see how to rewrite this function to take advantage of Rcpp’s vectorised operations so that the C++ code is almost as concise as R code.</p>
<h3 id="Matrix-input-vector-output"><a href="#Matrix-input-vector-output" class="headerlink" title="Matrix input, vector output"></a>Matrix input, vector output</h3><p>Each vector type has a matrix equivalent: <code>NumericMatrix</code>, <code>IntegerMatrix</code>, <code>CharacterMatrix</code>, and <code>LogicalMatrix</code>. Using them is straightforward. For example, we could create a function that reproduces <code>rowSums()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cppFunction(&apos;NumericVector rowSumsC(NumericMatrix x) &#123;</span><br><span class="line">  int nrow = x.nrow(), ncol = x.ncol();</span><br><span class="line">  NumericVector out(nrow);</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; nrow; i++) &#123;</span><br><span class="line">    double total = 0;</span><br><span class="line">    for (int j = 0; j &lt; ncol; j++) &#123;</span><br><span class="line">      total += x(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    out[i] = total;</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;&apos;)</span><br><span class="line">set.seed(1014)</span><br><span class="line">x &lt;- matrix(sample(100), 10)</span><br><span class="line">rowSums(x)</span><br><span class="line">rowSumsC(x)</span><br></pre></td></tr></table></figure>
<p>The main differences:</p>
<ul>
<li>In C++, you subset a matrix with <code>()</code>, not <code>[]</code>.</li>
<li>Use <code>.nrow()</code> and <code>.ncol()</code> <em>methods</em> to get the dimensions of a matrix.</li>
</ul>
<h3 id="Using-sourceCpp"><a href="#Using-sourceCpp" class="headerlink" title="Using sourceCpp"></a><a href="id=&quot;sourceCpp&quot;">Using sourceCpp</a></h3><p>So far, we’ve used inline C++ with <code>cppFunction()</code>. This makes presentation simpler, but for real problems, it’s usually easier to use stand-alone C++ files and then source them into R using <code>sourceCpp()</code>. This lets you take advantage of text editor support for C++ files (e.g., syntax highlighting) as well as making it easier to identify the line numbers in compilation errors.</p>
<p>Your stand-alone C++ file should have extension <code>.cpp</code>, and needs to start with:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Rcpp.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Rcpp;</span><br></pre></td></tr></table></figure>
<p>And for each function that you want available within R, you need to prefix it with:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [[Rcpp::export]]</span></span><br></pre></td></tr></table></figure>
<p>Note that the space is mandatory.</p>
<p>If you’re familiar with roxygen2, you might wonder how this relates to <code>@export</code>. <code>Rcpp::export</code> controls whether a function is exported from C++ to R; <code>@export</code> controls whether a function is exported from a package and made available to the user.</p>
<p>You can embed R code in special C++ comment blocks. This is really convenient if you want to run some test code:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*** R</span><br><span class="line"># This is R code</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>The R code is run with <code>source(echo = TRUE)</code> so you don’t need to explicitly print output.</p>
<p>To compile the C++ code, use <code>sourceCpp(&quot;path/to/file.cpp&quot;)</code>. This will create the matching R functions and add them to your current session. Note that these functions can not be saved in a <code>.Rdata</code> file and reloaded in a later session; they must be recreated each time you restart R. For example, running <code>sourceCpp()</code> on the following file implements mean in C++ and then compares it to the built-in <code>mean()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">double meanC(NumericVector x) &#123;</span><br><span class="line">  int n = x.size();</span><br><span class="line">  double total = 0;</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    total += x[i];</span><br><span class="line">  &#125;</span><br><span class="line">  return total / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*** R</span><br><span class="line">library(microbenchmark)</span><br><span class="line">x &lt;- runif(1e5)</span><br><span class="line">microbenchmark(</span><br><span class="line">  mean(x),</span><br><span class="line">  meanC(x)</span><br><span class="line">)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>NB: if you run this code yourself, you’ll notice that <code>meanC()</code> is much faster than the built-in <code>mean()</code>. This is because it trades numerical accuracy for speed.</p>
<p>For the remainder of this chapter C++ code will be presented stand-alone rather than wrapped in a call to <code>cppFunction</code>. If you want to try compiling and/or modifying the examples you should paste them into a C++ source file that includes the elements described above.</p>
<h3 id="Exercises-59"><a href="#Exercises-59" class="headerlink" title="Exercises"></a>Exercises</h3><p>With the basics of C++ in hand, it’s now a great time to practice by reading and writing some simple C++ functions. For each of the following functions, read the code and figure out what the corresponding base R function is. You might not understand every part of the code yet, but you should be able to figure out the basics of what the function does.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f1</span><span class="params">(NumericVector x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = x.size();</span><br><span class="line">  <span class="keyword">double</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    y += x[i] / n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NumericVector <span class="title">f2</span><span class="params">(NumericVector x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = x.size();</span><br><span class="line">  <span class="function">NumericVector <span class="title">out</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">  out[<span class="number">0</span>] = x[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = out[i - <span class="number">1</span>] + x[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f3</span><span class="params">(LogicalVector x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = x.size();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f4</span><span class="params">(Function pred, List x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = x.size();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    LogicalVector res = pred(x[i]);</span><br><span class="line">    <span class="keyword">if</span> (res[<span class="number">0</span>]) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">NumericVector <span class="title">f5</span><span class="params">(NumericVector x, NumericVector y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="built_in">std</span>::max(x.size(), y.size());</span><br><span class="line">  NumericVector x1 = rep_len(x, n);</span><br><span class="line">  NumericVector y1 = rep_len(y, n);</span><br><span class="line"></span><br><span class="line">  <span class="function">NumericVector <span class="title">out</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = <span class="built_in">std</span>::min(x1[i], y1[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To practice your function writing skills, convert the following functions into C++. For now, assume the inputs have no missing values.</p>
<ol>
<li><code>all()</code></li>
<li><code>cumprod()</code>, <code>cummin()</code>, <code>cummax()</code>.</li>
<li><code>diff()</code>. Start by assuming lag 1, and then generalise for lag <code>n</code>.</li>
<li><code>range</code>.</li>
<li><code>var</code>. Read about the approaches you can take on   <a href="http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance" target="_blank" rel="external">wikipedia</a>.   Whenever implementing a numerical algorithm, it’s always good to check what   is already known about the problem.</li>
</ol>
<h2 id="Attributes-and-other-classes"><a href="#Attributes-and-other-classes" class="headerlink" title="Attributes and other classes"></a><a href="id=&quot;rcpp-classes&quot;">Attributes and other classes</a></h2><p>You’ve already seen the basic vector classes (<code>IntegerVector</code>, <code>NumericVector</code>, <code>LogicalVector</code>, <code>CharacterVector</code>) and their scalar (<code>int</code>, <code>double</code>, <code>bool</code>, <code>String</code>) and matrix (<code>IntegerMatrix</code>, <code>NumericMatrix</code>, <code>LogicalMatrix</code>, <code>CharacterMatrix</code>) equivalents.</p>
<p>All R objects have attributes, which can be queried and modified with <code>.attr()</code>. Rcpp also provides <code>.names()</code> as an alias for the name attribute. The following code snippet illustrates these methods. Note the use of <code>::create()</code>, a <em>class</em> method. This allows you to create an R vector from C++ scalar values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">NumericVector attribs() &#123;</span><br><span class="line">  NumericVector out = NumericVector::create(1, 2, 3);</span><br><span class="line"></span><br><span class="line">  out.names() = CharacterVector::create(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);</span><br><span class="line">  out.attr(&quot;my-attr&quot;) = &quot;my-value&quot;;</span><br><span class="line">  out.attr(&quot;class&quot;) = &quot;my-class&quot;;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For S4 objects, <code>.slot()</code> plays a similar role to <code>.attr()</code>.</p>
<h3 id="Lists-and-data-frames"><a href="#Lists-and-data-frames" class="headerlink" title="Lists and data frames"></a>Lists and data frames</h3><p>Rcpp also provides classes <code>List</code> and <code>DataFrame</code>, but they are more useful for output than input. This is because lists and data frames can contain arbitrary classes but C++ needs to know their classes in advance. If the list has known structure (e.g., it’s an S3 object), you can extract the components and manually convert them to their C++ equivalents with <code>as()</code>. For example, the object created by <code>lm()</code>, the function that fits a linear model, is a list whose components are always of the same type. The following code illustrates how you might extract the mean percentage error (<code>mpe()</code>) of a linear model. This isn’t a good example of when to use C++, because it’s so easily implemented in R, but it shows how to work with an important S3 class. Note the use of <code>.inherits()</code> and the <code>stop()</code> to check that the object really is a linear model.</p>
<!-- FIXME: needs better motivation -->
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">double mpe(List mod) &#123;</span><br><span class="line">  if (!mod.inherits(&quot;lm&quot;)) stop(&quot;Input must be a linear model&quot;);</span><br><span class="line"></span><br><span class="line">  NumericVector resid = as&lt;NumericVector&gt;(mod[&quot;residuals&quot;]);</span><br><span class="line">  NumericVector fitted = as&lt;NumericVector&gt;(mod[&quot;fitted.values&quot;]);</span><br><span class="line"></span><br><span class="line">  int n = resid.size();</span><br><span class="line">  double err = 0;</span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    err += resid[i] / (fitted[i] + resid[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return err / n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mod &lt;- lm(mpg ~ wt, data = mtcars)</span><br><span class="line">mpe(mod)</span><br></pre></td></tr></table></figure>
<h3 id="Functions-1"><a href="#Functions-1" class="headerlink" title="Functions"></a><a href="id=&quot;functions-rcpp&quot;">Functions</a></h3><p>You can put R functions in an object of type <code>Function</code>. This makes calling an R function from C++ straightforward. We first define our C++ function:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">RObject callWithOne(Function f) &#123;</span><br><span class="line">  return f(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then call it from R:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callWithOne(function(x) x + 1)</span><br><span class="line">callWithOne(paste)</span><br></pre></td></tr></table></figure>
<p>What type of object does an R function return? We don’t know, so we use the catchall type <code>RObject</code>. An alternative is to return a <code>List</code>. For example, the following code is a basic implementation of <code>lapply</code> in C++:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">List lapply1(List input, Function f) &#123;</span><br><span class="line">  int n = input.size();</span><br><span class="line">  List out(n);</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    out[i] = f(input[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Calling R functions with positional arguments is obvious:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="string">"y"</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>But to use named arguments, you need a special syntax:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(_[<span class="string">"x"</span>] = <span class="string">"y"</span>, _[<span class="string">"value"</span>] = <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="Other-types"><a href="#Other-types" class="headerlink" title="Other types"></a>Other types</h3><p>There are also classes for many more specialised language objects: <code>Environment</code>, <code>ComplexVector</code>, <code>RawVector</code>, <code>DottedPair</code>, <code>Language</code>,  <code>Promise</code>, <code>Symbol</code>, <code>WeakReference</code>, and so on. These are beyond the scope of this chapter and won’t be discussed further.</p>
<h2 id="Missing-values"><a href="#Missing-values" class="headerlink" title="Missing values"></a><a href="id=&quot;rcpp-na&quot;">Missing values</a></h2><p>If you’re working with missing values, you need to know two things:</p>
<ul>
<li>how R’s missing values behave in C++’s scalars (e.g., <code>double</code>).</li>
<li>how to get and set missing values in vectors (e.g., <code>NumericVector</code>).</li>
</ul>
<h3 id="Scalars"><a href="#Scalars" class="headerlink" title="Scalars"></a>Scalars</h3><p>The following code explores what happens when you take one of R’s missing values, coerce it into a scalar, and then coerce back to an R vector. Note that this kind of experimentation is a useful way to figure out what any operation does.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">List scalar_missings() &#123;</span><br><span class="line">  int int_s = NA_INTEGER;</span><br><span class="line">  String chr_s = NA_STRING;</span><br><span class="line">  bool lgl_s = NA_LOGICAL;</span><br><span class="line">  double num_s = NA_REAL;</span><br><span class="line"></span><br><span class="line">  return List::create(int_s, chr_s, lgl_s, num_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(scalar_missings())</span><br></pre></td></tr></table></figure>
<p>With the exception of <code>bool</code>, things look pretty good here: all of the missing values have been preserved. However, as we’ll see in the following sections, things are not quite as straightforward as they seem.</p>
<h4 id="Integers"><a href="#Integers" class="headerlink" title="Integers"></a>Integers</h4><p>With integers, missing values are stored as the smallest integer. If you don’t do anything to them, they’ll be preserved. But, since C++ doesn’t know that the smallest integer has this special behaviour, if you do anything to it you’re likely to get an incorrect value: for example, <code>evalCpp(&#39;NA_INTEGER + 1&#39;)</code> gives -2147483647.</p>
<p>So if you want to work with missing values in integers, either use a length one <code>IntegerVector</code> or be very careful with your code.</p>
<h4 id="Doubles"><a href="#Doubles" class="headerlink" title="Doubles"></a>Doubles</h4><p>With doubles, you may be able to get away with ignoring missing values and working with NaNs (not a number). This is because R’s NA is a special type of IEEE 754 floating point number NaN. So any logical expression that involves a NaN (or in C++, NAN) always evaluates as FALSE:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">library(Rcpp)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evalCpp(&quot;NAN == 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN &lt; 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN &gt; 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN == NAN&quot;)</span><br></pre></td></tr></table></figure>
<p>But be careful when combining then with boolean values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">evalCpp(&quot;NAN &amp;&amp; TRUE&quot;)</span><br><span class="line">evalCpp(&quot;NAN || FALSE&quot;)</span><br></pre></td></tr></table></figure>
<p>However, in numeric contexts NaNs will propagate NAs:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">evalCpp(&quot;NAN + 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN - 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN / 1&quot;)</span><br><span class="line">evalCpp(&quot;NAN * 1&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><p><code>String</code> is a scalar string class introduced by Rcpp, so it knows how to deal with missing values.</p>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p>While C++’s <code>bool</code> has two possible values (<code>true</code> or <code>false</code>), a logical vector in R has three (<code>TRUE</code>, <code>FALSE</code>, and <code>NA</code>). If you coerce a length 1 logical vector, make sure it doesn’t contain any missing values otherwise they will be converted to TRUE.</p>
<h3 id="Vectors-1"><a href="#Vectors-1" class="headerlink" title="Vectors"></a><a href="id=&quot;vectors-rcpp&quot;">Vectors</a></h3><p>With vectors, you need to use a missing value specific to the type of vector, <code>NA_REAL</code>, <code>NA_INTEGER</code>, <code>NA_LOGICAL</code>, <code>NA_STRING</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">List missing_sampler() &#123;</span><br><span class="line">  return List::create(</span><br><span class="line">    NumericVector::create(NA_REAL),</span><br><span class="line">    IntegerVector::create(NA_INTEGER),</span><br><span class="line">    LogicalVector::create(NA_LOGICAL),</span><br><span class="line">    CharacterVector::create(NA_STRING));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str(missing_sampler())</span><br></pre></td></tr></table></figure>
<p>To check if a value in a vector is missing, use the class method <code>::is_na()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">LogicalVector is_naC(NumericVector x) &#123;</span><br><span class="line">  int n = x.size();</span><br><span class="line">  LogicalVector out(n);</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = NumericVector::is_na(x[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_naC(c(NA, 5.4, 3.2, NA))</span><br></pre></td></tr></table></figure>
<p>Another alternative is the sugar function <code>is_na()</code>, which takes a vector and returns a logical vector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">LogicalVector is_naC2(NumericVector x) &#123;</span><br><span class="line">  return is_na(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">is_naC2(c(NA, 5.4, 3.2, NA))</span><br></pre></td></tr></table></figure>
<h3 id="Exercises-60"><a href="#Exercises-60" class="headerlink" title="Exercises"></a>Exercises</h3><ol>
<li>Rewrite any of the functions from the first exercise to deal with missing   values. If <code>na.rm</code> is true, ignore the missing values. If <code>na.rm</code> is false,   return a missing value if the input contains any missing values. Some   good functions to practice with are <code>min()</code>, <code>max()</code>, <code>range()</code>, <code>mean()</code>,   and <code>var()</code>.</li>
<li>Rewrite <code>cumsum()</code> and <code>diff()</code> so they can handle missing values. Note that   these functions have slightly more complicated behaviour.</li>
</ol>
<h2 id="Rcpp-sugar"><a href="#Rcpp-sugar" class="headerlink" title="Rcpp sugar"></a><a href="id=&quot;rcpp-sugar&quot;">Rcpp sugar</a></h2><p>Rcpp provides a lot of syntactic “sugar” to ensure that C++ functions work very similarly to their R equivalents. In fact, Rcpp sugar makes it possible to write efficient C++ code that looks almost identical to its R equivalent. If there’s a sugar version of the function you’re interested in, you should use it: it’ll be both expressive and well tested. Sugar functions aren’t always faster than a handwritten equivalent, but they will get faster in the future as more time is spent on optimising Rcpp.</p>
<p>Sugar functions can be roughly broken down into</p>
<ul>
<li>arithmetic and logical operators</li>
<li>logical summary functions</li>
<li>vector views</li>
<li>other useful functions</li>
</ul>
<h3 id="Arithmetic-and-logical-operators"><a href="#Arithmetic-and-logical-operators" class="headerlink" title="Arithmetic and logical operators"></a>Arithmetic and logical operators</h3><p>All the basic arithmetic and logical operators are vectorised: <code>+</code> <code>*</code>, <code>-</code>, <code>/</code>, <code>pow</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>==</code>, <code>!=</code>, <code>!</code>.  For example, we could use sugar to considerably simplify the implementation of <code>pdistC()</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pdistR &lt;- function(x, ys) &#123;</span><br><span class="line">  sqrt((x - ys) ^ 2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">NumericVector pdistC2(double x, NumericVector ys) &#123;</span><br><span class="line">  return sqrt(pow((x - ys), 2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Logical-summary-functions"><a href="#Logical-summary-functions" class="headerlink" title="Logical summary functions"></a>Logical summary functions</h3><p>The sugar function <code>any()</code> and <code>all()</code> are fully lazy so that <code>any(x == 0)</code>, for example, might only need to evaluate one element of a vector, and return a special type that can be converted into a <code>bool</code> using <code>.is_true()</code>, <code>.is_false()</code>, or <code>.is_na()</code>. We could also use this sugar to write an efficient function to determine whether or not a numeric vector contains any missing values. To do this in R, we could use <code>any(is.na(x))</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">any_naR &lt;- function(x) any(is.na(x))</span><br></pre></td></tr></table></figure>
<p>However, this will do the same amount of work regardless of the location of the missing value. Here’s the C++ implementation:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">bool any_naC(NumericVector x) &#123;</span><br><span class="line">  return is_true(any(is_na(x)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x0 &lt;- runif(1e5)</span><br><span class="line">x1 &lt;- c(x0, NA)</span><br><span class="line">x2 &lt;- c(NA, x0)</span><br><span class="line"></span><br><span class="line">microbenchmark(</span><br><span class="line">  any_naR(x0), any_naC(x0),</span><br><span class="line">  any_naR(x1), any_naC(x1),</span><br><span class="line">  any_naR(x2), any_naC(x2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="Vector-views"><a href="#Vector-views" class="headerlink" title="Vector views"></a>Vector views</h3><p>A number of helpful functions provide a “view” of a vector: <code>head()</code>, <code>tail()</code>, <code>rep_each()</code>, <code>rep_len()</code>, <code>rev()</code>, <code>seq_along()</code>, and <code>seq_len()</code>. In R these would all produce copies of the vector, but in Rcpp they simply point to the existing vector and override the subsetting operator (<code>[</code>) to implement special behaviour. This makes them very efficient: for instance, <code>rep_len(x, 1e6)</code> does not have to make a million copies of x.</p>
<h3 id="Other-useful-functions"><a href="#Other-useful-functions" class="headerlink" title="Other useful functions"></a>Other useful functions</h3><p>Finally, there’s a grab bag of sugar functions that mimic frequently used R functions:</p>
<ul>
<li>Math functions: <code>abs()</code>, <code>acos()</code>, <code>asin()</code>, <code>atan()</code>, <code>beta()</code>, <code>ceil()</code>, <code>ceiling()</code>, <code>choose()</code>, <code>cos()</code>, <code>cosh()</code>, <code>digamma()</code>, <code>exp()</code>, <code>expm1()</code>, <code>factorial()</code>, <code>floor()</code>, <code>gamma()</code>, <code>lbeta()</code>, <code>lchoose()</code>, <code>lfactorial()</code>, <code>lgamma()</code>, <code>log()</code>, <code>log10()</code>, <code>log1p()</code>, <code>pentagamma()</code>, <code>psigamma()</code>, <code>round()</code>, <code>signif()</code>, <code>sin()</code>, <code>sinh()</code>, <code>sqrt()</code>, <code>tan()</code>, <code>tanh()</code>, <code>tetragamma()</code>, <code>trigamma()</code>, <code>trunc()</code>.</li>
<li>Scalar summaries: <code>mean()</code>, <code>min()</code>, <code>max()</code>, <code>sum()</code>, <code>sd()</code>, and  (for vectors) <code>var()</code>.</li>
<li>Vector summaries: <code>cumsum()</code>, <code>diff()</code>, <code>pmin()</code>, and <code>pmax()</code>.</li>
<li>Finding values: <code>match()</code>, <code>self_match()</code>, <code>which_max()</code>, <code>which_min()</code>.</li>
<li>Dealing with duplicates: <code>duplicated()</code>, <code>unique()</code>.</li>
<li><code>d/q/p/r</code> for all standard distributions.</li>
</ul>
<p>Finally, <code>noNA(x)</code> asserts that the vector <code>x</code> does not contain any missing  values, and allows optimisation of some mathematical operations.</p>
<h2 id="The-STL"><a href="#The-STL" class="headerlink" title="The STL"></a><a href="id=&quot;stl&quot;">The STL</a></h2><p>The real strength of C++ shows itself when you need to implement more complex algorithms. The standard template library (STL) provides a set of extremely useful data structures and algorithms. This section will explain some of the most important algorithms and data structures and point you in the right direction to learn more.  I can’t teach you everything you need to know about the STL, but hopefully the examples will show you the power of the STL, and persuade you that it’s useful to learn more.</p>
<p>If you need an algorithm or data structure that isn’t implemented in STL, a good place to look is <a href="http://www.boost.org/doc/" target="_blank" rel="external">boost</a>. Installing boost on your computer is beyond the scope of this chapter, but once you have it installed, you can use boost data structures and algorithms by including the appropriate header file with (e.g.) <code>#include &lt;boost/array.hpp&gt;</code>.</p>
<h3 id="Using-iterators"><a href="#Using-iterators" class="headerlink" title="Using iterators"></a>Using iterators</h3><p>Iterators are used extensively in the STL: many functions either accept or return iterators. They are the next step up from basic loops, abstracting away the details of the underlying data structure. Iterators have three main operators:</p>
<ol>
<li>Advance with <code>++</code>.</li>
<li>Get the value they refer to, or <strong>dereference</strong>, with <code>*</code>.</li>
<li>Compare with <code>==</code>.</li>
</ol>
<p>For example we could re-write our sum function using iterators:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">double sum3(NumericVector x) &#123;</span><br><span class="line">  double total = 0;</span><br><span class="line"></span><br><span class="line">  NumericVector::iterator it;</span><br><span class="line">  for(it = x.begin(); it != x.end(); ++it) &#123;</span><br><span class="line">    total += *it;</span><br><span class="line">  &#125;</span><br><span class="line">  return total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The main changes are in the for loop:</p>
<ul>
<li>We start at <code>x.begin()</code> and loop until we get to <code>x.end()</code>. A small  optimization is to store the value of the end iterator so we don’t need to  look it up each time. This only saves about 2 ns per iteration, so it’s only  important when the calculations in the loop are very simple.</li>
<li>Instead of indexing into x, we use the dereference operator to get its  current value: <code>*it</code>.</li>
<li>Notice the type of the iterator: <code>NumericVector::iterator</code>. Each vector  type has its own iterator type: <code>LogicalVector::iterator</code>,  <code>CharacterVector::iterator</code>, etc.</li>
</ul>
<p>Iterators also allow us to use the C++ equivalents of the apply family of functions. For example, we could again rewrite <code>sum()</code> to use the <code>accumulate()</code> function, which takes a starting and an ending iterator, and adds up all the values in the vector. The third argument to accumulate gives the initial value: it’s particularly important because this also determines the data type that accumulate uses (so we use <code>0.0</code> and not <code>0</code> so that accumulate uses a <code>double</code>, not an <code>int</code>.). To use <code>accumulate()</code> we need to include the <code>&lt;numeric&gt;</code> header.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;numeric&gt;</span><br><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">double sum4(NumericVector x) &#123;</span><br><span class="line">  return std::accumulate(x.begin(), x.end(), 0.0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>accumulate()</code> (along with the other functions in <code>&lt;numeric&gt;</code>, like <code>adjacent_difference()</code>, <code>inner_product()</code>, and <code>partial_sum()</code>) is not that important in Rcpp because Rcpp sugar provides equivalents.</p>
<h3 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h3><p>The <code>&lt;algorithm&gt;</code> header provides a large number of algorithms that work with iterators. A good reference is available at <a href="http://www.cplusplus.com/reference/algorithm/" target="_blank" rel="external">http://www.cplusplus.com/reference/algorithm/</a>. For example, we could write a basic Rcpp version of <code>findInterval()</code> that takes two arguments a vector of values and a vector of breaks, and locates the bin that each x falls into. This shows off a few more advanced iterator features. Read the code below and see if you can figure out how it works.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">IntegerVector findInterval2(NumericVector x, NumericVector breaks) &#123;</span><br><span class="line">  IntegerVector out(x.size());</span><br><span class="line"></span><br><span class="line">  NumericVector::iterator it, pos;</span><br><span class="line">  IntegerVector::iterator out_it;</span><br><span class="line"></span><br><span class="line">  for(it = x.begin(), out_it = out.begin(); it != x.end();</span><br><span class="line">      ++it, ++out_it) &#123;</span><br><span class="line">    pos = std::upper_bound(breaks.begin(), breaks.end(), *it);</span><br><span class="line">    *out_it = std::distance(breaks.begin(), pos);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The key points are:</p>
<ul>
<li>We step through two iterators (input and output) simultaneously.</li>
<li>We can assign into an dereferenced iterator (<code>out_it</code>) to change the values  in <code>out</code>.</li>
<li><code>upper_bound()</code> returns an iterator. If we wanted the value of the  <code>upper_bound()</code> we could dereference it; to figure out its location, we  use the <code>distance()</code> function.</li>
<li>Small note: if we want this function to be as fast as <code>findInterval()</code> in R  (which uses handwritten C code), we need to compute the calls to <code>.begin()</code>  and <code>.end()</code> once and save the results.  This is easy, but it distracts from  this example so it has been omitted.  Making this change yields a function  that’s slightly faster than R’s <code>findInterval()</code> function, but is about 1/10  of the code.</li>
</ul>
<p>It’s generally better to use algorithms from the STL than hand rolled loops. In <em>Effective STL</em>, Scott Meyers gives three reasons: efficiency, correctness, and maintainability. Algorithms from the STL are written by C++ experts to be extremely efficient, and they have been around for a long time so they are well tested. Using standard algorithms also makes the intent of your code more clear, helping to make it more readable and more maintainable.</p>
<h3 id="Data-structures-1"><a href="#Data-structures-1" class="headerlink" title="Data structures"></a><a href="id=&quot;data-structures-rcpp&quot;">Data structures</a></h3><p>The STL provides a large set of data structures: <code>array</code>, <code>bitset</code>, <code>list</code>, <code>forward_list</code>, <code>map</code>, <code>multimap</code>, <code>multiset</code>, <code>priority_queue</code>, <code>queue</code>, <code>dequeue</code>, <code>set</code>, <code>stack</code>, <code>unordered_map</code>, <code>unordered_set</code>, <code>unordered_multimap</code>, <code>unordered_multiset</code>, and <code>vector</code>.  The most important of these data structures are the <code>vector</code>, the <code>unordered_set</code>, and the <code>unordered_map</code>.  We’ll focus on these three in this section, but using the others is similar: they just have different performance trade-offs. For example, the <code>deque</code> (pronounced “deck”) has a very similar interface to vectors but a different underlying implementation that has different performance trade-offs. You may want to try them for your problem. A good reference for STL data structures is <a href="http://www.cplusplus.com/reference/stl/" target="_blank" rel="external">http://www.cplusplus.com/reference/stl/</a> — I recommend you keep it open while working with the STL.</p>
<p>Rcpp knows how to convert from many STL data structures to their R equivalents, so you can return them from your functions without explicitly converting to R data structures.</p>
<h3 id="Vectors-2"><a href="#Vectors-2" class="headerlink" title="Vectors"></a><a href="id=&quot;vectors-stl&quot;">Vectors</a></h3><p>An STL vector is very similar to an R vector, except that it grows efficiently. This makes vectors appropriate to use when you don’t know in advance how big the output will be.  Vectors are templated, which means that you need to specify the type of object the vector will contain when you create it: <code>vector&lt;int&gt;</code>, <code>vector&lt;bool&gt;</code>, <code>vector&lt;double&gt;</code>, <code>vector&lt;String&gt;</code>.  You can access individual elements of a vector using the standard <code>[]</code> notation, and you can add a new element to the end of the vector using <code>.push_back()</code>.  If you have some idea in advance how big the vector will be, you can use <code>.reserve()</code> to allocate sufficient storage.</p>
<p>The following code implements run length encoding (<code>rle()</code>). It produces two vectors of output: a vector of values, and a vector <code>lengths</code> giving how many times each element is repeated. It works by looping through the input vector <code>x</code> comparing each value to the previous: if it’s the same, then it increments the last value in <code>lengths</code>; if it’s different, it adds the value to the end of <code>values</code>, and sets the corresponding length to 1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">List rleC(NumericVector x) &#123;</span><br><span class="line">  std::vector&lt;int&gt; lengths;</span><br><span class="line">  std::vector&lt;double&gt; values;</span><br><span class="line"></span><br><span class="line">  // Initialise first value</span><br><span class="line">  int i = 0;</span><br><span class="line">  double prev = x[0];</span><br><span class="line">  values.push_back(prev);</span><br><span class="line">  lengths.push_back(1);</span><br><span class="line"></span><br><span class="line">  NumericVector::iterator it;</span><br><span class="line">  for(it = x.begin() + 1; it != x.end(); ++it) &#123;</span><br><span class="line">    if (prev == *it) &#123;</span><br><span class="line">      lengths[i]++;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      values.push_back(*it);</span><br><span class="line">      lengths.push_back(1);</span><br><span class="line"></span><br><span class="line">      i++;</span><br><span class="line">      prev = *it;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return List::create(</span><br><span class="line">    _[&quot;lengths&quot;] = lengths,</span><br><span class="line">    _[&quot;values&quot;] = values</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(An alternative implementation would be to replace <code>i</code> with the iterator <code>lengths.rbegin()</code> which always points to the last element of the vector. You might want to try implementing that yourself.)</p>
<p>Other methods of a vector are described at <a href="http://www.cplusplus.com/reference/vector/vector/" target="_blank" rel="external">http://www.cplusplus.com/reference/vector/vector/</a>.</p>
<h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>Sets maintain a unique set of values, and can efficiently tell if you’ve seen a value before. They are useful for problems that involve duplicates or unique values (like <code>unique</code>, <code>duplicated</code>, or <code>in</code>). C++ provides both ordered (<code>std::set</code>) and unordered sets (<code>std::unordered_set</code>), depending on whether or not order matters for you. Unordered sets tend to be much faster (because they use a hash table internally rather than a tree), so even if you need an ordered set, you should consider using an unordered set and then sorting the output. Like vectors, sets are templated, so you need to request the appropriate type of set for your purpose: <code>unordered_set&lt;int&gt;</code>, <code>unordered_set&lt;bool&gt;</code>, etc. More details are available at <a href="http://www.cplusplus.com/reference/set/set/" target="_blank" rel="external">http://www.cplusplus.com/reference/set/set/</a> and <a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/" target="_blank" rel="external">http://www.cplusplus.com/reference/unordered_set/unordered_set/</a>.</p>
<p>The following function uses an unordered set to implement an equivalent to <code>duplicated()</code> for integer vectors. Note the use of <code>seen.insert(x[i]).second</code>. <code>insert()</code> returns a pair, the <code>.first</code> value is an iterator that points to element and the <code>.second</code> value is a boolean that’s true if the value was a new addition to the set.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// [[Rcpp::plugins(cpp11)]]</span><br><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">#include &lt;unordered_set&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">LogicalVector duplicatedC(IntegerVector x) &#123;</span><br><span class="line">  std::unordered_set&lt;int&gt; seen;</span><br><span class="line">  int n = x.size();</span><br><span class="line">  LogicalVector out(n);</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = !seen.insert(x[i]).second;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that unordered sets are only available in C++ 11, which means we need to use the <code>cpp11</code> plugin, <code>[[Rcpp::plugins(cpp11)]]</code>.</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>A map is similar to a set, but instead of storing presence or absence, it can store additional data. It’s useful for functions like <code>table()</code> or <code>match()</code> that need to look up a value. As with sets, there are ordered (<code>std::map</code>) and unordered (<code>std::unordered_map</code>) versions. Since maps have a value and a key, you need to specify both types when initialising a map: <code>map&lt;double, int&gt;</code>, <code>unordered_map&lt;int, double&gt;</code>, and so on. The following example shows how you could use a <code>map</code> to implement <code>table()</code> for numeric vectors:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">std::map&lt;double, int&gt; tableC(NumericVector x) &#123;</span><br><span class="line">  std::map&lt;double, int&gt; counts;</span><br><span class="line"></span><br><span class="line">  int n = x.size();</span><br><span class="line">  for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    counts[x[i]]++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that unordered maps are only available in C++ 11, so to use them, you’ll again need <code>[[Rcpp::plugins(cpp11)]]</code>.</p>
<h3 id="Exercises-61"><a href="#Exercises-61" class="headerlink" title="Exercises"></a>Exercises</h3><p>To practice using the STL algorithms and data structures, implement the following using R functions in C++, using the hints provided:</p>
<ol>
<li><code>median.default()</code> using <code>partial_sort</code>.</li>
<li><code>%in%</code> using <code>unordered_set</code> and the <code>find()</code> or <code>count()</code> methods.</li>
<li><code>unique()</code> using an <code>unordered_set</code> (challenge: do it in one line!).</li>
<li><code>min()</code> using <code>std::min()</code>, or <code>max()</code> using <code>std::max()</code>.</li>
<li><code>which.min()</code> using <code>min_element</code>, or <code>which.max()</code> using <code>max_element</code>.</li>
<li><code>setdiff()</code>, <code>union()</code>, and <code>intersect()</code> for integers using sorted ranges   and <code>set_union</code>, <code>set_intersection</code> and <code>set_difference</code>.</li>
</ol>
<h2 id="Case-studies"><a href="#Case-studies" class="headerlink" title="Case studies"></a><a href="id=&quot;rcpp-case-studies&quot;">Case studies</a></h2><p>The following case studies illustrate some real life uses of C++ to replace slow R code.</p>
<h3 id="Gibbs-sampler"><a href="#Gibbs-sampler" class="headerlink" title="Gibbs sampler"></a>Gibbs sampler</h3><!-- FIXME: needs more context? -->
<p>The following case study updates an example <a href="http://dirk.eddelbuettel.com/blog/2011/07/14/" target="_blank" rel="external">blogged about</a> by Dirk Eddelbuettel, illustrating the conversion of a Gibbs sampler in R to C++. The R and C++ code shown below is very similar (it only took a few minutes to convert the R version to the C++ version), but runs about 20 times faster on my computer. Dirk’s blog post also shows another way to make it even faster: using the faster random number generator functions in GSL (easily accessible from R through the RcppGSL package) can make it another 2–3x faster.</p>
<p>The R code is as follows:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gibbs_r &lt;- function(N, thin) &#123;</span><br><span class="line">  mat &lt;- matrix(nrow = N, ncol = 2)</span><br><span class="line">  x &lt;- y &lt;- 0</span><br><span class="line"></span><br><span class="line">  for (i in 1:N) &#123;</span><br><span class="line">    for (j in 1:thin) &#123;</span><br><span class="line">      x &lt;- rgamma(1, 3, y * y + 4)</span><br><span class="line">      y &lt;- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))</span><br><span class="line">    &#125;</span><br><span class="line">    mat[i, ] &lt;- c(x, y)</span><br><span class="line">  &#125;</span><br><span class="line">  mat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is straightforward to convert to C++.  We:</p>
<ul>
<li>add type declarations to all variables</li>
<li>use <code>(</code> instead of <code>[</code> to index into the matrix</li>
<li>subscript the results of <code>rgamma</code> and <code>rnorm</code> to convert from a vector  into a scalar</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">NumericMatrix gibbs_cpp(int N, int thin) &#123;</span><br><span class="line">  NumericMatrix mat(N, 2);</span><br><span class="line">  double x = 0, y = 0;</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; N; i++) &#123;</span><br><span class="line">    for(int j = 0; j &lt; thin; j++) &#123;</span><br><span class="line">      x = rgamma(1, 3, 1 / (y * y + 4))[0];</span><br><span class="line">      y = rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))[0];</span><br><span class="line">    &#125;</span><br><span class="line">    mat(i, 0) = x;</span><br><span class="line">    mat(i, 1) = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return(mat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Benchmarking the two implementations yields:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  gibbs_r(100, 10),</span><br><span class="line">  gibbs_cpp(100, 10)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="R-vectorisation-vs-C-vectorisation"><a href="#R-vectorisation-vs-C-vectorisation" class="headerlink" title="R vectorisation vs. C++ vectorisation"></a>R vectorisation vs. C++ vectorisation</h3><!-- FIXME: needs more context? -->
<p>This example is adapted from <a href="http://www.babelgraph.org/wp/?p=358" target="_blank" rel="external">“Rcpp is smoking fast for agent-based models in data frames”</a>. The challenge is to predict a model response from three inputs. The basic R version of the predictor looks like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vacc1a &lt;- function(age, female, ily) &#123;</span><br><span class="line">  p &lt;- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily</span><br><span class="line">  p &lt;- p * if (female) 1.25 else 0.75</span><br><span class="line">  p &lt;- max(0, p)</span><br><span class="line">  p &lt;- min(1, p)</span><br><span class="line">  p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We want to be able to apply this function to many inputs, so we might write a vector-input version using a for loop.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vacc1 &lt;- function(age, female, ily) &#123;</span><br><span class="line">  n &lt;- length(age)</span><br><span class="line">  out &lt;- numeric(n)</span><br><span class="line">  for (i in seq_len(n)) &#123;</span><br><span class="line">    out[i] &lt;- vacc1a(age[i], female[i], ily[i])</span><br><span class="line">  &#125;</span><br><span class="line">  out</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you’re familiar with R, you’ll have a gut feeling that this will be slow, and indeed it is. There are two ways we could attack this problem. If you have a good R vocabulary, you might immediately see how to vectorise the function (using <code>ifelse()</code>, <code>pmin()</code>, and <code>pmax()</code>). Alternatively, we could rewrite <code>vacc1a()</code> and <code>vacc1()</code> in C++, using our knowledge that loops and function calls have much lower overhead in C++.</p>
<p>Either approach is fairly straightforward. In R:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vacc2 &lt;- function(age, female, ily) &#123;</span><br><span class="line">  p &lt;- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily</span><br><span class="line">  p &lt;- p * ifelse(female, 1.25, 0.75)</span><br><span class="line">  p &lt;- pmax(0, p)</span><br><span class="line">  p &lt;- pmin(1, p)</span><br><span class="line">  p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(If you’ve worked R a lot you might recognise some potential bottlenecks in this code: <code>ifelse</code>, <code>pmin</code>, and <code>pmax</code> are known to be slow, and could be replaced with <code>p + 0.75 + 0.5 * female</code>, <code>p[p &lt; 0] &lt;- 0</code>, <code>p[p &gt; 1] &lt;- 1</code>.  You might want to try timing those variations yourself.)</p>
<p>Or in C++:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Rcpp.h&gt;</span><br><span class="line">using namespace Rcpp;</span><br><span class="line"></span><br><span class="line">double vacc3a(double age, bool female, bool ily)&#123;</span><br><span class="line">  double p = 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily;</span><br><span class="line">  p = p * (female ? 1.25 : 0.75);</span><br><span class="line">  p = std::max(p, 0.0);</span><br><span class="line">  p = std::min(p, 1.0);</span><br><span class="line">  return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// [[Rcpp::export]]</span><br><span class="line">NumericVector vacc3(NumericVector age, LogicalVector female,</span><br><span class="line">                    LogicalVector ily) &#123;</span><br><span class="line">  int n = age.size();</span><br><span class="line">  NumericVector out(n);</span><br><span class="line"></span><br><span class="line">  for(int i = 0; i &lt; n; ++i) &#123;</span><br><span class="line">    out[i] = vacc3a(age[i], female[i], ily[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We next generate some sample data, and check that all three versions return the same values:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n &lt;- 1000</span><br><span class="line">age &lt;- rnorm(n, mean = 50, sd = 10)</span><br><span class="line">female &lt;- sample(c(T, F), n, rep = TRUE)</span><br><span class="line">ily &lt;- sample(c(T, F), n, prob = c(0.8, 0.2), rep = TRUE)</span><br><span class="line"></span><br><span class="line">stopifnot(</span><br><span class="line">  all.equal(vacc1(age, female, ily), vacc2(age, female, ily)),</span><br><span class="line">  all.equal(vacc1(age, female, ily), vacc3(age, female, ily))</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>The original blog post forgot to do this, and introduced a bug in the C++ version: it used <code>0.004</code> instead of <code>0.04</code>.  Finally, we can benchmark our three approaches:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">microbenchmark(</span><br><span class="line">  vacc1 = vacc1(age, female, ily),</span><br><span class="line">  vacc2 = vacc2(age, female, ily),</span><br><span class="line">  vacc3 = vacc3(age, female, ily)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>Not surprisingly, our original approach with loops is very slow.  Vectorising in R gives a huge speedup, and we can eke out even more performance (~10x) with the C++ loop. I was a little surprised that the C++ was so much faster, but it is because the R version has to create 11 vectors to store intermediate results, where the C++ code only needs to create 1.</p>
<h2 id="Using-Rcpp-in-a-package"><a href="#Using-Rcpp-in-a-package" class="headerlink" title="Using Rcpp in a package"></a><a href="id=&quot;rcpp-package&quot;">Using Rcpp in a package</a></h2><p>The same C++ code that is used with <code>sourceCpp()</code> can also be bundled into a package. There are several benefits of moving code from a stand-alone C++ source file to a package:</p>
<ol>
<li>Your code can be made available to users without C++ development tools.</li>
<li>Multiple source files and their dependencies are handled automatically by   the R package build system.</li>
<li>Packages provide additional infrastructure for testing, documentation, and   consistency.</li>
</ol>
<p>To add <code>Rcpp</code> to an existing package, you put your C++ files in the <code>src/</code> directory and modify/create the following configuration files:</p>
<ul>
<li><p>In <code>DESCRIPTION</code> add</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinkingTo: Rcpp</span><br><span class="line">Imports: Rcpp</span><br></pre></td></tr></table></figure>
</li>
<li><p>Make sure your <code>NAMESPACE</code> includes:</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useDynLib(mypackage)</span><br><span class="line">importFrom(Rcpp, sourceCpp)</span><br></pre></td></tr></table></figure>
<p>  We need to import something (anything) from Rcpp so that internal Rcpp code    is properly loaded. This is a bug in R and hopefully will be fixed in the    future.</p>
</li>
</ul>
<p>To generate a new Rcpp package that includes a simple “hello world” function you can use <code>Rcpp.package.skeleton()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rcpp.package.skeleton(&quot;NewPackage&quot;, attributes = TRUE)</span><br></pre></td></tr></table></figure>
<p>To generate a package based on C++ files that you’ve been using with <code>sourceCpp()</code>, use the <code>cpp_files</code> parameter:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Rcpp.package.skeleton(&quot;NewPackage&quot;, example_code = FALSE,</span><br><span class="line">                      cpp_files = c(&quot;convolve.cpp&quot;))</span><br></pre></td></tr></table></figure>
<p>Before building the packge, you’ll need to run <code>Rcpp::compileAttributes()</code>. This function scans the C++ files for <code>Rcpp::export</code> attributes and generates the code required to make the functions available in R. Re-run <code>compileAttributes()</code> whenever functions are added, removed, or have their signatures changed. This is done automatically by the devtools package and by Rstudio.</p>
<p>For more details see the Rcpp package vignette, <code>vignette(&quot;Rcpp-package&quot;)</code>.</p>
<h2 id="Learning-more"><a href="#Learning-more" class="headerlink" title="Learning more"></a><a href="id=&quot;rcpp-more&quot;">Learning more</a></h2><p>This chapter has only touched on a small part of Rcpp, giving you the basic tools to rewrite poorly performing R code in C++. The <a href="http://www.rcpp.org/book" target="_blank" rel="external">Rcpp book</a> is the best reference to learn more about Rcpp. As noted, Rcpp has many other capabilities that make it easy to interface R to existing C++ code, including:</p>
<ul>
<li>Additional features of attributes including specifying default arguments,  linking in external C++ dependencies, and exporting C++ interfaces from  packages. These features and more are covered in the Rcpp attributes vignette,  <code>vignette(&quot;Rcpp-attributes&quot;)</code>.</li>
<li>Automatically creating wrappers between C++ data structures and R data  structures, including mapping C++ classes to reference classes. A good  introduction to this topic is Rcpp modules vignette,  <code>vignette(&quot;Rcpp-modules&quot;)</code></li>
<li>The Rcpp quick reference guide, <code>vignette(&quot;Rcpp-quickref&quot;)</code>, contains a useful  summary of Rcpp classes and common programming idioms.</li>
</ul>
<p>I strongly recommend keeping an eye on the <a href="http://www.rcpp.org" target="_blank" rel="external">Rcpp homepage</a> and <a href="http://dirk.eddelbuettel.com/code/rcpp.html" target="_blank" rel="external">Dirk’s Rcpp page</a> as well as signing up for the <a href="http://lists.r-forge.r-project.org/cgi-bin/mailman/listinfo/rcpp-devel" target="_blank" rel="external">Rcpp mailing list</a>. Rcpp is still under active development, and is getting better with every release.</p>
<p>Other resources I’ve found helpful in learning C++ are:</p>
<ul>
<li><a href="http://amzn.com/0321334876?tag=devtools-20" target="_blank" rel="external"><em>Effective C++</em></a> and  <a href="http://amzn.com/0201749629?tag=devtools-20" target="_blank" rel="external"><em>Effective STL</em></a> by Scott Meyers.</li>
<li><a href="http://www.icce.rug.nl/documents/cplusplus/cplusplus.html" target="_blank" rel="external"><em>C++ Annotations</em></a>,  aimed at “knowledgeable users of C (or any other language using a C-like  grammar, like Perl or Java) who would like to know more about, or make the  transition to, C++”.</li>
<li><a href="http://www.cs.helsinki.fi/u/tpkarkka/alglib/k06/" target="_blank" rel="external"><em>Algorithm Libraries</em></a>,  which provides a more technical, but still concise, description of  important STL concepts. (Follow the links under notes).</li>
</ul>
<p>Writing performance code may also require you to rethink your basic approach: a solid understanding of basic data structures and algorithms is very helpful here. That’s beyond the scope of this book, but I’d suggest the <a href="http://amzn.com/0387948600?tag=devtools-20" target="_blank" rel="external"><em>Algorithm Design Manual</em></a>, MIT’s <a href="http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-introduction-to-algorithms-sma-5503-fall-2005/" target="_blank" rel="external"><em>Introduction to Algorithms</em></a>, <em>Algorithms</em> by Robert Sedgewick and Kevin Wayne which has a free <a href="http://algs4.cs.princeton.edu/home/" target="_blank" rel="external">online textbook</a> and a matching <a href="https://www.coursera.org/course/algs4partI" target="_blank" rel="external">coursera course</a>.</p>
<h2 id="Acknowledgments-1"><a href="#Acknowledgments-1" class="headerlink" title="Acknowledgments"></a>Acknowledgments</h2><p>I’d like to thank the Rcpp-mailing list for many helpful conversations, particularly Romain Francois and Dirk Eddelbuettel who have not only provided detailed answers to many of my questions, but have been incredibly responsive at improving Rcpp. This chapter would not have been possible without JJ Allaire; he encouraged me to learn C++ and then answered many of my dumb questions along the way.</p>
<hr>
<h1 id="R’s-C-interface"><a href="#R’s-C-interface" class="headerlink" title="R’s C interface"></a><a href="id=&quot;c-api&quot;">R’s C interface</a></h1><p>Reading R’s source code is an extremely powerful technique for improving your programming skills. However, many base R functions, and many functions in older packages, are written in C. It’s useful to be able to figure out how those functions work, so this chapter will introduce you to R’s C API. You’ll need some basic C knowledge, which you can get from a standard C text (e.g., <a href="http://amzn.com/0131101633?tag=devtools-20" target="_blank" rel="external"><em>The C Programming Language</em></a> by Kernigan and Ritchie), or from <a href="#rcpp">Rcpp</a>. You’ll need a little patience, but it is possible to read R’s C source code, and you will learn a lot doing it.</p>
<p>The contents of this chapter draw heavily from Section 5 (“System and foreign language interfaces”) of <a href="http://cran.r-project.org/doc/manuals/R-exts.html" target="_blank" rel="external">Writing R extensions</a>, but focus on best practices and modern tools. This means it does not cover the old <code>.C</code> interface, the old API defined in <code>Rdefines.h</code>, or rarely used language features. To see R’s complete C API, look at the header file <code>Rinternals.h</code>. It’s easiest to find and display this file from within R:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rinternals &lt;- file.path(R.home(&quot;include&quot;), &quot;Rinternals.h&quot;)</span><br><span class="line">file.show(rinternals)</span><br></pre></td></tr></table></figure>
<p>All functions are defined with either the prefix <code>Rf_</code> or <code>R_</code> but are exported without it (unless <code>#define R_NO_REMAP</code> has been used).</p>
<p>I do not recommend using C for writing new high-performance code. Instead write C++ with Rcpp. The Rcpp API protects you from many of the historical idiosyncracies of the R API, takes care of memory management for you, and provides many useful helper methods.</p>
<h5 id="Outline-14"><a href="#Outline-14" class="headerlink" title="Outline"></a>Outline</h5><ul>
<li><a href="#calling-c">Calling C</a> shows the basics of creating and calling C functions  with the inline package.</li>
<li><a href="#c-data-structures">C data structures</a> shows how to translate data  structure names from R to C.</li>
<li><a href="#c-vectors">Creating and modifying vectors</a> teaches you how to create,  modify, and coerce vectors in C.</li>
<li><a href="#c-pairlists">Pairlists</a> shows you how to work with pairlists. You need  to know this because the distinction between pairlists and list is more  important in C than R.</li>
<li><a href="#c-input-validation">Input validation</a> talks about the importance of  input validation so that your C function doesn’t crash R.</li>
<li><a href="#c-find-source">Finding the C source for a function</a> concludes the  chapter by showing you how to find the C source code for internal and  primitive R functions.</li>
</ul>
<h5 id="Prerequisites-10"><a href="#Prerequisites-10" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><p>To understand existing C code, it’s useful to generate simple examples of your own that you can experiment with. To that end, all examples in this chapter use the <code>inline</code> package, which makes it extremely easy to compile and link C code to your current R session. Get it by running <code>install.packages(&quot;inline&quot;)</code>. To easily find the C code associated with internal and primitive functions, you’ll need a function from pryr. Get the package with <code>install.packages(&quot;pryr&quot;)</code>.</p>
<p>You’ll also need a C compiler. Windows users can use <a href="http://cran.r-project.org/bin/windows/Rtools/" target="_blank" rel="external">Rtools</a>. Mac users will need the <a href="http://developer.apple.com/" target="_blank" rel="external">Xcode command line tools</a>. Most Linux distributions will come with the necessary compilers.</p>
<p>In Windows, it’s necessary that the Rtools executables directory (typically <code>C:\Rtools\bin</code>) and the C compiler executables directory (typically <code>C:\Rtools\gcc-4.6.3\bin</code>) are included in the Windows <code>PATH</code> environment variable. You may need to reboot Windows before R can recognise these values.</p>
<h2 id="Calling-C-functions-from-R"><a href="#Calling-C-functions-from-R" class="headerlink" title="Calling C functions from R"></a><a href="id=&quot;calling-c&quot;">Calling C functions from R</a></h2><p>Generally, calling a C function from R requires two pieces: a C function and an R wrapper function that uses <code>.Call()</code>. The simple function below adds two numbers together and illustrates some of the complexities of coding in C:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In C ----------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;R.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Rinternals.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">SEXP <span class="title">add</span><span class="params">(SEXP a, SEXP b)</span> </span>&#123;</span><br><span class="line">  SEXP result = PROTECT(allocVector(REALSXP, <span class="number">1</span>));</span><br><span class="line">  REAL(result)[<span class="number">0</span>] = asReal(a) + asReal(b);</span><br><span class="line">  UNPROTECT(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># In R ----------------------------------------</span><br><span class="line">add &lt;- function(a, b) &#123;</span><br><span class="line">  .Call(&quot;add&quot;, a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(An alternative to using <code>.Call</code> is to use <code>.External</code>.  It is used almost identically, except that the C function will receive a single argument containing a <code>LISTSXP</code>, a pairlist from which the arguments can be extracted. This makes it possible to write functions that take a variable number of arguments. However, it’s not commonly used in base R and <code>inline</code> does not currently support <code>.External</code> functions so I don’t discuss it further in this chapter.)</p>
<p>In this chapter we’ll produce the two pieces in one step by using the <code>inline</code> package. This allows us to write:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- cfunction(c(a = &quot;integer&quot;, b = &quot;integer&quot;), &quot;</span><br><span class="line">  SEXP result = PROTECT(allocVector(REALSXP, 1));</span><br><span class="line">  REAL(result)[0] = asReal(a) + asReal(b);</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&quot;)</span><br><span class="line">add(1, 5)</span><br></pre></td></tr></table></figure>
<p>Before we begin reading and writing C code, we need to know a little about the basic data structures.</p>
<h2 id="C-data-structures"><a href="#C-data-structures" class="headerlink" title="C data structures"></a><a href="id=&quot;c-data-structures&quot;">C data structures</a></h2><p>At the C-level, all R objects are stored in a common datatype, the <code>SEXP</code>, or S-expression. All R objects are S-expressions so every C function that you create must return a <code>SEXP</code> as output and take <code>SEXP</code>s as inputs. (Technically, this is a pointer to a structure with typedef <code>SEXPREC</code>.) A <code>SEXP</code> is a variant type, with subtypes for all R’s data structures. The most important types are:</p>
<ul>
<li><code>REALSXP</code>: numeric vector</li>
<li><code>INTSXP</code>: integer vector</li>
<li><code>LGLSXP</code>: logical vector</li>
<li><code>STRSXP</code>: character vector</li>
<li><code>VECSXP</code>: list</li>
<li><code>CLOSXP</code>: function (closure)</li>
<li><code>ENVSXP</code>: environment</li>
</ul>
<p><strong>Beware:</strong> In C, lists are called <code>VECSXP</code>s not <code>LISTSXP</code>s. This is because early implementations of lists were Lisp-like linked lists, which are now known as “pairlists”.</p>
<p>Character vectors are a little more complicated than the other atomic vectors. A <code>STRSXP</code>s contains a vector of <code>CHARSXP</code>s, where each <code>CHARSXP</code> points to C-style string stored in a global pool. This design allows individual <code>CHARSXP</code>‘s to be shared between multiple character vectors, reducing memory usage. See <a href="#object-size">object size</a> for more details.</p>
<p>There are also <code>SEXP</code>s for less common object types:</p>
<ul>
<li><code>CPLXSXP</code>: complex vectors</li>
<li><code>LISTSXP</code>: “pair” lists. At the R level, you only need to care about the distinction lists and pairlists for function arguments, but internally they are used in many more places</li>
<li><code>DOTSXP</code>: ‘…’</li>
<li><code>SYMSXP</code>: names/symbols</li>
<li><code>NILSXP</code>: <code>NULL</code></li>
</ul>
<p>And <code>SEXP</code>s for internal objects, objects that are usually only created and used by C functions, not R functions:</p>
<ul>
<li><code>LANGSXP</code>: language constructs</li>
<li><code>CHARSXP</code>: “scalar” strings</li>
<li><code>PROMSXP</code>: promises, lazily evaluated function arguments</li>
<li><code>EXPRSXP</code>: expressions</li>
</ul>
<p>There’s no built-in R function to easily access these names, but pryr provides <code>sexp_type()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">library(pryr)</span><br><span class="line"></span><br><span class="line">sexp_type(10L)</span><br><span class="line">sexp_type(&quot;a&quot;)</span><br><span class="line">sexp_type(T)</span><br><span class="line">sexp_type(list(a = 1))</span><br><span class="line">sexp_type(pairlist(a = 1))</span><br></pre></td></tr></table></figure>
<h2 id="Creating-and-modifying-vectors"><a href="#Creating-and-modifying-vectors" class="headerlink" title="Creating and modifying vectors"></a><a href="id=&quot;c-vectors&quot;">Creating and modifying vectors</a></h2><p>At the heart of every C function are conversions between R data structures and C data structures. Inputs and output will always be R data structures (<code>SEXP</code>s) and you will need to convert them to C data structures in order to do any work. This section focusses on vectors because they’re the type of object you’re most likely to work with.</p>
<p>An additional complication is the garbage collector: if you don’t protect every R object you create, the garbage collector will think they are unused and delete them.</p>
<h3 id="Creating-vectors-and-garbage-collection"><a href="#Creating-vectors-and-garbage-collection" class="headerlink" title="Creating vectors and garbage collection"></a>Creating vectors and garbage collection</h3><p>The simplest way to create a new R-level object is to use <code>allocVector()</code>. It takes two arguments, the type of <code>SEXP</code> (or <code>SEXPTYPE</code>) to create, and the length of the vector. The following code creates a three element list containing a logical vector, a numeric vector, and an integer vector, all of length four:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dummy &lt;- cfunction(body = &apos;</span><br><span class="line">  SEXP dbls = PROTECT(allocVector(REALSXP, 4));</span><br><span class="line">  SEXP lgls = PROTECT(allocVector(LGLSXP, 4));</span><br><span class="line">  SEXP ints = PROTECT(allocVector(INTSXP, 4));</span><br><span class="line"></span><br><span class="line">  SEXP vec = PROTECT(allocVector(VECSXP, 3));</span><br><span class="line">  SET_VECTOR_ELT(vec, 0, dbls);</span><br><span class="line">  SET_VECTOR_ELT(vec, 1, lgls);</span><br><span class="line">  SET_VECTOR_ELT(vec, 2, ints);</span><br><span class="line"></span><br><span class="line">  UNPROTECT(4);</span><br><span class="line">  return vec;</span><br><span class="line">&apos;)</span><br><span class="line">dummy()</span><br></pre></td></tr></table></figure>
<p>You might wonder what all the <code>PROTECT()</code> calls do. They tell R that the object is in use and shouldn’t be deleted if the garbage collector is activated. (We don’t need to protect objects that R already knows we’re using, like function arguments.)</p>
<p>You also need to make sure that every protected object is unprotected. <code>UNPROTECT()</code> takes a single integer argument, <code>n</code>, and unprotects the last n objects that were protected. The number of protects and unprotects must match. If not, R will warn about a “stack imbalance in .Call”.  Other specialised forms of protection are needed in some circumstances:</p>
<ul>
<li><p><code>UNPROTECT_PTR()</code> unprotects the object pointed to by the <code>SEXP</code>s.</p>
</li>
<li><p><code>PROTECT_WITH_INDEX()</code> saves an index of the protection location that can<br>be used to replace the protected value using <code>REPROTECT()</code>.</p>
</li>
</ul>
<p>Consult the R externals section on <a href="http://cran.r-project.org/doc/manuals/R-exts.html#Garbage-Collection" target="_blank" rel="external">garbage collection</a> for more details.</p>
<p>Properly protecting the R objects you allocate is extremely important! Improper protection leads to difficulty diagnosing errors, typically segfaults, but other corruption is possible as well. In general, if you allocate a new R object, you must <code>PROTECT</code> it.</p>
<p>If you run <code>dummy()</code> a few times, you’ll notice the output varies. This is because <code>allocVector()</code> assigns memory to each output, but it doesn’t clean it out first. For real functions, you may want to loop through each element in the vector and set it to a constant. The most efficient way to do that is to use <code>memset()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zeroes &lt;- cfunction(c(n_ = &quot;integer&quot;), &apos;</span><br><span class="line">  int n = asInteger(n_);</span><br><span class="line"></span><br><span class="line">  SEXP out = PROTECT(allocVector(INTSXP, n));</span><br><span class="line">  memset(INTEGER(out), 0, n * sizeof(int));</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&apos;)</span><br><span class="line">zeroes(10);</span><br></pre></td></tr></table></figure>
<h3 id="Missing-and-non-finite-values"><a href="#Missing-and-non-finite-values" class="headerlink" title="Missing and non-finite values"></a>Missing and non-finite values</h3><p>Each atomic vector has a special constant for getting or setting missing values:</p>
<ul>
<li><code>INTSXP</code>: <code>NA_INTEGER</code></li>
<li><code>LGLSXP</code>: <code>NA_LOGICAL</code></li>
<li><code>STRSXP</code>: <code>NA_STRING</code></li>
</ul>
<p>Missing values are somewhat more complicated for <code>REALSXP</code> because there is an existing protocol for missing values defined by the floating point standard (<a href="http://en.wikipedia.org/wiki/IEEE_floating_point" target="_blank" rel="external">IEEE 754</a>). In doubles, an <code>NA</code> is <code>NaN</code> with a special bit pattern (the lowest word is 1954, the year Ross Ihaka was born), and there are other special values for positive and negative infinity. Use <code>ISNA()</code>, <code>ISNAN()</code>, and <code>!R_FINITE()</code> macros to check for missing, NaN, or non-finite values. Use the constants <code>NA_REAL</code>, <code>R_NaN</code>, <code>R_PosInf</code>, and <code>R_NegInf</code> to set those values.</p>
<p>We can use this knowledge to make a simple version of <code>is.NA()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">is_na &lt;- cfunction(c(x = &quot;ANY&quot;), &apos;</span><br><span class="line">  int n = length(x);</span><br><span class="line"></span><br><span class="line">  SEXP out = PROTECT(allocVector(LGLSXP, n));</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    switch(TYPEOF(x)) &#123;</span><br><span class="line">      case LGLSXP:</span><br><span class="line">        LOGICAL(out)[i] = (LOGICAL(x)[i] == NA_LOGICAL);</span><br><span class="line">        break;</span><br><span class="line">      case INTSXP:</span><br><span class="line">        LOGICAL(out)[i] = (INTEGER(x)[i] == NA_INTEGER);</span><br><span class="line">        break;</span><br><span class="line">      case REALSXP:</span><br><span class="line">        LOGICAL(out)[i] = ISNA(REAL(x)[i]);</span><br><span class="line">        break;</span><br><span class="line">      case STRSXP:</span><br><span class="line">        LOGICAL(out)[i] = (STRING_ELT(x, i) == NA_STRING);</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        LOGICAL(out)[i] = NA_LOGICAL;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&apos;)</span><br><span class="line">is_na(c(NA, 1L))</span><br><span class="line">is_na(c(NA, 1))</span><br><span class="line">is_na(c(NA, &quot;a&quot;))</span><br><span class="line">is_na(c(NA, TRUE))</span><br></pre></td></tr></table></figure>
<p>Note that <code>base::is.na()</code> returns <code>TRUE</code> for both <code>NA</code> and <code>NaN</code>s in a numeric vector, as opposed to the C <code>ISNA()</code> macro, which returns <code>TRUE</code> only for <code>NA_REAL</code>s.</p>
<h3 id="Accessing-vector-data"><a href="#Accessing-vector-data" class="headerlink" title="Accessing vector data"></a>Accessing vector data</h3><p>There is a helper function for each atomic vector that allows you to access the C array which stores the data in a vector. Use <code>REAL()</code>, <code>INTEGER()</code>, <code>LOGICAL()</code>, <code>COMPLEX()</code>, and <code>RAW()</code> to access the C array inside numeric, integer, logical, complex, and raw vectors. The following example shows how to use <code>REAL()</code> to inspect and modify a numeric vector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add_one &lt;- cfunction(c(x = &quot;numeric&quot;), &quot;</span><br><span class="line">  int n = length(x);</span><br><span class="line">  SEXP out = PROTECT(allocVector(REALSXP, n));</span><br><span class="line"></span><br><span class="line">  for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    REAL(out)[i] = REAL(x)[i] + 1;</span><br><span class="line">  &#125;</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&quot;)</span><br><span class="line">add_one(as.numeric(1:10))</span><br></pre></td></tr></table></figure>
<p>When working with longer vectors, there’s a performance advantage to using the helper function once and saving the result in a pointer:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add_two &lt;- cfunction(c(x = &quot;numeric&quot;), &quot;</span><br><span class="line">  int n = length(x);</span><br><span class="line">  double *px, *pout;</span><br><span class="line"></span><br><span class="line">  SEXP out = PROTECT(allocVector(REALSXP, n));</span><br><span class="line"></span><br><span class="line">  px = REAL(x);</span><br><span class="line">  pout = REAL(out);</span><br><span class="line">  for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    pout[i] = px[i] + 2;</span><br><span class="line">  &#125;</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&quot;)</span><br><span class="line">add_two(as.numeric(1:10))</span><br><span class="line"></span><br><span class="line">x &lt;- as.numeric(1:1e6)</span><br><span class="line">microbenchmark(</span><br><span class="line">  add_one(x),</span><br><span class="line">  add_two(x)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>On my computer, <code>add_two()</code> is about twice as fast as <code>add_one()</code> for a million element vector. This is a common idiom in base R.</p>
<h3 id="Character-vectors-and-lists"><a href="#Character-vectors-and-lists" class="headerlink" title="Character vectors and lists"></a>Character vectors and lists</h3><p>Strings and lists are more complicated because the individual elements of a vector are <code>SEXP</code>s, not basic C data structures. Each element of a <code>STRSXP</code> is a <code>CHARSXP</code>s, an immutable object that contains a pointer to C string stored in a global pool. Use <code>STRING_ELT(x, i)</code> to extract the <code>CHARSXP</code>, and <code>CHAR(STRING_ELT(x, i))</code> to get the actual <code>const char*</code> string. Set values with <code>SET_STRING_ELT(x, i, value)</code>. Use <code>mkChar()</code> to turn a C string into a <code>CHARSXP</code> and <code>mkString()</code> to turn a C string into a <code>STRSXP</code>. Use <code>mkChar()</code> to create strings to insert in an existing vector, use <code>mkString()</code> to create a new (length 1) vector.</p>
<p>The following function shows how to make a character vector containing known strings:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abc &lt;- cfunction(NULL, &apos;</span><br><span class="line">  SEXP out = PROTECT(allocVector(STRSXP, 3));</span><br><span class="line"></span><br><span class="line">  SET_STRING_ELT(out, 0, mkChar(&quot;a&quot;));</span><br><span class="line">  SET_STRING_ELT(out, 1, mkChar(&quot;b&quot;));</span><br><span class="line">  SET_STRING_ELT(out, 2, mkChar(&quot;c&quot;));</span><br><span class="line"></span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&apos;)</span><br><span class="line">abc()</span><br></pre></td></tr></table></figure>
<p>Things are a little harder if you want to modify the strings in the vector because you need to know a lot about string manipulation in C (which is hard, and harder to do right). For any problem that involves any kind of string modification, you’re better off using Rcpp.</p>
<p>The elements of a list can be any other <code>SEXP</code>, which generally makes them hard to work with in C (you’ll need lots of <code>switch</code> statements to deal with the possibilities). The accessor functions for lists are <code>VECTOR_ELT(x, i)</code> and <code>SET_VECTOR_ELT(x, i, value)</code>.</p>
<h3 id="Modifying-inputs"><a href="#Modifying-inputs" class="headerlink" title="Modifying inputs"></a>Modifying inputs</h3><p>You must be very careful when modifying function inputs. The following function has some rather unexpected behaviour:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add_three &lt;- cfunction(c(x = &quot;numeric&quot;), &apos;</span><br><span class="line">  REAL(x)[0] = REAL(x)[0] + 3;</span><br><span class="line">  return x;</span><br><span class="line">&apos;)</span><br><span class="line">x &lt;- 1</span><br><span class="line">y &lt;- x</span><br><span class="line">add_three(x)</span><br><span class="line">x</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<p>Not only has it modified the value of <code>x</code>, it has also modified <code>y</code>! This happens because of R’s lazy copy-on-modify semantics. To avoid problems like this, always <code>duplicate()</code> inputs before modifying them:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add_four &lt;- cfunction(c(x = &quot;numeric&quot;), &apos;</span><br><span class="line">  SEXP x_copy = PROTECT(duplicate(x));</span><br><span class="line">  REAL(x_copy)[0] = REAL(x_copy)[0] + 4;</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line">  return x_copy;</span><br><span class="line">&apos;)</span><br><span class="line">x &lt;- 1</span><br><span class="line">y &lt;- x</span><br><span class="line">add_four(x)</span><br><span class="line">x</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
<p>If you’re working with lists, use <code>shallow_duplicate()</code> to make a shallow copy; <code>duplicate()</code> will also copy every element in the list.</p>
<h3 id="Coercing-scalars"><a href="#Coercing-scalars" class="headerlink" title="Coercing scalars"></a>Coercing scalars</h3><p>There are a few helper functions that turn length one R vectors into C scalars:</p>
<ul>
<li><code>asLogical(x): LGLSXP -&gt; int</code></li>
<li><code>asInteger(x): INTSXP -&gt; int</code></li>
<li><code>asReal(x): REALSXP -&gt; double</code></li>
<li><code>CHAR(asChar(x)): STRSXP -&gt; const char*</code></li>
</ul>
<p>And helpers to go in the opposite direction:</p>
<ul>
<li><code>ScalarLogical(x): int -&gt; LGLSXP</code></li>
<li><code>ScalarInteger(x): int -&gt; INTSXP</code></li>
<li><code>ScalarReal(x): double -&gt; REALSXP</code></li>
<li><code>mkString(x): const char* -&gt; STRSXP</code></li>
</ul>
<p>These all create R-level objects, so they need to be <code>PROTECT()</code>ed.</p>
<h3 id="Long-vectors"><a href="#Long-vectors" class="headerlink" title="Long vectors"></a>Long vectors</h3><p>As of R 3.0.0, R vectors can have length greater than $2 ^ 31 -  1$. This means that vector lengths can no longer be reliably stored in an <code>int</code> and if you want your code to work with long vectors, you can’t write code like <code>int n = length(x)</code>. Instead use the <code>R_xlen_t</code> type and the <code>xlength()</code> function, and write <code>R_xlen_t n = xlength(x)</code>.</p>
<h2 id="Pairlists-1"><a href="#Pairlists-1" class="headerlink" title="Pairlists"></a><a href="id=&quot;c-pairlists&quot;">Pairlists</a></h2><p>In R code, there are only a few instances when you need to care about the difference between a pairlist and a list (as described in <a href="#pairlists">Pairlists</a>). In C, pairlists play much more important role because they are used for calls, unevaluated arguments, attributes, and in <code>...</code>. In C, lists and pairlists differ primarily in how you access and name elements.</p>
<p>Unlike lists (<code>VECSXP</code>s), pairlists (<code>LISTSXP</code>s) have no way to index into an arbitrary location. Instead, R provides a set of helper functions that navigate along a linked list. The basic helpers are <code>CAR()</code>, which extracts the first element of the list, and <code>CDR()</code>, which extracts the rest of the list. These can be composed to get <code>CAAR()</code>, <code>CDAR()</code>, <code>CADDR()</code>, <code>CADDDR()</code>, and so on. Corresponding to the getters, R provides setters <code>SETCAR()</code>, <code>SETCDR()</code>, etc.</p>
<p>The following example shows how <code>CAR()</code> and <code>CDR()</code> can pull out pieces of a quoted function call:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">car &lt;- cfunction(c(x = &quot;ANY&quot;), &apos;return CAR(x);&apos;)</span><br><span class="line">cdr &lt;- cfunction(c(x = &quot;ANY&quot;), &apos;return CDR(x);&apos;)</span><br><span class="line">cadr &lt;- cfunction(c(x = &quot;ANY&quot;), &apos;return CADR(x);&apos;)</span><br><span class="line"></span><br><span class="line">x &lt;- quote(f(a = 1, b = 2))</span><br><span class="line"># The first element</span><br><span class="line">car(x)</span><br><span class="line"># Second and third elements</span><br><span class="line">cdr(x)</span><br><span class="line"># Second element</span><br><span class="line">car(cdr(x))</span><br><span class="line">cadr(x)</span><br></pre></td></tr></table></figure>
<p>Pairlists are always terminated with <code>R_NilValue</code>. To loop over all elements of a pairlist, use this template:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">count &lt;- cfunction(c(x = &quot;ANY&quot;), &apos;</span><br><span class="line">  SEXP el, nxt;</span><br><span class="line">  int i = 0;</span><br><span class="line"></span><br><span class="line">  for(nxt = x; nxt != R_NilValue; el = CAR(nxt), nxt = CDR(nxt)) &#123;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  return ScalarInteger(i);</span><br><span class="line">&apos;)</span><br><span class="line">count(quote(f(a, b, c)))</span><br><span class="line">count(quote(f()))</span><br></pre></td></tr></table></figure>
<p>You can make new pairlists with <code>CONS()</code> and new calls with <code>LCONS()</code>. Remember to set the last value to <code>R_NilValue</code>. Since these are R objects as well, they are eligible for garbage collection and must be <code>PROTECT</code>ed. In fact, it is unsafe to write code like the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new_call &lt;- cfunction(NULL, &apos;</span><br><span class="line">  return LCONS(install(&quot;+&quot;), LCONS(</span><br><span class="line">    ScalarReal(10), LCONS(</span><br><span class="line">      ScalarReal(5), R_NilValue</span><br><span class="line">    )</span><br><span class="line">  ));</span><br><span class="line">&apos;)</span><br><span class="line">gctorture(TRUE)</span><br><span class="line">new_call()</span><br><span class="line">gctorture(FALSE)</span><br></pre></td></tr></table></figure>
<p>On my machine, I get the result <code>5 + 5</code> — highly unexpected! In fact, to be safe, we must <code>PROTECT</code> each <code>ScalarReal</code> that is generated, as every R object allocation can trigger the garbage collector.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">new_call &lt;- cfunction(NULL, &apos;</span><br><span class="line">  SEXP REALSXP_10 = PROTECT(ScalarReal(10));</span><br><span class="line">  SEXP REALSXP_5 = PROTECT(ScalarReal(5));</span><br><span class="line">  SEXP out = PROTECT(LCONS(install(&quot;+&quot;), LCONS(</span><br><span class="line">    REALSXP_10, LCONS(</span><br><span class="line">      REALSXP_5, R_NilValue</span><br><span class="line">    )</span><br><span class="line">  )));</span><br><span class="line">  UNPROTECT(3);</span><br><span class="line">  return out;</span><br><span class="line">&apos;)</span><br><span class="line">gctorture(TRUE)</span><br><span class="line">new_call()</span><br><span class="line">gctorture(FALSE)</span><br></pre></td></tr></table></figure>
<p><code>TAG()</code> and <code>SET_TAG()</code> allow you to get and set the tag (aka name) associated with an element of a pairlist. The tag should be a symbol. To create a symbol (the equivalent of <code>as.symbol()</code> in R), use <code>install()</code>.</p>
<p>Attributes are also pairlists, but come with the helper functions <code>setAttrib()</code> and <code>getAttrib()</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set_attr &lt;- cfunction(c(obj = &quot;SEXP&quot;, attr = &quot;SEXP&quot;, value = &quot;SEXP&quot;), &apos;</span><br><span class="line">  const char* attr_s = CHAR(asChar(attr));</span><br><span class="line"></span><br><span class="line">  duplicate(obj);</span><br><span class="line">  setAttrib(obj, install(attr_s), value);</span><br><span class="line">  return obj;</span><br><span class="line">&apos;)</span><br><span class="line">x &lt;- 1:10</span><br><span class="line">set_attr(x, &quot;a&quot;, 1)</span><br></pre></td></tr></table></figure>
<p>(Note that <code>setAttrib()</code> and <code>getAttrib()</code> must do a linear search over the attributes pairlist.)</p>
<p>There are some (confusingly named) shortcuts for common setting operations: <code>classgets()</code>, <code>namesgets()</code>, <code>dimgets()</code>, and <code>dimnamesgets()</code> are the internal versions of the default methods of <code>class&lt;-</code>, <code>names&lt;-</code>, <code>dim&lt;-</code>, and <code>dimnames&lt;-</code>.</p>
<h2 id="Input-validation"><a href="#Input-validation" class="headerlink" title="Input validation"></a><a href="id=&quot;c-input-validation&quot;">Input validation</a></h2><p>If the user provides unexpected input to your function (e.g., a list instead of a numeric vector), it’s very easy to crash R. For this reason, it’s a good idea to write a wrapper function that checks arguments are of the correct type. It’s usually easier to do this at the R level. For example, going back to our first example of C code, we might rename the C function to <code>add_</code> and write a wrapper around it to check that the inputs are ok:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add_ &lt;- cfunction(signature(a = &quot;integer&quot;, b = &quot;integer&quot;), &quot;</span><br><span class="line">  SEXP result = PROTECT(allocVector(REALSXP, 1));</span><br><span class="line">  REAL(result)[0] = asReal(a) + asReal(b);</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return result;</span><br><span class="line">&quot;)</span><br><span class="line">add &lt;- function(a, b) &#123;</span><br><span class="line">  stopifnot(is.numeric(a), is.numeric(b))</span><br><span class="line">  stopifnot(length(a) == 1, length(b) == 1)</span><br><span class="line">  add_(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Alternatively, if we wanted to be more accepting of diverse inputs we could do the following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add &lt;- function(a, b) &#123;</span><br><span class="line">  a &lt;- as.numeric(a)</span><br><span class="line">  b &lt;- as.numeric(b)</span><br><span class="line"></span><br><span class="line">  if (length(a) &gt; 1) warning(&quot;Only first element of a used&quot;)</span><br><span class="line">  if (length(b) &gt; 1) warning(&quot;Only first element of b used&quot;)</span><br><span class="line"></span><br><span class="line">  add_(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To coerce objects at the C level, use <code>PROTECT(new = coerceVector(old, SEXPTYPE))</code>. This will return an error if the <code>SEXP</code> can not be converted to the desired type.</p>
<p>To check if an object is of a specified type, you can use <code>TYPEOF</code>, which returns a <code>SEXPTYPE</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">is_numeric &lt;- cfunction(c(&quot;x&quot; = &quot;ANY&quot;), &quot;</span><br><span class="line">  return ScalarLogical(TYPEOF(x) == REALSXP);</span><br><span class="line">&quot;)</span><br><span class="line">is_numeric(7)</span><br><span class="line">is_numeric(&quot;a&quot;)</span><br></pre></td></tr></table></figure>
<p>There are also a number of helper functions which return 0 for FALSE and 1 for TRUE:</p>
<ul>
<li>For atomic vectors: <code>isInteger()</code>, <code>isReal()</code>, <code>isComplex()</code>, <code>isLogical()</code>,  <code>isString()</code>.</li>
<li>For combinations of atomic vectors: <code>isNumeric()</code> (integer, logical, real),  <code>isNumber()</code> (integer, logical, real, complex), <code>isVectorAtomic()</code>  (logical, integer, numeric, complex, string, raw).</li>
<li>For matrices (<code>isMatrix()</code>) and arrays (<code>isArray()</code>).</li>
<li>For more esoteric objects: <code>isEnvironment()</code>, <code>isExpression()</code>, <code>isList()</code> (a pair list), <code>isNewList()</code> (a list), <code>isSymbol()</code>, <code>isNull()</code>, <code>isObject()</code> (S4 objects), <code>isVector()</code> (atomic vectors, lists, expressions).</li>
</ul>
<p>Note that some of these functions behave differently to similarly named R functions with similar names. For example <code>isVector()</code> is true for atomic vectors, lists, and expressions, where <code>is.vector()</code> returns <code>TRUE</code> only if its input has no attributes apart from names.</p>
<h2 id="Finding-the-C-source-code-for-a-function"><a href="#Finding-the-C-source-code-for-a-function" class="headerlink" title="Finding the C source code for a function"></a><a href="id=&quot;c-find-source&quot;">Finding the C source code for a function</a></h2><p>In the base package, R doesn’t use <code>.Call()</code>. Instead, it uses two special functions: <code>.Internal()</code> and <code>.Primitive()</code>. Finding the source code for these functions is an arduous task: you first need to look for their C function name in <code>src/main/names.c</code> and then search the R source code. <code>pryr::show_c_source()</code> automates this task using GitHub code search:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tabulate</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pryr::show_c_source(.Internal(tabulate(bin, nbins)))</span><br><span class="line">#&gt; tabulate is implemented by do_tabulate with op = 0</span><br></pre></td></tr></table></figure>
<p>This reveals the following C source code (slightly edited for clarity):</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SEXP attribute_hidden <span class="title">do_tabulate</span><span class="params">(SEXP call, SEXP op, SEXP args,</span><br><span class="line">                                  SEXP rho)</span> </span>&#123;</span><br><span class="line">  checkArity(op, args);</span><br><span class="line">  SEXP in = CAR(args), nbin = CADR(args);</span><br><span class="line">  <span class="keyword">if</span> (TYPEOF(in) != INTSXP)  error(<span class="string">"invalid input"</span>);</span><br><span class="line"></span><br><span class="line">  R_xlen_t n = XLENGTH(in);</span><br><span class="line">  <span class="comment">/* <span class="doctag">FIXME:</span> could in principle be a long vector */</span></span><br><span class="line">  <span class="keyword">int</span> nb = asInteger(nbin);</span><br><span class="line">  <span class="keyword">if</span> (nb == NA_INTEGER || nb &lt; <span class="number">0</span>)</span><br><span class="line">    error(_(<span class="string">"invalid '%s' argument"</span>), <span class="string">"nbin"</span>);</span><br><span class="line"></span><br><span class="line">  SEXP ans = allocVector(INTSXP, nb);</span><br><span class="line">  <span class="keyword">int</span> *x = INTEGER(in), *y = INTEGER(ans);</span><br><span class="line">  <span class="built_in">memset</span>(y, <span class="number">0</span>, nb * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">for</span>(R_xlen_t i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x[i] != NA_INTEGER &amp;&amp; x[i] &gt; <span class="number">0</span> &amp;&amp; x[i] &lt;= nb) &#123;</span><br><span class="line">      y[x[i] - <span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Internal and primitive functions have a somewhat different interface than <code>.Call()</code> functions. They always have four arguments:</p>
<ul>
<li><code>SEXP call</code>: the complete call to the function. <code>CAR(call)</code> gives  the name of the function (as a symbol); <code>CDR(call)</code> gives the arguments.</li>
<li><code>SEXP op</code>: an “offset pointer”. This is used when multiple R functions use the  same C function. For example <code>do_logic()</code> implements <code>&amp;</code>, <code>|</code>, and <code>!</code>.  <code>show_c_source()</code> prints this out for you.</li>
<li><code>SEXP args</code>: a pairlist containing the unevaluated arguments to the function.</li>
<li><code>SEXP rho</code>: the environment in which the call was executed.</li>
</ul>
<p>This gives internal functions an incredible amount of flexibility as to how and when the arguments are evaluated. For example, internal S3 generics call <code>DispatchOrEval()</code> which either calls the appropriate S3 method or evaluates all the arguments in place. This flexibility come at a price, because it makes the code harder to understand. However, evaluating the arguments is usually the first step and the rest of the function is straightforward.</p>
<p>The following code shows <code>do_tabulate()</code> converted into standard a <code>.Call()</code> interface:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tabulate2 &lt;- cfunction(c(bin = &quot;SEXP&quot;, nbins = &quot;SEXP&quot;), &apos;</span><br><span class="line">  if (TYPEOF(bin) != INTSXP)  error(&quot;invalid input&quot;);</span><br><span class="line"></span><br><span class="line">  R_xlen_t n = XLENGTH(bin);</span><br><span class="line">  /* FIXME: could in principle be a long vector */</span><br><span class="line">  int nb = asInteger(nbins);</span><br><span class="line">  if (nb == NA_INTEGER || nb &lt; 0)</span><br><span class="line">    error(&quot;invalid \&apos;%s\&apos; argument&quot;, &quot;nbin&quot;);</span><br><span class="line"></span><br><span class="line">  SEXP ans = allocVector(INTSXP, nb);</span><br><span class="line">  int *x = INTEGER(bin), *y = INTEGER(ans);</span><br><span class="line">  memset(y, 0, nb * sizeof(int));</span><br><span class="line">  for(R_xlen_t i = 0 ; i &lt; n ; i++) &#123;</span><br><span class="line">    if (x[i] != NA_INTEGER &amp;&amp; x[i] &gt; 0 &amp;&amp; x[i] &lt;= nb) &#123;</span><br><span class="line">      y[x[i] - 1]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return ans;</span><br><span class="line">&apos;)</span><br><span class="line">tabulate2(c(1L, 1L, 1L, 2L, 2L), 3)</span><br></pre></td></tr></table></figure>
<p>To get this to compile, I also removed the call to <code>_()</code> which is an internal R function used to translate error messages between different languages.</p>
<p>The final version below moves more of the coercion logic into an accompanying R function, and does some minor restructuring to make the code a little easier to understand. I also added a <code>PROTECT()</code>; this is probably missing in the original because the author knew that it would be safe.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">tabulate_ &lt;- cfunction(c(bin = &quot;SEXP&quot;, nbins = &quot;SEXP&quot;), &apos;</span><br><span class="line">  int nb = asInteger(nbins);</span><br><span class="line"></span><br><span class="line">  // Allocate vector for output - assumes that there are</span><br><span class="line">  // less than 2^32 bins, and that each bin has less than</span><br><span class="line">  // 2^32 elements in it.</span><br><span class="line">  SEXP out = PROTECT(allocVector(INTSXP, nb));</span><br><span class="line">  int *pbin = INTEGER(bin), *pout = INTEGER(out);</span><br><span class="line">  memset(pout, 0, nb * sizeof(int));</span><br><span class="line"></span><br><span class="line">  R_xlen_t n = xlength(bin);</span><br><span class="line">  for(R_xlen_t i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    int val = pbin[i];</span><br><span class="line">    if (val != NA_INTEGER &amp;&amp; val &gt; 0 &amp;&amp; val &lt;= nb) &#123;</span><br><span class="line">      pout[val - 1]++; // C is zero-indexed</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  UNPROTECT(1);</span><br><span class="line"></span><br><span class="line">  return out;</span><br><span class="line">&apos;)</span><br><span class="line"></span><br><span class="line">tabulate3 &lt;- function(bin, nbins) &#123;</span><br><span class="line">  bin &lt;- as.integer(bin)</span><br><span class="line">  if (length(nbins) != 1 || nbins &lt;= 0 || is.na(nbins)) &#123;</span><br><span class="line">    stop(&quot;nbins must be a positive integer&quot;, call. = FALSE)</span><br><span class="line">  &#125;</span><br><span class="line">  tabulate_(bin, nbins)</span><br><span class="line">&#125;</span><br><span class="line">tabulate3(c(1, 1, 1, 2, 2), 3)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谢益辉-five]]></title>
      <url>http://yoursite.com/2016/08/06/r-ninjia-5/</url>
      <content type="html"><![CDATA[<p>本系列来源于谢益辉的github. <a id="more"></a></p>
<h1 id="编写R包"><a href="#编写R包" class="headerlink" title="编写R包"></a>编写R包</h1><p>我们不介绍官方的编写方法，因为它需要太多的人力。我们的观点是能自动化的全都自动化（凡是需要记忆的都是将来出错的隐患），本章基于一个范例R包<strong>rmimi</strong>：<code>https://github.com/yihui/rmini</code>。尽管我们不推崇官方的办法，但还是需要说明一下，官方手册是“<a href="http://cran.r-project.org/doc/manuals/R-exts.html" target="_blank" rel="external">Writing R Extensions</a>，它涵盖了所有编写R包的细节和规则，忍者可能需要时不时参考一下，但通常不需要通读。继续阅读之前，请用GIT将<strong>rmini</strong>包克隆到本地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/yihui/rmini.git</span><br></pre></td></tr></table></figure>
<p>以下内容用<code>http://cos.name/2011/05/write-r-packages-like-a-ninja/</code>填充。</p>
<p>以下内容来自统计之都：（开发R程序包之忍者篇）</p>
<hr>
<p>作为一个伪程序员，我在做与代码有关的事情时，总是抱以一个念头，即“简化手工劳动到极致”。在这篇文章里，我介绍一下目前我认为最简化的开发R包的流程。本站作者胡荣兴曾经在09年写过一篇开发R包的文章<a href="http://cos.name/2009/02/create-r-packages-under-windows/" target="_blank" rel="external">“在Windows中创建R的包的步骤”</a>，其中小部分内容随着R本身的更新已经过时，该文面向Windows，而且介绍的都是一些正统方法，这里我介绍一条“忍者”之路，希望对大家开发R程序包有所帮助。这篇文章本来是去年年底打算写的，时至今日第四届中国R语言会议正在人民大学轰轰隆隆召开，索性把它写完，算是一份不到场的报告吧。</p>
<p>在我看来，R的扩展性主要体现在R包中，利用附加包的形式，我们可以把一些常规的、模式化的工作打包起来供日常使用，在R包中我们还可以为函数编写文档和说明，这样可以避免将来忘记一个函数是做什么的以及怎么用的（忘记了就查帮助，<code>?function.name</code>），文档是程序的重要组成部分，我个人常常认为写文档的难度不亚于写代码；此外，R包还体现了R的另一点扩展性，即它能融合其它底层语言，典型的就是C语言、C++和Fortran，但一般用户可能用不到这些功能，下文仅简要介绍一下。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>对Linux和Mac用户来说，只要装好了R，开发R包的工具就已经具备，可跳过本节。Windows用户除了安装R之外，还需要<a href="http://www.murdoch-sutherland.com/Rtools/" target="_blank" rel="external">Rtools</a>和一套LaTeX程序，典型的如<a href="http://www.miktex.org/" target="_blank" rel="external">MikTeX</a>。安装Rtools的过程中有一步需要注意，就是修改环境变量PATH，这个选项是需要选上的。对于R本身，还需要把它的bin路径放到环境变量PATH中去。说了半天，什么是PATH？这是个让明白的人抓狂、不明白的人迷茫的问题，不过找它比找拉登可能还是稍微容易一点：</p>
<p>“我的电脑”（右键）–&gt;“属性”–&gt;“高级”–&gt;“环境变量”–&gt;“系统变量”–&gt;PATH</p>
<p>这里我们可以看到一连串路径。为什么系统要有个PATH变量？原因就是为了能够脱离程序的绝对路径以命令行方式来运行程序，这样使得程序员不必担心你的程序装在什么位置。当你在命令行窗口（*nix系统下叫终端，Terminal）中敲入一个命令时，系统就会从这一系列的PATH路径中去找你敲的这个程序是否存在，如果存在就运行它。“开始”–&gt;“运行”（或者快捷键Win + R），输入cmd回车运行，就会打开一个命令行窗口。如果你从来没用过这玩意儿，那你肯定是Windows深度中毒者，不妨先玩玩dir、cd ..等命令。</p>
<p>前面说要把R的bin路径加入PATH，这个路径在哪儿？如果你记不住自己的R装在哪儿，没关系，打开R，输入R.home(‘bin’)就知道了。通常是类似于C:\Program Files\R\R-2.xx.x\bin\这样一个路径。说到这里，我还得绕道再说一句：安装R的时候尽量装在一个不带版本号的目录下，否则将来更新很麻烦，而且每次装新版本的R还得再修改PATH变量，因为bin路径变了。关于这一点，我只能说R core们都太严谨了，上次我在R-devel邮件列表里被一群人打了个落花流水，他们死活都不能接受把R的安装路径改成默认不带版本号的。</p>
<p>设置好R的路径之后，为了测试各种设置是否齐备，可以打开命令行窗口，输入一些常用命令看看能否执行：</p>
<blockquote>
<p>R –version<br>ls<br>gcc –version</p>
</blockquote>
<p>如果这些都没问题，就可以进入下一节了。这里敲R对命令行来说，就是看看PATH中那些路径里有没有一个路径下包含R.exe或者R.bat之类的可执行文件，这就是所谓的“脱离绝对路径运行程序”。由于*nix系统的程序管理方式和Windows不同（可执行文件通常统一放在/bin/或者/usr/bin/目录下），所以通常没有这些痛苦。</p>
<h1 id="R包结构"><a href="#R包结构" class="headerlink" title="R包结构"></a>R包结构</h1><p>写R包最好的参考莫过于R自身的手册<a href="https://cran.r-project.org/doc/manuals/R-exts.html" target="_blank" rel="external">“Writing R Extensions”</a>（下文简称R-exts）。在R中打开HTML帮助（<code>help.start()</code>），就可以看见这本手册，内容很长，不过大部分都是普通用户不必关心的。我的建议如下：对新手而言，必须要了解R包的结构，所以1.1.1节和1.1.3节必读，而整个第2节可能是将来需要反复参考的（除非你记性很好）；已经上路的用户可以接着看一些高级话题，如命名空间（1.6节）和底层语言的使用（第5节）等。</p>
<p>一个最简单的包结构如下（括号中为相应解释）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pkg (包的名字，请使用一个有意义的名字，不要照抄这里的pkg三个字母)</span><br><span class="line">|</span><br><span class="line">|--DESCRIPTION (描述文件，包括包名、版本号、标题、描述、依赖关系等)</span><br><span class="line">|--R (函数源文件)</span><br><span class="line">   |--function1.R</span><br><span class="line">   |--function2.R</span><br><span class="line">   |--<span class="keyword">...</span></span><br><span class="line">|--man (帮助文档)</span><br><span class="line">   |--function1.Rd</span><br><span class="line">   |--function2.Rd</span><br><span class="line">   |--<span class="keyword">...</span></span><br><span class="line">|--<span class="keyword">...</span></span><br></pre></td></tr></table></figure>
<p>DESCRIPTION文件是一个纯文本文件（没有扩展名，Windows用户可以用记事本或其它文本编辑器打开），其内容参考R-exts就明白了，注意只有几个字段是必须的，其它都可选。如果你的包依赖于别的包中的函数，那么可以在Depends一行中写上那些包的名字（逗号分隔）。如果这个包只需要引入（Imports）别的包中的函数，那么就在Imports中写那些包的名字。Depends和Imports有细微差别：前者将导致加载你的包时，依赖包也被明确加载进来，用户可以直接使用这些包中的函数；后者不会导致那些包被明确加载，只有你的包在调用那些函数，但那些函数对用户是不可见的（除非用户明确加载之）。这里涉及到命名空间问题，后文详述。</p>
<p>除了R和man文件夹之外，还有一些可能有用的文件夹，如demo下面可以放一些演示R代码，这样用户可以使用demo()函数调用这些演示，通常这是除了示例之外的最好的展示包功能的方式；data文件夹下可以放数据，这些数据通常是通过save()函数保存成*.rda文件放到这里；src文件夹下可以放其它语言的源代码，编译安装的时候这些代码会被编译为动态链接库文件（pkg.dll或pkg.so）；inst文件夹下的任何文件在安装包的时候都将被复制到包的根目录下，例如这里可以放NEWS文件（包更新的消息）或CHANGELOG文件，inst下通常还有一个重要的子文件夹就是doc，这里可以放一个Sweave文件（*.Rnw），编译安装包的时候这个文件会被Sweave编译生成LaTeX文件继而生成PDF文档，这也是关于一个包的很重要的介绍文档，称为Vignette。</p>
<p>对于心急的看官，到这里可以先忽略所有介绍，直接写一个DESCRIPTION文件外加一个R文件夹，底下放一个*.R脚本文件，里面包含一个函数，然后其实就可以安装使用了。但这种粗略的办法不是长久之计，如前面所说，文档很重要，提醒自己也方便他人。</p>
<h1 id="安装R包"><a href="#安装R包" class="headerlink" title="安装R包"></a>安装R包</h1><p>装包很简单，一句<code>R CMD INSTALL pkg</code>就可以。例如你的包文件夹路径为/a/b/c/pkg/，那么先在命令行窗口中切换到这个pkg的上层目录下，然后用前面的命令安装：</p>
<blockquote>
<p>cd /a/b/c/<br>R CMD INSTALL pkg</p>
</blockquote>
<p>这样就装好了，在R中可以通过library(pkg)加载进来使用。</p>
<h1 id="忍者神龟"><a href="#忍者神龟" class="headerlink" title="忍者神龟"></a>忍者神龟</h1><p>至此，似乎听起来很简单：写两个函数，扔在R文件夹下，然后R CMD INSTALL一下，完事。不写文档、觉得命名空间神马的最讨厌了的人现在的确可以退场了，接下来我们深入一些话题。</p>
<h2 id="R文档与roxygen2"><a href="#R文档与roxygen2" class="headerlink" title="R文档与roxygen2"></a>R文档与roxygen2</h2><p>R-exts手册第2.1节给了一个简单的文档示例，我们可以看到R文档的语法和LaTeX很像，都是一些宏命令，如\title{我是标题}或者\description{我是描述}。当然，这些玩意儿你都可以手写，如果要稍微偷懒一下，也可以用package.skeleton()或者prompt()等函数来辅助生成Rd文件，这些函数都可以为你生成一些空模板，你自己往里面填充内容。若你的包只有一两个函数，倒也无妨，轻松写写完事，要是你想维护30个函数，那你就会觉得这种做法完全是坑爹。坑爹之处不仅在于你要么手敲这些命令要么绕道用函数生成文档模板自己填充，更在于你得在man文件夹下维护R文件夹下的函数的文档！你每次更新R函数，都得战战兢兢记住了：还有man文件夹下的某个*.Rd文件也许需要更新。</p>
<p>这并不是什么新鲜问题，所有的程序开发都面临这样的问题，于是有人发明了Doxygen，大意是把文档融入到源文件中，通常采取的方式就是把文档写成一种特殊的注释，这样不会影响源文件的执行（因为注释会被忽略），同时也可以从注释中动态抽取文本生成文档（如HTML或LaTeX/PDF等），这个主意相当妙。开发程序的时候只需要在同一个文件内操作即可：举头望文档，低头思函数。</p>
<p>roxygen2是一个R包（它的前任是roxygen，但已经停止更新了），它实现了把特定注释“翻译”为R文档的工作，例如：</p>
<blockquote>
<p>##’ @author Yihui Xie<br>##’ @source \url{<a href="http://cos.name}" target="_blank" rel="external">http://cos.name}</a></p>
</blockquote>
<p>会被翻译为：</p>
<blockquote>
<p>\author{Yihui Xie}<br>\source{\url{<a href="http://cos.name}}" target="_blank" rel="external">http://cos.name}}</a></p>
</blockquote>
<p>你可能会说，嗨，介有嘛啊！！注意这些注释是直接写在函数定义上方的，当然，这么说你还是不信。所以下面必须介绍另一门暗器，也就是传说中的编辑器Emacs。</p>
<h2 id="roxygen与Emacs"><a href="#roxygen与Emacs" class="headerlink" title="roxygen与Emacs"></a>roxygen与Emacs</h2><p>如果你得手敲那些##’ 注释，那我当然不会写这篇文章。曾经有两个软件我觉得我永远都学不会，一个是Emacs，另一个是Photoshop；如今只剩下一个（我也不打算学了）。Emacs是我装了卸、卸了装超过10次的软件，终于在第11次搞明白了六指琴魔是怎么个练法。如果你也是新手，那么建议安装<a href="http://vgoulet.act.ulaval.ca/en/emacs/" target="_blank" rel="external">Vincent Goulet维护的修改过的Emacs</a>。修改之一就在于直接加入了ESS（Emacs Speaks Statistics），ESS是Emacs的一个插件，它提供了编辑器与其它统计软件（如SAS、S-Plus、R）的交互，例如可以通过快捷键把R代码发送到R里执行。</p>
<p>ESS本身我觉得也没啥，但ESS加上了roxygen的支持之后我就觉得这是个忍者工具了。在Emacs中，光标放在R函数上，快捷键C-c C-o一按，就如同发出一把暗器，一个roxygen注释模板立刻生成了。这一点让开发R包不知道快了多少倍。也许有读者知道我在维护一个叫animation的R包，说实话，曾经有一段时间我实在不想维护了，因为写函数写文档太麻烦，直到打通了Emacs和roxygen关。</p>
<p>好嘛！听起来好像不错，咋用？装好Emacs之后，先去找个<a href="http://home.uchicago.edu/~gan/file/emacs.pdf" target="_blank" rel="external">参考卡片</a>，练习两天一些基本操作（打开文件、保存文件之类的），熟悉一些基本概念（有些相当坑爹，例如剪切不叫剪切，叫杀，粘贴不叫粘贴，叫拉），当然首先得知道C代表Ctrl键、M代表Alt键。再找个<a href="http://ess.r-project.org/refcard.pdf" target="_blank" rel="external">ESS参考卡片</a>，看看基本的代码发送操作。总而言之，常用的快捷键不多，不需要真的变成六指琴魔。要是陷入了快捷键连锁陷阱（自己不知道按到哪里去了），就以万能的C-g退出再来。</p>
<p>假设你已经装好了Emacs，现在可以任意打开一个R文件：C-x C-f，输入文件名，回车，如果存在则会打开它，如果不存在，则会新建一个文件，注意作为一个（伪）程序员，你必须永远牢记：不要老老实实打字！能用Tab键的时候尽量用，它在很多情况下都能自动补全（如路径、对象名称等）。这里的文件名应该以.R或.r为后缀，这样Emacs才知道应该用ESS来处理它，例如abc.R。现在在编辑器界面内输入一个任意函数，如</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stupid_f = <span class="keyword">function</span>(a, b)&#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后把光标放在stupid_f这一行上，按C-c C-o，你就会发现你的文件变成了类似这样一个东西（根据ESS不同的配置，以下结果也许不完全相同）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##' title...</span></span><br><span class="line"><span class="comment">##'</span></span><br><span class="line"><span class="comment">##' description...</span></span><br><span class="line"><span class="comment">##'</span></span><br><span class="line"><span class="comment">##' details here</span></span><br><span class="line"><span class="comment">##' @param a</span></span><br><span class="line"><span class="comment">##' @param b</span></span><br><span class="line"><span class="comment">##' @return</span></span><br><span class="line"><span class="comment">##' @author Yihui Xie &lt;\url&#123;http://yihui.name&#125;&gt;</span></span><br><span class="line"><span class="comment">##' @examples</span></span><br><span class="line">stupid_f = <span class="keyword">function</span>(a, b)&#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接下来你的任务就是把该填的文档填上。roxygen2的常规是，第一段是标题（将来翻译为\title{}），段落之间以空行分开，第二段是描述（\description{}），然后接着是这个函数的详细描述（\details{}），它可以是若干段落，你愿意写多长就写多长。剩下的@字段就不必多解释了，参数、返回值、作者、示例等，我们可以通过M-x customize-group，回车，ess，回车，来配置ESS中这些roxygen的默认字段。一个自然而然的问题就是，哪些字段是可用的？参见roxygen2包的帮助?rd_roclet。为了完全理解Rd文档和roxygen2字段的对应关系，你最好还是读一下手册R-exts和这两个帮助页面。注意ESS有很多方便的功能，比如你在roxygen注释之后回车，下一行会自动以##’ 开头；在任意一个@标签后按M-q则可以把该段落自动折叠为短行，使得文本更整齐（这是我经常用的一个功能）；如果函数中有新增加或者减少参数，那么只需要再次C-c C-o就可以自动更新上面的注释了，新增加的参数会自动加上新的@param，减少的参数会被自动删掉注释。</p>
<p>roxygen2还实现了一些自动功能，比较重要的就是对命名空间文件NAMESPACE和描述文件DESCRIPTION的自动更新，这些我们第五节再说。先说如何从roxygen注释翻译到Rd文档，很简单：如果一个包已经按第二节的结构写好（不需要有man文件夹），函数和相应的roxygen注释都已经存在，那么用函数roxygenize()就可以把这样一个初级包翻译为一个完整R包了：</p>
<blockquote>
<p>setwd(‘/a/b/c/‘)  # 先把工作目录切换到pkg之上<br>library(roxygen2)<br>roxygenize(‘pkg’)</p>
</blockquote>
<p>默认情况下新生成的R文档以及更新的NAMESPACE和DESCRIPTION都生成在包的目录下，现在pkg就是一个完整的R包，包含自动生成的man文件夹，可以直接用R CMD INSTALL pkg安装。</p>
<p><del>天有不测风云，事情到这里还没完全结束，roxygen包也有些坑爹的地方，它本来是2008年Google编程夏令营的产物，但作者自夏令营结束之后投入维护的精力似乎就越来越少，导致很多问题都一直没有修正。我在使用过程中实在忍不了，于是动手写了个基于roxygen之上的包Rd2roxygen</del>（更新：roxygen包现在已经被roxygen2取代了，后者在更新维护中）</p>
<h2 id="后悔药包Rd2roxygen"><a href="#后悔药包Rd2roxygen" class="headerlink" title="后悔药包Rd2roxygen"></a>后悔药包Rd2roxygen</h2><p>后悔药的意思是，有人看见roxygen是如此的方便，大为后悔，因为维护原始R包太费精力了，可是爹已经被坑了，已经按照R-exts的要求老老实实写了那一大把*.Rd文件，肿么办？Rd2roxygen包诞生的目的就是为了解决这个问题：roxygen是把注释翻译为Rd，而这个包倒过来，把Rd重新翻译回注释！给你后悔药吃。如果你是后悔的人中的一员，不妨参考这个包中的Rd2roxygen()函数；如果是新手，那么这个包的rab()函数可能是roxygen中的roxygenize()函数的一个很好的替代，其中我比较自豪的一个功能是它能自动整理示例代码，很多R包的示例代码都不够整齐（无空格无缩进等）。详情参见帮助文件及其介绍文档（Vignette）。简言之，现在我们使用：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">library</span>(Rd2roxygen)</span><br><span class="line">rab(<span class="string">'pkg'</span>)</span><br><span class="line"><span class="comment">## 如果要直接安装，那么rab('pkg', install=TRUE)</span></span><br></pre></td></tr></table></figure>
<p>所有工具至此大概介绍完毕。如果你还没昏死过去，请接着读第五节。</p>
<h1 id="九霄云外"><a href="#九霄云外" class="headerlink" title="九霄云外"></a>九霄云外</h1><p>上面的东西刚上手时可能是有点晕，熟悉之后写包就立刻风驰电掣了。下面我们再介绍几个略微高级的概念。</p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间（NAMESPACE）是R包管理包内对象的一个途径，它可以控制哪些R对象是对用户可见的，哪些对象是从别的包导入（import），哪些对象从本包导出（export）。为什么要有这么个玩意儿存在？主要是为了更好管理你的一堆对象。写R包时，有时候可能会遇到某些函数只是为了另外的函数的代码更短而从中抽象、独立出来的，这些小函数仅仅供你自己使用，对用户没什么帮助，他们不需要看见这些函数，这样你就可以在包的根目录下创建一个NAMESPACE文件，里面写上export(函数名)来导出那些需要对用户可见的函数。自R 2.14.0开始，命名空间是R包的强制组成部分，所有的包必须有命名空间，如果没有的话，R会自动创建。</p>
<p>前面我们也提到DESCRIPTION文件中有Imports一栏，这里设置的包通常是你只需要其部分功能的包，例如我只想在我的包中使用foo包中的bar()函数，那么Imports中就需要填foo，而NAMESPACE中则需要写importFrom(foo, bar)，在自己的包的源代码中则可以直接调用bar()函数，R会从NAMESPACE看出这个bar()对象是从哪里来的。</p>
<p>roxygen注释对这一类命名空间有一系列标签，如一个函数的文档中若标记了##’ @export，那么这个函数将来就会出现在命名空间文件中（被导出），若写了##’ @importFrom foo bar，那么foo包的bar对象也会被写在命名空间中。这些内容参见R-exts的1.6节和roxygen2的?export帮助。</p>
<h2 id="介绍文档（Vignette）"><a href="#介绍文档（Vignette）" class="headerlink" title="介绍文档（Vignette）"></a>介绍文档（Vignette）</h2><p>前面我们提到了inst/doc/目录，下面可以放一个Sweave文件，在R CMD INSTALL过程中这个Sweave文件会被执行并生成PDF文档，若Sweave文件中有一句注释：</p>
<blockquote>
<p>%\VignetteIndexEntry{An Introduction to XXX}</p>
</blockquote>
<p>那么这句话将来会出现在HTML帮助页面中（点开链接“Overview of user guides and package vignettes”），例如Rd2roxygen包或者formatR包的帮助页面中就有介绍文档的链接。</p>
<h2 id="其它语言"><a href="#其它语言" class="headerlink" title="其它语言"></a>其它语言</h2><p>在src目录下我们可以放置一些其它语言的源代码，里面可能包含一些函数，这些函数在被编译之后，（以C语言为例）可以在R代码中以.C(‘routine_name’, …, package = ‘pkg’)的形式调用，但要注意，如果需要用这个功能，在R目录下需要有一个zzz.R文件（这个特殊文件是用来在加载包之前加载运行的代码），里面写上：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.onLoad &lt;- <span class="keyword">function</span>(lib, pkg) &#123;</span><br><span class="line">    library.dynam(<span class="string">"pkg_name"</span>, pkg, lib)  <span class="comment"># pkg_name是你的包的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些东西我并不在行，只介绍到这里，详细内容还请深挖R-exts。另注意楼下Rtist的评论。</p>
<h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>等你的包写好之后，还不能立刻发布，因为还有很重要的一步要做，就是看它是否能通过R CMD check的检查，这是你的包能发布到CRAN上的前提。在命令行界面中输入（请确保pkg文件夹是一个完整的R包，即：如果你用roxygen2，那么这里要检查的是运行过roxygen2之后的产物）：</p>
<blockquote>
<p>R CMD check pkg</p>
</blockquote>
<p>R就会开始检查这个包是否有语法错误以及是否符合规范。或者如果你用Rd2roxygen包的话，也可以在R里面调用：</p>
<blockquote>
<p>library(Rd2roxgyen)<br>rab(‘pkg’, check = TRUE)  # 确保pkg文件夹在当前工作目录下：getwd()</p>
</blockquote>
<p>检查过程会告诉你详细的日志信息，如果有错，你立刻就能知道。这里每个函数的例子（如果有的话）都会被运行，如果例子代码有错，这里也会报错，所以这个过程也是一个很好的检查自己的示例代码能否正确运行的测试。如果没有任何错误，那么就可以向CRAN提交了。提交的内容是一个压缩包，名为pkg_x.x-x.tar.gz，它是通过R CMD build pkg生成的。提交方式是通过FTP，参见<a href="https://cran.r-project.org/" target="_blank" rel="external">CRAN首页说明</a>。注意上传完之后需要向CRAN管理员发一封邮件，通知他们你提交了一个包，以后每次更新时的流程也一样：FTP上传+邮件通知。目前Kurt Hornik管理Linux包的编译，Uwe Ligges负责Windows包的编译，都是人工管理，要是碰上Kurt度假去了，你就得等着了（概率很小，不过我碰到过）。</p>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>现在CRAN上的附加包数目已经超过三千，充分体现出R的良好扩展性和社区合作，要不然不会有这么多人去写R包（尽管这三千号包肯定是良莠不齐）。我个人是07年底从动画包animation开始写起的（想当年，R包里面还有微软的CHM帮助）……过了几年又陆续写了自动整理R代码的formatR包、把Rd转化为roxygen注释的Rd2roxygen包、把R图形转化为Flash动画的R2SWF包（与邱怡轩合作）、纯粹为了搞笑好玩的fun包（未发布）、为我的《现代统计图形》书稿配备的MSG包、用图形界面调用WinBUGS或者OpenBUGS的iBUGS包等。用麦兜的歌唱就是：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大包再来两笼</span><br><span class="line">大包再来两笼</span><br><span class="line">大包再来两笼不怕撑</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>扯远了。</p>
<p>写了这么些包，有些感受。首先，写代码有两样一般人不能理解的困难，一样前面已说，就是写文档，你得解释清楚参数的含义、得给出有用的示例代码、写演示写介绍文档等等，工作量其实很大；另外一样就是对象命名，我认为从对象的命名可以看出一个程序员的成熟程度，好的程序员，给的函数名既精炼又直观，这一点上必须佩服R core团队，要是我写几千个函数，光是想名字都能把脑袋想爆了，这里顺便提一下我推荐的命名方式，要么用驼峰（someFunction），要么用下划线（some_function），尽量不要用点（some.function），因为点在R语言中有一层特殊含义（S3方法的类匹配），这也是我对animation包比较后悔的一点。其次，你最好学会一样版本控制工具，如SVN或者GIT，不仅是管理包，它在管理任何文本文件时都非常有用，也利于多人合作，我现在倾向于GIT，主要是因为一个好网站的存在（GitHub），我的所有R包都已经从原来以SVN为基础的R-Forge上搬家到了GitHub，可以在那里参考我的包是怎么写的；不会版本控制工具的人的一个典型特征就是，电脑里存在一系列这样的文件：领导汇报20100101.doc、领导汇报20100102.doc……，版本控制工具可以让你很方便回到文件的历史状态，也方便多人合作（例如将A的更新和B的更新自动合并）。最后，写包不仅是对自己工作的一个不断总结，不至于做完一件事就永远尘封之，而且也是很好的自我宣传途径，你在简历上写得天花乱坠，可能不如以一件作品更能深入人心。</p>
<p>又及，写完一个包之后，你可能就不会再对别人的包问：这是哪个狗日的写的文档？</p>
<p>又又及，也许你就或多或少能理解自由软件为嘛还没死掉。</p>
<hr>
<p>以下为衔接内容。</p>
<h2 id="工具链"><a href="#工具链" class="headerlink" title="工具链"></a>工具链</h2><p>Windows装Rtools</p>
<h2 id="R包结构-1"><a href="#R包结构-1" class="headerlink" title="R包结构"></a>R包结构</h2><p>一个最简单的包结构如下（括号中为相应解释）：</p>
<pre><code>pkg (包的名字，请使用一个有意义的名字，不要照抄这里的pkg三个字母)
|
|--DESCRIPTION (描述文件，包括包名、版本号、标题、描述、依赖关系等)
|--R (函数源文件)
   |--function1.R
   |--function2.R
   |--...
|--man (帮助文档)
   |--function1.Rd
   |--function2.Rd
   |--...
|--...
</code></pre><p>DESCRIPTION文件描述一个包的信息（<code>https://github.com/yihui/rmini/blob/master/DESCRIPTION</code>），包括：</p>
<ul>
<li>包的名字</li>
<li>版本（介绍语义版本命名法，主要.次要.补丁：<code>http://semver.org/</code>，让版本号变得有意义，除非你是Knuth，用pi做版本号）</li>
<li>日期</li>
<li>标题</li>
<li>描述（详细说明）</li>
<li>作者（可以多人）</li>
<li>维护者（一个人，可以不同于作者，必须要有邮箱）</li>
<li>依赖关系<ul>
<li>Depends 加载这个包会依赖加载进来的包</li>
<li>Imports 只是导入命名空间，不直接加载（被导入的包中的函数对用户不直接可见）</li>
<li>Suggests 推荐安装的包，通常不涉及到本包的核心功能，但如果有这些包的话，本包会更强大</li>
</ul>
</li>
<li>许可证（发布到CRAN的包必须用开源许可证，不限于GPL）</li>
<li>网址</li>
<li>Bug报告地址</li>
<li>R源文件列表（指定用哪些R代码来创建本包）</li>
</ul>
<h2 id="重要的命令"><a href="#重要的命令" class="headerlink" title="重要的命令"></a>重要的命令</h2><p><code>R CMD build</code></p>
<p><code>R CMD INSTALL</code></p>
<h2 id="roxygen"><a href="#roxygen" class="headerlink" title="roxygen"></a>roxygen</h2><p>Roxygen注释可以通过<strong>roxygen2</strong>包翻译为官方Rd文档文件，注释以一个或多个井号开头，如<code>#&#39;</code>或<code>##&#39;</code>。主要的用法参见<code>https://github.com/yihui/rmini/blob/master/R/roxygen.R</code>，说明如下：</p>
<p>第一段为标题（对应Rd中的<code>\title{}</code>），第二段为描述（对应<code>\description{}</code>），接下来的是细节描述（<code>\details{}</code>）；然后可以用<code>@</code>开头的标签来写一些细节文档，例如<code>@param</code>写函数参数的说明，<code>@return</code>说明本函数的返回值，<code>@author</code>写作者，<code>@examples</code>提供示例代码。一些高级标签下面介绍。用roxygen注释写好文档之后在R里面使用<strong>roxygen2</strong>包翻译这些注释为Rd文档：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(roxygen2)</span><br><span class="line">roxygenize(<span class="string">'rmini'</span>) <span class="comment"># 保证rmini文件夹在当前目录下</span></span><br></pre></td></tr></table></figure>
<p>现在检查man文件夹，里面多了一些<code>*.Rd</code>文件，就是官方的Rd文档文件。</p>
<p>用roxygen而不直接写Rd的最大好处在于文档和源代码在同一个地方，开发程序的时候只需要在同一个文件内操作即可：举头望文档，低头思函数。实际上这是文学化编程（Literate Programming）的思想。</p>
<h2 id="其它子目录"><a href="#其它子目录" class="headerlink" title="其它子目录"></a>其它子目录</h2><p>data文件夹放R数据，扩展名为<code>rda</code>，通常可以用<code>save()</code>函数生成，例如</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris3 = iris</span><br><span class="line">save(iris3, file = <span class="string">'iris3.rda'</span>)</span><br></pre></td></tr></table></figure>
<p>然后把<code>iris3.rda</code>文件放到<code>data</code>文件夹底下。对每一个数据，都必须有相应的Rd文档，它可以通过roxygen生成，参见<code>https://github.com/yihui/rmini/blob/master/R/data.R</code>。其中关键点有：</p>
<ul>
<li><code>@docType</code>必须为<code>data</code></li>
<li>必须有<code>@name</code>，因为roxygen不能从底下的R代码中推导出这份文档的名字（对普通函数文档来说，可以从赋值符号的左边推导出来）</li>
<li>R代码不能为空（否则roxygen会跳过这段文档），通常可以用<code>NULL</code>填充</li>
<li>其它标签可选，例如<code>@format</code>说明这份数据的格式，<code>@source</code>说明它的来源</li>
</ul>
<p>demo文件夹里可以放一些演示，这些演示文件将来可以用<code>demo()</code>函数来调用。一个演示文件就是一个R代码文件，注意所有的演示名称都必须写入一个<code>00Index</code>文件，里面同时也要写演示的标题，参见<code>https://github.com/yihui/rmini/tree/master/demo</code>。<strong>rmini</strong>包中有一个演示叫<code>mini_fun.R</code>，那么安装好这个包之后我们可以以这样的方式观看这个演示：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo(<span class="string">'mini_fun'</span>, package = <span class="string">'rmini'</span>)</span><br></pre></td></tr></table></figure>
<p>inst文件夹下的所有文件都会被原封不动复制到安装包的路径下，这个文件夹下可以放任意文件，但有一个例外是<code>doc</code>，它用来放R包的手册（Vignette），后文详述。</p>
<h2 id="命名空间-1"><a href="#命名空间-1" class="headerlink" title="命名空间"></a>命名空间</h2><p>命名空间（NAMESPACE）是R包管理包内对象的一个途径，它可以控制哪些R对象是对用户可见的，哪些对象是从别的包导入（import），哪些对象从本包导出（export）。为什么要有这么个玩意儿存在？主要是为了更好管理你的一堆对象。写R包时，有时候可能会遇到某些函数只是为了另外的函数的代码更短而从中抽象、独立出来的，这些小函数仅仅供你自己使用，对用户没什么帮助，他们不需要看见这些函数，这样你就可以在包的根目录下创建一个NAMESPACE文件，里面写上<code>export(函数名)</code>来导出那些需要对用户可见的函数。自R 2.14.0开始，命名空间是R包的强制组成部分，所有的包必须有命名空间，如果没有的话，R会自动创建。</p>
<p>前面我们也提到DESCRIPTION文件中有Imports一栏，这里设置的包通常是你只需要其部分功能的包，例如我只想在我的包中使用<strong>foo</strong>包中的<code>bar()</code>函数，那么Imports中就需要填<code>foo</code>，而NAMESPACE中则需要写<code>importFrom(foo, bar)</code>，在自己的包的源代码中则可以直接调用<code>bar()</code>函数，R会从NAMESPACE看出这个<code>bar()</code>对象是从哪里来的。</p>
<p>roxygen注释对这一类命名空间有一系列标签，如一个函数的文档中若标记了<code>#&#39; @export</code>，那么这个函数将来就会出现在命名空间文件中（被导出），若写了<code>#&#39; @importFrom foo bar</code>，那么<strong>foo</strong>包的<code>bar</code>对象也会被写在命名空间中。这些内容参见官方手册的1.6节和roxygen2的<code>?export</code>帮助。</p>
<p>仍然以<strong>rmini</strong>包为例（<code>https://github.com/yihui/rmini/blob/master/R/roxygen.R</code>），对<code>split_filename()</code>函数我们使用了<code>@importFrom</code>，它将<strong>tools</strong>包中的两个函数<code>file_ext()</code>和<code>file_path_sans_ext()</code>导入到<strong>rmini</strong>包，这样我们就可以在包内明目张胆使用这两个函数了，而不必<code>library(tools)</code>再用；对于懒人来说，可以用<code>@import</code>导入一个包中所有可见对象，但我们不提倡这种铺张浪费的导入方式，而是用什么函数就导入什么函数。</p>
<p>最后，我们可以看见包中的<code>add_one()</code>函数没有被导出，但在<strong>rmini</strong>包的内部它是可以被随意调用的，而用户<code>library(rmini)</code>之后看不到它，此时我们可以用暗黑的三冒号访问它，如<code>rmini:::add_one</code>，但通常我们也不推荐这种方式，因为一个对象不导出通常是有其理由的，对本作者而言，这些未导出的对象可能有被更名甚至删除的危险，所以写包的时候尽量不要依赖别人未导出的对象。</p>
<h2 id="S3泛型函数"><a href="#S3泛型函数" class="headerlink" title="S3泛型函数"></a>S3泛型函数</h2><p>S3泛型函数的核心思想是基于对象的类去匹配函数，示例参见<code>https://github.com/yihui/rmini/blob/master/R/S3.R</code>。S3函数可以用<code>UseMethod()</code>去定义，然后函数加<code>.类名</code>就是具体的子函数，例如<code>hello()</code>这个函数有两个子函数<code>hello.default()</code>和<code>hello.character()</code>，分别对应它的默认方法以及对字符对象应用的方法。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(rmini)</span><br><span class="line">hello(<span class="number">1</span>)</span><br><span class="line">hello(<span class="string">'a'</span>)</span><br><span class="line">hello(structure(<span class="number">1</span>, class = <span class="string">'world'</span>))</span><br></pre></td></tr></table></figure>
<p>对S3子函数，roxygen中可以用<code>@S3method 函数名 类名</code>来声明这是一个S3泛型函数，而不是一个普通的<code>*.*</code>函数，这一点非常重要，它告诉R一个形如<code>foo.bar</code>的函数到底该如何调用。同时这也引出一个编程规范的问题：如果不是S3函数，尽量不要在函数名中用点，比如可以以下划线代替（<code>foo_bar</code>），可惜R内部就存在这种混乱，如<code>package.skeleton()</code>等函数都只是普通函数。声明了<code>@S3method</code>的函数将来会在NAMESPACE文件中添加一项<code>S3method()</code>，R依据这个命名空间文件来决定带点的函数究竟是什么样的函数。</p>
<p>最后说一句，S3的意思是第3代S语言，S4是第4代，这里不介绍S4。</p>
<h2 id="嵌入其它语言"><a href="#嵌入其它语言" class="headerlink" title="嵌入其它语言"></a>嵌入其它语言</h2><p>R可以与其它语言沟通，常见的如C和Fortran，这里举一个C的例子（<code>https://github.com/yihui/rmini/tree/master/src</code>），其它语言的源代码都放在<code>src</code>文件夹底下。<code>reverse.c</code>是一个小白例子，它将一个数值向量中的元素倒序过来（R函数<code>rev()</code>可以干这事儿），这个c文件将来在<code>R CMD INSTALL</code>过程中会被编译成一个动态链接库，供R调用。</p>
<p>R函数<code>reverse()</code>（<code>https://github.com/yihui/rmini/blob/master/R/C.R</code>）中我们使用<code>.C()</code>调用前面提到的C函数。注意这里在调用之前我们必须告诉R加载编译好的动态链接库，所以我们使用<code>@useDynLib</code>标签，它会在NAMESPACE文件中生成相应的<code>useDynLib()</code>命令，当R包加载的时候，动态链接库也会被加载。</p>
<h2 id="手册"><a href="#手册" class="headerlink" title="手册"></a>手册</h2><p>R有自己独特的手册编写方法，手册源文档可以是一个Sweave文档（<code>*.Rnw</code>），放在<code>inst/doc/</code>目录下，Sweave是R代码和LaTeX的混合体。<strong>rmini</strong>包提供了一个示例（<code>https://github.com/yihui/rmini/tree/master/inst/doc</code>），R代码部分用Sweave语法，其它部分都是普通的LaTeX语法。</p>
<p>为了编制索引方便，R手册需要在注释中声明<code>% \VignetteIndexEntry{文档标题}</code>，这个标题将来会在R包的帮助文档中出现，例如打开<code>help.start()</code>，点到该包的帮助文档，里面会出现手册列表，手册的标题就会出现在那个列表里。</p>
<p>理论上来说，手册是最有用的学习资源，因为它就像一篇论文（有些R包的手册就是真的论文），相比起单个函数的帮助页面来说，手册的内容可以更丰富，加上Sweave的帮助，更是丰富了内容，同时也保证了代码的可执行性（因为手册都是动态编译出来的，里面的代码每次都要重复执行）。不过可惜，带有手册的包只是少数，Sweave本身也有各种缺陷，更多高级暗黑魔法参见<code>http://yihui.name/knitr/demo/vignette/</code>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谢益辉-four]]></title>
      <url>http://yoursite.com/2016/08/06/r-ninjia-4/</url>
      <content type="html"><![CDATA[<p>本系列来源于谢益辉的github. <a id="more"></a></p>
<h1 id="自动化报告"><a href="#自动化报告" class="headerlink" title="自动化报告"></a>自动化报告</h1><p>人类和计算机有各自擅长的东西，人擅长下指令，计算机擅长执行指令，而且对计算机来说，一个任务做一遍或是做一百遍可能只有时间上的区别，但一个人要是同一个任务重复做一百遍可能就抓狂了，而且容易出错。先跑个题，我想起来有个<a href="http://v.youku.com/v_show/id_XMjQyNjU3NjA0.html" target="_blank" rel="external">短片</a>叫《What is that》（那是什么），讲的是一对父子和一只麻雀的故事，网上一<a href="http://www.dfg.cn/gb/jtjy/qzp/56-ai.htm" target="_blank" rel="external">搜</a>就可以找到；当然，它的主题并不是关于人不能忍受重复劳动，我只是跑题而已。</p>
<p>另一方面，人还有最大的一个特征就是懒惰；懒没什么错，看怎么个懒法。有人纯粹是混日子的懒，有人是为了更高效率工作而走捷径。用R做自动化报告就是为了提高效率和保证结果可重复。</p>
<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>在R的世界里，凡是提到自动化报告，很多人就会想到Sweave，它已经诞生十几年了。它的主要设计思想来自于文学化编程（Literate Programming），这是Knuth大神提出来的一种编程范式，它与传统的结构化编程不同。结构化编程就是写那些循环（for/while）、选择分支（if else）、函数模块之类的代码，让计算机去按设定好的程序结构去执行，而文学化编程则是把代码嵌入所谓的文学作品中，之所以说所谓的，是因为这里的文学不一定真的是那种常规意义下的文学，只是指人类语言而已，相对计算机代码而言。文学化编程的思想很简单：代码和正文混和在同一个文档中，编译的时候既可以把代码抽出来运行得到结果，也可以把正文抽出来形成软件文档。最初它是为了写软件而设计的，这种设计方式的优势显而易见：代码和文档在一起，方便互相更新和照应。比如修改了代码之后可以很快也更新相应的文档段落，而不必像传统方式那样，从源代码文件跳到文档文件中去更新（人的记忆不可靠，这事儿经常忘记，造成代码和文档不一致）。</p>
<p>要使用文学化编程，必须得有一些设定的规则来标记哪些是代码，哪些是正文，否则这事儿没法进行。最早的语法是这样：用<code>&lt;&lt;&gt;&gt;=</code>来标记代码的开始，用<code>@</code>标记正文的开始，凡是遇到这两类符号，也就意味着要换频道了，下文要标记为代码或正文。例如，</p>
<pre><code>@
hello, I will do 1 + 2 next:

&lt;&lt;foo&gt;&gt;=
1 + 2
@

OK, I&apos;m done now.
</code></pre><p>这一块文字中包含两段正文和一段代码。编译它的时候，计算机根据前面的规则就知道<code>&lt;&lt;&gt;&gt;=</code>下面的是可以运算的代码，而<code>@</code>下面是正文，不能当作代码运行。这就是文学化编程的基本思想，它可以很容易移植到自动化报告中来，下面我们再详细说里面的细节问题。Sweave借用了这个思想，把R代码嵌入报告中，编译报告的时候R代码被执行，源文档中的R代码在输出的时候被替换为相应的运行结果，这些结果和原来的报告正文混合起来就形成了一篇有结果的报告。这样，我们只需要维护包含源代码的源文档，让结果文档自动生成，而不要手工运行代码并复制粘贴结果到文档里，这样做既累人又容易出错。记住，只有源代码是可以信赖的。注意我并不是说它的结果一定是对的，或者源代码一定是对的，代码当然可能是错的，但源代码要是错了我们可以检查出来，而要是人工操作哪里出了岔子就很难查错，比如你本来应该点这个按钮，结果你当时点了另一个，如果没有完整的屏幕录像，恐怕追溯结果的来源时就比较困难了。源代码通常是文本文件，可以放入版本控制如GIT或SVN，记录完整的修改历史。附带说一句，版本控制（Version Control）工具是忍者必备工具，后面会用专门用一章讲，你要是不会这东西的话，别跟别人说你看过这本书。</p>
<p>文学化编程最早和TeX结合在一起，因为文档用TeX写漂亮嘛，但这事儿跟Knuth肯定也脱不了关系，因为这位大神就是TeX系统的作者，这是计算机世界的佳话（老人家当年不满意出版社的排版质量，一举自己写了一套高质量排版系统，并写支票奖励发现缺陷的人，奖金都是16进制的1美元，而且金额随缺陷数目递增，我跑远了，各位要是没听说过这些轶事自己搜吧）。于是，计算机代码用某种语言写，比如C语言，而文档用TeX写；要源代码可以抽代码，要文档可以抽文档，皆大欢喜。</p>
<p>Sweave的诞生也跟TeX绑在一起，这就为它后来的应用埋下了悲剧的种子，因为TeX不是一般人能精通的。我用了八年LaTeX，自认为对它还比较熟，但仅限于使用，要是让我去读那些LaTeX包的源代码，我几乎读不懂，太庞大太复杂了。Sweave的设计里处处是硬编码，所以它很难扩展，一直以来只能被框在TeX世界里，曲高和寡。尽管Knuth大人弄出来这样一个牛轰轰的想法，Sweave基本上也把它实现了，但这东西太难推广了。初学者编译TeX文档难免遇到一堆看不懂的错误，进而气馁，最后疏远它。我用了几年Sweave，在这方面也做了很多工作，想让它变得易用一些，比如开发了LyX模块，让用户可以在LyX里面点按钮就可以直接编译得到PDF文件。即便如此，Sweave的深层问题无法解决，很多简单的问题我等了又等（比如设置图片在TeX文档中的宽度），一直没有等到答案，屡屡想重写它，但忍者的基本素质就是忍，没事儿不要重新发明一个东西。2011年底我终于忍不住了，操起键盘重写了一个新包，叫<strong>knitr</strong>。在接下来的文字里，各位看官可能会觉得我对Sweave有所不敬，所以我得先声明一下，软件本身的质量和写开源软件的精神是两码事，我绝对尊重开源软件贡献者，这一章所有关于Sweave的吐槽都仅限于它的设计和功能，对代码不对人。</p>
<p>因为这里是谈历史，不妨写一个小插曲：<strong>knitr</strong>这个包的名字是怎么来的呢？Sweave实际上是由S（代表S语言，也就是R语言它娘亲）和weave（编织）组成的，Weave是文学化编程的概念，就是把文字和代码编织到一起。我在考虑包的名字的时候，由于满心要对Sweave的各种不利索吐槽，所以我决定给我的新包一个利索的名字，英语里说利索通常用neat这个词，而同时编织还有另一个词叫knit，二者发音相近，用它取名可谓一石二鸟，音意两全。knit后面加上字母r也有几重考虑：</p>
<ul>
<li>R代表R语言，为什么小写？因为小写对用户来说输入方便，不用按Shift</li>
<li>knitr看起来和读起来像knitter，谐音neater，充分表达了某种要凌驾于对手之上的情绪，说得不好听就是自恋</li>
<li>knitr不是一个正常的英文单词，所以Google搜索的第一条确定一定以及肯定会是我的网站，方便用户搜到文档，在各种社交网络上它也可以作为标签，比如<code>#knitr</code>（微博、Twitter）</li>
</ul>
<p>这就是一个包名背后的各种阴险考虑。当一名忍者不容易啊，你得周密布置陷阱，让别人乖乖掉进你的坑。</p>
<h2 id="knitr包"><a href="#knitr包" class="headerlink" title="knitr包"></a>knitr包</h2><p>你要是没学习过Sweave，最好别去花那时间，可以直接跳入<strong>knitr</strong>世界，它兼容Sweave并提供了无限的扩展性，这本书就是用它基于Markdown写的。先举一个hello world例子吧：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="number">2</span></span><br><span class="line">dnorm(<span class="number">0</span>) <span class="comment"># 标准正态分布在0处的密度值</span></span><br><span class="line">summary(lm(dist ~ speed, data=cars)) <span class="comment"># 一个回归</span></span><br></pre></td></tr></table></figure>
<p>上面你看到的是R的输出，其实它的源文件只有5行，1行标记代码开始，3行R代码，1行标记正文开始，如下所示：</p>
<pre><code>`r &apos;\x60\x60\x60{r knitr-hello}&apos;`
1 + 2
dnorm(0) # 标准正态分布在0处的密度值
summary(lm(dist ~ speed, data=cars)) # 一个回归
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们用**knitr**编译这段代码，就得到了上面的输出。现在，你应该对自动化报告有一个初步了解了。**Knitr**的网站（`http://yihui.name/knitr`）中有详尽的英文文档和示例，英文方面没有障碍的忍者可以随时查阅。为了新忍入门更快，我在这里把整个故事的梗概叙述一遍，掌握了基本概念之后，再去网站里查阅细节会更容易。</span><br><span class="line"></span><br><span class="line">### 语法</span><br><span class="line"></span><br><span class="line">为了**knitr**能识别文档中的R代码，我们必须对代码文本有特殊标记，前面说的`&lt;&lt;&gt;&gt;=`就是一种可能的标记。同时，我们还可以设置一些运行代码的选项，这些软件方面的选项不应该是正文的一部分，所以也要用特殊标记保护起来。所有这些标记的规定，就是我们要谈的语法。对**knitr**而言，不同格式的文档有不同语法。</span><br><span class="line"></span><br><span class="line">LaTeX文档（扩展名`Rnw`）里面仍然沿用历史规定，代码放在`&lt;&lt;&gt;&gt;=`之下，`&lt;&lt;`前面最多只允许有空格字符而不能有任何其它字符（一般情况下它前面什么都没有）；在`&lt;&lt;`与`&gt;&gt;`之间我们可以对下面的代码设置一些运行选项，例如`&lt;&lt;foo, echo=TRUE, eval=TRUE&gt;&gt;=`，其中第一个选项没有取值，它是这段代码的标签，这个选项是代码段的唯一标识符，所以不同代码段必须用不同的标签，它主要被用来写图片文件名（如果下面的代码会生成图片的话）以及缓存文件名，如果标签为空，那么**knitr**会自动生成形如`unnamed-chunk-1`、`unnamed-chunk-2`之类的标签；所有自带选项参见`http://yihui.name/knitr/options`，选项列表很长，因为可以控制的细节非常多。`@`字符用来标记下面要开始正文了，它同样需要出现在一行的顶头或用空格缩进，后面可选择性跟着LaTeX注释（以`%`开头）。在`&lt;&lt;&gt;&gt;=`里面设置的代码段选项是局部选项，仅仅对当前代码段有效；我们也可以通过R对象`opts_chunk`设置全局选项，如：</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line">opts_chunk$set(echo=FALSE, fig.height=4)</span><br></pre></td></tr></table></figure>
</code></pre><p>它可以放在任意R代码段中（通常在一篇文档的第一个代码段中），从这句话出现开始，后面的代码段都会默认使用这里设置的选项，但注意局部选项优先于全局选项，例如，我们全局设置了<code>echo</code>选项为<code>FALSE</code>，但对一个代码段<code>&lt;&lt;echo=TRUE&gt;&gt;=</code>来说，它所用的<code>echo</code>值仍然为<code>TRUE</code>，相比之下，代码段<code>&lt;&lt;&gt;&gt;=</code>用的就是<code>FALSE</code>（从全局选项继承过来的）。初学者可以暂时忽略所有选项的设置，因为<strong>knitr</strong>包在设计的时候已经花了很多精力给所有的选项设置合适的默认值了。</p>
<p>除了代码段中可以放R代码之外，还有另一种形式的R代码称为行内代码，顾名思义，它是嵌在正文段落文字内的代码，通常比较简短，用来输出单个值，语法为<code>\Sexpr{x}</code>，其中<code>x</code>代表当前环境下的变量<code>x</code>，这个标记会被运行并返回值嵌入原来的文本，它也是一个有用的应用，例如我们可以在正文里写“回归结果的斜率为<code>\Sexpr{coef(fit)[2]}</code>”，当我们在前面建了一个回归模型之后（假定名为<code>fit</code>），这句话编译之后就会变成含有真实数字的文字，如“回归结果的斜率为<code>3.932</code>”。</p>
<p>回顾一下，以上提到几个重要概念：</p>
<ul>
<li>代码段，就是独立段落的R代码，每段代码必须有唯一的标签</li>
<li>行内代码，嵌入文字的小代码</li>
<li>局部选项，在代码段上方的<code>&lt;&lt;&gt;&gt;=</code>标记里设置</li>
<li>全局选项，用<code>opts_chunk$set()</code>设置，它对所有文档格式都通用（包括Rnw以及后面要介绍的Rhtml、Rmd等）</li>
</ul>
<p>选项让我们可以非常灵活地控制代码的输出，例如如果我们想隐藏R代码，只显示运行结果（你给老板交报告的时候当然不能连R代码也显示，除非老板也是代码控），那么我们可以用<code>echo</code>选项，设置<code>echo=FALSE</code>就可以隐藏R代码；如果我们想让输出图形的宽度为5英寸，则可以设置<code>fig.width=5</code>，等等。</p>
<p>由于LaTeX文档入门门槛高，而网页则相对容易一些，<strong>knitr</strong>在设计之初就考虑了网页格式，它有两种可能：一是原始HTML格式，即把R代码嵌入HTML代码；二是Markdown（下文简称MD），它是非常轻量级的标记语言，可以很方便翻译为HTML语言。我一般倾向于用后者。MD的出现是为了简化HTML，把常用的HTML标签用极度简化的语法写出来，这一点值得程序设计者学习：你可以写一个无所不能但繁琐的程序，也可以写能实现常用功能但简单的程序。R就有前者的特征，尤其是很多函数有长串的参数，看着就让人发蒙，而实际上只有少数参数是常用的，当然，这一点上不必吐槽，因为R是一门基础语言，功能优先。这是题外话。</p>
<p>HTML文档混合R代码的语法为：以<code>&lt;!--begin.rcode label, opt=value</code>开始R代码，以<code>end.rcode--&gt;</code>开始正文。全局选项放在<code>&lt;!--roptions --&gt;</code>中，行内代码放在<code>&lt;!--rinline --&gt;</code>中。熟悉HTML语法的都知道，<code>&lt;!-- --&gt;</code>是HTML注释的语法。我对Sweave语法不太满意的一点也在此：文学化编程的文档最好能避免破坏原文档的语法，比如要是我来设计Sweave，我肯定不会用<code>&lt;&lt;&gt;&gt;=</code>语法，因为它干扰了TeX文档，我会倾向于把R代码段放在TeX注释中，这样即使不编译，这份文档也是合法的TeX文档。以下是一个简单的HTML例子：</p>
<pre><code>hello, the value of 2 * pi is &lt;!--rinline 2*pi --&gt;

&lt;!--begin.rcode foo-label
rnorm(5)
end.rcode--&gt;
</code></pre><p>HTML和R代码混合的文档我们称之为R HTML文档，通常扩展名为<code>*.Rhtml</code>。</p>
<p>MD文档语法为：以三个反引号和一对大括号开始R代码，以三个反引号开始正文，上面的hello world例子已经显示了代码段的基本结构。行内代码放在<code>`r ` </code>之中，全局选项在<code>`ro or` </code>中（R options）。以下是一个简单的MD例子：</p>
<pre><code>hello, the value of 2 * pi is `r paste(&apos;\x60&apos;, &apos;r 2*pi&apos;, &apos;\x60&apos;, sep = &apos;&apos;)`

`r &apos;\x60\x60\x60{r foo-label}&apos;`
rnorm(5)
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">R Markdown文档扩展名通常为`*.Rmd`。</span><br><span class="line"></span><br><span class="line">### 文本输出</span><br><span class="line"></span><br><span class="line">在文本输出方面，**knitr**包支持以下功能：</span><br><span class="line"></span><br><span class="line">- 代码高亮（`highlight=TRUE`），增强可读性，有无数的高亮主题可选，仅适用于LaTeX和HTML输出，MD文档在转为HTML文档之后可以用专门的JavaScript库去高亮代码</span><br><span class="line">- 代码重排（`tidy=TRUE`），对那些不注意代码格式的人来说很有用，再乱的代码，到了这里也会变得相对整齐，本功能由**formatR**包支持</span><br><span class="line">- 执行或不执行代码（`eval=TRUE/FALSE`），不执行的代码段将被跳过，原样输出源代码</span><br><span class="line">- 显示/隐藏源代码（`echo=TRUE/FALSE`），甚至精确控制显示哪几段代码（`echo`取数值）</span><br><span class="line">- 显示/隐藏普通文本输出或将文本输出以原样形式输出（`results=&apos;markup&apos;, &apos;hide&apos;, &apos;asis&apos;`）</span><br><span class="line">- 显示/隐藏警告文本（`warning=TRUE/FALSE`）、错误消息（`error`）和普通消息（`message`）</span><br><span class="line">- 显示/隐藏整个代码段的输出（`include=TRUE/FALSE`），比如我们可能想运行代码，但不把结果写入输出中</span><br><span class="line"></span><br><span class="line">简单举两个例子，注意它们的源代码完全相同，但因为代码段选项不同，所以输出也有所不同：</span><br><span class="line"></span><br><span class="line">```R</span><br><span class="line"># 不重排代码：tidy=FALSE, warning=TRUE</span><br><span class="line">fib=function(n)&#123;if(n&lt;2)return(n);fib(n-1)+fib(n-2)&#125;</span><br><span class="line">1:3+1:2</span><br></pre></td></tr></table></figure>
</code></pre><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重排代码并隐藏警告信息：warning=FALSE</span></span><br><span class="line">fib=<span class="keyword">function</span>(n)&#123;<span class="keyword">if</span>(n&lt;<span class="number">2</span>)<span class="keyword">return</span>(n);fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>)&#125;</span><br><span class="line"><span class="number">1</span>:<span class="number">3</span>+<span class="number">1</span>:<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>默认情况下，文本输出会被加上前缀<code>##</code>，这是考虑到读者可能会复制文中的代码在自己的R中运行，而<code>#</code>是R的注释符，所以输出不会干扰代码的复制和粘贴运行。Sweave没有这个考虑，并且更糟糕的是它给源代码也加上了前缀<code>&gt;</code>和<code>+</code>，这样看报告的人想要复制代码就痛苦之极了，因为你必须把这些多余的字符去掉。</p>
<p>表格实际上也是纯文本构成的（你要是天天抱着Word用当然永远都不能明白这句话！），但R没有自带的表格生成函数，所以我们往往需要特殊处理。视输出格式不同，我们可以使用<code>knitr::kable()</code>函数或<strong>xtable</strong>包或<strong>ascii</strong>包来把R对象（尤其是数据框）转化为相应格式的表格代码，此时需要我们使用原样输出，如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">knitr::kable(head(mtcars[, <span class="number">1</span>:<span class="number">5</span>]))</span><br></pre></td></tr></table></figure>
<p>原样输出（<code>results=&#39;asis&#39;</code>）的含义是这样：默认情况下，输出会被装饰在一些特定的标签内，例如在LaTeX格式输出时，普通文本被放在<code>verbatim</code>环境中；有时候我们希望用R代码直接输出特定格式的文本，比如直接写TeX代码，那么我们可以用<code>cat()</code>函数直接写文本，此时我们希望写出来的文本就直接是TeX代码，而不要被放到<code>verbatim</code>环境中（否则几乎任何TeX代码都会被当作普通文本在TeX中原样输出，TeX的<code>verbatim</code>环境你懂的）。例如在一个原样输出的代码段中，我们可以用</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat(<span class="string">'\\includegraphics&#123;foobar&#125;'</span>)</span><br></pre></td></tr></table></figure>
<p>来插入一幅文件名叫<code>foobar</code>的图片文件。当然对<strong>knitr</strong>来说，这种需求几乎不可能存在，只有在Sweave旧社会才会需要这种丑陋的R代码（为什么它是丑陋的代码？）。R的图形控制非常灵活，也是我们马上要介绍的。</p>
<h3 id="图形控制"><a href="#图形控制" class="headerlink" title="图形控制"></a>图形控制</h3><p>图形是居家旅行数据分析必备之良药，当然得精雕细琢，我们介绍几个重要选项：</p>
<ul>
<li><code>fig.path</code>用来设置图形输出的路径，对大型报告来说，我们可能希望把各种乱七八糟的文件归类管理，所以R图形文件可以用这个选项写入单独的文件夹</li>
<li><code>dev</code>设置用哪种图形设备记录图形，自带二十多种常见的图形设备，如PDF、PNG甚至tikz，具体取值参见网站上的文档</li>
<li><code>fig.width</code>和<code>fig.width</code>设置图形文件本身的宽高尺寸（单位英寸）</li>
<li><code>out.width</code>和<code>out.height</code>设置图片在输出文档中的宽高，这是相对Sweave来说的新选项，也是我等了很久没等到，最终刺激我自己写包的原因之一（这两个选项太容易实现了），很多用户看到这两个选项都很欣喜，一个小问题，困扰多少英雄好汉</li>
<li><code>fig.keep</code>设置保留图形的方式，我们可以完全不保留，也可以只保留高层作图函数生成的图形，也可以保留低层作图函数产生的图形</li>
<li><code>fig.show</code>设置图形显示的方式，可以跟在作图代码后面即刻显示出来，也可以等到代码段运行完毕之后再把该段中所有图形一气儿显示出来，也可以把所有图形显示为动画</li>
</ul>
<p>在Sweave中我们需要设置选项告诉它R代码会有图形输出，但在<strong>knitr</strong>世界一切都是自然而然的，你不必告诉我是否有图形输出，我有魔法判断你的代码是否产生了图形（高级忍者请研究<code>recordPlot()</code>函数）。在各种图形格式中，tikz格式是最漂亮的，它来自<strong>tikzDevice</strong>包的贡献（设置<code>dev=&#39;tikz&#39;</code>即可），本质上是TeX文件，所以图形编译的时候其中包含的文本都会被当作TeX文档中的元素编译，文档用什么字体图中就继承什么字体，图中要是有TeX数学公式，也会被编出来，看了tikz图片之后，TeX用户就会知道那个<code>demo(plotmath)</code>中的暗黑技巧有多么弱了。</p>
<p>关于图形的更多介绍，参见<strong>knitr</strong>的图形手册：<code>https://github.com/downloads/yihui/knitr/knitr-graphics.pdf</code>，里面有详尽的示例，读者可以对照源代码学习如何输出精美的图片。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>自动化报告不仅仅可以用在小打小闹的计算分析上，也可以用于大规模计算，而这种情况下马上就有一个问题来了：速度。如果文档中含有超负荷的R代码，计算非常耗时，那么就不适合每次从头跑起，尽管一切可以自动化，但也不能等一个报告等得花都谢了。</p>
<p>什么情况下我们不需要重复运行一段代码？一个直接的想法就是，如果上次和这次运行这个文档时，这段代码没有做过任何修改（哪怕是一个空格的增删），那么应该就可以跳过它，直接加载上次运行的结果进来。这就是缓存的基本原理，而具体操作起来还有一些细节考虑，除了代码不能变之外，代码段的选项也不能变，否则输出可能会变化（比如从<code>echo=TRUE</code>改为<code>echo=FALSE</code>对输出的文本当然有影响，一个含代码一个不含）。你也许会想，代码和代码段的选项都不变的话，应该就可以确定跳过这段代码了吧？其实对严格的程序员来说，这可能仍然不够！比如，上次用R 2.14.2编译，这次用R 2.15.0编译，此时也需要考虑清空旧的缓存，重新计算，避免不同R版本导致结果差异。对<strong>knitr</strong>而言，要是考虑过于严格，可能会导致不必要的重复计算，所以它基本上只检查代码和选项是否有变化，而这些额外的要求可以由用户定制。一个缓存的代码段会在第一次运行的时候把新创建的对象都写入缓存文件，下次运行的时候从文件中直接加载它们。注意整个代码段的输出也会被以一个特殊对象写入缓存，所以下次加载缓存的时候上次运行的所有输出也会被重新写出来，仿佛代码真的被运行过一样。</p>
<p>我们可以用选项<code>cache=TRUE</code>来启用缓存，相应的<code>cache.path</code>选项用来设置缓存文件的路径。关于缓存还有另外一点技术上的小小说明：R里面有个概念叫延迟加载（lazy load），它对缓存非常有用，也是<strong>knitr</strong>加载缓存对象时使用的一项重要技术。延迟加载的意思是，从文件中加载R对象，但不立刻把它载入内存，只是在系统中做一个标记，表明这个对象可用，但不到真正用它的时候它不会被真正加载进内存，换句话说，<strong>knitr</strong>缓存的对象就像随时待命的士兵，只要前线召唤，它们就去投入战斗。</p>
<h3 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h3><p>灵活的API是<strong>knitr</strong>设计的一大亮点，它的可定制性体现在两类钩子（hook）函数上：代码段钩子（chunk hooks）和输出钩子（output hooks）。钩子这个名字听起来很怪，不过其实它就是一个特殊函数而已，在某些情况下会被触发执行。</p>
<p>代码段钩子对应着自定义的代码段选项，也就是所有默认选项之外的选项，注意<strong>knitr</strong>的代码段选项名称没有限制，你可以写任意合法取值的选项。代码段钩子函数可以通过<code>knit_hooks</code>对象设定。下面举个例子说明新选项和钩子函数如何关联。我们先构造一个新钩子函数叫<code>par</code>：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">knit_hooks$set(par = <span class="keyword">function</span>(before, options, envir) &#123;</span><br><span class="line">  <span class="comment"># 运行代码前先设置图形边距参数</span></span><br><span class="line">  <span class="keyword">if</span> (before) par(mar = c(<span class="number">4</span>, <span class="number">4</span>, <span class="number">.1</span>, <span class="number">.1</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>代码段钩子有固定的格式，它是一个有三个参数的函数，其中<code>before</code>是逻辑值，表示这个钩子在代码段之前执行（<code>TRUE</code>）还是之后执行（<code>FALSE</code>），<code>options</code>是一个列表，装有所有当前代码段的选项，<code>envir</code>是一个环境对象，是当前代码段执行的环境。代码段钩子设置好之后，每当一个代码段被运行前后，<strong>knitr</strong>都会检查这个代码段是否有一个跟钩子函数<strong>同名</strong>的选项，如果有且非空，那么就会运行钩子函数。</p>
<p>假设我们新造的一个选项叫<code>par</code>，它不是<strong>knitr</strong>自带的选项，且跟上面定义的钩子函数同名，那么对下面这个代码段来说，它被执行之前，R会先用<code>par()</code>函数设置图形边距参数，因为这是钩子函数定义要执行的任务：</p>
<pre><code>&lt;&lt;good-margin, par=TRUE&gt;&gt;=
plot(1)
@
</code></pre><p>注意钩子函数被触发的条件是相应的选项取值非空，所以这里<code>par</code>取值<code>TRUE</code>或<code>FALSE</code>或<code>123</code>都无所谓。代码段钩子让我们可以把常见的次要任务抽象出来，用一个代码段选项去控制它们的执行。比如上面设定图形边距就是一个非常常见的任务，但要是把这样的代码在每个代码段中的都写一遍的话，就太啰嗦了，而且重复敲代码是大忌！每当你想复制粘贴一段代码的时候都要三思，我真的不需要想办法把这段代码抽象出去吗？</p>
<p>输出钩子用来装裱输出，<strong>knitr</strong>的透明性也体现在这一类钩子上，它可以把R的各类输出都交给用户，让用户决定怎么处理这些输出。所有可能的输出有：源代码、普通文本、警告消息、普通消息、错误消息和图形。每一种有一个对应的钩子函数，这些函数接收R的输出，以一定的形式包装它们，再返回输出来。以源代码为例，它的钩子名为<code>source</code>，如果我们定义：</p>
<pre><code>&lt;&lt;source-hook&gt;&gt;=
knit_hooks$set(source = function(x, options) {
  paste(&apos;\\begin{myEnvironment}&apos;, x, &apos;\\end{myEnvironment}&apos;)
})
@
</code></pre><p>那么在输出的时候所有R源代码都会被放在<code>myEnvironment</code>环境中（当然，你得事先定义好这个环境，不然LaTeX会报错）。钩子函数中，<code>x</code>是当前代码段的输出，<code>options</code>是所有选项的一个列表。</p>
<p>由于我们可以自定义输出的格式，我们就可以任意装潢输出的外观，例如我们可以把错误消息放在某个红色粗体环境中，把警告信息以斜体显示，等等。这个包已经自带了一系列预先定义好的钩子函数，所以除非有特殊需要，通常不需要重定义输出钩子函数。</p>
<p>回到最开始的话题，Sweave的设计绑定了TeX，也就是它的输出只能装在TeX环境中，所以很难移植到别的格式，一直以来，人们扩展Sweave的方式就是把那七八百行代码复制一遍，然后把里面定义死的输出修改为另一种输出，这是糟糕透顶的扩展方式，因为也许下个月R就修改了源代码，但扩展者可能就跟不上官方的更改了；<strong>pgfSweave</strong>和<strong>cacheSweave</strong>以及一系列基于Sweave扩展的附加包就这样被Sweave带进了一个大坑，我就是目睹了这个坑爹的过程。程序的扩展性在设计初期一定要考虑清楚，但很多情况下，我们内心总是被一个微小的声音不断规劝：想那么多干什么，搞定这件事就好了！为了搞定一件事而失去推广性，这是开发者的大悲剧。</p>
<p>至此，我们知道了如何把R代码混入文档，如何标记R代码，有哪些基本选项，如何输出图形，使用缓存使文档编译加速以及定制钩子函数。下面我们介绍两套方便的编辑器，让<strong>knitr</strong>的操作更方便。</p>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>由于R世界里悠久的LaTeX传统，过去人们花费了很大精力在融合LaTeX和Sweave上，所以很多支持R的编辑器都支持Sweave。前面说了，TeX文档写起来很痛苦，尽管输出质量的确无可匹敌。我们先介绍一款TeX克星LyX（<code>http://www.lyx.org</code>），再说一款R编辑器新秀RStudio（<code>http://www.rstudio.org</code>）；当然，我推广的软件只有开源软件。</p>
<h3 id="LyX"><a href="#LyX" class="headerlink" title="LyX"></a>LyX</h3><p>这事儿我说破嘴皮子了，但还得说。有经验的TeX用户不用LyX的话，就是自杀。不管你们信不信，反正我是信了。LyX提供了完美的TeX可视化界面，而背后就是纯粹的TeX代码。你看到的是加粗放大的章节标题，而不是平凡无奇的一个命令<code>\section{foobar}</code>；你看到的是图片，而不是一个命令<code>\includegraphics{foobar}</code>；你看到的是真正的数学公式，而不是一堆希腊字母和数学符号在一起开会。重复：它们背后都是纯粹的TeX代码！天堂有路你不走，地狱一堆代码命令你非要往里钻，这不是自杀是什么？LyX有无数的贴心自动化功能，让你即使不记得某些TeX命令，也可以通过点按钮的方式自动生成相应的代码。例如关于<strong>geometry</strong>包，请问你记得住那若干种边距的代码名称吗？</p>
<p>这就是我对TeX老手的劝告，但对新手而言，必须有艰苦而踏实的TeX学习过程，否则你懂了LyX的人也不懂LyX的心，缺少基本的TeX锻炼，容易把TeX文档写得比Word还难看。LyX中写好文档一键编译PDF，各种细节都给你处理得妥妥儿的，比如参考文献自动用BibTeX编译，你永远都不需要去背“一遍pdflatex，一遍bibtex，再一遍pdflatex，再一遍pdflatex”（懂我在说什么吗？不懂的话你功力不够，需要继续修炼TeX神功）。</p>
<p>2010年我受二导师之邀帮她讲了两节课，主要是介绍Sweave，那时候我已经用LyX + Sweave的组合有一阵子了，但这个组合的配置实在很狗血，需要研究若干暗黑技巧，不过为了上课，我写了一个超长的暗黑R脚本文件，满以为学生运行一遍就可以把各种狗血细节配置好，后来证明大败特败，学生一个个都被整糊涂了。此事让我痛下决心改革LyX对Sweave的支持，于是接下来的一年多LyX新增了Sweave模块，包含在官方发行版中，用户再也不必折腾配置，只需要在LyX文档设置中选入Sweave模块（module），LyX就会调用R和Sweave编译，前提是R在环境变量<code>PATH</code>中。感兴趣的读者请参考手册：<code>https://github.com/downloads/yihui/lyx/sweave.pdf</code>。编译的大致原理是，LyX先导出一份Rnw文件，然后Sweave来处理它，生成含有结果的tex文件，最后交给LyX去编译。</p>
<p>显然，后来这个故事有了新发展，随着我对Sweave的日益不满，我写完<strong>knitr</strong>包之后也顺便给LyX新增了一个knitr模块。在LyX文档设置中，选入这个模块，在编译的时候LyX会先调用R和<strong>knitr</strong>包处理文档，再交回给LyX去编译为PDF。</p>
<p><a href="https://i.imgur.com/jEKSh.png" target="_blank" rel="external">LyX中的knitr模块</a></p>
<p>在LyX中输入R代码可以用快捷键<code>Ctrl + L</code>，然后按前面介绍的LaTeX类语法写（为什么是LaTeX语法？）：</p>
<pre><code>&lt;&lt;hello-world, echo=FALSE&gt;&gt;=
print(&apos;hello world!&apos;)
@
</code></pre><p>事实上<strong>knitr</strong>包的大多数PDF手册都是用LyX写的，读者可以在这里找到它们：</p>
<figure class="highlight plain"><figcaption><span>knitr-lyx, eval=FALSE&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system.file(&apos;examples&apos;, package = &apos;knitr&apos;)</span><br></pre></td></tr></table></figure>
<p>注意<strong>knitr</strong>的支持从LyX 2.0.3才开始，所以如果你用的是更旧的版本的话，会无法打开这些例子。</p>
<h3 id="RStudio"><a href="#RStudio" class="headerlink" title="RStudio"></a>RStudio</h3><p>RStudio没有LyX那样的可视化界面，但它作为R世界的编辑器后起之秀，也有很多神奇的新功能。当RStudio开发者看到<strong>knitr</strong>发布之后，他们立马决定要加入相应的支持，这事儿让双方都感到很激动，因为我们都看到了一些让过去苦逼的Sweave用户掉下巴的前景。</p>
<p>RStudio本来是一个R代码编辑器，它的界面有足够的现代风，而且这个界面竟然同时有桌面版和服务器版，后者的出现着实让人吃惊了一番，想一下，在某个云端运行着RStudio，你可以通过浏览器直接在里面使用R，只要服务器不关机，这个R永不掉线。</p>
<p><a href="https://i.imgur.com/Z72Qc.png" target="_blank" rel="external">RStudio的选项配置界面</a></p>
<p><a href="https://i.imgur.com/SGsbj.png" target="_blank" rel="external">RStudio中的Rnw文档，点Compile PDF按钮就可以一键生成PDF</a></p>
<p>刚开始的时候，RStudio支持一键通过<strong>knitr</strong>生成PDF，只要RStudio的选项配置中选的是<strong>knitr</strong>（你也可以选Sweave作为编译引擎，我就当你是要怀旧好了），并且你的R里面已经安装了<strong>knitr</strong>包。后来我们发现Sweave其实十多年前就提出了一个有用的概念，但这么多年都没有真正实现过，就是Rnw文档与PDF文档的同步。高级LaTeX用户知道，在LaTeX世界里有tex文件和PDF同步的可能，很多编辑器也支持这种同步，就是可以从tex源文件的某个位置直接跳到PDF文档中相应的页上，反之也可以跳回来，这种导航对查错和对比检查非常有用。对Rnw文档来说，支持这种同步导航就差那么一步，原因是Rnw被编译为tex文档时，两个文档的行号不一定能完全对应，比如Rnw中5行源代码可能会生成20行tex输出，这样两个文档的行号就错开了，即使tex文档支持同步导航，从Rnw跳到PDF或跳回来就跳不准了。Sweave提出了一个叫<code>concordance</code>的选项，用来记录Rnw和tex文件的行号差异，但具体怎么实现导航，就被遗忘在滚滚红尘中了。RStudio把这个旧摊子捡起来，拍拍土，重新开张了，不仅实现了Rnw和PDF之间互跳（Ctrl + 单击），而且实现了错误行号导航，如果编译出错，你可以直接知道是哪段代码出错了。RStudio也实现了代码段选项的自动补全，让文档写起来更快。</p>
<p>另一项重大突破是它支持Markdown，当然，这是在我的怂恿加拐骗下他们实现的。因为<strong>knitr</strong>原生支持MD，我又钟爱MD的简单语法及其超强变身能力，所以我大力推荐他们也支持MD。于是我们可以在RStudio中写MD混合R代码，一键编译为HTML文件。这让万千TeX门外的用户也可以步入自动化报告和可重复研究的神圣殿堂了。对此我满心激动，因为我再也不用为了推广可重复研究而先花大量时间教人TeX。</p>
<h2 id="其它包"><a href="#其它包" class="headerlink" title="其它包"></a>其它包</h2><p>前面提到了<strong>pgfSweave</strong>和<strong>cacheSweave</strong>包，它们的功能已经被<strong>knitr</strong>重写了，所以个人认为没有必要再去研究。还有一串被Sweave带到坑里的附加包，可能都没必要去学，这一串包的列表参见本包首页：<code>http://yihui.name/knitr</code>。</p>
<p>文学化编程这件事情当然不是只有R在做，很多其它语言一样有相应的模块，但R有无敌的统计计算和作图能力，所以数据分析报告方面它还是有很大优势的。说实话，我的观察也有限，但我注意到一个Python包做得很不错，叫Dexy（看这位姐姐多会给自己的软件取名字）：<code>http://www.dexy.it</code>。推荐Python爱好者深入研究一下。</p>
<h2 id="网页应用"><a href="#网页应用" class="headerlink" title="网页应用"></a>网页应用</h2><p>网页应用在这个时代太重要了。我2012年夏天AT&amp;T实验室实习时接触到一位科学家叫Carlos Scheidegger，他说了一句笑话让我深为同意：如果一件东西在网上不存在，那么它就不存在。更简单的翻译是：我网，故我在。网络媒介有太多传统纸质媒介不具备的特征，例如交互式的内容、视频音频、动画、内容可复制等。想象下面的场景：</p>
<blockquote>
<p>你在一本书上学习K-Means算法。首先它介绍了参考文献（如果你要看参考文献，得上图书馆继续找），然后它讲述了基本思想（用文字描述的迭代过程，循环了几遍之后你开始晕乎了），最后给出一个例子（代码打印在纸上，你只能戴上老花镜把它敲进电脑运行）。</p>
</blockquote>
<p>与此对应的网页版本是：</p>
<blockquote>
<p>你看到超级链接（要看的话，用鼠标戳它即可），迭代过程有一个动画演示（你知道算法一步步是怎样进行的），例子中的代码复制粘贴直接运行。</p>
</blockquote>
<p>我的意思不是要全盘否定纸质媒介，只是在某些情况下（尤其是涉及到计算类的），网络媒介更方便；<strong>knitr</strong>包在开发网络应用方面也下了不少功夫，这里介绍一些<a href="http://blog.revolutionanalytics.com/2012/09/data-reporting-knitr.html" target="_blank" rel="external">相关的资源和演示</a>：</p>
<ul>
<li><a href="http://rpubs.com" target="_blank" rel="external">RPubs.com</a>：你可以看到各式各样的基于R Markdown编译出来的网页报告</li>
<li><a href="http://opencpu.org/" target="_blank" rel="external">OpenCPU</a>：它是一个基于R的网络开发平台，例如这里有一个<strong>knitr</strong>应用（<code>http://public.opencpu.org/apps/knitr/</code>），点点鼠标就可以动态生成一篇报告了</li>
<li><a href="http://crunch.kmi.open.ac.uk/" target="_blank" rel="external">CRUNCH</a>：又一个基于R的计算与服务平台，也可以调用<strong>knitr</strong>生成报告（支持比OpenCPU更好）</li>
<li><a href="https://github.com/cscheid/rcloud" target="_blank" rel="external">RCloud</a>：基于<strong>Rserve</strong>包和<strong>knitr</strong>的网络应用，提供了一个可以合作编写报告的平台</li>
<li><a href="http://vis.supstat.com" target="_blank" rel="external">Vistat</a>：基于GitHub/Jekyll的在线小刊物，主要演示统计图形以及相应的代码，背后的引擎仍然是<strong>knitr</strong>，用简单的Markdown就能生成一个漂亮有用的网站</li>
</ul>
<p>本章的自动化报告只是介绍了技术层面的东西，具体报告里写什么则是作者的事情，一旦报告的源文档写好了，将来维护就方便了，有了新数据或要重复跑任务就再也不怕不怕啦。对科学研究而言，它也是保证结果可重复的手段之一，因为报告是通过运行代码直接得到的，没有人工干预，所以一定程度上比那种复制粘贴写报告的方式安全可靠。我的最后一句话是，其实可重复的科学研究挺难的，技术上有少量难度，更多是人们的习惯太难改，他就是要复制粘贴结果到Word里，你有什么辙？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谢益辉-three]]></title>
      <url>http://yoursite.com/2016/08/06/r-ninjia-3/</url>
      <content type="html"><![CDATA[<p>本系列来源于谢益辉的github. <a id="more"></a></p>
<h1 id="文本数据"><a href="#文本数据" class="headerlink" title="文本数据"></a>文本数据</h1><p>文本数据四处可见，例如程序运行日志文件，或博客文章、微博等。数值型的数据我们拿来可以开始做计算，但文本数据必须要先经过处理才能进行分析。本章我们先介绍一些基本的文本操作，然后专攻文本处理的必备利器：正则表达式。</p>
<p>在我们介绍正式内容之前，先强调一个至关重要的问题，就是文本编码。在计算机中，文本可以以不同的编码存储，这事儿主要是Windows惹的祸，给程序员带来了无尽的苦恼。在Linux世界，默认编码通常就是通用的UTF8，所以我们处理文本几乎从来不必考虑编码问题。Windows下的默认文本编码通常是各种“方言”，比如中文用一种编码方式（GB2312），韩文用另一种方式，等等。这样我们要读取一个文本文件或处理一段文本数据，就必须先了解它的编码方式，在很多R函数中都有一个<code>encoding</code>参数，就是为了对付这种情况的，例如<code>readLines()</code>。为了世界的和平和人民的安定，我们大力呼吁所有人都统一使用UTF8编码，让所有程序都能够自由对话。稍微好用一点的文本编辑器都支持设定编码，例如Windows下的Notepad++，我们存储文件尽量用UTF8编码。</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>在R中读入一个文本文件可以用<code>readLines()</code>函数，它返回一个字符型向量，文件中每一行都是向量中对应的一个元素。这个文件可以是本地文件，也可以是一个网址。例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># R软件的许可证文件（GPL）</span></span><br><span class="line">gpl = readLines(file.path(R.home(), <span class="string">'COPYING'</span>))</span><br><span class="line">head(gpl) <span class="comment"># GPL前几行</span></span><br><span class="line">xie = readLines(<span class="string">'http://yihui.name'</span>) <span class="comment"># 我的主页</span></span><br><span class="line">head(xie) <span class="comment"># HTML代码</span></span><br></pre></td></tr></table></figure>
<p>这个函数有个姊妹叫<code>readline()</code>，它支持从键盘直接输入一行文本，显然，R必须在交互式模式下运行，否则人没法输入任何东西。它有一个常用的地方，就是在代码运行过程中要求用户输入一些回答，例如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = readline(<span class="string">'Answer yes or no: '</span>)</span><br></pre></td></tr></table></figure>
<p>当R运行到这一行时会停下来等待用户输入（回车表示输入结束），然后根据输入的结果，代码可以接着执行。可以想象，能读自然也能写，那么<code>writeLines()</code>就是用来把R对象写入文件的函数。</p>
<p>一条文本有一些基本的属性，比如它包含多少字符，我们可以用<code>nchar()</code>计算字符串中有多少字符，例：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nchar(gpl[<span class="number">1</span>:<span class="number">10</span>]) <span class="comment"># GPL前10行分别有多少字符</span></span><br><span class="line">sum(nchar(gpl)) <span class="comment"># 全文一共多少字符</span></span><br></pre></td></tr></table></figure>
<p>对字符串长度来说，学过其它语言如JavaScript或Python的忍者的第一反应可能是<code>length()</code>之类的函数，比如<code>gpl.length()</code>或者<code>length(gpl)</code>，R语言不是这一套，在R里面<code>length()</code>只有一个意思，就是对象中的元素个数，比如向量里有多少个元素，所以<code>length(gpl)</code>返回的实际上是GPL文件有多少行（一行是向量<code>gpl</code>中的一个元素）。</p>
<p>好了，现在你已经会数数了，比水木Joke版的猪头强了，给个练习题吧，帮我统计一下我的博客文章的字数，看看我写博客这几年有什么趋势；源文件在<code>https://github.com/yihui/cn/</code>，这事儿其实已经有人做了，不过请不要偷看答案。</p>
<p>文本数据当然不能只用来数一下有多少字符，这信息太粗糙了，我们还需要深入文本里面看内容。文本最常见的特征大概就是分隔符，它把文本的组成单元分开，典型的就是英文中的空格和标点，它们用来分开单词。实际上很多数值型数据在存储时也有同样的特征，例如CSV文件就是用逗号分开数据中的列，读入数据的时候我们就知道，当遇到一个逗号时就意味着开始新的一列了。为了深刻理解这种“分隔”的特征，请存一个CSV文件并用文本编辑器打开它：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">write.csv(iris, file=<span class="string">'iris.csv'</span>, row.names=<span class="literal">FALSE</span>)</span><br><span class="line">normalizePath(<span class="string">'iris.csv'</span>) <span class="comment"># 万一你找不到文件了，就看这个</span></span><br></pre></td></tr></table></figure>
<p>你的操作系统可能在这个文件上给你显示Excel的图标，但作为忍者，你必须绕过这种表象，它跟Excel没有半毛钱关系，它只不过是一个普通的文本文件罢了，当然，不可否认，你可以用Excel查看它。当你用文本编辑器看过一次这样的文件之后，就会对神秘的数据存储有更好的理解了，原来Excel的东西也是可以看“源代码”的！</p>
<p>我们继续说分隔符：<code>strsplit()</code>函数可以按照指定的分隔符拆分一条字符串，例如上面我们读入了GPL文本，我们可以用空格拆分这些文本数据：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strsplit(gpl[<span class="number">4</span>:<span class="number">5</span>], <span class="string">' '</span>) <span class="comment"># 拆分第4、5两行</span></span><br></pre></td></tr></table></figure>
<p>函数<code>strsplit()</code>根据输入字符向量的长度返回相应长度的列表，列表里每个子元素是一个向量，对应着原来的字符向量中的拆分结果。比如上面我们拆分了两个元素，则得到长度为2的列表，里面都是单个的单词。</p>
<p>下面我们干点儿正事，把GPL的文本拆成单词并统计词频。前面用空格作为分隔符其实是不严格的，因为标点符号也是单词之间的分隔符，所以我们需要一个更广泛的分隔符，此时，正则表达式已经憋不住要出场了（下一节我们详细谈它）；<code>strsplit()</code>的分隔符支持正则表达式，而在正则表达式中，单词之间的分隔符可以统一被表达为<code>\\W</code>（反斜杠引导大写字母W），这个特殊表达式可以匹配任意非单词的字符。R中<code>table()</code>函数可以计算一个向量中每个元素出现的频数，于是这事儿就差不多了。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">words = unlist(strsplit(gpl, <span class="string">'\\W'</span>))</span><br><span class="line">words = words[words != <span class="string">''</span>]  <span class="comment"># 去掉空字符</span></span><br><span class="line"><span class="comment"># 频数最大的10个单词</span></span><br><span class="line">tail(sort(table(tolower(words))), <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>冠词the和a出现频率高一点都不奇怪，除去它们和一些常见介词，剩下的基本上就是program这个词了。GPL是什么？它是开源软件的一种许可证，所以程序（program）这个词的词频高也就不奇怪了。</p>
<p>还有一种拆的方式是根据位置来拆，比如取一个字符串的第2至第5个位置上的4个字符，此时我们可以用<code>substr()</code>或<code>substring()</code>函数，例如我们提取上面网页代码中的标题，也就是<code>&lt;title&gt;</code>和<code>&lt;/title&gt;</code>之间的字符串，指定了起始位置和终止位置就可以了：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xie[<span class="number">5</span>]</span><br><span class="line">substr(xie[<span class="number">5</span>], <span class="number">10</span>, <span class="number">24</span>)</span><br></pre></td></tr></table></figure>
<p>现在你学会了拆，会拆还得会拼才行（天下有多少苦命的娃儿因为拆了家里的电器拼不回去而挨骂呀），只拆不拼的只有……呃……咳咳，我就不说了，你自己去回忆《疯狂的石头》里“别摸我”被撞之前那个穿西服的家伙在墙上写什么就好了。R里面<code>paste()</code>函数可以用来拼字符串，它有两个参数：<code>sep</code>和<code>collapse</code>。据我混迹COS论坛多年的经验，这个函数是一朵奇葩，它的神奇之处在于，无数英雄豪杰只知道前一个参数而不知道后一个。于是，我数次感叹，肿么回事啊，一共就这么两个参数，肿么大家永远没有耐心把帮助文档看完呢？为了理解它们，先看一个例子：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">paste(<span class="number">1</span>:<span class="number">3</span>, <span class="string">'a'</span>)</span><br><span class="line">paste(<span class="number">1</span>:<span class="number">3</span>, <span class="string">'a'</span>, sep = <span class="string">'-'</span>)</span><br><span class="line">paste(letters[<span class="number">1</span>:<span class="number">10</span>], collapse = <span class="string">'~'</span>)</span><br><span class="line">paste(<span class="number">1</span>:<span class="number">3</span>, <span class="string">'a'</span>, sep = <span class="string">'-'</span>, collapse = <span class="string">'+'</span>)</span><br></pre></td></tr></table></figure>
<p>看出它们的作用了吗？<code>sep</code>用来横向拼接向量，比如把第一个向量和第二个向量按元素顺序逐对拼起来，而<code>collapse</code>是把一个向量内部所有元素按一个分隔符拼接为单个字符串。按照R的自动扩展原则，如果有一个向量短，它会被首先扩展到长向量的长度，再去拼接。总结一下，<code>sep</code>返回的仍然是一个向量，每个元素是所有向量中的相应位置上的元素拼出来的；而<code>collapse</code>把字符向量“坍缩”为一个字符串。</p>
<p>我再偷一位网友的一个浪漫的拼接字符串例子，我看到的是写在生日蛋糕上的版本，保护隐私起见，请各位不要八卦打听原作者，也请原作者原谅我无耻抄袭创意，阿门。这是一个“唱”生日快乐的函数：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">happy = <span class="keyword">function</span>() cat(<span class="string">'Happy birthday to you\n'</span>)</span><br><span class="line">sing = <span class="keyword">function</span>(person) &#123;</span><br><span class="line">  happy()</span><br><span class="line">  happy()</span><br><span class="line">  cat(paste(<span class="string">'Happy birthday dear'</span>, person, <span class="string">'\n'</span>))</span><br><span class="line">  happy()</span><br><span class="line">&#125;</span><br><span class="line">sing(<span class="string">'COS'</span>) <span class="comment"># 对统计之都唱一嗓子吧</span></span><br></pre></td></tr></table></figure>
<p>这不仅仅是一个浪漫的函数，也深刻反映了程序员的基本素质：抽象与模块化。此时，有些看官可能心里长叹，在程序世界征战代码半辈子，还不如人家一首生日歌。</p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>浪漫不浪漫，最后都得吃饭，所以你还得咬牙学习。简单的拼拆操作当然也远不够数据分析用，还有几项常见的任务：查找、替换、提取符合特定特征的字符。这些操作就得请出正则表达式了（Regular Expression），它是具有特殊含义的字符串，最大的优势在于它根据特征而不是固定的位置来处理数据。先看一个最简单的例子：前面我们提到从我的网页里提取标题字符串，在那里用的是固定位置取子字符串，而写程序的时候，凡是你看到哪里用到了具体的数字，几乎一定代表这段程序没有推广性（只有一个特定的应用场合），下面我们用更具有推广性的正则表达式来提取标题。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gsub(<span class="string">'&lt;title&gt;|&lt;/title&gt;'</span>, <span class="string">''</span>, xie[<span class="number">5</span>])</span><br><span class="line">sub(<span class="string">'&lt;title&gt;(.*)&lt;/title&gt;'</span>, <span class="string">'\\1'</span>, xie[<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<p>上面给出了两种办法：一种是把<code>&lt;title&gt;</code>或<code>&lt;/title&gt;</code>替换为空字符串（删掉了这两串字符剩下的就是标题了），另一种是用圆括号语法配合引用，提取这两串字符之间的所有内容。在这个特例下面，两个办法没什么区别。</p>
<p>R中有一系列类似的函数，这里用到的是其中两个用来替换的函数，参见<code>?grep</code>的帮助页面。这些函数的第一个参数是一个正则表达式，从上面简单的例子里面我们可能已经感受到它的语法了，比如竖线<code>|</code>表示“或者”，这和程序语言很像，而单个<code>.</code>代表任意单个字符，星号<code>*</code>是一个表示匹配任意多次的修饰符，<code>.*</code>一起表示匹配任意字符任意多次，默认会贪婪匹配，即“你有病啊？你有药啊？吃多少？有多少吃多少！吃多少有多少！……”，郭德纲已经把<code>.*</code>匹配的意思讲得很清楚了。圆括号把一组特征括起来，然后跟这一组特征能匹配上的所有字符就可以用反斜杠引导的数字引用引出来，圆括号可以使用多组，每一组匹配到的内容在后面都可以用顺序的数字（1-9）引用，因为我们这里只用了一组括号，所以后面用的是第1组引用。</p>
<p>现在我们把上面两句代码用普通语言“翻译”一遍：</p>
<ul>
<li>替换字符串<code>&lt;title&gt;</code>或者<code>&lt;/title&gt;</code>为空字符串（即：删掉它们）</li>
<li>搜索<code>&lt;title&gt;</code>，然后开始匹配任意字符，直到遇到<code>&lt;/title&gt;</code>为止，然后把匹配到的这一段字符提出来</li>
</ul>
<p>如此一来，我们就不必管<code>&lt;title&gt;</code>和<code>&lt;/title&gt;</code>究竟出现在第几个字符的位置上了，正则表达式自然会去找它们。</p>
<p><code>grep</code>这一组函数基本都有一个带<code>g</code>和不带<code>g</code>的版本，比如<code>gsub()</code>和<code>sub()</code>，<code>gregexpr()</code>和<code>regexpr()</code>。带<code>g</code>的会尽量贪婪操作，而不带的只操作一次。为了看清这一点区别，我们写一个上面第一种方法的<code>sub()</code>版本：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub(<span class="string">'&lt;title&gt;|&lt;/title&gt;'</span>, <span class="string">''</span>, xie[<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>&lt;/title&gt;</code>没有被替换掉，这是因为<code>sub()</code>先看到了<code>&lt;title&gt;</code>，把它替换为空，它就认为自己的工作完成了，于是马上返回结果；而<code>gsub()</code>则会一直在字符串中找，凡是能找到正则表达式规定的特征，就去执行任务。</p>
<p>正则表达式有一些成体系的字符集，比如大小写字母、数字、标点、空格等（参见<code>?regexp</code>，这是你需要看八百遍的文档），它可以让我们减少不少打字的力气。正常来说，如果要匹配一组字符，我们可以用方括号<code>[]</code>，在里面挨个写上我们想匹配的字符，例如<code>[abc]</code>匹配字母abc中的任意一个。方括号中如果第一个字符是<code>^</code>，那么它的意思是匹配不含后面那些字符的字符（它是否定操作符），比如<code>[^defg]</code>匹配不含defg中任意一个字母的字符。</p>
<p>下面的例子来自于<code>http://cos.name/cn/topic/104126/</code>，其实是个没事找抽的例子，但可以说明字符集的基本用法。我们的任务是从几行字符串中提取R包的名字（包名由所有大小写字母、数字和点构成），先上代码：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pkgs = readLines(<span class="string">'04-package-names.txt'</span>)</span><br><span class="line">str(pkgs)</span><br><span class="line">cat(pkgs, sep = <span class="string">'\n'</span>) <span class="comment"># 原始文本</span></span><br><span class="line">pkgs = gsub(<span class="string">'([^"]+)"([a-zA-Z0-9\\.]+)"'</span>, <span class="string">'\\2 '</span>, pkgs)</span><br><span class="line">pkgs = unlist(strsplit(pkgs, <span class="string">'[[:space:]]+'</span>))</span><br><span class="line">str(pkgs) <span class="comment"># 31个包名，搞定了</span></span><br></pre></td></tr></table></figure>
<p>原始数据中含有一些干扰字符需要去掉，如中括号和数字以及引号。上面的正则表达式的意思是：用了两个括号，但后面只引用了第2个括号的内容，也就是第1个括号匹配到的东西都被扔掉了；第1个括号用到了否定符<code>^</code>，表示匹配非双引号的任意字符，那么<code>gsub()</code>运行的时候就从头到尾先找不是双引号的字符，首先看到<code>[</code>，它不是双引号，配上，再看到一个数字，同样配上，直到走到双引号前停止，接下来的特征是双引号引起来的<code>[a-zA-Z0-9.]</code>，这个不说你大概也能猜到了，它匹配所有小写大写字母、所有10个数字和点，凡是这样的字符统统进入第2个引用，注意2后面还有个空格，所以真正替换成为的内容是第2组内容加上空格。最后用空格字符集<code>[:space:]</code>拆分得到的结果就是包名的向量了。</p>
<p>话说这例子为什么是找抽？其实这数据是<code>.packages(TRUE)</code>的结果打印在R中得来的，现在又要绕回去，真心是吃饱了没事干，但生活中这种找抽的事情其实不少，比如好好的文本数据，有些人非得把它导进Excel存为二进制<code>*.xls</code>格式，让程序员抓耳挠腮想办法去读取它。</p>
<p>正则表达式使用时往往有很多路可以走，因为不同的规则对一个数据来说匹配的结果可能一样，这就需要忍者的观察力和严谨性了。一条正则表达式也许对这个数据有用，但推广到下一条数据时就不行了。所以，究竟什么是严格的特征，你需要非常仔细地考虑，老实说，我自己每次写正则表达式都要测试好半天。</p>
<p>由于正则表达式有些字符有特殊意义，所以如果就是要匹配这样的字符，那么我们需要用反斜杠引导，比如要匹配数据里的点<code>.</code>就不能直接写点，而要写<code>\\.</code>，这才是真正的点本身，否则它就匹配任意单个字符去了，这也是初学者最容易犯的错误之一。类似的特殊字符还有一大串，参见<code>?regexp</code>中说的元字符（我说了这个页面要看八百遍）。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gsub(<span class="string">'.'</span>, <span class="string">'='</span>, <span class="string">'a.b.c'</span>)  <span class="comment"># 不对劲儿啊</span></span><br><span class="line">gsub(<span class="string">'\\.'</span>, <span class="string">'='</span>, <span class="string">'a.b.c'</span>) <span class="comment"># 这才是正道</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谢益辉-two]]></title>
      <url>http://yoursite.com/2016/08/06/r-ninjia-2/</url>
      <content type="html"><![CDATA[<p>本系列来源于谢益辉的github. <a id="more"></a></p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>了解一门语言，当然要从它的数据结构开始，否则你无法操纵程序中的对象。这对单身忍者尤其重要：有时候胡子拉碴忙活了大半夜，突然程序告诉你连对象都找不到，你悲催的心情，一定凉过杜甫的茅屋为秋风所破歌。</p>
<p><a href="https://i.imgur.com/KD3EZ.jpg" target="_blank" rel="external">对象很重要</a></p>
<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>忍者判断数值相对大小从来不用大于小于或等号，也从来不目测，因为在浮点数运算中，大小比较从来不靠谱。以下这事儿让COS的R版主都震惊了（<code>http://cos.name/cn/topic/106794</code>）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x=seq(<span class="number">0</span>,<span class="number">1</span>,by=<span class="number">0.2</span>)</span><br><span class="line">y=seq(<span class="number">0</span>,<span class="number">1</span>,by=<span class="number">0.2</span>)</span><br><span class="line">y[<span class="number">4</span>]</span><br><span class="line">x[<span class="number">3</span>]</span><br><span class="line"><span class="number">1</span>-x[<span class="number">3</span>]</span><br><span class="line">y[<span class="number">4</span>]&gt;<span class="number">1</span>-x[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>竟然出现了0.6大于0.6的情况，版主大人大呼坑爹。当时我的回帖是：</p>
<blockquote>
<p>作为R版版主，应该做到在凌晨四点突然被人叫醒问你10乘以0.1等于几，你在1秒钟之内斩钉截铁回答，不是1！（R FAQ 7.31）。</p>
</blockquote>
<p>简单来说就是浮点数在计算机中的表达有限制，不能以任意精度存储，所以尤其是微小的数字或巨大的数字在运算时经常会有些意外情况。再举几个例子：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq(<span class="number">0</span>,<span class="number">1</span>,<span class="number">.1</span>)</span><br><span class="line">seq(<span class="number">0</span>,<span class="number">1</span>,<span class="number">.1</span>)==c(<span class="number">0</span>,<span class="number">.1</span>,<span class="number">.2</span>,<span class="number">.3</span>,<span class="number">.4</span>,<span class="number">.5</span>,<span class="number">.6</span>,<span class="number">.7</span>,<span class="number">.8</span>,<span class="number">.9</span>,<span class="number">1</span>)</span><br><span class="line"><span class="number">.3</span>-<span class="number">.7</span>+<span class="number">.4</span>==<span class="number">0</span></span><br><span class="line">sqrt(<span class="number">2</span>)^<span class="number">2</span>==<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h2 id="数据框"><a href="#数据框" class="headerlink" title="数据框"></a>数据框</h2><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[谢益辉-one]]></title>
      <url>http://yoursite.com/2016/08/06/r-ninja-1/</url>
      <content type="html"><![CDATA[<p>本系列来源于谢益辉的github.<a id="more"></a></p>
<h1 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h1><p>你有志于成长为一名忍者，很好，那么首先去把火影看完了再来看这本秘笈吧。</p>
<p>当然，不看火影也没关系。咦，怎么有些观众朋友真的离场了？剩下的朋友就别去叫他们了。R这货，是统计学家为统计学开发的一套数据杀器，但那只是对下忍的介绍，对一名上忍来说，必须对它有更全面的认识，否则你查克拉再强、分身再多，在执行任务时也可能会被各种与统计无关的细节给缠死。R的安装有专门的手册，名曰 <code>R Installation and Administration</code> ，我就不说它在哪儿了，你也别问我要，如果你真的那么感兴趣，请自己去找。</p>
<p>哎哎，怎么又有几位客官走了？其实不用这么听话的，忍者得有自己的判断。我不说的原因是R官方的所有手册基本上都很坑爹，R核心团队都是写代码的高手，可是手册写出来都让人昏昏欲睡，一点读的欲望都没有，这样也好，让他们专注于代码开发吧。迄今为止，我唯一看的手册是 <code>Writing R Extensions</code> ，因为我需要写R包，不按它来就没法整；官方手册技术性太强，这也给无数作者创造了写作机会，不然你也不会看到这里来。</p>
<h2 id="安装R"><a href="#安装R" class="headerlink" title="安装R"></a>安装R</h2><p>R的首页在<code>http://www.r-project.org</code>，你打开之后一定很失望，苍天呐，世上怎么还有这么古董的网站！几乎是纯文本网站（高级码农都这德行），首页上的那幅图已经七八年没换过了，还用着古老的框架技术。算了，不吐槽了，下载链接在左侧，写着CRAN的那地方。你是忍者，所以你当然不能直接去下载就完事，你得了解CRAN（Comprehensive R Archive Network）这一套东西。所谓的C什么AN是自由软件世界常见的软件分发方式，类似的还有为TeX准备的CTAN，为Perl弄的CPAN等。Linux打一出生就是通过网络发布的，直到今天这个特性还是没有变，后面再详谈Linux的问题。Archive Network的大意是这软件有个主服务器，然后在世界各地有一些镜像服务器，上面的文件和主服务器保持同步，这样减轻主服务器的下载压力，并让其它地区的用户能有更快的下载速度（从离自己近的本地服务器下载）。R除了自己的主程序，还有三千多个用户贡献的附加包，以及各种文档，这一大箩筐东西被复制到世界各地几十台服务器上供用户下载。</p>
<p>你是中国用户，可以选一个国内的镜像。这里我们要特别感谢那些志愿提供服务器的单位对自由软件的支持，如厦门大学、中科院、中科大和北京交通大学等。咱们魏太云大版主对这些事情比较关心，国内要是出了新的镜像通常都是他率先报道（例<code>http://cos.name/cn/topic/106549</code>）。</p>
<h3 id="R主程序"><a href="#R主程序" class="headerlink" title="R主程序"></a>R主程序</h3><p>先说Windows。要是能找到下载地址就去下，找不到的话，可爱的R core给做了一个自动重定向的网页：<code>http://cran.r-project.org/bin/windows/base/release.htm</code>，只要点这个链接，你就会下载最新版本的R，地址可以改为相应的本地镜像，如<code>http://ftp.ctex.org/mirrors/CRAN/bin/windows/base/release.htm</code>。各位忍者请务必研究这个页面的源代码，搞清楚为什么这个页面会让浏览器自动下载Windows版本的R安装程序。</p>
<p>Windows中安装R注意几点：</p>
<ol>
<li>把默认安装目录中的R版本号去掉，比如要是R告诉你装在<code>C:/Program Files/R/R-2.15.0/</code>，不要接受这个结果，把它改成<code>C:/Program Files/R/</code>，原因后面解释；</li>
<li>避免安装在中文目录下，因为Windows世界的各种鸟语方言编码问题，跟中文有关的东西往往会扯上麻烦；</li>
<li>用自定义方式安装（装任何软件都用这种方式，你得了解你的软件里有什么组件、装哪儿去了以及有什么选项配置），默认情况下会装上翻译文件，但R的中文翻译实在不咋地，几年前我实在忍不下去了（那View菜单竟然翻译为单字“看”，这上哪儿说理去啊），动手把界面上的词句重新翻译了一下，好歹像人话了，不过R内部还有大量的条目没有翻译或翻译得很差，要是报个错你都不知道它到底在说什么；所以，还不如直接用原生的英文，不要安装翻译文件，不过这一点在R 2.15.0之后已经不可能了，R 2.14.2以及更早的版本我们可以在安装的时候就选择不要翻译文件，而2.15.0以后的语言配置参见本章最后关于<code>Rconsole</code>文件的说明；</li>
</ol>
<p><a href="https://i.imgur.com/5ZVXx.png" target="_blank" rel="external">去掉安装目录中的版本号目录</a></p>
<p><a href="https://i.imgur.com/eI0sM.png" target="_blank" rel="external">R 2.15.0的安装界面（可选32位或64位的R）</a></p>
<p><a href="https://i.imgur.com/kOphm.png" target="_blank" rel="external">R 2.15.0以前可以选择不安装消息翻译文件</a></p>
<p>关于第1点，2011年4月我跟R core结结实实打了一仗，最终没有人同意我（战场：<code>http://bit.ly/GFluEX</code>）。为什么我认为默认带上版本号是个很糟糕的选择呢？主要是R一直在不断升级中，而在可怜的Windows底下没有直接升级的方式（快投奔Linux吧），必须先卸载老版本，下载新版本再重新安装。默认情况下，新版本装在新目录下，这样就导致你过去的设置或改动可能会出问题，在我的经历中，至少有两点麻烦：</p>
<ol>
<li>PATH环境变量需要手动更新（下一节再说忍者必读的PATH）；</li>
<li>过去安装的附加包要么全部重新安装，要么手工挪动到新目录下；</li>
</ol>
<p>总之问题就是两个不同版本的R安装在不同目录下，你得废半天劲去更新各种配置。除非你真的需要多个版本，否则建议永远安装在同一个固定目录下。Windows Vista之后的用户还得关心权限问题，这又是Windows坑爹的发明，过去系统目录下（一般是C盘下）可以随便读写，现在要读写必须要弹个对话框让你确认或输密码。R等不了这事儿，所以要是没有写文件的权限，有些事情就得歇菜，例如安装附加包。这种情况下，建议干脆不要装在那个什么<code>C:/Program Files/</code>下，而是自己新建一个目录，比如<code>C:/Software/</code>，把你自己的软件装在这个目录下，Windows管不着。</p>
<p>再说Linux。前面说了，Linux是嘴里含着互联网出生的，尽管它后面衍生了很多个发行版，多数情况下，软件都可以从发行版的软件仓库中直接安装，不必自行下载，R也不例外，它提供了四种发行版的仓库：Debian、RedHat、OpenSUSE和Ubuntu。我用的Linux发行版是Ubuntu（普通青年的选择），下面简单说说Ubuntu下的安装，这些步骤都在CRAN页面里，看得懂英文就能按照指示做（<code>http://cran.r-project.org/bin/linux/ubuntu/</code>）。</p>
<p>首先添加R的软件库，可以从Synaptic软件包管理器中<code>Settings --&gt; Repositories --&gt; Other Software</code>然后添加（Add），把那一行<code>deb</code>命令贴在文本框中即可，但注意把镜像地址更改为合适的网址。</p>
<p><a href="https://i.imgur.com/4uZ4M.png" target="_blank" rel="external">在Synaptic中添加R的软件库</a></p>
<p><a href="https://i.imgur.com/0dWk4.png" target="_blank" rel="external">添加R软件库的命令行</a></p>
<p>由于Linux下的软件库通常需要负责人签名验证安全性，在添加完R的仓库地址之后，还需要把仓库负责人的钥匙信息导入你的系统，这样你的Ubuntu才能放心从那里安装R，导入只是两行命令的事儿（打开终端Terminal敲命令）：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9</span><br><span class="line">gpg -a --export E084DAB9 | sudo apt-key add -</span><br></pre></td></tr></table></figure>
<p>这样在Synaptic里刷新一下软件包的信息（Reload），然后搜索<code>r-base-dev</code>，钩上，安装即可，或者等价地，用命令行安装：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install r-base-dev</span><br></pre></td></tr></table></figure>
<p>然而真正的忍者怎么能去看图文教程装软件呢？他从来都需要追求纯命令行搞定一切，否则让你装1台机器你点了n下鼠标，让你装30台机器你就得点<code>30 * n</code>次鼠标，从此你的生活就是，睡觉从不自然醒，不数钱手也抽筋。添加软件仓库根本用不着去想什么<code>/etc/apt/sources.list</code>或者点什么菜单按钮，下面是真正的忍者安装R的方式：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-add-repository -y <span class="string">"deb http://cran.rstudio.com/bin/linux/ubuntu `lsb_release -cs`/"</span></span><br><span class="line">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install r-base-dev</span><br></pre></td></tr></table></figure>
<p>命令<code>apt-add-repository</code>用来添加仓库，<code>-y</code>选项表示“问，问毛线问，给我装就是了”，<code>lsb_release -cs</code>用来获得当前Ubuntu的版本名称，如<code>precise</code>/<code>raring</code>之类的（忍者从不把变量写死，能动态获得的东西都动态获得）。下面<code>apt-key</code>添加钥匙，接下来的事情前面都已经讲过了。</p>
<p>装完之后基本上就没什么维护的事儿了，因为Ubuntu会定期提醒你软件仓库中什么软件出了新版本，如果你需要更新，只是点一下OK的事情，不像Windows下得手工卸载、下载、安装。唯一可能需要改动的是，如果将来Ubuntu自身的版本升级了，比如从oneiric升级到precise版本，那么上面的软件库地址里的相应版本也需要手工更新。</p>
<p>对传统或高级Linux用户来说，装任何软件都还有一套古老的办法，那就是用伟大的<code>make</code>命令从源代码自行编译，很有黑客范儿。大致步骤很简单：从网上下载软件的源代码，通常是一个<code>*.tar.gz</code>压缩文件，解压缩，然后在终端中切换目录到解压缩文件夹下，运行：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>这的确是个办法，几乎对任何软件适用。如果你（比如为了用满屏幕的命令行赢取PPMM的盲目崇拜）鼓起勇气尝试这一条路，你可能两个小时装不好。此时你才触碰到Linux的一个核心特征：软件依赖。在Linux世界里，经常存在A软件依赖于B软件，B依赖于C这样的现象，可能是因为开源的缘故，作者经常把自己的软件构建在别人的软件基础之上，这就导致一片依赖的海洋（当然不是所有的软件都有一大串依赖）。R也依赖大量的其它软件包，如果现在那PPMM还在眼巴巴看着你，那么就用这条无敌命令一次性解决依赖问题：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get build-dep r-base-dev</span><br></pre></td></tr></table></figure>
<p>这样就一步把所有依赖包都装上了，然后可以按照上面说的<code>make</code>的方式编译。否则，就看<code>./configure</code>的输出，报告缺啥装啥，看不懂消息就上Google搜，自然会有人告诉你那个缺少的<code>*.h</code>头文件对应的是哪个包，就这样熟练的人可能三个小时可以装完，不熟的人大概三天可以装好，这里面尤其是Cairo那套东西，安装起来折磨死人。所以只要不是闲着没事干，不要轻易自行从源文件编译，不管它看起来多酷，当然，把它当作了解Linux的练习是可以的，初级Linux用户看到这一堆东西可能确实有某种自豪感。</p>
<p>那些Linux软件仓库里放的软件实际上也是通过<code>make</code>的方式从源文件一步步编译出来的，只不过是服务器上预先编译好了，省去了用户自行编译和解决依赖的麻烦，直接就可以装编好的二进制包。</p>
<p>最后是Mac OS，我不熟，以下指导来自杨一帆：同样可以使用编译安装（此时不含GUI，但是Mac预先包含的ATLAS库函数明显优于R自带的BLAS；或者简单地使用<code>http://cran.r-project.org/bin/macosx/</code>提供的PKG包，32/64/Intel/PPC版本都包含了GUI。唯一需要注意的是系统的版本，10.4以下的会有各种问题。</p>
<h3 id="R附加包"><a href="#R附加包" class="headerlink" title="R附加包"></a>R附加包</h3><p>整个R系统主要是由一系列程序包（Package）组成，第一次装完R可以运行<code>.packages(TRUE)</code>查看R自带的包名。除开这些主程序包之外，CRAN上还有数千附加包，由R核心开发团队之外的用户自行提交，这数量级基本上保证用R干啥的都有，所以上天入地飞檐走壁不成问题。</p>
<p>R包数量之大，有两个原因：一是R语言本身的确很强大，而且易开发，我通常非常佩服那些做了很牛的基础工作而且支持插件开发的软件，这需要程序在早期就有很好的设计；二是向CRAN提交包没有门槛，只要服从开源的许可证，什么人都可以写包，无论质量优劣。毫无疑问，CRAN上必然有很差劲的附加包，俗话说，CRAN大了，什么包都有。在安装附加包之前，我们得对包的质量有所判断，所以我们需要某种导航。导航有两种方式，官方的和民间的，后者就是口口相传，前者在CRAN上有一个链接，叫Task Views。</p>
<p>关于这坑爹的程序包导航，没有看过它的用户第一次恐怕还真找不到，因为R主站上没有它的链接。R core的答复让人很伤心无奈，不在主页放链接的原因是怕用户直接访问CRAN主服务器给服务器增加负担，所以这个导航不放主页，而在CRAN镜像上躲猫猫。即，你访问<code>http://www.r-project.org</code>看不到导航，必须去<code>http://cran.r-project.org</code>或其它CRAN镜像才能看到。我当时看到这个解释有点石化的感觉。谁有钱了给R core们捐几台服务器吧！免得以后再看见这么寒碜的回答。</p>
<p>开源软件通常都一定提供源代码包给你，但不一定提供编译好的二进制包，我们知道对计算机来说，它不认识源代码，只能运行编译过的代码。用过C语言的对此应该会有深刻印象，你先写一个<code>.c</code>文件，再用编译器把它编译为<code>.exe</code>（Windows）或<code>.so</code>（Linux）等二进制文件才能运行。R也一样，不仅它自己的主程序有源代码可以下载，附加包也一样有源代码。源代码包的形式通常是一个<code>*.tar.gz</code>压缩包，到CRAN主页一看就能找到R自己的源代码，形如<code>R-x.x.x.tar.gz</code>，其中<code>x.x.x</code>是R的版本号，如<code>2.14.2</code>；而关于附加包，可以从CRAN左侧的<code>Packages</code>链接进去找到所有附加包的列表页面，然后进入具体的包的页面，如果你已经知道包的名字，则可以用</p>
<blockquote>
<p><a href="http://cran.r-project.org/package=foobar" target="_blank" rel="external">http://cran.r-project.org/package=foobar</a></p>
</blockquote>
<p>直接访问<code>foobar</code>包的页面。其实忍者根本不来这一套，记那么多没用的步骤干嘛，直接打开Google搜CRAN加包名肯定就找到了。每个包的页面里有包的描述和卸载链接，通常有三个链接，分别对应着源代码（<code>foobar_x.x.tar.gz</code>）、Mac二进制包（<code>foobar_x.x.tgz</code>）和Windows二进制包（<code>foobar_x.x.zip</code>），视你的操作系统你可以选择一个下载。注意二进制包都是编译过的，所以那里面是看不到源代码的；要看源代码，必须下载源代码包解压缩之后才能看到，具体的某个函数定义在哪儿，就靠你的文本编辑器的搜索功能了，或者你的直觉。这一大套什么源代码什么二进制文件对普通青年都没用，只是对想深挖包里函数源代码的忍者提供一个下手的方向。</p>
<p>普通青年在R里面安装附加包只需要用<code>install.packages()</code>函数，比如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install.packages(<span class="string">'animation'</span>)</span><br></pre></td></tr></table></figure>
<p>当然我这是强行植入广告，因为<strong>animation</strong>包是我写的。如果你没有指定R的镜像地址，R会首先问你从哪个镜像安装，选一个近的或顺眼的即可。当你第一次运行这个命令时，R会这样思考：</p>
<ol>
<li>你的R的安装目录可写吗？如果有写的权限，那么就把包装到R安装目录下，比如<code>C:/Software/R/library/</code>；</li>
<li>如果安装不可写，比如你装在Windows关键的系统目录下，或者是Linux的<code>/usr/</code>目录下，那么R会问你要不要在你的用户目录下新建一个文件夹用来安装附加包；</li>
</ol>
<p>现在有一项重要的忍术要学习：用户目录。Windows用户对此可能没有感觉，因为软件都悄磨叽往这个目录下写东西，你也没注意过，比如上网的缓存文件等；Linux下的很多软件都必须使用这个目录，因为其它所有目录对当前用户来说都是没有写权限的（除非以超级用户身份输密码再执行）。用户目录的特征是它往往是当前系统用户可写的目录，而且所有写的数据只对当前用户有效；要是换个用户登录这个系统，前一个用户的数据对现在的用户毫无影响。这就比较适合存放软件的配置资料，每个用户的配置只对个人有效，免得同一个系统的不同用户之间相互干扰。欲知用户目录在哪儿，请在R中执行：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">normalizePath(<span class="string">'~'</span>)</span><br></pre></td></tr></table></figure>
<p>波浪线<code>~</code>在操作系统中通常表示用户的HOME根目录，<code>normalizePath()</code>函数用来“标准化”一个路径，比如把<code>~</code>扩展为真实的物理路径。对于第一次听说用户目录的同学来说，不妨看看自己的用户目录下究竟有多少文件和文件夹：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以.开头的都是隐藏文件</span></span><br><span class="line">list.files(<span class="string">'~'</span>, all.files = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p>前面说道，如果R的安装目录不可写，R会在用户目录下创建一个新目录安装包，默认情况下这个目录名由<code>R版本号</code> + 操作系统信息 + <code>library</code>构成，但仍然是为了将来升级方面，我不推荐使用R默认的目录名称，因为它带版本号。那么如何人工指定R包的固定安装目录呢？这涉及到更高级的忍术：环境变量。下一节分解。</p>
<p>R包通常都是纯R写成的，但也有掺杂别的程序语言的，比如C/C++/Fortran，这都是需要编译才能用的代码，这种情况下，CRAN服务器一般都会把源程序包预先编译为Windows/Mac二进制包，所以用户通常不需要了解如何编译R程序包（这方面的知识我们留到更后面再详述），直接装就是了，但有一种特别的情况例外，就是R包依赖于外部系统程序，这些程序没有打入R包发布，所以用户需要额外安装单独的外部程序。比如打开<strong>animation</strong>在CRAN上的页面<code>http://cran.r-project.org/package=animation</code>可以看到有一栏<code>SystemRequirements</code>，它说明了这个包的部分函数依赖于外部程序，如GraphicsMagick。</p>
<p>对Linux用户来说，R默认安装方式就是从源代码包直接编译，此时要是有外部依赖软件，可能就会稍微麻烦一点，比如<strong>XML</strong>包依赖于<strong>libxml2</strong>，装R包<strong>XML</strong>之前，为了这个包能成功编译，必须先装系统软件<strong>libxml2-dev</strong>，注意是dev版本，因为通常这种版本里才含有头文件（<code>*.h</code>），Linux下的软件编译通常需要完整源文件。在你头疼之前，应该想到这种问题别人也一定觉得烦，所以必然有另外的办法。CRAN的Debian维护者把一些常用的依赖外部软件的R包集合起来直接放到了Debian的软件仓库中，在服务器端就直接解决依赖并编译好，这样我们就不需要额外安装那些源程序包了。这些特殊的包在Debian/Ubuntu中名为<strong>r-cran-foobar</strong>（全小写），比如我们可以直接安装<strong>XML</strong>包：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install r-cran-xml</span><br></pre></td></tr></table></figure>
<p>类似的头疼R包还有<strong>RGtk2</strong>和<strong>rggobi</strong>等，在Synaptic中一搜就有。安装R包不到万不得已不要去使用蛮力（从源代码编译），不值得耗费那时间，忍者要集中于自己的任务，你最终是要折腾数据去的，不是去写Linux内核的。</p>
<p>R包与包之间就像Linux程序包一样也可能存在依赖关系，通常<code>install.packages()</code>会自动处理依赖，如果A包依赖于B包，那么装A的时候会自动装B（这例子没举好，我应该用A和C的），就像Ubuntu下<code>apt-get install</code>也能自动解决依赖一样。</p>
<h2 id="配置R"><a href="#配置R" class="headerlink" title="配置R"></a>配置R</h2><p>软件选项多到底是好事还是坏事？我也不知道，总之R像其它开源软件一样，有无穷的选项可配置。对新手来说，这是地狱；对熟悉的用户来说，这也许是天堂吧。我们主要介绍两个配置文件，<code>.Renviron</code>和<code>.Rprofile</code>。这两个文件名看起来有点奇怪，怪在哪儿？它们只有扩展名，没有主文件名，平时我们看见的文件名似乎都是<code>foobar.doc</code>。在操作系统中有一个默认的规则，凡是以点开头的文件都是隐藏文件，而且通常都是配置文件。前面那句<code>list.files()</code>代码你要是运行过，可能就会发现很多以点开头的文件和文件夹。</p>
<p>R启动的时候会在系统的若干位置寻找配置文件，如果文件存在就会使用这些配置。这个巨复杂的启动过程在<code>?Startup</code>中有详细说明（问号是R中查看帮助的操作符），这是典型的Linux喜欢干的事情，什么点文件，什么环境变量，用得不亦乐乎。我总觉得这些东西把事情复杂化了，所以我只介绍两个配置文件，要是你愿意折腾那一堆系统环境变量，那么请便，我只介绍<code>PATH</code>这一个最重要的系统变量。</p>
<h3 id="Renviron文件"><a href="#Renviron文件" class="headerlink" title=".Renviron文件"></a><code>.Renviron</code>文件</h3><p>这个文件是为R自身设置一些环境变量的，这里面的环境变量仅仅对R有效，不改变操作系统的设置。先说一下什么是环境变量：它们是在当前操作系统环境中的一些变量，同一个变量对不同的用户或不同的系统可能取值不同，这些变量对整个系统可见，所以系统内的所有程序都可以读取它们的值，就像我们写程序常常会事先赋值给一些常量供后面的代码使用一样。环境变量不需要有特定的名称，可以任意命名，但有些名称是约定俗成有特定意义的，比如<code>PATH</code>。</p>
<p><code>.Renviron</code>文件放在你的用户目录下，也就是<code>~/</code>。你可以在R里面直接打开这个文件^[注意Windows下你可能无法用鼠标右键新建文件的方式直接创建这个文件，聪明的Windows只允许用户用命令行创建以点开头的文件名，请问你知道<code>mkdir</code>这个命令吗，或者你知道命令行窗口在哪儿打开吗？]：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果文件不存在，它会被自动创建</span></span><br><span class="line">file.edit(<span class="string">'~/.Renviron'</span>)</span><br></pre></td></tr></table></figure>
<p>我只推荐放一个环境变量在这里，就是<code>R_LIBS_USER</code>，它指定R的附加包安装目录，比如这个文件里面可以写：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R_LIBS_USER=<span class="string">"~/R"</span></span><br></pre></td></tr></table></figure>
<p>写入这一行设置之后，保存文件，重启R，现在R就知道以后安装R包就优先安装到<code>~/R</code>目录下，也就是在用户目录下创建一个名为<code>R</code>的文件夹用来存放附加包。因为这个目录是固定的，所以即使将来升级R，R也会使用这个目录装包，你再也不必更新关于包的配置。另外一个好处是，R的附加包和主程序包分开在不同的位置，如果你不想用附加包了，你完全可以一口气把<code>~/R</code>删光，而完全不影响R自身的运行；否则，要是R主程序和附加包混在一个目录下（默认情况就是这样，除非主程序目录不可写），对包的管理来说也是大麻烦事。忍者必须把指挥部和小兵分清楚。注意如果<code>~/R</code>这个目录不存在的话，你需要自己创建它，这个也可以在R里面操作：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir.create(<span class="string">'~/R'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Rprofile文件"><a href="#Rprofile文件" class="headerlink" title=".Rprofile文件"></a><code>.Rprofile</code>文件</h3><p>前面说到R启动时，会查看一系列文件；其中<code>.Renviron</code>文件用来设置一些R要用的环境变量，而<code>.Rprofile</code>文件则是一个R代码文件，在R启动时，如果这个文件存在，它会被首先执行。因此，如果我们有一些任务要在R启动时运行，或有一些个人选项要配置，都可以写在这个文件里。Windows下这个文件还可以叫另一个名字，但忍者应该遵守统一的纪律，所以我们只用<code>.Rprofile</code>这一个文件名。在R里面同样可以用<code>file.edit()</code>函数打开这个文件：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.edit(<span class="string">'~/.Rprofile'</span>)</span><br></pre></td></tr></table></figure>
<p>R的<code>options()</code>函数可用来设置R运行时的一些选项，其中一个常用的选项就是CRAN镜像地址，它告诉R应该从哪里安装附加包。这个选项默认为空，所以每次安装包或更新包，R都要跳出来问你选择哪个CRAN镜像，跳多了你可能也觉得烦，所以不如直接事先指定这个选项好了。以下是一种我在<code>.Rprofile</code>中的配置：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">options(repos = c(CRAN = <span class="string">"http://streaming.stat.iastate.edu/CRAN"</span>,</span><br><span class="line">                  CRANextra = <span class="string">"http://www.stats.ox.ac.uk/pub/RWin"</span>))</span><br></pre></td></tr></table></figure>
<p>因为我在爱荷华州立大学，我们系有CRAN镜像，所以当然从这里安装最快；<code>CRANextra</code>主要是为Windows准备的，因为CRAN上有极少数的包没有Windows版本，但牛津大学的Ripley大人好心提供了Windows的二进制编译版本，所以那些包可以从他那边安装。</p>
<p>这个文件中可以放任意R代码，就看各位的想象力和R功力如何了，用好这个文件可以为R编程增加不少方便。因为我是R包开发者，而我常用到<strong>devtools</strong>包，所以我的<code>.Rprofile</code>文件中还有一句：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (interactive()) &#123;</span><br><span class="line">  suppressMessages(<span class="keyword">require</span>(devtools))</span><br><span class="line">  options(warn = <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段话是什么意思，留给读者思考。</p>
<h3 id="PATH环境变量"><a href="#PATH环境变量" class="headerlink" title="PATH环境变量"></a><code>PATH</code>环境变量</h3><p>写这一节的时候，哥的心情十分复杂，因为这个环境变量之重要、人们对它忽视之极以及某操作系统对它隐藏之深，让哥常常感到深深绝望。普通青年可以跳过本节，但忍者必须对本节了如指掌。以下是在某操作系统上找PATH变量的步骤：</p>
<blockquote>
<p>“我的电脑”（右键）–&gt;“属性”–&gt;“高级”–&gt;“环境变量”–&gt;“系统变量”–&gt;PATH</p>
</blockquote>
<p>这里我们可以看到一连串路径。为什么系统要有个PATH变量？原因就是为了能够脱离程序的绝对路径以命令行方式来运行程序，这样使得程序员不必担心你的程序装在什么位置。当你在命令行窗口（Linux系统下叫终端，Terminal）中敲入一个命令时，系统就会从这一系列的PATH路径中去找你敲的这个程序是否存在，如果存在就运行它。Windows系统菜单“开始”–&gt;“运行”（或者快捷键Win + R），输入<code>cmd</code>回车运行，就会打开一个命令行窗口。如果你从来没用过这玩意儿，那你肯定是Windows深度中毒者，不妨先玩玩<code>dir</code>、<code>cd ..</code>等简单的系统命令，你每敲一个命令，系统都会从PATH中找有没有对应的可执行文件，比如敲R就会找R.exe或R.bat之类的程序文件，如果它们都不在PATH下，那么这个命令就会报错。</p>
<p>R有多种调用方式，最常见的就是打开R，在里面输入代码运行，这称为交互式的运行，因为用户可以和R实时交互；我们还可以用非交互式方式运行R，这就需要我们能够在命令行窗口中直接调用R，继而需要R自身的路径在系统PATH变量中。</p>
<p>这个路径在哪儿？如果你记不住自己的R装在哪儿，没关系，打开R，输入<code>R.home(&#39;bin&#39;)</code>就知道了。Windows下通常是类似于<code>C:/Program Files/R/R-2.xx.x/bin/</code>这样一个路径。说到这里，我得回音体一句：安装R的时候尽量装在一个不带版本号的目录下，否则将来更新很麻烦，而且每次装新版本的R还得再修改PATH变量，因为bin路径变了。当然，这一切都只对Windows有效（Windows简直就是为了折磨忍者而生的），Linux和Mac用户不用操心这个事情，因为它们的可执行文件通常放在某个特定PATH路径下，比如在Linux下查看R的可执行文件位置，就会发现它在<code>/usr/bin/</code>下，而这个目录本身就在PATH里面：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ which R</span><br><span class="line">/usr/bin/R</span><br><span class="line">$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure>
<p>把R的bin路径添加到PATH中之后，可以在命令行窗口中测试一下是否能调用R：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R --version</span><br></pre></td></tr></table></figure>
<p>如果上面的命令打印出R的版本号，那么就配置成功了。这里敲R对命令行来说，就是看看PATH中那些路径里有没有一个路径下包含R.exe或者R.bat之类的可执行文件，这就是所谓的“脱离绝对路径运行程序”。由于Linux系统的程序管理方式和Windows不同（可执行文件通常统一放在<code>/bin/</code>或者<code>/usr/bin/</code>目录下），所以通常没有这些配置痛苦。</p>
<p>为什么要以非交互式的方式运行R？其实这个问题可以扩展为，为什么要用命令行的方式调用程序？这就涉及到图形用户界面（GUI）操作和命令行界面（CLI）的话题了。计算机和人类各有所长，计算机擅长做枯燥的事情，比如玩儿命循环，跑十次和跑十万次对计算机来说只有时间上的差别，但人类肯定受不了多次重复操作；人类应该做的事情就是把自己的意愿写成代码，指示计算机去做。命令行可以做大量的图形界面无法或很难做的事情，比如批量抓取网页解析数据，要是三五个网页，你也许可以复制粘贴到Excel里，可是要是去复制五百个类似的网页，你还愿意去做吗？这样的事情可以用程序批量化处理。当R在PATH中时，操作系统中的任意其它程序都可以直接调用R，而不必知道R究竟安装在什么目录下，这就为所有程序的协作带来了可能（本来这个事情很简单，但被Windows的程序安装方式给复杂化了）。</p>
<p>我们可以写一个R程序文件，比如叫<code>foobar.R</code>，里面包含抓取网页的代码，那么我们可以在命令行中直接执行它：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R -f foobar.R</span><br></pre></td></tr></table></figure>
<p>R还有另一个可执行文件叫<code>Rscript</code>，如果上面的PATH修改成功，我们也可以用<code>Rscript</code>命令执行一个R代码文件：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rscript foobar.R</span><br></pre></td></tr></table></figure>
<p>注意这些都是在命令行窗口中运行，而不是打开R，在R里面输入运行。以命令行方式调用R还有一个好处，就是它会新开一个R进程来执行文件，这样保证程序运行环境的干净；相比之下，交互式运行R代码的时候，可能会存在上一段代码中的结果意外“污染”下一段代码的运行，你现在觉得你的程序运行没有问题，但发给别人之后别人无法运行。</p>
<p>关于R作为命令行工具的更多用法，参见：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R --help</span><br></pre></td></tr></table></figure>
<p>这是大多数Linux命令常用的查看帮助文件的方式（命令跟着<code>--help</code>参数）。</p>
<h3 id="Windows下的Rconsole文件"><a href="#Windows下的Rconsole文件" class="headerlink" title="Windows下的Rconsole文件"></a>Windows下的Rconsole文件</h3><p>前面介绍的是所有系统通用的配置，这里我们再介绍一下Windows独有的一个配置文件：<code>Rconsole</code>，它是一个文本文件，它的路径可以直接用R代码找到：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.path(R.home(<span class="string">'etc'</span>), <span class="string">'Rconsole'</span>)</span><br></pre></td></tr></table></figure>
<p>你可以用任何文本编辑器打开它。这个文件用来配置Windows下R界面的属性，例如界面语言或字体等。Windows下默认的RGui字体是Courier New，如果我们的系统中安装了其它等宽字体，我们可以修改这个配置文件中的<code>font</code>项，例如使用DejaVu Sans Mono字体：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font = TT DejaVu Sans Mono</span><br></pre></td></tr></table></figure>
<p>界面语言也是一个常见问题，我们可以修改<code>language</code>项为中文（<code>zh_CN</code>）或英文（<code>en</code>），如：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language = en</span><br></pre></td></tr></table></figure>
<p>修改语言的一个重要原因是R的中文翻译尚欠缺火候，即使是很熟悉R的人，有时也未必能看懂中文错误消息。希望国内有热心志愿者能在这方面做出更多贡献，翻译小组的文件库位于：<code>https://github.com/r-cn/r-cntrans</code>。不过忍者必须熟悉英文，仅仅靠翻译的文字很难走远。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[R (Ani Katchova)]]></title>
      <url>http://yoursite.com/2016/07/06/advanced_R_II/</url>
      <content type="html"><![CDATA[<p>首先介绍一下Ani Katchova的R教程，然后再继续总结Advanced R.<br><a id="more"></a></p>
<h1 id="R-Ani-Katchova"><a href="#R-Ani-Katchova" class="headerlink" title="R (Ani Katchova)"></a>R (Ani Katchova)</h1><h2 id="R-introduction"><a href="#R-introduction" class="headerlink" title="R introduction"></a>R introduction</h2><ol>
<li>setwd(“path”)设置工作路径</li>
<li>mydata&lt;-read.csv(“path”)读csv</li>
<li>attach(mydata)成为part ofmemory</li>
<li>names(mydata) list names</li>
<li>head(mydata); mydata[1:10,]</li>
<li>summary,sd,length,sort,table,cor,t.test(mpg,mu=20)</li>
<li>anova(lm(mpg~factor(foreign))) 两组数据均值相等</li>
<li>olsreg&lt;-lm(mpg ~ weight + legth + foreign)</li>
<li>summary(olsreg)</li>
<li>plot(mpg~weight)</li>
<li>abline(olsreg)添加曲线</li>
<li>类似stata的用法</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Y&lt;-cbind(mpg)</span><br><span class="line">X&lt;-cbind(weight,length,foreign)</span><br><span class="line">summary(Y)</span><br><span class="line">summary(X)</span><br><span class="line">olsreg&lt;-lm(Y~X)</span><br><span class="line">summary(olsreg)</span><br></pre></td></tr></table></figure>
<h2 id="count-data-model"><a href="#count-data-model" class="headerlink" title="count data model"></a>count data model</h2><ol>
<li>possion model coeff: glm(Y~X, family=poisson)</li>
<li>test for overdispersion: dispersiontest(poisson)</li>
</ol>
<h2 id="ivreg"><a href="#ivreg" class="headerlink" title="ivreg"></a>ivreg</h2><ol>
<li>ivreg(Y ~ Y2 + X1 | x1 + X2)</li>
</ol>
<h1 id="R语言忍者秘笈"><a href="#R语言忍者秘笈" class="headerlink" title="R语言忍者秘笈"></a>R语言忍者秘笈</h1><p>Writing R Extensions</p>
<p>Task Views查看package质量，在其他CRAN镜像上找到，如<a href="https://cran.r-project.org/" target="_blank" rel="external">这个</a></p>
<p>源代码<code>*.tar.gz</code>压缩包。</p>
<p>配置R。两个主要的配置文件：<code>.Renviron</code>和<code>.Rprofile</code></p>
<p>windows下独有的配置文件<code>Rconsole</code>，是一个文本文件，它的路径可以直接用R代码找到：</p>
<blockquote>
<p>file.path(R.home(‘etc’),’Rconsole’)</p>
</blockquote>
<h1 id="Advanced-R"><a href="#Advanced-R" class="headerlink" title="Advanced R"></a>Advanced R</h1><p>match, %in%, &amp;&amp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown Syntax]]></title>
      <url>http://yoursite.com/2016/06/30/markdown-syntax/</url>
      <content type="html"><![CDATA[<p>该文是在网上搜集的一些markdown语法。慢慢总结吧。<a id="more"></a></p>
<p>使用html。记住最简单的。</p>
<font size="8," color="green">这是html头文件</font>

<p>以及<br><span style="background-color:lightblue">这是html头文件</span></p>
<p>&lt; 左括号 &gt; 右括号</p>
<p>在markdown文中，使用<a href="#label_one">标记1</a>的方式实现文本内部跳转。当然在后文需要添加一定的方式，如<code>id=&quot;label_one&quot;</code>。我们在下一页尝试使用这种方法跳转到此页。(好像此方法只能用在标题上…)</p>
<hr>
<p>三颗星分隔线</p>
<p><code>&lt;div&gt;</code>这是什么鬼？标签？还有一些特殊符号。如copy(&copy;),左括号(&lt;),and(&amp;)</p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>两种方式，一种是使用<code>#</code>一种是使用<code>====</code>。当然第二种方式确实有些难记</p>
<p>删除<del>删除内容</del></p>
<hr>
<ul>
<li>[ ] to do</li>
<li>[x] already do</li>
</ul>
<p>居然已经没有了，我记得在为知笔记里放了很多内容的…算了，下次找到再补充。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CCE(横截面相关)]]></title>
      <url>http://yoursite.com/2016/06/30/cce/</url>
      <content type="html"><![CDATA[<p>Aim: reviews econometric methods for large linear panel data models subject to error cross-sectional dependence. <a id="more"></a></p>
<h1 id="A-survey"><a href="#A-survey" class="headerlink" title="A survey"></a>A survey</h1><p>Chudik and Pesaran(2013)<br>Large panel data models with cross-sectional dependence: a survey.</p>
<p>Early panel data model: cross-sectional independent error and homogeneous slope. dependence of errors was only considered in spatial models.(survey by chamberlain,1984)</p>
<p>Cross-sectional correlation of errors is likely to be rule rather than exception, eg. ommitted common effects, spatial effects or interactions within socioeconomic networks.</p>
<p>In the case of panel data models where the cross section dimension is short and the time series dimension is long, the standard approach to cross-sectional dependence is to consider the equations from different cross-sectional uints as a system of seemingly unrelated regression equations(SURE), and then estimate it by GLS(see Zellner, 1962). And it’s assumption is the cross-sectional dependence is not correlated with regressors.</p>
<p>There are two main strands to dealing with error cross-sectional dependence in panels where N is large: <strong>spatial econometric</strong> and <strong>residual multifactor</strong> approaches.</p>
<ol>
<li><strong>spatial econometric</strong>: assume that the structure is related to location and distance among units and it is pre-specified.(survey by Lee and Yu,2013)</li>
<li><strong>residual multifactor</strong>: assume that the correlation can be characterized by a small number of unobserved common factors, and does not require any prior knowledge regarding the ordering of individual cross section units.</li>
</ol>
<p>First, <span type="background-color:lightblue">overview of different types of cross-sectional dependence</span>; second, factor error structure, large panels with a multifactor error structure and strictly exo regressors, then its extension to models with lagged dependent variables and/or weakly exogenous regressors; lastly, a review of texts of error cross-sectional dependence in static and dynamics panels, discussion.</p>
<h2 id="type-of-cross-sectional-dependence"><a href="#type-of-cross-sectional-dependence" class="headerlink" title="type of cross-sectional dependence"></a>type of cross-sectional dependence</h2><p>Assumption CSD.1 for each $t \in T \subseteq Z$, $z_t=(z_{1t},\ldots,z_{Nt})’$ has mean $E(z_t)=0$, and variance $var(z_t)=\sum_t$, where $\sum_t$ is an $N \times N$ symmetric, nonnegative definite matrix. the (i,j)-th element of $\sum_t$ denoted by $\sigma_{i,j,t}$ is bounded such that $0&lt;\sigma_{ii,t}&lt;=K$, for $i=1,2,…,N$, where $K$ is a finite constant independent of N.</p>
<p>the assumption of zero means can also be relaxed to $E(z_t)=\mu(or~E(z_t|\Omega_{t-1})=\mu_{t-1})$}, and $\Omega_{t-1}$ is a given information set. the covariance matrix $\sum_t$ fully characterizes cross-sectional correlations of the double index process ${z_t}$.</p>
<p>there are three summary measures of $\sum_t$.</p>
<ul>
<li>the largest eigenvalue of $\sum_t$, denote by $\lambda_1(\sum_t)$.(not adapt to small T)</li>
<li>absolute column sum matrix norm, $\parallel \sum_t \parallel_1 = \max_{j \in {1,2,..,N}}\sum_{i=1}^{N}\mid \sigma_{ij,t}\mid $ = $\parallel \sum_t \parallel_{\infty} = \max_{i \in {1,2,..,N}}\sum_{j=1}^{N} \mid \sigma_{ij,t} \mid $, and $|\lambda_1(\sum_t)|&lt;=\sqrt{\parallel \sum_t \parallel_1\parallel \sum_t \parallel_{\infty}}=\parallel \sum_t \parallel_1$, see Chudk et al.(2011)</li>
<li>cross-sectional averages $ \bar{z}(wt) = \sum_{i=1}^N w_{it} z_{it}=w_t z_t $, see Bailey et al.(2012) and Chudik et al.(2011), and z(t) satisfied Assumption CSD.1 and the weight vector satisfies the following assumption.</li>
</ul>
<p><img src="http://o9kwyerob.bkt.clouddn.com/assum_2.jpg" alt="assum_2"></p>
<p>Assumption CSD.2, known in finance as the granularity condition, ensures that the weights ${w_{it}}$ are not dominanted by a few of the cross section units. the weights can be relaxed to be random but distributed independently of $z_t$.</p>
<p>Chudik et al.(2011) define the concepts of weak and strong cross-sectional dependence.</p>
<p>![define_1][define_1]</p>
<p>Granularity conditions have been introduced in assumption 2.</p>
<p>The following proposition establishes the relationship between cross-sectional dependence and the asymptotic behavior of the largest eigenvalue of $\sum_t$.</p>
<p><img src="proposition-1" alt="proposition_1"></p>
<p>不行，涉及的内容比较多，特别是证明。记在笔记上。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python plus R]]></title>
      <url>http://yoursite.com/2016/06/27/python-R/</url>
      <content type="html"><![CDATA[<p>rpy2，摘自CSDN-suzyu12345的blog。第二部分，总结<code>swirl</code>的学习。<a id="more"></a></p>
<h1 id="rpy2"><a href="#rpy2" class="headerlink" title="rpy2"></a>rpy2</h1><p>关于数据分析是学习<code>Python</code>和<code>R</code>的争论由来已久，但并未涉及问题的本质。实际上，任何一个工具，若能精通，都能完成我们想要完成的任务，区别在于效率、实现的成本(包括无形的、有形的)、是否感觉很酷以及其他方面。我也在两者之间有过徘徊，但并没有耗费太多时间，就选择将两者结合起来。当然，这与我的专业有关。我接触编程语言不是半路出家，而是中间中断好几年。这些暂且不说，我认为两种语言，如编程语言，各有特色。</p>
<p><code>R</code>：大量的、由专业统计人员编写的package。这部分package，如关在笼子里的猛兽，并没有充分发挥它的作用。缺点是运算速率不尽人意。近年来，<code>Julia</code>逐渐在经济学家中流行起来，也说明了在运算效率上，<code>R</code>已经让一些具有编程能力的学者难以接受，而寻找其他替代方案。</p>
<p><code>Python</code>：动态编程语言。具有很强的灵活性，语法简洁、代码易于维护，而且其胶水语言的特性使得它很容易与其他语言结合起来，从而很容易实现<strong>拿来主义</strong>。这一点，我认为，使<code>Python</code>比其他编程语言更有优势。一方面，<code>Python</code>能通过简单的<code>API</code>使用其他语言的库；另一方面，其简洁的语法也使得其他平台的优秀库很容易的移植到<code>Python</code>平台。如<code>R</code>中的ggplot2在python中已经有对应的package，matlab的很多功能在python中都能找到对应的package。缺点是不够专业。毕竟程序员与从事专门学科研究的人相比，在问题的理解上存在很大差别。有人会说<code>Python</code>的语法并不难以掌握，但对于编写高效的代码，还是存在很多障碍。<code>Python</code>的运行效率很大程度上取决于使用的方法或是否使用package。两者的运行效率可能相差几个数量级。如果不理解这些，在<code>Python</code>中使用了循环，那么运行速率和<code>R</code>相比就没有优势了。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装步骤：MRO—配置R—Anaconda—rpy2</p>
<p>R：</p>
<blockquote>
<p>Microsoft R Open 3 64-bit</p>
</blockquote>
<p>Python：</p>
<blockquote>
<p>Anaconda 64-bit</p>
</blockquote>
<p>rpy2：</p>
<blockquote>
<p>rpy2.whl</p>
</blockquote>
<p>解释：</p>
<ul>
<li>MRO是微软收购<code>Revolution R Open</code>以后更名的R安装包，增加了多进程并行计算，对多核计算机R计算有一定的性能提升。另外，推荐安装MRO对应的数学计算库<code>Math Library</code>提高运行效率。安装步骤是先安装MRO，再安装Math Library。两个都是可执行文件，Math Library会自动寻找到MRO安装文件夹进行安装</li>
<li>Anaconda是python安装包，一步解决所有包安装问题</li>
<li>rpy2是伯克利大学制作的一个win系统下的python安装包，省去了调试、链接等繁琐的步骤。一般来说，<code>.whl</code>文件包含了安装过程中所需要的链接文件。安装是cd到下载文件，使用<code>pip install rpy2.whl</code></li>
</ul>
<p>R配置：</p>
<ul>
<li>添加path：<code>path: D:\...\MRO\R\bin\x64</code></li>
<li>添加R.dll到path:<code>path: D:\...\MRO\R\bin\x64\R.dll</code></li>
<li>设置R_HOME环境变量：新建，R_HOME，D:...\MRO\R</li>
<li>添加path: <code>%R_HOME%</code>，注意，需要将它移到path的最前面。</li>
<li>设置R_USER：新建，R_USER，Administrator。可以通过<code>cmd</code>—<code>net user</code>查看用户名。</li>
</ul>
<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>python导入模块</p>
<blockquote>
<p>import rpy2.robjects as robjects</p>
</blockquote>
<p>三种方法调用R</p>
<ul>
<li>robjects.r[‘pi’]</li>
<li>robjects.r(‘pi’)</li>
<li>robjects.r.pi</li>
</ul>
<p>一般来说，第二种方法是通用的。可以将任意大小和长度的R代码写成一个python字符串，然后通过robjects.r(‘R_code_string’)调用执行。</p>
<p>第三种方法对于名称中有点号的变量会出问题。</p>
<h1 id="ggfortify"><a href="#ggfortify" class="headerlink" title="ggfortify"></a>ggfortify</h1><p><strong>注意</strong>：官方推荐的安装方法在windows环境安装错误。</p>
<p>官方推荐的安装方法如下：</p>
<blockquote>
<p>library(devtools)<br>install_github(‘sinhrks/ggfortify’)</p>
</blockquote>
<p>应该这样：</p>
<blockquote>
<p>library(devtools)<br>devtools::install_github(‘sinhrks/ggfortify’)</p>
</blockquote>
<p>ggfortify是一个简单易用的R软件包，是对<code>ggplot</code>的fortify(增强)。</p>
<h1 id="查看R源代码的六种方法"><a href="#查看R源代码的六种方法" class="headerlink" title="查看R源代码的六种方法"></a>查看R源代码的六种方法</h1><ol>
<li>直接写函数名称：简单直接，但并非通行。R是面向对象的语言</li>
</ol>
<blockquote>
<p>lm</p>
</blockquote>
<ol>
<li><p>page()：与方法1类似，结果在另一个窗口显示</p>
</li>
<li><p>edit()：与方法2类似</p>
</li>
<li><p>对于有不同计算方法的函数，使用<code>methods()</code>查看具体函数</p>
</li>
</ol>
<blockquote>
<p>methods(mean)</p>
</blockquote>
<p>返回<code>mean</code>的几种不同的计算方法，如<code>mean.Date</code>、<code>mean.default</code>、<code>mean.difftime</code>、<code>mean.POSIXct</code>、<code>mean.POSIXlt</code></p>
<p>此时，指定具体的计算方法，就可以看到源代码。如：</p>
<blockquote>
<p>mean.default</p>
</blockquote>
<p>方法四对于带有星号标注的源代码是看不到的，需要使用第五种方法</p>
<ol>
<li>getAnywhere()</li>
</ol>
<blockquote>
<p>methods(predict)<br>getAnywhere(predict.Arima)</p>
</blockquote>
<ol>
<li>直接上<code>CRAN</code>下载源码包</li>
</ol>
<p>流程如下：</p>
<ul>
<li>登陆<a href="http://www.r-project.org/" target="_blank" rel="external">R主页</a>，左侧目录栏，点击<code>CRAN</code></li>
<li>选择镜像</li>
<li>左侧目录栏，<code>Software</code>/<code>R source</code>是R的源代码；<code>Packages</code>是包的源代码。点击<code>packages</code></li>
<li><code>Source Code for All Platforms</code>点击<code>packages</code></li>
<li><code>Table of available packages, sorted by name</code></li>
<li>找到想要的包，找到<code>package source</code>，用<code>tar.gz</code>封装的，下载解压即可。</li>
</ul>
<h1 id="R书精选之十二宫"><a href="#R书精选之十二宫" class="headerlink" title="R书精选之十二宫"></a>R书精选之十二宫</h1><ol>
<li>初学入门</li>
</ol>
<ul>
<li>R in Action：分高中低由浅入深，实现统计分析。</li>
<li>The Art of R Programming：从编程角度入手，对R本身特点介绍。</li>
<li>learning R：有一气呵成的感觉，而且最后两章讲如何写稳健的R代码以及写包，非常精彩。</li>
</ul>
<ol>
<li>统计进阶</li>
</ol>
<ul>
<li>A Handbook of statistical Analysis Using R：高阶内容</li>
<li>Modern Applied Statistics With S：高级内容</li>
</ul>
<ol>
<li>科学计算</li>
</ol>
<ul>
<li>Introduction to scientific programming and simulation using R</li>
</ul>
<ol>
<li>数据挖掘</li>
</ol>
<ul>
<li>Data Mining with R_learning with case studies</li>
<li>Machine Learning for Hackers</li>
<li>An introduction to statistical learning：体系结构一致。</li>
</ul>
<ol>
<li>数据绘图</li>
</ol>
<ul>
<li>ggplot2 Elegant graphics for data analysis</li>
<li>R graphics cookbook：例子</li>
</ul>
<ol>
<li>参考手册</li>
</ol>
<ul>
<li>R cookbook</li>
<li>R in a Netshell</li>
</ul>
<ol>
<li>高级编程(进阶专家级)</li>
</ol>
<ul>
<li>R Programming for Bioinformatics：R少为人知的一面，语言互通</li>
<li>Software for data analysis programming with R：编写代码圣经</li>
<li>Advanced R programming：迈入高手。</li>
</ul>
<h1 id="R-package"><a href="#R-package" class="headerlink" title="R package"></a>R package</h1><p>总结来自awesome-r</p>
<ol>
<li>IDE:Rstudio, IRkernel(jupyter)</li>
<li>Syntax(packages change the way you use R): magrittr(let’s pipe it)</li>
<li>Data Manipulation: dplyr, data.table, reshape2, stringi, stringr</li>
<li>Graphic Displays: ggplot2</li>
<li>HTML Widgets: DiagrammeR, plotly, rCharts</li>
<li>Reproducible Research: knitr, rmarkdown</li>
<li>Web Technologies and Services: shiny, httr, XML, rvest, OpenCPU</li>
<li>Parallel Computing: foreach, SparkR</li>
<li>High Performance: Rcpp</li>
<li>Language API:</li>
<li>Database Management:</li>
<li>Machine Learning: AnomalyDetection, caret, glmnet, h2o, lme4, MXNet, xgboost</li>
<li>Natural Language Processing:</li>
<li>Bayesian: rstan</li>
<li>Optimization:</li>
<li>Finance: quantmod, zoo</li>
<li>Bioinformatics: Bioconductor</li>
<li>Network Analysis: igraph</li>
<li>R Development: devtools, testthat, R6, pryr, roxygen, Rocker</li>
<li>Logging:</li>
<li>Data Packages:</li>
<li>Other Tools</li>
</ol>
<p>Resource:</p>
<ol>
<li>Advanced R</li>
</ol>
<h1 id="R-study"><a href="#R-study" class="headerlink" title="R study"></a>R study</h1><p>swirl</p>
<blockquote>
<p>library(swirl)<br>swirl()</p>
</blockquote>
<p>command</p>
<ul>
<li>Esc: exit swirl and when you are already at the prompt, type bye()</li>
<li>skip(): skip current question</li>
<li>play(): do yourselves and swirl will ignore</li>
<li>nxt(): until type nxt() will regain swirl</li>
<li>bye(): exit</li>
<li>main(): returns to swirl’s main menu</li>
<li>info(): displays options again</li>
</ul>
<p>course</p>
<ul>
<li>*Writing_swirl_Courses</li>
<li>*Statistical_Inference</li>
<li>*Regression_Models</li>
<li>*R_Programming_Alt(与R Programming相同，而且还没它全)</li>
<li>*R_Programming</li>
<li>*Open_Intro</li>
<li>*Mathematical_Biostatistics_Boot_Camp</li>
<li>*Getting_and_Cleaning_Data</li>
<li>*Exploratory_Data_Analysis</li>
<li>*Data_Analysis</li>
</ul>
<p>Install</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span>(swirl)</span><br><span class="line">install\_course\_zip(<span class="string">"D:/Statistical Document/R/swirl\_courses-master.zip"</span>,multi=<span class="literal">TRUE</span>,which\_course=<span class="string">"R\_Programming"</span>)</span><br><span class="line">swirl()</span><br><span class="line"></span><br><span class="line">uninstall by following command</span><br><span class="line">uninstall_course(<span class="string">"Course Name Here"</span>)</span><br></pre></td></tr></table></figure>
<h2 id="R-Programming"><a href="#R-Programming" class="headerlink" title="R Programming"></a>R Programming</h2><ol>
<li>Basic Building Blocks</li>
</ol>
<ul>
<li>help.start() to get more information on a particular topic.</li>
<li>the easiest way to create a vector is with c() function,c(1.1,9,2.1)</li>
<li>help file just type <code>?c</code>. notice that there is no parentheses</li>
</ul>
<ol>
<li>Workspace and Files</li>
</ol>
<ul>
<li>getwd(): current working directory</li>
<li>ls(): list r variables</li>
<li>list.files() or dir(): list all files in working directory</li>
<li>args(list.files) 查看函数能够使用的参数。</li>
<li>可以将文件路径赋值给某个变量</li>
<li>dir.create(“testdir”)创建testdir文件夹</li>
<li>setwd(“testdir”)将testdir设置为working dir</li>
<li>file.create(“mytest.R”)新建R文件</li>
<li>file.exists(“mytest.R”)检查该文件是否存在</li>
<li>file.info(“mytest.R”)查看信息，如size,isdir,mode,mtime,ctime,atime,exe.可以使用美元符号指定具体信息。</li>
<li>file.rename(from,to)重命名</li>
<li>file.copy(from,to)复制</li>
<li>file.path(“path1”,”subpath1”)仅仅生成”path1/subpath2”的相对路径</li>
<li>dir.create(file.path(“path1”,”subpath1”),recursive=TRUE)生成夹中夹或夹中文件。recursive指定递归。</li>
<li>unlink(“dirname”,recursive=TRUE)删除dirname文件夹及其子文件夹。unlink()是删除命令是历史的原因。</li>
</ul>
<ol>
<li>Sequences of Numbers</li>
</ol>
<ul>
<li>?<code>:</code>: help on :, you should add blackticks to enclosed the colon.</li>
<li>seq()与:的作用类似，但提供了更多的选项，如<code>seq(0,10,by=0.5)</code> or <code>seq(0,10,length=30)</code>。<code>seq(along.with=varname)</code>生成与<code>varname</code>一样长的，从1开始的vector。或者<code>seq_along(varname)</code></li>
<li>rep(0,times=40),rep(c(1,2,3),times=10),rep(c(0,1,2),each=10)</li>
</ul>
<ol>
<li>vectors</li>
</ol>
<ul>
<li><code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code>;<code>|</code>,<code>&amp;</code>;<code>!A</code>取反</li>
<li>paste(stringname,collapse=” “)是说将stringname连接成一个字符串，当然使用空格隔开。</li>
<li>paste(“string1”,”string2”,sep=” “)连接两个字符串，使用空格</li>
<li>paste(1:3,c(“X”,”Y”,”Z”),sep=””)生成”1X” “2Y” “3Z”</li>
<li>LETTERS是R预定义变量是英文字母表向量</li>
</ul>
<ol>
<li>Missing values</li>
</ol>
<ul>
<li>sample(c(x,y),100)从x和y组成的样本中抽选100个</li>
<li>NA和NaN(not a number)</li>
<li>Inf是无穷</li>
</ul>
<ol>
<li>subsetting vectors</li>
</ol>
<ul>
<li>index: [1:10]，R使用”one-based indexing”</li>
<li>x[is.na(x)]所有非NA的元素。</li>
<li>x[c(3,8,9)]取第3、8、9的元素。x[c(-3,-8,-9)]或x[-c(3,8,9)]反而是取除这几个元素以外的元素。</li>
<li>x&lt;-c(foo=2,bar=11,norf=NA)为每个元素取名，然后使用<code>names(x)</code>查看命名属性。或是使用<code>names(x)&lt;-c(&quot;foo&quot;,&quot;bar&quot;,&quot;norf&quot;)</code>更名。</li>
<li>identical(x,y)判定是否相同。</li>
<li>x[“bar”]查看第二个元素。。。和python是一样的，给每个量取了一个指标名称。</li>
</ul>
<ol>
<li>matrices and data frames</li>
</ol>
<ul>
<li>dim(atomicvetcot)是null，atomic vector是没有维度的，matrix有</li>
<li>attributes(my_vector)查看属性</li>
<li>class(my_vector)查看数据类型。</li>
<li>matrix(data,nrow,ncol)</li>
<li>cbind()是<code>combine columns</code>的简写，即增加列。matrix只有一种数据类型。cbind()以后会发生类型转换。</li>
<li>data.frame(var1,var2)可以使用不同数据类型</li>
<li>colnames(x)&lt;-cnamesvector给data.frame命名</li>
</ul>
<ol>
<li>logic</li>
</ol>
<ul>
<li>&amp;和&amp;&amp;：第一个对向量，第二个只对向量的第一个元素</li>
<li>isTRUE()：判断是否为真</li>
<li>sample(10)从1:10中抽选样本without replacement</li>
<li>which()使用bool值作为参数，返回index</li>
<li>any()、all()函数使用bool值作为参数，返回TRUE或FALSE</li>
</ul>
<ol>
<li>Functions</li>
</ol>
<ul>
<li>Sys.Date(): today</li>
<li>boring</li>
</ul>
<ol>
<li>lapply and sapply</li>
</ol>
<ul>
<li>the two most important memebers of R’s *apply family of functions, also known as loop functions</li>
<li>lapply、sapply以及vapply()、tapply()等实现数据分析的Split-Apply-Combine等操作，即split数据到smaller pieces，然后apply一个函数，再combine the result。详见Hadley Wickham在Journal of Statistical Software上的”The Split-Apply-Combine Strategy for Data Analysis”</li>
<li>dataset：Flags dataset from UCI Machine Learning Repository, containing details of various nations and their flags.</li>
</ul>
<p>数据分析的步骤如下</p>
<ul>
<li>head(datasetname,如flags)查看头六行文件</li>
<li>dim(flags)查看flags数据集的维数</li>
<li>viewinfo(flags)查看数据集的完整信息</li>
<li>class(flags)查看变量存储格式，(不是数据结构)</li>
<li>lapply()相当于list apply(func)，就是说lapply()将某个函数运用到list中的所有变量，并返回一个list，该list记录了函数运用到原变量的返回结果。</li>
<li>as.list(flags)将flags数据集以list的形式显示。</li>
<li>cls_list&lt;-lapply(flags,class)，注意class函数没有括号紧跟其后</li>
<li>cls_list是list格式</li>
<li>as.character(cls_list)由于cls_list是单个字符，可用as函数转为字符串。</li>
</ul>
<p>插播：apply a function over a list or vector</p>
<ul>
<li>lapply()：return a list of the same length as x, each element of which is the result of applying FUN to the corresponding element of x</li>
<li>sapply(): a user-friendly version and wrapper of <code>lapply</code> by default returning a vector, matrix or, if <code>simplify=&quot;array&quot;</code>, an array if appropriate, by applying <code>simplify2array()</code>.</li>
<li>sapply(x,f,simplify=FALSE,USE.NAMES=FALSE)= lapply(x,f)</li>
<li>vapply() is similar to <code>sapply</code>, but has a pre-specified type of return value, so it can be safer or faster to use</li>
<li><code>replicate</code> is a wrapper for the common use of <code>sapply</code> for repeated evaluation of an expression</li>
<li><code>simplify2array()</code> is the utility called from <code>sapply()</code> when <code>simplify</code> is not false and is similarly called from <code>mapply()</code></li>
</ul>
<p>usage:</p>
<ul>
<li>lapply(x,fun,…)</li>
<li>sapply(x,fun,…,simplify=TRUE,USE.NAMES=TRUE)</li>
<li>vapply(x,fun,FUN.VALUE,…,USE.NAMES=TRUE)</li>
<li>replicate(n,expr,simplify=”array”)</li>
<li>simplify2array(x,higher=TRUE)</li>
</ul>
<p>x是向量或表达式，fun是函数，…是函数可选arguments，simplify是逻辑或字符串变量。。。</p>
<ul>
<li>一般来说，如果结果是list且每个元素长度为1，sapply()返回向量，若结果是list但每个元素长度相同，sapply()返回matrix，若sapply不能识别，则返回list，与<code>lapply()</code>无差异。</li>
<li>data.frame使用美元符号代替<code>.</code>索引下一级变量。如<code>flags$orange</code></li>
<li>range()函数返回变量的最小和最大值</li>
<li>unique()返回唯一</li>
<li><code>sapply()</code> always attempts to simplify the result given by <code>lapply()</code>.</li>
</ul>
<ol>
<li>vapply and tapply</li>
</ol>
<ul>
<li>summary(),viewinfo()</li>
<li>vapply(flags,unique,numeric(1))指定返回的向量是长度为1的数值向量。</li>
<li>vapply(flags,class,character(1))指定返回的向量是长度为1的字符向量。</li>
<li>vapply()函数是需要明确指定以防出错。</li>
<li><p>tapply(): apply a function over a ragged array.</p>
</li>
<li><p>tapply(x,INDEX,FUN=NULL,…,simplify=TRUE)</p>
</li>
<li><p>x是向量，INDEX是因子，simplify，false则返回list数组，true则返回数值</p>
</li>
<li><p>table(flags$landmass)相当于stata的tab</p>
</li>
<li>tapply(flags$animate,flags$landmass,mean)对animate、landmass分类平均。</li>
</ul>
<ol>
<li>looking at data</li>
</ol>
<ul>
<li>ls()：list the data相当于系统命令ls</li>
<li>read.csv()、read.table()读入的data都是data.frame</li>
<li>object.size(plants)查看plants data.frame在内存中占用空间。</li>
<li>head(plants),head(plants,10),tail(plants)</li>
<li>summary(plants)</li>
<li>str(plants)数据结构</li>
</ul>
<ol>
<li>simulation</li>
</ol>
<ul>
<li>sample从x中抽取指定大小的样本，重复或不重复</li>
<li>sample(x,size,replace=FALSE,prob=NULL)</li>
<li>sample.int(n,size=n,replace)</li>
<li>预定义变量LETTERS是二十六个字母。</li>
<li>replace逻辑变量指定是否重复，prob指定x中某些值出现的概率</li>
<li>flips&lt;-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))</li>
<li>R中每一个概率分布都存在一个<code>r**</code> function for random，一个<code>d**</code> functions for density，一个<code>p**</code> function for probability，一个<code>q**</code> function for quantile</li>
</ul>
<ul>
<li>binomial distribution: density, distribution function, quantile function and random generation for the binomial distribution with parameters <code>size</code> and <code>prob</code></li>
<li>Conventionally this is interpreted as the number of success in size trials</li>
<li>dbinom(x,size,prob,log=FALSE)</li>
<li>pbinom(q,size,prob,lower.tail=TRUE,log.p=FALSE)</li>
<li>qbinom(p,size,prob,lower.tail=TRUE,log.p=FALSE)</li>
<li><p>rbinom(n,size,prob)</p>
</li>
<li><p>x,q是分位数向量，p是概率向量，n是观察值个数，size长度，prob是每次实验成功的概率，log,log.p是逻辑变量，若TRUE则概率p是log(p)，low.tail是逻辑变量，若TRUE(默认)则是下边界。</p>
</li>
<li><p>my_pois&lt;-replicate(100,rpois(5,10))重复生成poison分布100次</p>
</li>
<li>cm&lt;-colMeans(my_pois)求每列均值</li>
<li>hist(cm)</li>
<li>还有其他的概率分布，如指数分布(rexp())、卡方分布(rchisq())、gamma分布(rgamma())….</li>
<li>x指定的样本，size</li>
</ul>
<ol>
<li>dates and times</li>
</ol>
<ul>
<li>Dates are represented by the <code>Date</code> class and times are represented by the <code>POSIXct</code> and <code>POSIXlt</code> classes. Dates are stored as the number of days since 1970-01-01 and times are stored as either the number of seconds since 1970-01-01 (for <code>POSIXct</code>) or a list of seconds, minutes, hours, etc.(for <code>POSIXlt</code>)(lt相当于list time)</li>
<li>d1&lt;-Sys.Date(): today</li>
<li>class(d1)查看类型，unclass(d1)查看背后的数值，即从1970-01-01以来的天数。</li>
<li>d2&lt;-as.Date(“1969-01-01”)建立1970年之前的日期</li>
<li>t1&lt;-Sys.time()当前时间</li>
<li>class(t1)数据类型是<code>POSIXct</code>和<code>POSIXt</code></li>
<li>t2&lt;-as.POSIXlt(Sys.time())将<code>POSIXct</code>转换为<code>POSIXlt</code></li>
<li>class(t2),unclass(t2),str(unclass(t2))</li>
<li><p>t2$min,t2$sec,t2$hour,t2$mday,t2$mon….</p>
</li>
<li><p>weekdays(),months() and quarters()返回对应的星期、月份、季度</p>
</li>
<li>通常数据集中的date和time不被R识别，此时使用<code>strptime()</code>解决问题。</li>
<li>strptime()将character vector转为<code>POSIXlt</code>，但输入必须是(yyyy-mm-dd)</li>
<li>t3&lt;- “oct 7, 1987 08:24” then strptime(t3,”%B %d, %Y %H:%M”)</li>
<li>Sys.time()-t1已过去的时间</li>
<li>difftime(Sys.time(),t1,units=”days”)指定间隔单位</li>
</ul>
<ol>
<li>base graphics(lattice,ggplot2,ggvis)</li>
</ol>
<ul>
<li>data(cars)导入R内部数据，cars包含两个变量</li>
<li>plot(cars)是scatterplot的简写</li>
<li>plot参数包括，xlim,xlab,ylab,main(标题),sub(子标题),col,point</li>
</ul>
<h2 id="getting-and-cleaning-data"><a href="#getting-and-cleaning-data" class="headerlink" title="getting and cleaning data"></a>getting and cleaning data</h2><ol>
<li>manipulating data with dplyr</li>
</ol>
<p>– dplyr</p>
<h2 id="data-analysis"><a href="#data-analysis" class="headerlink" title="data analysis"></a>data analysis</h2><ol>
<li>central tendency</li>
<li>dispersion</li>
<li>data visualization</li>
</ol>
<p>plotrix package</p>
<h2 id="exploratory-data-analysis"><a href="#exploratory-data-analysis" class="headerlink" title="exploratory data analysis"></a>exploratory data analysis</h2><ol>
<li>jpeg package</li>
</ol>
<h2 id="regression-models"><a href="#regression-models" class="headerlink" title="regression models"></a>regression models</h2><ol>
<li>introduction</li>
</ol>
<p><a href="https://github.com/DataScienceSpecialization/courses" target="_blank" rel="external">slides and courses</a></p>
<ul>
<li>plot(child~parent,datasetname),plot as scatterplot</li>
<li>plot(jitter(child,4)~parent,datasetname)将处于同一误差范围的数据区分开</li>
<li>lm(linear model) needs a “formula” and dataset</li>
<li>regrline&lt;-lm(child~parent,galton)</li>
<li>summary(regrline)给出拟合结果</li>
<li>abline(regrline,lwd=3,col=’red’),abline=abind line</li>
</ul>
<ol>
<li>residuals</li>
</ol>
<ul>
<li>fit$residuals所有的残差</li>
<li>cov(fit$residuals,galton$parent)</li>
</ul>
<p>报错啦。。。<br>算了，也该结束了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Advanced R]]></title>
      <url>http://yoursite.com/2016/06/27/advanced_R/</url>
      <content type="html"><![CDATA[<p>Advanced R，参考刘宁翻译的《R语言高级程序设计》。更详细的内容见原文。本文只是总结和归纳。注意，本片并没有严格按照原文。<a id="more"></a></p>
<p>[TOC]</p>
<h1 id="内容提要"><a href="#内容提要" class="headerlink" title="内容提要"></a>内容提要</h1><ol>
<li>基础知识</li>
</ol>
<ul>
<li>介绍</li>
<li>数据结构</li>
<li>取子集操作</li>
<li>词汇表</li>
<li>编码风格指南</li>
<li>函数</li>
<li>面对对象指南</li>
<li>环境</li>
<li>调试、条件处理和防御性编程</li>
</ul>
<ol>
<li>函数式编程</li>
</ol>
<ul>
<li>函数式编程</li>
<li>泛函</li>
<li>函数运算符</li>
</ul>
<ol>
<li>编程语言层面的计算</li>
</ol>
<ul>
<li>非标准计算</li>
<li>表达式</li>
<li>领域特定语言</li>
</ul>
<ol>
<li>性能</li>
</ol>
<ul>
<li>性能</li>
<li>优化代码</li>
<li>内存</li>
<li>使用<code>Rcpp</code>包编写高性能函数</li>
<li>R的C语言接口</li>
</ul>
<hr>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="data-structure"><a href="#data-structure" class="headerlink" title="data structure"></a>data structure</h2><p>R语言的<strong>基础数据结构</strong>(几乎所有的其他对象都是建立在以下五类基础数据结构之上)</p>
<table>
<thead>
<tr>
<th></th>
<th>Homogeneous</th>
<th>Heterogenous</th>
</tr>
</thead>
<tbody>
<tr>
<td>1d</td>
<td>Atomic vector</td>
<td>List</td>
</tr>
<tr>
<td>2d</td>
<td>Matrix</td>
<td>Data frame</td>
</tr>
<tr>
<td>nd</td>
<td>Array</td>
</tr>
</tbody>
</table>
<p>R语言<strong>没有0维数据结构（标量）</strong>，单个数字或字符串都是<strong>长度为1的向量</strong>。使用<code>str()</code>函数(structure缩写)查看任何R语言数据类型。</p>
<p>R语言中最基本的数据结构是向量，包括<code>Atomic</code>和<code>List</code>，具有以下属性：</p>
<ul>
<li>typeof()：类型</li>
<li>length()：长度</li>
<li>attributes()：属性</li>
</ul>
<p><strong>Note</strong>：is.vector()不能测试对象是否是向量，只有当对象是除了名字以外，不包含其他属性时，该函数可用。需判断是否向量，使用<code>is.atomic(x)||is.list(x)</code>测试。</p>
<h3 id="1d"><a href="#1d" class="headerlink" title="1d"></a>1d</h3><h4 id="atomic-vector"><a href="#atomic-vector" class="headerlink" title="atomic vector"></a>atomic vector</h4><p>四种常见的atomic vector：<strong>逻辑类型</strong>、<strong>整数</strong>、<strong>双精度</strong>（又称数值类型）和<strong>字符类型</strong>。罕见的，<strong>复数类型</strong>和<code>raw</code>类型。</p>
<p>atomic vector由<code>c()</code>创建，combine，因此<code>c()</code>也能用来合并几个向量，合并前<code>c()</code>会将atomic vector强制转换成list.</p>
<ul>
<li>使用<code>L</code>后缀，得到整数，默认双精度</li>
<li>使用<code>TRUE</code>和<code>FALSE</code>或(T/F)创建逻辑向量</li>
<li>使用双引号创建字符串</li>
</ul>
<p>atomic vector总是平的(只有一维嘛)，<code>c(1,c(2,c(3,4)))</code>与<code>c(1,2,3,4)</code>相同。</p>
<p>缺失值<code>NA</code>，是<strong>长度为1的逻辑向量</strong>。<code>c()</code>函数总是强制将<code>NA</code>转换为正确的类型，或者使用<code>NA_real_</code>（双精度）、<code>NA_integer_</code>（整数）、<code>NA_character_</code>来指定。</p>
<p><code>typeof()</code>与<code>is.character()</code>、<code>is.double()</code>、<code>is.integer()</code>、<code>is.logical()</code>甚至是<code>is.atomic()</code>通用。</p>
<p><strong>NOTE.1</strong>:<code>is.numeric()</code>测试向量而非双精度，虽然双精度称为数值(numeric)。整数、字符串、双精度返回都是<code>TRUE</code>。</p>
<p><strong>NOTE.2</strong>:强制转换向最灵活的类型进行。灵活性从小到大依次为<strong>逻辑</strong>、<strong>整数</strong>、<strong>双精度</strong>、<strong>字符串</strong>。</p>
<p><strong>NOTE.3</strong>:<code>as.numeric()</code>、<code>as.character()</code>、<code>as.double()</code>、<code>as.integer()</code>、<code>as.logical()</code>强制类型转换。</p>
<h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>list元素可不同，甚至是list。创建使用<code>list()</code>函数。list有时被称为<strong>递归向量</strong>，因为list可以包含其他list，使用<code>is.recursive(x)</code>判断。</p>
<p><code>is.list()</code>和<code>as.list()</code>、<code>unlist()</code>测试、强制转换list，以及将list转为atomic vector(如果类型不同，则不行)。</p>
<p>list用来创建更加复杂的数据结构，如<strong>数据框</strong>、<strong>线性模型对象</strong>(lm()产生)。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>所有对象都可以拥有任意多个<strong>附加属性</strong>，附加属性用来存取与该对象相关的<strong>元数据</strong>。属性可看作是<strong>已命名的list(带有不重复的名字)</strong>。属性可以使用<code>attr()</code>函数逐个访问，也可以使用<code>attributes()</code>函数一次性访问。</p>
<p><strong>NOTE.1</strong>: 修改属性<code>attr(x,&quot;my_attr_name&quot;)&lt;-&quot;this...&quot;</code>，<code>str(attributies(x))</code>则返回的是一个list.</p>
<p><strong>NOTE.2</strong>: 默认情况下，修改向量(atomic vector,list)，大多数属性会丢失。但是有三个重要的属性不会丢失。</p>
<p>这三个属性：</p>
<ul>
<li>name: 字符串向量</li>
<li>dimension: 维度</li>
<li>class：类</li>
</ul>
<p>这些属性都有一个<strong>特定的访问函数</strong>，<code>names(x)</code>、<code>class(x)</code>、<code>dim(x)</code>，而不是<code>attr(x,&quot;names&quot;)</code>…。(names说明向量可以对每个元素命名，使用names(x)&lt;-c(“a1”,”a2”,…)或使用setNames(1:3,c(“a1”,”a2”,”a3”))使用后者对前者命名。当然，也并不需要都命名，<code>names()</code>函数将使用<strong>空字符串</strong>，即<code>&quot;&quot;</code>，如果所有的元素都无名，则返回<code>NULL</code>。因此，也可以使用<code>unname(x)</code>或<code>names(x)&lt;-NULL</code>创建无名向量。)</p>
<h4 id="因子"><a href="#因子" class="headerlink" title="因子"></a>因子</h4><p>属性的运用。仅包含<strong>预定义值</strong>，用来保存category或level，相当于枚举，构建于<strong>整数向量</strong>之上。</p>
<p><code>factor()</code>带有两个属性：</p>
<ul>
<li>class()，区别于普通整数向量</li>
<li>levels()，定义了允许取值集合。</li>
</ul>
<p>再补充，没读懂</p>
<h3 id="矩阵和数组"><a href="#矩阵和数组" class="headerlink" title="矩阵和数组"></a>矩阵和数组</h3><p>为原子向量添加<code>dim()</code>属性，可以让它变成多维数组，<code>array()</code>函数创建，数组的一个特例是矩阵，<code>matrix()</code>函数创建，或者通过<code>dim()</code>函数对维度属性进行设置得到。</p>
<p><code>length()</code>和<code>names()</code>在任何维度上都可以使用，但对于矩阵和数组，有细分。</p>
<ul>
<li>length():对矩阵，<code>nrow()</code>和<code>ncol()</code>分别获取行数列数，对数组<code>dim()</code>获取维度</li>
<li><p>names():对矩阵，<code>rownames()</code>和<code>colnames()</code>获取行名、列名；对数组，<code>dimnames()</code>获取维度名字。</p>
</li>
<li><p><code>cbind()</code>和<code>rbind()</code>是对<code>c()</code>函数的矩阵推广</p>
</li>
<li><p><code>abind()</code>是对<code>c()</code>函数的数组推广(<code>abind</code>包提供)</p>
</li>
<li><p><code>t()</code>是矩阵的转置，对应的是<code>aperm()</code>函数对数组的转置</p>
</li>
<li><p><code>is.matrix()</code>,<code>is.array()</code>,<code>dim()</code>,<code>as.matrix()</code>,<code>as.array()</code></p>
</li>
<li>可以创建单行或单列矩阵、数组，看起来与向量没区别，但部分函数会输出奇怪的结果。<code>str()</code>查看区别。</li>
</ul>
<h3 id="数据框"><a href="#数据框" class="headerlink" title="数据框"></a>数据框</h3><p>数据框是R语言中最常用的数据存储方式，是由<strong>等长向量构成的列表</strong>。data.frame二维，矩阵和列表的结合。拥有<code>names()</code>,<code>colnames()</code>,<code>rownames()</code>等函数，<code>names()</code>和<code>colnames()</code>对数据框来说是一样的。<code>length()</code>是列表长度，与<code>ncol()</code>相同。</p>
<h4 id="创建、转换、连接"><a href="#创建、转换、连接" class="headerlink" title="创建、转换、连接"></a>创建、转换、连接</h4><ul>
<li>data.frame()以<strong>带命名的向量</strong>作为输入</li>
<li>data.frame()默认将<strong>字符转换为因子</strong>，使用<code>stringAsFactors=FALSE</code>避免此行为</li>
<li>class() or is.data.frame()检验</li>
<li>as.data.frame()强制转换，数据框是<code>S3</code>类，由向量构成</li>
</ul>
<p>as.data.frame()强制转换</p>
<ul>
<li>原子向量自动创建单列数据框</li>
<li>每个元素为一列，若长度不同，报错</li>
</ul>
<p>使用<code>cbind()</code>和<code>rbind()</code><strong>连接</strong>数据框。按列连接时，行数必须匹配，行名被忽略；按行连接时，列数匹配。<code>plyr::rbind.fill()</code>可连接列数不同的数据框。</p>
<p><strong>注意</strong>：<code>cbind()</code>参数必须是<code>data.frame</code>，它会将原子向量转为<code>matrix</code>而不是<code>data.frame</code>。或者将<code>cbind()</code>传入<code>data.frame()</code>中作为参数也可以，如<code>data.frame(cbind(a=1:2,b=c(&quot;a&quot;,&quot;b&quot;)))</code>。<code>cbind()</code>的转换规则复杂(好好研究)</p>
<p><code>data.frame</code>可传入<code>list</code>，但它将<code>list</code>的每一个元素都分开放到每一个列中，若<code>list</code>中的每一个元素长度不同，则报错。使用<code>I()</code>函数，将<code>list</code>看成一个整体单元。<code>I()</code>函数增加了<code>Asls</code>类。但<code>list</code>的长度必须和其他传入<code>data.frame</code>的arg长度相同。每一个行对应<code>list</code>中的一个元素。</p>
<h2 id="取子集操作"><a href="#取子集操作" class="headerlink" title="取子集操作"></a>取子集操作</h2><p>取子集操作是<code>str()</code>函数的补充操作，<code>str()</code>展示对象结构，取子集则取出感兴趣的部分。R语言取子集操作强大而迅速，学习它需要掌握很多相关概念：</p>
<ul>
<li>三种取子集操作符</li>
<li>六种类型的取子集方式</li>
<li>不同对象(vector,list,factor,matrix,data.frame et al.)之间取子集操作的区别</li>
<li>赋值和取子集操作联合使用</li>
</ul>
<p>三种取子集操作符：<code>[</code>(原子向量等)、<code>[[</code>、<code>$</code>。</p>
<ol>
<li>以原子向量为例</li>
</ol>
<p>以原子向量为例，然后拓展到其他。五种方法:</p>
<ul>
<li>正整数返回index，如x[c(3,1)],x[order(x)],x[c(2.1,2.9)]只取整数部分，忽略其他部分</li>
<li>负整数，排除法取子集</li>
<li>逻辑向量，选出对应位置为<code>TRUE</code>的元素</li>
<li>什么都不写，返回原始向量</li>
<li>0返回零长度的向量(产生测试数据时)</li>
<li>字符向量setNames(x,xnames)命名，然后用名字查找</li>
</ul>
<ol>
<li>list</li>
</ol>
<p>对list，使用<code>[</code>取出列表，使用<code>[[</code>和<code>$</code>取出列表的一部分</p>
<ol>
<li>matrix and array</li>
</ol>
<ul>
<li>多个向量，对每一维提供一个索引，以逗号隔开</li>
<li>单个向量，并辅之以空白，取整个维</li>
<li>matrix</li>
</ul>
<p>R语言中的数组，按照<strong>以列为主</strong>的顺序存储的。</p>
<ol>
<li>data.frame</li>
</ol>
<p>data.frame既有list特点，又有matrix的特点，若用一个向量取子集，则是list，若用两个向量取子集，则是matrix.</p>
<ol>
<li>S3对象</li>
</ol>
<p>S3对象是由原子向量、数组和列表组成的</p>
<p>6 S4对象</p>
<p>对S4对象，有另外两种取子集操作符：<code>@</code>(相当于$)和<code>slot()</code>(相当于<code>[[</code>)。<code>@</code>比<code>$</code>更加严格，如果<code>slot</code>不存在，返回错误。</p>
<h3 id="取子集操作符"><a href="#取子集操作符" class="headerlink" title="取子集操作符"></a>取子集操作符</h3><p><code>[[</code>与<code>[</code>类似；对于字符取子集操作，<code>$</code>是<code>[[</code>的简化写法</p>
<p>对list操作，<code>[</code>总是返回一个<code>子列表</code>，<code>[[</code>则返回内容</p>
<blockquote>
<p>如果列表x是一列载有对象的火车，那么x[[5]]就是第5节车厢里的对象，而x[4:6]是第4-6节车厢</p>
</blockquote>
<p>因为data.frame是list组成的list，所以可以使用<code>[[</code>提取列。</p>
<ol>
<li>取子集方式：simplifying or preserving</li>
</ol>
<p>simplifying or preserving其实是是否将结果进行一定的自动化处理，simplifying则自动转化为更简单的数据类型，preserving则使输出与输入的结构保持相同。在编程环境下，会更好，因为不需要担心结构发生变化。</p>
<p>不同数据类型，不同的变化：</p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">simplifying</th>
<th style="text-align:left">preserving</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">vector</td>
<td style="text-align:left">x[[1]]</td>
<td style="text-align:left">x[1]</td>
</tr>
<tr>
<td style="text-align:left">list</td>
<td style="text-align:left">x[[1]]</td>
<td style="text-align:left">x[1]</td>
</tr>
<tr>
<td style="text-align:left">factor</td>
<td style="text-align:left">x[1:4, drop = T]</td>
<td style="text-align:left">x[1:4]</td>
</tr>
<tr>
<td style="text-align:left">array</td>
<td style="text-align:left">x[1,] or x[,1]</td>
<td style="text-align:left">x[1,,drop=F] or x[,1,drop=F]</td>
</tr>
<tr>
<td style="text-align:left">data.frame</td>
<td style="text-align:left">x[,1] or x[[1]]</td>
<td style="text-align:left">x[,1,drop=F] or x[1]</td>
</tr>
</tbody>
</table>
<p>其中，<code>drop= T</code>是说丢弃所有没有用到的水平。对于factor来说，是必要的</p>
<ol>
<li>$</li>
</ol>
<p><code>$</code>是一种简化操作符，<code>x$y</code>等价于<code>x[[&quot;y&quot;,exact=FALSE]]</code>，通常用于访问data.frame中的变量。</p>
<ol>
<li>索引缺失/越界</li>
</ol>
<p>看懂以后再补充</p>
<h3 id="取子集与赋值"><a href="#取子集与赋值" class="headerlink" title="取子集与赋值"></a>取子集与赋值</h3><p>所有的取子集操作符都可以与赋值操作符结合起来使用，用以修改输入向量中被选定的值。</p>
<p>看懂以后再补充</p>
<h2 id="词汇表"><a href="#词汇表" class="headerlink" title="词汇表"></a>词汇表</h2><p>为了熟练使用R编程，需要掌握一系列函数、包、各种设置等等。通过浏览<code>base</code>、<code>stats</code>以及<code>utils</code>包中的所有函数，作者给出了这个列表，并选出了作者认为最有用的函数。(你也可以试试)。列表中还列出了一些具有特别重要功能的包，以及一些重要的<code>options()</code>设置。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol>
<li>首先要学的函数：</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?,str</span><br></pre></td></tr></table></figure>
<ol>
<li>重要的运算符和赋值函数：</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%<span class="keyword">in</span>%, match, =, &lt;-, &lt;&lt;-, $, [,[[, head, tail, subset,</span><br><span class="line">with ,assign, get</span><br></pre></td></tr></table></figure>
<ol>
<li>比较</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">all.equal, idential, !=, ==, &gt;, &gt;=, &lt;, &lt;=</span><br><span class="line">is.na, complete.cases, is.finite</span><br></pre></td></tr></table></figure>
<ol>
<li>基本数学函数</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*, +, -, /, ^, %%, %/%</span><br><span class="line">abs, sign, acos, asin, atan, atan2, sin, cos, tan</span><br><span class="line">ceiling, floor, round, trunc, signif, exp, log, log10, log2</span><br><span class="line">sqrt, max, min, prod, sum</span><br><span class="line">cummax, cummin, cumprod cumsum, diff</span><br><span class="line">pmax, pmin, range, mean, median, cor, sd, var, rle</span><br></pre></td></tr></table></figure>
<ol>
<li>用于函数的函数</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>, missing, on.exit, <span class="keyword">return</span>, invisible</span><br></pre></td></tr></table></figure>
<ol>
<li>逻辑和集合</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&amp;, |, !, xor, all, any, intersect, union, setdiff</span><br><span class="line">setequal, which</span><br></pre></td></tr></table></figure>
<ol>
<li>向量和矩阵</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c, matrix</span><br></pre></td></tr></table></figure>
<ol>
<li>自动强制转换(character&gt;numeric&gt;logical)</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">length, dim, ncol, nrow, cbind, rbind</span><br><span class="line">names, colnames, rownames, t, diag, sweep</span><br><span class="line">as.matrix, data.matrix</span><br></pre></td></tr></table></figure>
<ol>
<li>创建向量</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c, rep, rep\_len, seq, seq\_len, seq\_along</span><br><span class="line">vocabulary59, rev, sample, choose, factorial, combn</span><br><span class="line">(is/as).(character/numeric/logical/<span class="keyword">...</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>列表和data.frame</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list, unlist, data.frame, as.data.frame</span><br><span class="line">split, expand.grid</span><br></pre></td></tr></table></figure>
<ol>
<li>控制流</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>, &amp;&amp;, ||(short circuiting)</span><br><span class="line"><span class="keyword">for</span>, <span class="keyword">while</span>, <span class="keyword">next</span>, <span class="keyword">break</span>, <span class="keyword">switch</span>, ifelse</span><br></pre></td></tr></table></figure>
<ol>
<li>apply函数</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lapply, sapply, vapply, apply, tapply, replicate</span><br></pre></td></tr></table></figure>
<h3 id="通用数据结构"><a href="#通用数据结构" class="headerlink" title="通用数据结构"></a>通用数据结构</h3><ol>
<li>日期与时间</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ISOdate, ISOdatetime, strftime, strptime, date, difftime</span><br><span class="line">julian, months, quarters, weekdays</span><br><span class="line"><span class="keyword">library</span>(lubridate)</span><br></pre></td></tr></table></figure>
<ol>
<li>字符操作</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep, agrep, gsub, strsplit, chartr, nchar, tolower, toupper</span><br><span class="line">substr, paste, <span class="keyword">library</span>(stringr)</span><br></pre></td></tr></table></figure>
<ol>
<li>因子</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factor, levels, nlevels, reorder, relevel</span><br><span class="line">cut, findInterval, interaction</span><br><span class="line">options(stringsAsFactors=<span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>数组操作</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array, dim, dimnames, aperm, <span class="keyword">library</span>(abind)</span><br></pre></td></tr></table></figure>
<h3 id="统计学"><a href="#统计学" class="headerlink" title="统计学"></a>统计学</h3><ol>
<li>排序与制表</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">duplicated, unique, merge, order, rank, quantile</span><br><span class="line">sort, table, ftable</span><br></pre></td></tr></table></figure>
<ol>
<li>线性模型</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fitted, predict, resid, rstandard</span><br><span class="line">lm, glm, hat, influence.measures</span><br><span class="line">logLik, df, deviance</span><br><span class="line">formula, ~, I</span><br><span class="line">anova, coef, confint, vcov</span><br><span class="line">contrasts</span><br></pre></td></tr></table></figure>
<ol>
<li>其他测试</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apropos(<span class="string">"\\.test$"</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>随机变量</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(q,p,d,r)*(beta,binom,cauchy,chisq,exp,f,gamma,geom,</span><br><span class="line">hyper,lnorm,logis,multinom,nbinom,norm,pois,signrank,</span><br><span class="line">t,unif,weibull,wilcox,birthday,tukey)</span><br></pre></td></tr></table></figure>
<ol>
<li>矩阵代数</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crossprod, tcrossprod</span><br><span class="line">eigen, qr, svd</span><br><span class="line">%*%, %o%, outer</span><br><span class="line">rcond</span><br><span class="line">solve</span><br></pre></td></tr></table></figure>
<h3 id="使用R语言"><a href="#使用R语言" class="headerlink" title="使用R语言"></a>使用R语言</h3><ol>
<li>工作空间</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls, exists, rm</span><br><span class="line">getwd, setwd</span><br><span class="line">q, <span class="keyword">source</span>, install.packages, <span class="keyword">library</span>, <span class="keyword">require</span></span><br></pre></td></tr></table></figure>
<ol>
<li>帮助</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">help, ?</span><br><span class="line">help.search, apropos, RSiteSearch, citation, demo, example</span><br><span class="line">vignette</span><br></pre></td></tr></table></figure>
<ol>
<li>调试</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">traceback, browser, recover, options(error=)</span><br><span class="line"><span class="keyword">stop</span>, <span class="keyword">warning</span>, message, <span class="keyword">tryCatch</span>, <span class="keyword">try</span></span><br></pre></td></tr></table></figure>
<h3 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入/输出"></a>输入/输出</h3><ol>
<li>输出</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print, cat, message, <span class="keyword">warning</span>, dput, format</span><br><span class="line">sink, capture.output</span><br></pre></td></tr></table></figure>
<ol>
<li>读写数据</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data, count.fields, read.csv, write.csv, read.delim,</span><br><span class="line">write.delim, read.fwf, readLines, writeLines,</span><br><span class="line">readRDS, saveRDS, load, save,</span><br><span class="line"><span class="keyword">library</span>(foreign)</span><br></pre></td></tr></table></figure>
<ol>
<li>文件和路径</li>
</ol>
<figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir, basename, dirname, tools::file_ext, file.path,</span><br><span class="line">path.expand, normalizePath, file.choose, file.copy,</span><br><span class="line">file.create, file.remove, file.rename, dir.create,</span><br><span class="line">file.exists, file.info, tempdir, tempfile,</span><br><span class="line">download.file, <span class="keyword">library</span>(downloader)</span><br></pre></td></tr></table></figure>
<h2 id="编码风格指南"><a href="#编码风格指南" class="headerlink" title="编码风格指南"></a>编码风格指南</h2><ol>
<li>文件名有意义，并以<code>.R</code>结尾(不是<code>.r</code>)。</li>
<li>如需要按顺序执行，可在文件名之前加上数字前缀</li>
<li>像普通英文文章一样，等式两端空格，逗号之后空格</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是R语言中的基本模块。理解R语言最重要的事情是知道函数本身也是对象，可以用与其它任何类型的对象完全一样的方式来使用函数。</p>
<p>前提条件：<code>pryr</code>包，研究<strong>就地修改</strong>向量操作。</p>
<h3 id="函数的组成部分"><a href="#函数的组成部分" class="headerlink" title="函数的组成部分"></a>函数的组成部分</h3><p>所有的R语言函数都有三个组成部分：</p>
<ul>
<li>函数体，<code>body()</code>，函数的代码</li>
<li>形式参数列表，<code>formals()</code>，控制函数调用的参数列表</li>
<li>环境，<code>environment()</code>，函数的变量所在位置的地图</li>
</ul>
<p>在打印R语言函数时，将会展示这三个重要的组成部分。如果<strong>环境</strong>没有显示，那么意味着函数是在<strong>全局环境</strong>中创建的。</p>
<p><code>body()&lt;-</code>、<code>formals()&lt;-</code>、<code>environment()&lt;-</code>也可用于修改函数。</p>
<p>像R语言中的所有对象，函数还可以拥有任意数量的<strong>附加属性</strong>。被基础R语言使用的一个属性是<code>srcref</code>，它是<strong>源引用</strong>(source reference)，指向用于创建函数的源代码。与<strong>函数体</strong>不同，它包含<strong>代码注释</strong>和<strong>其他格式</strong>。</p>
<h4 id="primitive-function"><a href="#primitive-function" class="headerlink" title="primitive function"></a>primitive function</h4><p>(原文翻译的是原语函数。。。)函数都有三个组成部分的规则有一个例外，即<strong>primitive functions</strong>，比如<code>sum()</code>，直接使用了<code>.Primitive()</code>调用C语言代码，并且不包含R语言代码。因此，它们的<code>formals()</code>、<code>body()</code>和<code>environment()</code>都是<code>NULL</code>。</p>
<p><code>Primitive function</code>只存在于<code>base</code>包中，由于它在底层运作，所以效率更高，可以对<strong>参数匹配</strong>使用不同的规则，如<code>switch</code>和<code>call</code>。然而使用的成本与R其他函数的行为不同。</p>
<p>唉，理解困难了。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Note on Stata]]></title>
      <url>http://yoursite.com/2016/06/21/stata_command/</url>
      <content type="html"><![CDATA[<p>Notes on Lian. <a id="more"></a></p>
<h1 id="文献收集与研读"><a href="#文献收集与研读" class="headerlink" title="文献收集与研读"></a>文献收集与研读</h1><p>从一个现实问题开始，对一篇特定的文章进行模仿或改进；综述性文章；记录自己的想法。</p>
<ul>
<li>集中一个统一的主题，分散多个小的主题</li>
<li>记录每篇文章的主要观点、方法、结论，以及前后文献的关系</li>
<li>建立不同内容之间的桥梁</li>
</ul>
<h1 id="stata-command"><a href="#stata-command" class="headerlink" title="stata command"></a>stata command</h1><ul>
<li>shellout “file.pdf” # open a pdf file</li>
<li>capture drop  #删除不存在的也不会报错，删除后再生成它，避免报错</li>
<li>F D L   # 分别表示前移、差分、滞后</li>
<li>preserve ………  restore  # 保留 然后恢复</li>
<li>qui xi: xreg y x1 x2 …  i.dumy,fe  # 生成dumy</li>
<li>graph bar x y,over(…)  graph export fig.wmf,replace</li>
<li>#delimit ; ……  #delimit cr</li>
<li>xtreg F_$y $y $xx   # 这是说定义的global字符串使用$转义字符串</li>
<li>tab id:gen(dum)    # 生成虚拟变量</li>
<li>xtbalance,rang(1998 2004) miss(var1 var2 var3 …)  # 转为平衡面板</li>
<li>group(var) # 对某变量分类从1开始的连续编码，对于forvalues等需要连续coding编码的循环命令很有用。</li>
<li>merge m:1 machvar using slavefile,keepusing(slave_var_list) nogenerate assert(3)  # masterfile是m个machvar，slavefile是一个</li>
</ul>
<ul>
<li>gen str2 stateabb = upper(sname) # 生成大写的字符串</li>
<li>gen byte indexwage = 0  # str2和byte是数据类型</li>
<li>append using targetfile.dta   # 上下对接</li>
<li>gen quarter = quarter(dofm(ym(year,month)))  # 将年月数据转为年季度数据。配合下一条命令。</li>
<li>collapse (mean) varlist1,by(varlist2) # 依据varlist2对varlist1取均值转换数据频率。</li>
<li>gen date = yq(year,quarter) # 生成数值表示的时间。配合下一条命令生成季度年数据。</li>
<li>format date %tq   # 配合下一条命令生成面板。</li>
<li>tsset id date   # 指定面板。</li>
<li>判断语句if date&gt;=tq(2007q3)  # 一旦转为标准的时间格式，判断语句仍然可以使用tq将时间转为数值时间，并使用数值时间进行判断。</li>
<li><code>_rc</code>是一个暂元，记录错误信息的代码，主要在编程中使用。在编程中，经常使用<code>capture drop var</code>或<code>capture program drop progvar</code>等命令，避免当错误出现时程序的停止。程序会继续运行，并将错误代码(非零的一串数字)记录在暂元<code>_rc</code>。</li>
<li>tsspell var #在设定面板数据之后，使用该命令，对var生成三个变量，一个是<code>_spell</code>标识var有几类，一个是<code>_seq</code>各类数量，最后，<code>_end</code>用1标识每一类结束的位置。</li>
<li>dis “it’s time now “ “$S_TIME”  # 显示当前时间</li>
<li>tsset year month, tsfill横向添加数值</li>
</ul>
<p>winsor<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> v of <span class="keyword">varlist</span> var1 var2....&#123;</span><br><span class="line">    <span class="keyword">local</span> a : <span class="keyword">var</span> <span class="keyword">lab</span> <span class="symbol">`v'</span></span><br><span class="line">    <span class="keyword">rename</span> <span class="symbol">`v'</span> <span class="symbol">`v'</span>_a</span><br><span class="line">    winsor <span class="symbol">`v'</span>_a,<span class="keyword">gen</span>(<span class="symbol">`v'</span>) p(0.01)</span><br><span class="line">    <span class="keyword">drop</span> <span class="symbol">`v'</span>_a</span><br><span class="line">    <span class="keyword">label</span> <span class="keyword">var</span> <span class="symbol">`v'</span> <span class="string">"`a'"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>仅保留连续两年以上有样本的id</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xtpattern,<span class="keyword">gen</span>(pp)</span><br><span class="line"><span class="keyword">gen</span> p2 = <span class="built_in">strpos</span>(pp,<span class="string">"11"</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">if</span> p2==0</span><br></pre></td></tr></table></figure>
<p>if条件语句</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">"`y'"</span>==<span class="string">"MDR"</span>&#123;</span><br><span class="line">    <span class="keyword">local</span> ytext <span class="string">"market"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">local</span> ytext <span class="string">"book"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">导出统计结果</span><br><span class="line"></span><br><span class="line">```stata</span><br><span class="line">logout, <span class="keyword">save</span>(<span class="string">"table"</span>) excel <span class="keyword">replace</span>:  <span class="comment">///</span></span><br><span class="line"><span class="keyword">tabstat</span> var1 var2 var3 ... , <span class="built_in">s</span>(<span class="keyword">N</span> <span class="keyword">mean</span> p50 sd min max) c(s) <span class="built_in">f</span>(%10.4f)</span><br></pre></td></tr></table></figure>
<p>导出回归结果：例子</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">global</span> y <span class="string">"mdr"</span></span><br><span class="line"><span class="keyword">global</span> xx <span class="string">"EBIT MB TA LNTA FA Ind"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* col(1)</span></span><br><span class="line"><span class="keyword">qui</span> <span class="keyword">tsset</span>                         * make sure</span><br><span class="line">xtfmb F_<span class="variable">$y</span> <span class="variable">$y</span> <span class="variable">$xx</span>                 * regression F <span class="keyword">on</span> xx</span><br><span class="line">estadd <span class="keyword">scalar</span> varn = 1 - _b[<span class="variable">$y</span>]   * add a <span class="keyword">scalar</span> to the col, and _b[<span class="variable">$y</span>] is the coefficent</span><br><span class="line"><span class="keyword">est</span> store FM</span><br><span class="line"></span><br><span class="line"><span class="comment">* col(2)</span></span><br><span class="line"><span class="keyword">xtreg</span> F_<span class="variable">$y</span> <span class="variable">$y</span> <span class="variable">$xx</span></span><br><span class="line">estadd <span class="keyword">scalar</span> varn = 1 - _b[<span class="variable">$y</span>]</span><br><span class="line"><span class="keyword">est</span> store FE</span><br><span class="line"></span><br><span class="line"><span class="comment">* col(3)</span></span><br><span class="line"><span class="keyword">preserve</span></span><br><span class="line"><span class="keyword">keep</span> id year F_<span class="variable">$y</span> <span class="variable">$y</span> <span class="variable">$xx</span></span><br><span class="line"><span class="keyword">xtdata</span>,fe <span class="keyword">clear</span>                * convert data <span class="keyword">format</span> suitable <span class="keyword">for</span> fe</span><br><span class="line"><span class="keyword">replace</span> year = int(year)</span><br><span class="line">xtfmb F_<span class="variable">$y</span> <span class="variable">$y</span> <span class="variable">$xx</span></span><br><span class="line">estadd <span class="keyword">scalar</span> varn = 1 - _b[<span class="variable">$y</span>]</span><br><span class="line"><span class="keyword">est</span> store FM_demean</span><br><span class="line"><span class="keyword">restore</span></span><br><span class="line"></span><br><span class="line"><span class="comment">* col(4)</span></span><br><span class="line"><span class="keyword">xi</span>: <span class="keyword">xtreg</span> F_<span class="variable">$y</span> <span class="variable">$y</span> <span class="variable">$xx</span></span><br><span class="line">estadd <span class="keyword">scalar</span> varn = 1 - _b[<span class="variable">$y</span>]</span><br><span class="line"><span class="keyword">est</span> store FE_year</span><br><span class="line"></span><br><span class="line"><span class="comment">* col(5)</span></span><br><span class="line"><span class="keyword">xi</span>: <span class="keyword">xtivreg</span> F_<span class="variable">$y</span> <span class="variable">$xx</span> i.year (<span class="variable">$y</span> = <span class="keyword">L</span>.BDR <span class="variable">$xx</span>),fe</span><br><span class="line">estadd <span class="keyword">scalar</span> varn = 1 - _b[<span class="variable">$y</span>]</span><br><span class="line"><span class="keyword">est</span> store IV</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="keyword">save</span> <span class="string">"using tab.csv"</span></span><br><span class="line"><span class="keyword">local</span> mm <span class="string">"FM FE FE_demean FE_year IV"</span></span><br><span class="line"><span class="keyword">local</span> <span class="keyword">keep</span> <span class="string">"$y $$xx"</span></span><br><span class="line">esttab <span class="symbol">`mm'</span> <span class="symbol">`save'</span>,mtitle(<span class="symbol">`mm'</span>) b(%6.3f) nogaps <span class="keyword">replace</span>  <span class="comment">///</span></span><br><span class="line">star(* 0.1 ** 0.05 *** 0.01) <span class="keyword">keep</span>(<span class="symbol">`keep'</span>) <span class="keyword">compress</span> <span class="comment">///</span></span><br><span class="line"><span class="built_in">scalar</span>(<span class="keyword">N</span> r2 r2_a r2_w varn) addnotes(<span class="string">"varn = 1 - _b[$y]"</span>)</span><br></pre></td></tr></table></figure>
<p>画图</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">twoway</span> (function y=88,<span class="keyword">range</span>(1 10) ...) (<span class="keyword">scatter</span> y x ..., mcolor(green*0.5) msymbol(T)) (<span class="keyword">lfit</span> y x,lcolor(black) lwid(..))</span><br></pre></td></tr></table></figure>
<h1 id="panel-data"><a href="#panel-data" class="headerlink" title="panel data"></a>panel data</h1><ul>
<li>静态panel</li>
<li>时间效应、模型筛选和其他</li>
<li>异方差、序列相关和截面相关</li>
<li>内生性问题与IV-GMM估计</li>
<li>动态面板</li>
</ul>
<hr>
<h2 id="静态面板"><a href="#静态面板" class="headerlink" title="静态面板"></a>静态面板</h2><p>固定效应模型：实质上是在传统线性回归模型中加入N-1个虚拟变量，使得每个截面都有自己的截距项。截距项反映了个体的某些不随时间变化的特征。OLS+dummies与FE结果无差异。</p>
<p>由于FE模型存在一个固定的截面，对于不随时间变化的个体效应与$a_i$构成了多重共线，所以使用$FE$模型时，所有不随时间变化的变量都会被drop掉。</p>
<p>如果截面的个数非常多，那么采用虚拟变量的方法运算量过大，因此需要寻求合理的方式去除个体效应。</p>
<p>FE模型：在回归模型中的$a_i$实际上是通过在回归中加入$,fe$完成的，不需要在回归方程中加入一个cons。</p>
<p>FE双向固定效应模型(时间效应)：在回归模型中加入时间虚拟变量，$i.year$，然后指定估计模型，$fe$，或方法，$,mle$。</p>
<p>随机效应模型：将随机干扰项分成两种，一种是不随时间改变的，即个体效应(FE)；另一种是随时间改变的，即通常意义上的干扰项$u_{it}$。</p>
<p>LR检验</p>
<blockquote>
<p>est store fe<br>…<br>lrtest fe fe_dum</p>
</blockquote>
<p>固定效应模型or随机效应模型？ <strong>Hausman test</strong></p>
<blockquote>
<p>est store fe<br>…<br>est store re<br>hausman fe re</p>
</blockquote>
<p>hausman test有可能为负，这是由于基本假设$corr(x,u_i)=0$无法得到满足。而且无法处理存在异方差的情形。Cameron and Trivedi(2009,pp.429)建议采用Bootstrap进行Hausman检验，能够从一定程度上克服如上问题。</p>
<blockquote>
<p>hausman fe re, sigmaless   # 使用fe模型的方差-协方差矩阵<br>hausman fe re, sigmamore   # 使用re模型的方差-协方差矩阵</p>
</blockquote>
<p>过度识别检验(插曲)，检验hausman test是否存在其他问题。</p>
<blockquote>
<p>xtoverid                   # re模型的过度识别检验command</p>
</blockquote>
<p>Bootstrap Hausman Test：基于Bootstrap的Hausman Test。该stata命令是由连玉君编写。</p>
<blockquote>
<p>hausmanxt y x1 x2 … , reps(200) seed(13579)</p>
</blockquote>
<h2 id="异方差、序列相关和截面相关"><a href="#异方差、序列相关和截面相关" class="headerlink" title="异方差、序列相关和截面相关"></a>异方差、序列相关和截面相关</h2><p>异方差</p>
<blockquote>
<p>xtreg y x1 x2 … ,fe robust</p>
</blockquote>
<p>相当于：</p>
<blockquote>
<p>xtreg y x1 x2 … ,fe cluster(code)</p>
</blockquote>
<p>或者：</p>
<blockquote>
<p>xtreg y x1 x2 … ,fe vce(bootstrap,reps(50))</p>
</blockquote>
<p>采用$Bootstrap$标准误，统计推断不依赖具体的分布假设。</p>
<p>甚至，直接使用一个综合处理的方法：<code>xtscc</code>命令。(推荐)</p>
<p>详见Stata Journal, 2007(3) 281-312。当异方差、序列相关和截面相关性质未知的情况下，<code>xtscc</code>相当于$White/Newey$估计扩展到Panel情形。(Driscoll and Kraay,1998)</p>
<blockquote>
<p>xtscc y x1 x2 x3 … ,fe</p>
</blockquote>
<p>可以添加滞后项，但并不是必须的。</p>
<blockquote>
<p>xtscc y x1 x2 x3 … ,fe lag(1)</p>
</blockquote>
<h2 id="内生性问题与IV估计"><a href="#内生性问题与IV估计" class="headerlink" title="内生性问题与IV估计"></a>内生性问题与IV估计</h2><ul>
<li>是否存在内生性问题</li>
<li>工具变量选择是否合适(过度识别、识别不足、弱工具变量)</li>
<li>估计</li>
</ul>
<ol>
<li>panel iv估计</li>
</ol>
<blockquote>
<p>xtivreg y x1 x2 x3 … (x4 = iv1 iv2),fe</p>
</blockquote>
<ol>
<li>内生性检验(Davidson-Mackinnon,1993)</li>
</ol>
<p>H0: OLS和xtivreg是一致的，即内生性问题对OLS的估计结果影响不大。</p>
<p>stata command:</p>
<blockquote>
<p>dmexogxt</p>
</blockquote>
<p>Hausman-Wu检验</p>
<blockquote>
<p>hausman fe fe_iv<br>hausman fe fe_iv, sigmamore<br>hausman fe fe_iv, sigmaless</p>
</blockquote>
<p>相对于$D-M$检验，$Hausman$检验的主要局限在于可能产生小于零的统计量。</p>
<ol>
<li>过度识别检验：工具变量的合理性<br>基本思想：检验工具变量的合理性，即与内生变量相关，而与干扰项不相关。</li>
</ol>
<blockquote>
<p>xtivreg y x1 x2 … (xn = iv1 iv2),fe<br>xtoverid</p>
</blockquote>
<p>还可以指定是大样本或小样本，</p>
<p>大样本：</p>
<blockquote>
<p>xtivreg y x1 x2 … (xn = iv1 iv2),fe</p>
</blockquote>
<p>小样本：</p>
<blockquote>
<p>xtivreg y x1 x2 … (xn = iv1 iv2), fe small</p>
</blockquote>
<p>Bootstrap 标准误</p>
<blockquote>
<p>xtivreg y x1 x2 … (xn = iv1 iv2), fe vce(bootstrap,rep(50))</p>
</blockquote>
<p>通常$rep(300)$，即抽样次数在300次以上即可达到较好的效果。</p>
<p>异方差稳健型IV估计(仅适用于xtivreg2命令)</p>
<blockquote>
<p>xtivreg2 y x1 x2 … (xn = iv1 iv2), fe robust</p>
</blockquote>
<ol>
<li>过度识别、识别不足与工具变量弱相关</li>
</ol>
<blockquote>
<p>xtivreg2 y x1 x2 … (xn = iv1 iv2), fe</p>
</blockquote>
<p>一条命令返回估计结果和三个指标：</p>
<ul>
<li>Underidentification test  # 识别不足检验。原假设：存在识别不足。</li>
<li>Weak identification test  # 弱工具变量检验。即使不存在识别不足问题，但仍然可能存在弱工具变量问题。原假设：工具变量与内生变量有较强的相关性。</li>
<li>Sargan statistic   # 过度识别。Sargan-Hansen statistic</li>
</ul>
<ol>
<li>存在序列相关的IV估计</li>
</ol>
<blockquote>
<p>newey2 y x1 x2 … (xn = Lag1 lag2), lag(2)</p>
</blockquote>
<h1 id="动态面板"><a href="#动态面板" class="headerlink" title="动态面板"></a>动态面板</h1><ul>
<li>一阶差分GMM</li>
<li>估计方法</li>
<li>过度识别检验</li>
<li>干扰项序列相关检验</li>
<li>稳健型估计和两阶段估计</li>
<li>先决变量和内生变量设定</li>
<li>系数估计的上下限</li>
<li>输出结果</li>
</ul>
<p>模型形式：<br>$y_{it} =a<em>0*y</em>{it-1} + a<em>1*x</em>{it} + a<em>2*w</em>{it} + u<em>i + e</em>{it}$</p>
<p>特征：</p>
<ul>
<li>解释变量中包含被解释变量的一阶滞后项</li>
<li>可以是非平衡面板，但时间连续</li>
<li>$x<em>{it}$严格外生变量($E[x</em>{it},e_{is}]=0$for all t and s)</li>
<li>$w<em>{it}$先决变量(前定变量)，即$E[w</em>{it},e<em>{is}]!=0~for~s&lt;t,then~E[w</em>{it},e_{is}]=0$</li>
<li>$y<em>{it-1}$内生变量，即$E[x</em>{it},e_{is}]!=0~for~s&lt;=t$</li>
<li>$u_i$随机效应，在截面之间是iid</li>
</ul>
<p>内生性问题：</p>
<ul>
<li>若$u<em>i$是随机效应，$corr(y</em>{i,t-1},u_i)!=0$</li>
<li>若$u_i$是个体效应，则差分法难以解决。如一阶差分，差分方程的残差与被解释变量的一阶差分项之间存在内生性；组内去均值差分，差分方差的内生性问题仍然存在。</li>
</ul>
<p>解决的办法：IV估计(选择合适的工具变量)或GMM</p>
<h2 id="一阶差分GMM"><a href="#一阶差分GMM" class="headerlink" title="一阶差分GMM"></a>一阶差分GMM</h2><p>L. Hansen(1982) and Arellano and Bond(1991)</p>
<p>Model: $y_{it}=a<em>0*y</em>{it-1}+a<em>1*x</em>{it}+a<em>2*w</em>{it}+u<em>i+v</em>{it}$</p>
<p>假设条件：干扰项$v_{it}$不存在序列相关</p>
<p>适用范围：大N，小T。</p>
<p>设定工具变量的基本原则：</p>
<ul>
<li>对内生变量：滞后两阶以上的水平变量均可作为差分方程的工具变量</li>
<li>对先决变量：滞后一阶以上的水平变量均可作为工具变量</li>
<li>对外生变量：自己作为工具变量</li>
</ul>
<p>stata command</p>
<blockquote>
<p>xtabond y x<br>xtabond y x ,twostep   # 两阶段估计<br>estat sargan           # 过度识别检验<br>xtabond y x ,vce(robust)  # 检验差分方程残差是否存在二阶(或更高阶)序列相关<br>estat abond            # 二阶序列相关检验</p>
</blockquote>
<p>David Powell(2015) Inference with Correlated Clusters</p>
<p>Inference procedure: 对固定数量的、异质性、相关群体有效。</p>
<p>对panel data组内任意的相互依赖有效。</p>
<p>Chernozhukov et.al(2013).</p>
<h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h1><p>$F_{Y[(t,s)|(r,v)]}$ denote the counterfactual distribution of log wages $Y$ when the wage structure is as in year $t$, the minimum wage $M$ is at the level observed in year $s$, the union status $U$ is distributed as in year $r$, and the other worker characteristics $C$ are distributed as in year $v$.</p>
<p>then decompose the observed change into the four effects:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F_&#123;Y[(1,1)|(1,1)]&#125; - F_&#123;Y[(0,0)|(0,0)]&#125;</span><br><span class="line">= [F_&#123;Y[(1,1)|(1,1)]&#125; - F_&#123;Y[(1,0)|(1,1)]&#125;] + [F_&#123;Y[(1,0)|(1,1)]&#125; - F_&#123;Y[(1,0)|(0,1)]&#125;]</span><br><span class="line">+ [F_&#123;Y[(1,0)|(0,1)]&#125; - F_&#123;Y[(1,0)|(0,0)]&#125;] + [F_&#123;Y[(1,0)|(0,0)]&#125; - F_&#123;Y[(0,0)|(0,0)]&#125;]</span><br></pre></td></tr></table></figure>
<h1 id="cross-section-dependence-test"><a href="#cross-section-dependence-test" class="headerlink" title="cross-section dependence test"></a>cross-section dependence test</h1><p>有三个测试命令：xtcd, xtcd2, xtcsi</p>
<p>xtcsi优于xtcd，但在存在弱横截面相关的情况下表现不佳。</p>
<h2 id="xtcd2"><a href="#xtcd2" class="headerlink" title="xtcd2"></a>xtcd2</h2><p>xtcd2：零假设是存在弱横截面相关，备择假设是存在强横截面相关。弱横截面相关在N趋于无穷的情况下相关系数趋于零，但强横截面相关趋于一个常数。</p>
<p>syntax: <code>xtcd2 [varname(max=1)] [,noestimation rho histogram name(string)]</code></p>
<ul>
<li>varname: 是残差或变量，在估计方程之后使用时，不需要此变量</li>
<li>noestimation</li>
<li>rho: 保存相关矩阵到变量<code>r(rho)</code></li>
<li>histogram: 绘制相关图</li>
<li>name(string): 保存相关图</li>
</ul>
<h3 id="保存的变量"><a href="#保存的变量" class="headerlink" title="保存的变量"></a>保存的变量</h3><p>常量：</p>
<ul>
<li><code>r(cd)</code>: cd test statistic</li>
<li><code>r(cdp)</code>: p-value of cd test statistic</li>
</ul>
<p>矩阵：</p>
<ul>
<li><code>r(rho)</code>: 相关矩阵</li>
</ul>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> <span class="keyword">d</span>.logrgdpo loghc logck logngd</span><br><span class="line">xtcd2</span><br></pre></td></tr></table></figure>
<p>等价于</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">reg</span> <span class="keyword">d</span>.logrgdpo loghc logck logngd</span><br><span class="line"><span class="keyword">predict</span> res, residuals</span><br><span class="line">xtcd2 res</span><br></pre></td></tr></table></figure>
<p>或者添加一张图</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtcd2 res, <span class="keyword">histogram</span></span><br></pre></td></tr></table></figure>
<p>测试变量</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtcd2 logrgdpo, noestimation</span><br></pre></td></tr></table></figure>
<h2 id="regife"><a href="#regife" class="headerlink" title="regife"></a>regife</h2><h3 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h3><p><code>regife depvar [indepvars] [if] [in] [weight], factors(idvar timevar, dimensionint) [options]</code></p>
<ul>
<li>factors(idvar timevar,dimint): id、time以及因子维度。若要保存factor,<code>newvar=factorvar</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex Math]]></title>
      <url>http://yoursite.com/2016/06/17/latex_math/</url>
      <content type="html"><![CDATA[<p>总结$latex$中的一些数学符号表示方法。<a id="more"></a></p>
<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\alpha$</td>
<td><code>\alpha</code></td>
<td>$\theta$</td>
<td><code>\theta</code></td>
<td>$o$</td>
<td><code>o</code></td>
<td>$\tau$</td>
<td><code>\tau</code></td>
</tr>
<tr>
<td>$\beta$</td>
<td><code>\beta</code></td>
<td>$\vartheta$</td>
<td><code>\vartheta</code></td>
<td>$\pi$</td>
<td><code>\pi</code></td>
<td>$\upsilon$</td>
<td><code>\upsilon</code></td>
</tr>
<tr>
<td>$\gamma$</td>
<td><code>\gamma</code></td>
<td>$\varpi$</td>
<td><code>\varpi</code></td>
<td>$\phi$</td>
<td><code>\phi</code></td>
<td>$\delta$</td>
<td><code>\delta</code></td>
</tr>
<tr>
<td>$\kappa$</td>
<td><code>\kappa</code></td>
<td>$\rho$</td>
<td><code>\rho</code></td>
<td>$\varphi$</td>
<td><code>\varphi</code></td>
<td>$\epsilon$</td>
<td><code>\epsilon</code></td>
</tr>
<tr>
<td>$\lambda$</td>
<td><code>\lambda</code></td>
<td>$\varrho$</td>
<td><code>\varrho</code></td>
<td>$\chi$</td>
<td><code>\chi</code></td>
<td>$\varepsilon$</td>
<td><code>\varepsilon</code></td>
</tr>
<tr>
<td>$\mu$</td>
<td><code>\mu</code></td>
<td>$\sigma$</td>
<td><code>\sigma</code></td>
<td>$\psi$</td>
<td><code>\psi</code></td>
<td>$\zeta$</td>
<td><code>\zeta</code></td>
</tr>
<tr>
<td>$\nu$</td>
<td><code>\nu</code></td>
<td>$\varsigma$</td>
<td><code>\varsigma</code></td>
<td>$\omega$</td>
<td><code>\omega</code></td>
<td>$\eta$</td>
<td><code>\eta</code></td>
</tr>
<tr>
<td>$\xi$</td>
<td><code>\xi</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>$\Gamma$</td>
<td><code>\Gamma</code></td>
<td>$\Lambda$</td>
<td><code>\Lambda</code></td>
<td>$\Sigma$</td>
<td><code>\Sigma</code></td>
<td>$\Psi$</td>
<td><code>\Psi</code></td>
</tr>
<tr>
<td>$\Delta$</td>
<td><code>\Delta</code></td>
<td>$\Xi$</td>
<td><code>\Xi</code></td>
<td>$\Upsilon$</td>
<td><code>\Upsilon</code></td>
<td>$\Omega$</td>
<td><code>\Omega</code></td>
</tr>
<tr>
<td>$\Theta$</td>
<td><code>\Theta</code></td>
<td>$\Pi$</td>
<td><code>\Pi</code></td>
<td>$\Phi$</td>
<td><code>\Phi</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="二元操作符"><a href="#二元操作符" class="headerlink" title="二元操作符"></a>二元操作符</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\pm$</td>
<td><code>\pm</code></td>
<td>$\cap$</td>
<td><code>\cap</code></td>
<td>$\diamond$</td>
<td><code>\diamond</code></td>
<td>$\oplus$</td>
<td><code>\oplus</code></td>
</tr>
<tr>
<td>$\mp$</td>
<td><code>\mp</code></td>
<td>$\cup$</td>
<td><code>\cup</code></td>
<td>$\bigtriangleup$</td>
<td><code>\bigtriangleup</code></td>
<td>$\ominus$</td>
<td><code>\ominus</code></td>
</tr>
<tr>
<td>$\times$</td>
<td><code>\times</code></td>
<td>$\uplus$</td>
<td><code>\uplus</code></td>
<td>$\bigtriangledown$</td>
<td><code>\bigtriangledown</code></td>
<td>$\otimes$</td>
<td><code>\otimes</code></td>
</tr>
<tr>
<td>$\div$</td>
<td><code>\div</code></td>
<td>$\sqcap$</td>
<td><code>\sqcap</code></td>
<td>$\triangleleft$</td>
<td><code>\triangleleft</code></td>
<td>$\oslash$</td>
<td><code>\oslash</code></td>
</tr>
<tr>
<td>$\ast$</td>
<td><code>\ast</code></td>
<td>$\sqcup$</td>
<td><code>\sqcup</code></td>
<td>$\triangleright$</td>
<td><code>\triangleright</code></td>
<td>$\odot$</td>
<td><code>\odot</code></td>
</tr>
<tr>
<td>$\star$</td>
<td><code>\star</code></td>
<td>$\vee$</td>
<td><code>\vee</code></td>
<td>$\bigcirc$</td>
<td><code>\bigcirc</code></td>
<td>$\circ$</td>
<td><code>\circ</code></td>
</tr>
<tr>
<td>$\wedge$</td>
<td><code>\wedge</code></td>
<td>$\dagger$</td>
<td><code>\dagger</code></td>
<td>$\bullet$</td>
<td><code>\bullet</code></td>
<td>$\setminus$</td>
<td><code>\setminus</code></td>
</tr>
<tr>
<td>$\ddagger$</td>
<td><code>\ddagger</code></td>
<td>$\cdot$</td>
<td><code>\cdot</code></td>
<td>$\wr$</td>
<td><code>\wr</code></td>
<td>$\amalg$</td>
<td><code>\amalg</code></td>
</tr>
<tr>
<td>$+$</td>
<td><code>+</code></td>
<td>$-$</td>
<td><code>-</code></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="关系操作符"><a href="#关系操作符" class="headerlink" title="关系操作符"></a>关系操作符</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\leq$</td>
<td><code>\leq</code></td>
<td>$\geq$</td>
<td><code>\geq</code></td>
<td>$\equiv$</td>
<td><code>\equiv</code></td>
<td>$\models$</td>
<td><code>\models</code></td>
</tr>
<tr>
<td>$\prec$</td>
<td><code>\prec</code></td>
<td>$\succ$</td>
<td><code>\succ</code></td>
<td>$\sim$</td>
<td><code>\sim</code></td>
<td>$\perp$</td>
<td><code>\perp</code></td>
</tr>
<tr>
<td>$\preceq$</td>
<td><code>\preceq</code></td>
<td>$\succeq$</td>
<td><code>\succeq</code></td>
<td>$\simeq$</td>
<td><code>\simeq</code></td>
<td>$\mid$</td>
<td><code>\mid</code></td>
</tr>
<tr>
<td>$\ll$</td>
<td><code>\ll</code></td>
<td>$\gg$</td>
<td><code>\gg</code></td>
<td>$\asymp$</td>
<td><code>\asymp</code></td>
<td>$\parallel$</td>
<td><code>\parallel</code></td>
</tr>
<tr>
<td>$\subset$</td>
<td><code>\subset</code></td>
<td>$\supset$</td>
<td><code>\supset</code></td>
<td>$\approx$</td>
<td><code>\approx</code></td>
<td>$\bowtie$</td>
<td><code>\bowtie</code></td>
</tr>
<tr>
<td>$\subseteq$</td>
<td><code>\subseteq</code></td>
<td>$\supseteq$</td>
<td><code>\supseteq</code></td>
<td>$\cong$</td>
<td><code>\cong</code></td>
<td>$\Join$</td>
<td><code>\Join</code></td>
</tr>
<tr>
<td>$\sqsubset$</td>
<td><code>\sqsubset</code></td>
<td>$\sqsupset$</td>
<td><code>\sqsupset</code></td>
<td>$\neq$</td>
<td><code>\neq</code></td>
<td>$\smile$</td>
<td><code>\smile</code></td>
</tr>
<tr>
<td>$\sqsubseteq$</td>
<td><code>\sqsubseteq</code></td>
<td>$\sqsupseteq$</td>
<td><code>\sqsupseteq</code></td>
<td>$\doteq$</td>
<td><code>\doteq</code></td>
<td>$\frown$</td>
<td><code>\frown</code></td>
</tr>
<tr>
<td>$\in$</td>
<td><code>\in</code></td>
<td>$\ni$</td>
<td><code>\ni</code></td>
<td>$\propto$</td>
<td><code>\propto</code></td>
<td>$=$</td>
<td><code>=</code></td>
</tr>
<tr>
<td>$\vdash$</td>
<td><code>\vdash</code></td>
<td>$\dashv$</td>
<td><code>\dashv</code></td>
<td>$ &lt; $</td>
<td><code>&lt;</code></td>
<td>$&gt;$</td>
<td><code>&gt;</code></td>
</tr>
</tbody>
</table>
<h2 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\leftarrow$</td>
<td><code>\leftarrow</code></td>
<td>$\longleftarrow$</td>
<td><code>\longleftarrow</code></td>
<td>$\uparrow$</td>
<td><code>\uparrow</code></td>
</tr>
<tr>
<td>$\Leftarrow$</td>
<td><code>\Leftarrow</code></td>
<td>$\Longleftarrow$</td>
<td><code>\Longleftarrow</code></td>
<td>$\Uparrow$</td>
<td><code>\Uparrow</code></td>
</tr>
<tr>
<td>$\rightarrow$</td>
<td><code>\rightarrow</code></td>
<td>$\longrightarrow$</td>
<td><code>\longrightarrow</code></td>
<td>$\downarrow$</td>
<td><code>\downarrow</code></td>
</tr>
<tr>
<td>$\Rightarrow$</td>
<td><code>\Rightarrow</code></td>
<td>$\Longrightarrow$</td>
<td><code>\Longrightarrow</code></td>
<td>$\Downarrow$</td>
<td><code>\Downarrow</code></td>
</tr>
<tr>
<td>$\leftrightarrow$</td>
<td><code>\leftrightarrow</code></td>
<td>$\longleftrightarrow$</td>
<td><code>\longleftrightarrow</code></td>
<td>$\updownarrow$</td>
<td><code>\updownarrow</code></td>
</tr>
<tr>
<td>$\Leftrightarrow$</td>
<td><code>\Leftrightarrow</code></td>
<td>$\Longleftrightarrow$</td>
<td><code>\Longleftrightarrow</code></td>
<td>$\Updownarrow$</td>
<td><code>\Updownarrow</code></td>
</tr>
<tr>
<td>$\mapsto$</td>
<td><code>\mapsto</code></td>
<td>$\longmapsto$</td>
<td><code>\longmapsto</code></td>
<td>$\nearrow$</td>
<td><code>\nearrow</code></td>
</tr>
<tr>
<td>$\hookleftarrow$</td>
<td><code>\hookleftarrow</code></td>
<td>$\hookrightarrow$</td>
<td><code>\hookrightarrow</code></td>
<td>$\searrow$</td>
<td><code>\searrow</code></td>
</tr>
<tr>
<td>$\leftharpoonup$</td>
<td><code>\leftharpoonup</code></td>
<td>$\rightharpoonup$</td>
<td><code>\rightharpoonup</code></td>
<td>$\swarrow$</td>
<td><code>\swarrow</code></td>
</tr>
<tr>
<td>$\leftharpoondown$</td>
<td><code>\leftharpoondown</code></td>
<td>$\rightharpoondown$</td>
<td><code>\rightharpoondown</code></td>
<td>$\nwarrow$</td>
<td><code>\nwarrow</code></td>
</tr>
<tr>
<td>$\rightleftharpoons$</td>
<td><code>\rightleftharpoons</code></td>
<td>$\leadsto$</td>
<td><code>\leadsto</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="五花八门"><a href="#五花八门" class="headerlink" title="五花八门"></a>五花八门</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\ldots$</td>
<td><code>\ldots</code></td>
<td>$\cdots$</td>
<td><code>\cdots</code></td>
<td>$\vdots$</td>
<td><code>\vdots</code></td>
<td>$\ddots$</td>
<td><code>\ddots</code></td>
</tr>
<tr>
<td>$\aleph$</td>
<td><code>\aleph</code></td>
<td>$\prime$</td>
<td><code>\prime</code></td>
<td>$\forall$</td>
<td><code>\forall</code></td>
<td>$\infty$</td>
<td><code>\infty</code></td>
</tr>
<tr>
<td>$\hbar$</td>
<td><code>\hbar</code></td>
<td>$\emptyset$</td>
<td><code>\emptyset</code></td>
<td>$\exists$</td>
<td><code>\exists</code></td>
<td>$\Box$</td>
<td><code>\Box</code></td>
</tr>
<tr>
<td>$\imath$</td>
<td><code>\imath</code></td>
<td>$\nabla$</td>
<td><code>\nabla</code></td>
<td>$\neg$</td>
<td><code>\neg</code></td>
<td>$\Diamond$</td>
<td><code>\Diamond</code></td>
</tr>
<tr>
<td>$\jmath$</td>
<td><code>\jmath</code></td>
<td>$\surd$</td>
<td><code>\surd</code></td>
<td>$\flat$</td>
<td><code>\flat</code></td>
<td>$\triangle$</td>
<td><code>\triangle</code></td>
</tr>
<tr>
<td>$\ell$</td>
<td><code>\ell</code></td>
<td>$\top$</td>
<td><code>\top</code></td>
<td>$\natural$</td>
<td><code>\natural</code></td>
<td>$\clubsuit$</td>
<td><code>\clubsuit</code></td>
</tr>
<tr>
<td>$\wp$</td>
<td><code>\wp</code></td>
<td>$\bot$</td>
<td><code>\bot</code></td>
<td>$\sharp$</td>
<td><code>\sharp</code></td>
<td>$\diamondsuit$</td>
<td><code>\diamondsuit</code></td>
</tr>
<tr>
<td>$\Re$</td>
<td><code>\Re</code></td>
<td>$\backslash$</td>
<td><code>\backslash</code></td>
<td>$\heartsuit$</td>
<td><code>\heartsuit</code></td>
<td>$\Im$</td>
<td><code>\Im</code></td>
</tr>
<tr>
<td>$\angle$</td>
<td><code>\angle</code></td>
<td>$\partial$</td>
<td><code>\partial</code></td>
<td>$\spadesuit$</td>
<td><code>\spadesuit</code></td>
<td>$\mho$</td>
<td><code>\mho</code></td>
</tr>
</tbody>
</table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\sum$</td>
<td><code>\sum</code></td>
<td>$\bigcap$</td>
<td><code>\bigcap</code></td>
<td>$\bigodot$</td>
<td><code>\bigodot</code></td>
<td>$\prod$</td>
<td><code>\prod</code></td>
</tr>
<tr>
<td>$\bigcup$</td>
<td><code>\bigcup</code></td>
<td>$\bigotimes$</td>
<td><code>\bigotimes</code></td>
<td>$\coprod$</td>
<td><code>\coprod</code></td>
<td>$\bigsqcup$</td>
<td><code>\bigsqcup</code></td>
</tr>
<tr>
<td>$\bigoplus$</td>
<td><code>\bigoplus</code></td>
<td>$\int$</td>
<td><code>\int</code></td>
<td>$\bigvee$</td>
<td><code>\bigvee</code></td>
<td>$\biguplus$</td>
<td><code>\biguplus</code></td>
</tr>
<tr>
<td>$\oint$</td>
<td><code>\oint</code></td>
<td>$\bigwedge$</td>
<td><code>\bigwedge</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>$\arccos$</td>
<td><code>\arccos</code></td>
<td>$\cos$</td>
<td><code>\cos</code></td>
<td>$\csc$</td>
<td><code>\csc</code></td>
<td>$\exp$</td>
<td><code>\exp</code></td>
</tr>
<tr>
<td>$\ker$</td>
<td><code>\ker</code></td>
<td>$\limsup$</td>
<td><code>\limsup</code></td>
<td>$\min$</td>
<td><code>\min</code></td>
<td>$\sinh$</td>
<td><code>\sinh</code></td>
</tr>
<tr>
<td>$\arcsin$</td>
<td><code>\arcsin</code></td>
<td>$\cosh$</td>
<td><code>\cosh</code></td>
<td>$\deg$</td>
<td><code>\deg</code></td>
<td>$\gcd$</td>
<td><code>\gcd</code></td>
</tr>
<tr>
<td>$\lg$</td>
<td><code>\lg</code></td>
<td>$\ln$</td>
<td><code>\ln</code></td>
<td>$\Pr$</td>
<td><code>\Pr</code></td>
<td>$\sup$</td>
<td><code>\sup</code></td>
</tr>
<tr>
<td>$\arctan$</td>
<td><code>\arctan</code></td>
<td>$\cot$</td>
<td><code>\cot</code></td>
<td>$\det$</td>
<td><code>\det</code></td>
<td>$\hom$</td>
<td><code>\hom</code></td>
</tr>
<tr>
<td>$\lim$</td>
<td><code>\lim</code></td>
<td>$\log$</td>
<td><code>\log</code></td>
<td>$\sec$</td>
<td><code>\sec</code></td>
<td>$\tan$</td>
<td><code>\tan</code></td>
</tr>
<tr>
<td>$\arg$</td>
<td><code>\arg</code></td>
<td>$\coth$</td>
<td><code>\coth</code></td>
<td>$\dim$</td>
<td><code>\dim</code></td>
<td>$\inf$</td>
<td><code>\inf</code></td>
</tr>
<tr>
<td>$\liminf$</td>
<td><code>\liminf</code></td>
<td>$\max$</td>
<td><code>\max</code></td>
<td>$\sin$</td>
<td><code>\sin</code></td>
<td>$\tanh$</td>
<td><code>\tanh</code></td>
</tr>
</tbody>
</table>
<h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><table>
<thead>
<tr>
<th>(1)</th>
<th>expr</th>
<th>(2)</th>
<th>expr</th>
<th>(3)</th>
<th>expr</th>
<th>(4)</th>
<th>expr</th>
</tr>
</thead>
<tbody>
<tr>
<td>$\uparrow$</td>
<td><code>\uparrow</code></td>
<td>$\Uparrow$</td>
<td><code>\Uparrow</code></td>
<td>$\downarrow$</td>
<td><code>\downarrow</code></td>
<td>$\Downarrow$</td>
<td><code>\Downarrow</code></td>
</tr>
<tr>
<td>$\updownarrow$</td>
<td><code>\updownarrow</code></td>
<td>$\Updownarrow$</td>
<td><code>\Updownarrow</code></td>
<td>$\lfloor$</td>
<td><code>\lfloor</code></td>
<td>$\rfloor$</td>
<td><code>\rfloor</code></td>
</tr>
<tr>
<td>$\lceil$</td>
<td><code>\lceil</code></td>
<td>$\rceil$</td>
<td><code>\rceil</code></td>
<td>$\langle$</td>
<td><code>\langle</code></td>
<td>$\rangle$</td>
<td><code>\rangle</code></td>
</tr>
<tr>
<td>$\rmoustache$</td>
<td><code>\rmoustache</code></td>
<td>$\lmoustache$</td>
<td><code>\lmoustache</code></td>
<td>$\rgroup$</td>
<td><code>\rgroup</code></td>
<td>$\lgroup$</td>
<td><code>\lgroup</code></td>
</tr>
<tr>
<td>$\arrowvert$</td>
<td><code>\arrowvert</code></td>
<td>$\Arrowvert$</td>
<td><code>\Arrowvert</code></td>
<td>$\bracevert$</td>
<td><code>\bracevert</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>$\colon$</td>
<td><code>\colon</code></td>
<td>$\ldotp $</td>
<td><code>\ldotp</code></td>
<td>$\cdotp$</td>
<td><code>\cdotp</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>$\hat{a}$   <code>\hat{a}</code>     $\acute{a}$   <code>\acute{a}</code>     $\bar{a}$   <code>\bar{a}</code></p>
<p>$\dot{a}$   <code>\dot{a}</code>     $\breve{a}$   <code>\breve{a}</code>     $\check{a}$   <code>\check{a}</code></p>
<p>$\grave{a}$   <code>\grave{a}</code>     $\vec{a}$   <code>\vec{a}</code>     $\ddot{a}$   <code>\ddot{a}</code></p>
<p>$\tilde{a}$   <code>\tilde{a}</code></p>
<p>$\widetilde{abcd}$   <code>\widetilde{abcd}</code>      $\widehat{abc}$   <code>\widehat{abc}</code></p>
<p>$\overleftarrow{abc}$   <code>\overleftarrow{abc}</code>      $\overrightarrow{abc}$   <code>\overrightarrow{abc}</code></p>
<p>$\overline{abc}$   <code>\overline{abc}</code>      $\underline{abc}$   <code>\underline{abc}</code></p>
<p>$\overbrace{abc}$   <code>\overbrace{abc}</code>      $\underbrace{abc}$   <code>\underbrace{abc}</code></p>
<p>$\sqrt{abc}$      <code>\sqrt{abc}</code>      $\sqrt[n]{abc} $  <code>\sqrt[n]{abc}</code></p>
<p>$\frac{abc}{xyz}$</p>
<p>end</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[备用 配置NexT主题]]></title>
      <url>http://yoursite.com/2016/06/17/%E5%A4%87%E7%94%A8%E9%85%8D%E7%BD%AENexT%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>本文来自<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT主题配置文档</a>。</p>
<p>谢谢NexT主题的开发者。本文的目的是记录相关配置以备后用(记性不好)。</p>
<p>Hexo可以使用<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="external">标签插件</a>快速的插入特定形式的内容。<a id="more"></a></p>
<p>Hexo有两份配置文件，其名称都是<code>_config.yml</code>。其中，一份位于站点根目录，主要包含Hexo本身的配置；另一份位于主题目录下，由主题作者提供，并配置主题相关的选项。前一份称为<code>站点配置文件</code>，后一份称为<code>主题配置文件</code>。</p>
<p>配置文件均采用<code>#</code>作为注释符。</p>
<h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><hr>
<p>将主题拷贝到<code>theme</code>目录下，然后修改<code>站点配置文件</code>的<code>theme</code>选项。</p>
<p>更新主题：git bash—cd到theme文件夹—<code>git pull</code>即可。当然，这种方式适合主题安装采用<code>git clone</code>的方式将主题克隆到<code>theme</code>文件夹。</p>
<p>切换主题：更改<code>theme</code>选项以后，使用<code>hexo clean</code>清除hexo缓存，然后即可开启调试验证主题。</p>
<p>验证主题：使用<code>hexo s --debug</code>开启调试模式，观察是否存在异常信息。NexT默认Scheme是<code>Scheme -Muse</code>。</p>
<h1 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h1><hr>
<h2 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h2><p>Scheme是NexT提供的一种特性，并非其他主题都是如此。NexT借助Scheme提供三种不同的外观。同时，不同Scheme之间的切换是在<code>主题配置文件</code>中进行的。</p>
<ul>
<li>Muse - 默认Scheme</li>
<li>Mist - Muse的紧凑版本，整洁有序的单栏外观</li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
<h2 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h2><p>编辑<code>站点配置文件</code>，将<code>language</code>设置成你所需要的语言，如简体中文。</p>
<blockquote>
<p>language: zh-Hans</p>
</blockquote>
<p>NexT支持：English(language: en)、简体中文(zh_Hans)、Francais(fr-FR)、Portugues(pt)、繁体中文(zh-hk or zh-tw)、日语(ja)等。</p>
<h2 id="设置-菜单"><a href="#设置-菜单" class="headerlink" title="设置 菜单"></a>设置 菜单</h2><p>菜单配置包括三部分，菜单项(名称和链接)、菜单项显示文本和菜单项对应的图标。NexT使用<a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>图标。Font Awesome提供了600+的图标，基本满足大部分需求。</p>
<p>编辑<code>主题配置文件</code>，修改以下内容：</p>
<ol>
<li>设定菜单项</li>
</ol>
<p>对应的字段是<code>menu</code>，菜单内容的设置格式是：<code>item_name: link</code>，其中<code>item_name</code>是名称，用于匹配图标及翻译，而不显示。如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: /</span><br><span class="line">    archives: /archives</span><br><span class="line">    #about: /about</span><br><span class="line">    #categories: /categories</span><br><span class="line">    tags: /tags</span><br><span class="line">    #commonweal: /404.html</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果站点运行在子目录，将链接前缀<code>/</code>去掉即可。</p>
</blockquote>
<p>NexT默认菜单项：</p>
<table>
<thead>
<tr>
<th>键值</th>
<th>设定值</th>
<th>显示文本(简体中文)</th>
</tr>
</thead>
<tbody>
<tr>
<td>home</td>
<td>home: /</td>
<td>主页</td>
</tr>
<tr>
<td>archives</td>
<td>archives: /archives</td>
<td>归档页</td>
</tr>
<tr>
<td>categories</td>
<td>categories: /categories</td>
<td>分类页(需要手动创建)</td>
</tr>
<tr>
<td>tags</td>
<td>tags: /tags</td>
<td>标签页(需要手动创建)</td>
</tr>
<tr>
<td>about</td>
<td>about: /about</td>
<td>关于页面(需要手动创建该页面)</td>
</tr>
<tr>
<td>commonweal</td>
<td>commonweal: /404.html</td>
<td>公益404(需要手动创建)</td>
</tr>
</tbody>
</table>
<ol>
<li>菜单项显示文本</li>
</ol>
<p>在第一步设置的菜单名称并不直接用于界面显示。Hexo在生成页面的时候使用这个名称去查找对应的语言翻译，并提取显示文本。这些翻译文本放置在NexT主题目录下的<code>languages/{language}.yml</code>(<code>{language}</code>是你所使用的语言)。</p>
<p>以简体中文为例，若要添加一个菜单项，如<code>python</code>，那么就需要修改简体中文对应的翻译文件<code>languages/zh-Hans.yml</code>，在<code>menu</code>字段下面添加一项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: 首页</span><br><span class="line">    archives: 归档</span><br><span class="line">    categories: 分类</span><br><span class="line">    tags: 标签</span><br><span class="line">    about: 关于</span><br><span class="line">    search: 搜索</span><br><span class="line">    commonweal: 公益404</span><br><span class="line">    python: python</span><br></pre></td></tr></table></figure>
<ol>
<li>设定菜单项图标</li>
</ol>
<p>对应的字段是<code>menu_icons</code>，设定格式<code>item_name: icon name</code>，其中<code>item_name</code>与上一步所配置的菜单名字对应，<code>icon name</code>是<code>Font Awesome</code>图标的名字，而<code>enable</code>可用于控制是否显示图标，你可以设置成<code>false</code>来去掉图标。例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">    enable: true</span><br><span class="line">    # icon mapping</span><br><span class="line">    home: home</span><br><span class="line">    about: user</span><br><span class="line">    categories: th</span><br><span class="line">    tags: tags</span><br><span class="line">    archives: archive</span><br><span class="line">    commonweal: heartbeat</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在菜单图标开启的情况下，如果菜单项与菜单未匹配(没有设置或无效的Font Awesome图标名字)，NexT会显示问号。</p>
<p>注意大小写</p>
</blockquote>
<h2 id="设置-侧栏"><a href="#设置-侧栏" class="headerlink" title="设置 侧栏"></a>设置 侧栏</h2><p>默认情况下，侧栏显示在右侧，可以通过修改<code>主题配置文件</code>中的<code>sidebar</code>字段控制侧栏的位置和显示时机。</p>
<ol>
<li>设置侧栏位置</li>
</ol>
<p>修改<code>sidebar.position</code></p>
<ul>
<li>left-靠左放置</li>
<li>right- 靠右放置</li>
</ul>
<blockquote>
<p>5.0及以下版本<strong>仅仅</strong>Pisces Scheme支持<code>position</code>配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">    position: left</span><br></pre></td></tr></table></figure>
<ol>
<li>设置侧栏显示时机</li>
</ol>
<p>修改<code>sidebar.display</code></p>
<ul>
<li>post 默认，在文章页面(即目录)时显示</li>
<li>always 在所有页面显示</li>
<li>hide 在所有页面隐藏(但可以手动展开)</li>
<li>remove完全移除</li>
</ul>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">    display: post</span><br></pre></td></tr></table></figure>
<blockquote>
<p>5.0及以下版本在<code>use motion: false</code>的情况下不会展示。</p>
</blockquote>
<h2 id="设置-头像"><a href="#设置-头像" class="headerlink" title="设置 头像"></a>设置 头像</h2><p>编辑<code>站点配置文件</code>，新增字段<code>avatar</code>，值设置成头像的链接地址。其中，头像的链接地址可以是：</p>
<table>
<thead>
<tr>
<th>地址</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>互联网地址</td>
<td><a href="http://example.com/avatar.png" target="_blank" rel="external">http://example.com/avatar.png</a></td>
</tr>
<tr>
<td>站点内地址</td>
<td>将头像放置在主题目录下的<code>source/uploads/</code>(若不存在则新建uploads目录)配置为<code>avatar: /uploads/avatar.png</code>。或者 放置在<code>source/images/</code>目录下，配置为：<code>avatar: /images/avatar.png</code></td>
</tr>
</tbody>
</table>
<p>例如：</p>
<blockquote>
<p>avatar: <a href="http://.../avatar.png" target="_blank" rel="external">http://.../avatar.png</a></p>
</blockquote>
<h2 id="设置-作者昵称"><a href="#设置-作者昵称" class="headerlink" title="设置 作者昵称"></a>设置 作者昵称</h2><p>编辑<code>站点配置文件</code>，设置<code>author</code>为你的昵称。</p>
<h2 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h2><p>编辑<code>站点配置文件</code>，设置<code>description</code>字段为你的站点描述。站点描述可以是你喜欢的一句签名。</p>
<h1 id="集成第三方服务"><a href="#集成第三方服务" class="headerlink" title="集成第三方服务"></a>集成第三方服务</h1><hr>
<h2 id="多说评论"><a href="#多说评论" class="headerlink" title="多说评论"></a>多说评论</h2><p>多说评论…先暂且不用吧</p>
<h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><p>好像。。。先不用</p>
<h2 id="阅读次数统计-LeanCloud"><a href="#阅读次数统计-LeanCloud" class="headerlink" title="阅读次数统计(LeanCloud)"></a>阅读次数统计(LeanCloud)</h2><p>查看NexT文章<a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="external">阅读统计功能</a></p>
<h2 id="搜索服务"><a href="#搜索服务" class="headerlink" title="搜索服务"></a>搜索服务</h2><p>使用Swiftype之前需要前往Swiftype配置搜索引擎，然后在<code>站点配置文件</code>中，新增<code>swiftype_key</code>字段，值为你的swiftype搜索引擎的key。</p>
<p>NexT支持<a href="https://swiftype.com/" target="_blank" rel="external">Swiftype</a>和<a href="http://tinysou.com/" target="_blank" rel="external">微搜索</a>，以及local search</p>
<p>但是Swiftype现在收费了，而且好贵。。。</p>
<p>微搜索打不开。。。</p>
<h2 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h2><p>添加百度/谷歌/本地 自定义站点内容搜索</p>
<ol>
<li>安装<code>hexo-generator-search</code>，在站点根目录下执行以下命令</li>
</ol>
<blockquote>
<p>cnpm install hexo-generator-search –save</p>
</blockquote>
<ol>
<li>编辑<code>站点配置文件</code>，新增以下内容：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="MathJax服务"><a href="#MathJax服务" class="headerlink" title="MathJax服务"></a>MathJax服务</h1><p>NexT 使用MathJax显示数学公式，此选项默认关闭。</p>
<p>5.00及以前版本：编辑<code>主题配置文件</code>，将<code>mathjax</code>设定为<code>true</code>即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#mathjax support</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure>
<p>5.0.1及以上版本：编辑<code>主题配置文件</code>，将<code>mathjax</code>下的<code>enable</code>设定为<code>true</code>即可。<code>cdn</code>用于指定mathjax的脚本地址，默认是mathjax官方提供的CDN地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Mathjax support</span><br><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$f(a)=\frac&#123;1&#125;&#123;2\pi&#125;$</span><br><span class="line">$E=mc^2$</span><br></pre></td></tr></table></figure>
<p>$E=mc^2$</p>
<p>that’s all</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Latex 技巧]]></title>
      <url>http://yoursite.com/2016/06/17/latex-skill/</url>
      <content type="html"><![CDATA[<p>这里我试着将一些简单的<strong>latex</strong>或<strong>beamer</strong>用法总结，以便以后使用。<a id="more"></a></p>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><ul>
<li>指定文档类型：<code>\documentclass{beamer}</code></li>
<li>指定utf8并加载中文库：<code>\usepackage[utf8]{inputenc}</code>、<code>\usepackage{ctex}</code></li>
<li>指定图片文件夹：<code>\graphicspath{~{image/}~}</code></li>
<li>使用主题： <code>\usetheme{Warsaw}</code></li>
<li>颜色：<code>\usecolortheme{default}</code></li>
<li>模版：<code>\setbeamertemplate{footline}[frame number]</code></li>
<li>去掉导航：<code>\setbeamertemplate{navigation symbols}~{}</code></li>
</ul>
<h2 id="作者和文档信息"><a href="#作者和文档信息" class="headerlink" title="作者和文档信息"></a>作者和文档信息</h2><ul>
<li>标题：<code>\title[short_title]{full_name}</code></li>
<li>作者：<code>\author[short_name]{full_name}</code></li>
<li>日期：<code>\date{}</code></li>
</ul>
<h2 id="添加目录"><a href="#添加目录" class="headerlink" title="添加目录"></a>添加目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\AtBeginSection[]</span><br><span class="line">&#123;</span><br><span class="line">    \begin&#123;frame&#125;</span><br><span class="line">    \frametitle&#123;table of contents&#125;</span><br><span class="line">    \tableofcontents[currentsection]</span><br><span class="line">    \end&#123;frame&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="第一页"><a href="#第一页" class="headerlink" title="第一页"></a>第一页</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;document&#125;</span><br><span class="line">\frame&#123;\titlepage&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Slide"><a href="#Slide" class="headerlink" title="Slide"></a>Slide</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;frame&#125;</span><br><span class="line">\frametitle&#123;contents&#125;</span><br><span class="line">\tableofcontents</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line"></span><br><span class="line">\section&#123;one&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;frame&#125;</span><br><span class="line">\frametitle&#123;name&#125;</span><br><span class="line">\end&#123;frame&#125;</span><br><span class="line">...</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure>
<h2 id="技巧-未完-待续吧"><a href="#技巧-未完-待续吧" class="headerlink" title="技巧(未完..待续吧)"></a>技巧(未完..待续吧)</h2><ul>
<li>添加空格：<code>~</code></li>
<li>空行：<code>\vspace{1em}</code></li>
<li>暂停：<code>\pause</code></li>
</ul>
<p>分为两栏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;columns&#125;</span><br><span class="line">\column&#123;0.5 \textwidth&#125;</span><br><span class="line">...</span><br><span class="line">\column&#123;0.5 \textwidth&#125;</span><br><span class="line">...</span><br><span class="line">\end&#123;columns&#125;</span><br></pre></td></tr></table></figure>
<p>超链接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;frame&#125;[label=hyperlink_name]</span><br><span class="line">...</span><br><span class="line">\hyperlink&#123;go_to_hyperlink_name&#125;~&#123;\beamergotobutton&#125;~&#123;display_name&#125;</span><br><span class="line">end&#123;frame&#125;</span><br><span class="line">...</span><br><span class="line">\begin&#123;frame&#125;[label=go_to_hyperlink_name]</span><br><span class="line">...</span><br><span class="line">\hyperlink&#123;hyperlink_name&#125;~&#123;\beamergotobutton&#125;~&#123;display_name&#125;</span><br><span class="line">...</span><br><span class="line">\end&#123;frame&#125;</span><br></pre></td></tr></table></figure>
<p>以后再补充</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><strong>在latex中经常会出现两个花括号相连的情况，此时一定要在两个花括号之间添加其他的符号，如空格、波浪线等等，不然会编辑出错。而且在source<code>\_post</code>文件夹内只能放md文件</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Install Hexo on win7]]></title>
      <url>http://yoursite.com/2016/06/14/install-hexo-on-win/</url>
      <content type="html"><![CDATA[<p>hexo是一个台湾人基于Node.js开发的静态博客程序，优势是生成静态文件的速度非常快，支持<strong>Markdown</strong>。最初，我选定pelican-python作为静态博客的框架，但win7配置起来确实太折磨人了。这里<a href="http://www.pycoding.com/2016/03/06/hexo.html" target="_blank" rel="external">有人</a>使用hexo部署静态博客，而且是基于win7 64系统的，我也马上尝试了一下，发现真的很简单。现将安装、部署记录下来，以便备用。</p>
<a id="more"></a>
<h1 id="使用hexo搭建github博客（基于win7）"><a href="#使用hexo搭建github博客（基于win7）" class="headerlink" title="使用hexo搭建github博客（基于win7）"></a>使用hexo搭建github博客（基于win7）</h1><hr>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这是基于win7 64位系统，Hexo是在<a href="https://npm.taobao.org/" target="_blank" rel="external">淘宝镜像</a>下载最新的版本。</p>
<p>首先，进入node.js镜像，下载最新版本。然后，按照淘宝镜像的使用说明，使用<code>cnpm</code>命令行工具代替默认的<code>npm</code></p>
<blockquote>
<p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>以上命令在命令行窗口执行即可（win+R）</p>
<h3 id="安装依赖软件"><a href="#安装依赖软件" class="headerlink" title="安装依赖软件"></a>安装依赖软件</h3><ul>
<li>Node.js已说明</li>
<li>Git客户端（百度收索，不论是哪个版本都可以的）</li>
</ul>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>利用<code>cnpm</code>命令安装，在窗口控制台，输入以下命令</p>
<blockquote>
<p>cnpm install -g hexo</p>
</blockquote>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>安装完成后，<code>cd</code>到你将要放置hexo文件的文件夹，执行如下命令</p>
<blockquote>
<p>hexo init</p>
</blockquote>
<p>安装依赖包</p>
<blockquote>
<p>cnpm install</p>
</blockquote>
<p>然后生成和发布命令如下。我们可以等到配置完成了再执行以下命令</p>
<blockquote>
<p>hexo g   #其实是 <code>hexo generate</code>命令<br>hexo s   #其实是 <code>hexo server</code>命令</p>
</blockquote>
<p>然后访问浏览器端口<code>http://localhost:4000</code>，即可看到生成的博客</p>
<h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><p>首先注册github账号。记住github username将是最终生成的博客地址的前缀。</p>
<h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><p>登陆github，进入个人页面，在+号下选择new repository。创建repository时，将Repository Name命名为yourname.github.io的格式。当然yourname是你注册github时使用的username。使用其他名字命名的使用静态网无法访问。</p>
<h3 id="更改本地配置文件"><a href="#更改本地配置文件" class="headerlink" title="更改本地配置文件"></a>更改本地配置文件</h3><p>在hexo文件夹里找到<code>_config.yml</code>文件，并添加以下内容。记住，hexo配置文件中任何一个<code>:</code>后面必须带一个空格。</p>
<blockquote>
<p>deploy:<br>type: git<br>repository: <a href="https://github.com/yidao620c/yourname.github.io.git" target="_blank" rel="external">https://github.com/yidao620c/yourname.github.io.git</a><br>branch: master</p>
</blockquote>
<p>配置ssh。当然，不懂的可以直接删除ssh配置，并重新设置。</p>
<p>在hexo文件夹，右键，点击Git Bash打开git命令窗口，之后的命令都可以在git bash命令窗口中执行(实际上git bash有些类似win命令窗口)</p>
<p>使用如下查看是否存在ssh配置</p>
<blockquote>
<p>ls -al ~/.ssh</p>
</blockquote>
<p>进入/administrator/.ssh删除该文件夹里的内容。</p>
<p>输入指令，新建ssh。记住将邮箱修改为github注册邮箱</p>
<blockquote>
<p>ssh-keygen -t rsa -C “youremail@gmail.com”<br>eval <code>ssh-agent -s</code><br>ssh-add</p>
</blockquote>
<p>拷贝ssh key到剪切板</p>
<blockquote>
<p>clip &lt; ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>然后到github，setting—ssh keys—new—输入title(随意)—ctrl+v粘贴key—Add SSH Key—输入密码确认。OK</p>
<p>测试。</p>
<blockquote>
<p>ssh -T git@github.com</p>
</blockquote>
<p>看到警告后，输入”yes”，可以看到提示连接成功。</p>
<p>安装必要的模块</p>
<blockquote>
<p>cnpm install hexo-deployer-git –save</p>
</blockquote>
<p>SSH配置完成，执行以下命令部署到github</p>
<blockquote>
<p>hexo g<br>hexo d</p>
</blockquote>
<p>提示输入github账号和密码，就能访问博客网站了。注意，第一次输入的是您的username第二次输入的是密码。部署成功以后，在浏览器地址栏输入<a href="http://yourname.github.io/即可访问网页。" target="_blank" rel="external">http://yourname.github.io/即可访问网页。</a></p>
<h2 id="如何发表一篇博客"><a href="#如何发表一篇博客" class="headerlink" title="如何发表一篇博客"></a>如何发表一篇博客</h2><p>在hexo文件夹，控制台执行命令(git bash也可以)</p>
<blockquote>
<p>hexo new “Hello World”</p>
</blockquote>
<p>在<code>hexo\source\_posts</code>文件夹中生成了<code>hello-world.md</code>文件，用编辑器打开，并开始编辑文字吧。hexo遵循<code>markdown</code>语法。里面的初始内容是</p>
<blockquote>
<p>title: hello world    # 可以改成中文的<br>date: 2016-6-1 16:04:09  # 发表日期，一般不改动<br>tags: blog # 文章分类</p>
<p>#这里是正文，用markdown写，可以选择写一段显示在首页的简介，并在后面加上<code>&lt;!--more--&gt;</code>。表示之后的内容被隐藏了，需要点击read more查看<br>写完文章后，使用<code>hexo g</code>生成静态文件，<code>hexo s</code>在本地预览，<code>hexo d</code>同步到github。</p>
</blockquote>
<hr>
<h2 id="hexo主题及配置"><a href="#hexo主题及配置" class="headerlink" title="hexo主题及配置"></a>hexo主题及配置</h2><p>如果不喜欢默认主题，可以到<a href="https://hexo.io/themes/" target="_blank" rel="external">hexo官网</a>找更多主题。此处以<code>maupassant-hexo</code>主题为例</p>
<h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><blockquote>
<p>$ git clone <a href="https://github.com/tufu9441/maupassant-hexo.git" target="_blank" rel="external">https://github.com/tufu9441/maupassant-hexo.git</a> themes/maupassant<br>$ cnpm install hexo-renderer-jade –save<br>$ cnpm install hexo-renderer-sass –save</p>
</blockquote>
<p>一般来说，github的主题会介绍安装步骤</p>
<h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>maupassant</code></p>
<h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><blockquote>
<p>cd themes/maupassant<br>git pull</p>
</blockquote>
<p>更新好以后，退回到hexo文件夹，本地启动效果</p>
<blockquote>
<p>hexo server -g  #生成加预览</p>
</blockquote>
<h3 id="主题的-config-yml配置"><a href="#主题的-config-yml配置" class="headerlink" title="主题的_config.yml配置"></a>主题的_config.yml配置</h3><p>修改相关细节，使它更符合自己的使用习惯。</p>
<hr>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>维护的中心思想是新建一个分支，然后通过hexo维护master分支，通过git命令维护新建的分支。在另一台电脑使用时，先切换到新建的分支，而不使master受到影响。</p>
<p>具体步骤见<a href="http://www.pycoding.com/2016/03/06/hexo.html" target="_blank" rel="external">原文</a></p>
<hr>
<h2 id="自定义分页"><a href="#自定义分页" class="headerlink" title="自定义分页"></a>自定义分页</h2><p>安装三个插件：归档、标签、分类。</p>
<blockquote>
<p>cnpm install hexo-generator-archive –save<br>cnpm install hexo-generator-tag –save<br>cnpm install hexo-generator-category –save</p>
</blockquote>
<p>三个插件的配置：</p>
<blockquote>
<p>archive_generator:<br>per_page: 100<br>yearly: true<br>monthly: true<br>daily: false<br>tag_generator:<br>per_page: 100<br>category_generator:<br>per_page: 100</p>
</blockquote>
<hr>
<h2 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h2><p>Github Page绑定自己域名，在source/目录下面新建<code>CNAME</code>文件，里面写入你自己的域名比如</p>
<blockquote>
<p>www.pycoding.com</p>
</blockquote>
<p>去自己的域名运营商处添加<code>CNAME</code>类型的<code>DNS</code>记录:</p>
<blockquote>
<p>CNAME: @        =&gt;  yidao620c.github.io<br>CNAME: www      =&gt;  yidao620c.github.io</p>
</blockquote>
<p>如果是<code>DNSPod</code>，那么后面多加个点</p>
<blockquote>
<p>@，CNAME，cmback.github.io.<br>www，CNAME，cmback.github.io.</p>
</blockquote>
<h2 id="设定tags"><a href="#设定tags" class="headerlink" title="设定tags"></a>设定tags</h2><ol>
<li>新建一个页面，命名为<code>tags</code>。</li>
</ol>
<blockquote>
<p>hexo new page “tags”</p>
</blockquote>
<ol>
<li>编辑新建的页面，配置如下</li>
</ol>
<blockquote>
<p>title: Tagcloud<br>date: #不要更改<br>type: “tags”<br>comments: false</p>
</blockquote>
<ol>
<li>添加主题链接。编辑<code>主题配置文件</code>，添加<code>tags</code>到<code>menu</code>。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    home: /</span><br><span class="line">    archives: /archives</span><br><span class="line">    tags: /tags</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>cd hexo部署文件夹</li>
<li>hexo new “postname”  # 新建博文</li>
<li><code>cd source/_posts</code>修改编辑</li>
<li>hexo generate  # 生成或修改之后都需要重新运行一次</li>
<li>hexo server    # 发布</li>
<li>或者 hexo server -g  # 先生成后预览</li>
<li>本地浏览器地址<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></li>
<li>hexo deploy # 或者hexo d 上传到github</li>
<li>输入username和code</li>
<li><a href="http://yourname.github.io/访问" target="_blank" rel="external">http://yourname.github.io/访问</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/06/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
